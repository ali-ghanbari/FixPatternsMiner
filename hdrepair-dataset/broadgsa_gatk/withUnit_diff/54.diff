diff --git a/java/src/org/broadinstitute/sting/utils/fasta/FastaSequenceIndex.java b/java/src/org/broadinstitute/sting/utils/fasta/FastaSequenceIndex.java
index 7d44c37..9163179 100755
--- a/java/src/org/broadinstitute/sting/utils/fasta/FastaSequenceIndex.java
+++ b/java/src/org/broadinstitute/sting/utils/fasta/FastaSequenceIndex.java
@@ -50,2 +50,2 @@
-            // Tokenize and validate the index line.
-            String result = scanner.findInLine("([\\w\\s\\.]+)\\t+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)");
+            // Tokenize and validate the index line.                     
+            String result = scanner.findInLine("(.+)\\t+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)");
diff --git a/java/test/org/broadinstitute/sting/utils/fasta/FastaSequenceIndexTest.java b/java/test/org/broadinstitute/sting/utils/fasta/FastaSequenceIndexTest.java
index 397d065..50ddd60 100755
--- a/java/test/org/broadinstitute/sting/utils/fasta/FastaSequenceIndexTest.java
+++ b/java/test/org/broadinstitute/sting/utils/fasta/FastaSequenceIndexTest.java
@@ -21,0 +22 @@
+    // our basic human 18 fai
@@ -23,0 +25,5 @@
+
+    // a custom index that tests the colon, and semi-colon, and other random characters
+    private static String sequenceIndexColonSemiColonTestName = null;
+    private FastaSequenceIndex sequenceIndexColonSemiColonTest = null;
+
@@ -27,0 +34 @@
+        sequenceIndexColonSemiColonTestName = "/humgen/gsa-scr1/GATK_Data/Validation_Data/testing.fai";
@@ -32,0 +40 @@
+        sequenceIndexColonSemiColonTest = new FastaSequenceIndex( new File(sequenceIndexColonSemiColonTestName) );
@@ -191,0 +200,54 @@
+
+    @Test
+    public void testSpecialCharacters() {
+        /* file contents:
+        chrM	16571	6	50	51
+        chr1;boat	247249719	16915	50	51
+        chr2:money	242951149	252211635	50	51
+        chr3::;	199501827	500021813	50	51
+        ;;;;;;  1234            1234            1234    1234
+        file:gi|17981852|ref|NC_001807.4|    16571   2911876801      70      71
+        */
+        Iterator<FastaSequenceIndexEntry> sequenceIndexEntries = sequenceIndexColonSemiColonTest.iterator();
+        FastaSequenceIndexEntry ent = sequenceIndexEntries.next();
+        Assert.assertEquals("Contig chrM is not present","chrM",ent.getContig());
+        Assert.assertEquals("Contig chrM size is not correct",16571,ent.getSize());
+        Assert.assertEquals("Contig chrM location is not correct",6,ent.getLocation());
+        Assert.assertEquals("Contig chrM bases per line is not correct",50,ent.getBasesPerLine());
+        Assert.assertEquals("Contig chrM bytes per line is not correct",51,ent.getBytesPerLine());
+
+        ent = sequenceIndexEntries.next();
+        Assert.assertEquals("Contig chr1;boat is not present","chr1;boat",ent.getContig());
+        Assert.assertEquals("Contig chr1;boat size is not correct",247249719,ent.getSize());
+        Assert.assertEquals("Contig chr1;boat location is not correct",16915,ent.getLocation());
+        Assert.assertEquals("Contig chr1;boat bases per line is not correct",50,ent.getBasesPerLine());
+        Assert.assertEquals("Contig chr1;boat bytes per line is not correct",51,ent.getBytesPerLine());
+
+        ent = sequenceIndexEntries.next();
+        Assert.assertEquals("Contig chr2:money is not present","chr2:money",ent.getContig());
+        Assert.assertEquals("Contig chr2:money size is not correct",242951149,ent.getSize());
+        Assert.assertEquals("Contig chr2:money location is not correct",252211635,ent.getLocation());
+        Assert.assertEquals("Contig chr2:money bases per line is not correct",50,ent.getBasesPerLine());
+        Assert.assertEquals("Contig chr2:money bytes per line is not correct",51,ent.getBytesPerLine());
+
+        ent = sequenceIndexEntries.next();
+        Assert.assertEquals("Contig chr3::; is not present","chr3::;",ent.getContig());
+        Assert.assertEquals("Contig chr3::; size is not correct",199501827,ent.getSize());
+        Assert.assertEquals("Contig chrM location is not correct",500021813,ent.getLocation());
+        Assert.assertEquals("Contig chr3::; bases per line is not correct",50,ent.getBasesPerLine());
+        Assert.assertEquals("Contig chr3::; bytes per line is not correct",51,ent.getBytesPerLine());
+
+        ent = sequenceIndexEntries.next();
+        Assert.assertEquals("Contig ;;;;;;;; is not present",";;;;;;;;",ent.getContig());
+        Assert.assertEquals("Contig ;;;;;;;; size is not correct",123,ent.getSize());
+        Assert.assertEquals("Contig ;;;;;;;; location is not correct",234,ent.getLocation());
+        Assert.assertEquals("Contig ;;;;;;;; bases per line is not correct",456,ent.getBasesPerLine());
+        Assert.assertEquals("Contig ;;;;;;;; bytes per line is not correct",789,ent.getBytesPerLine());
+
+        ent = sequenceIndexEntries.next();
+        Assert.assertEquals("Contig file:gi|17981852|ref|NC_001807.4| is not present","file:gi|17981852|ref|NC_001807.4|",ent.getContig());
+        Assert.assertEquals("Contig file:gi|17981852|ref|NC_001807.4| size is not correct",16571,ent.getSize());
+        Assert.assertEquals("Contig file:gi|17981852|ref|NC_001807.4| location is not correct",2911876801L,ent.getLocation());
+        Assert.assertEquals("Contig file:gi|17981852|ref|NC_001807.4| bases per line is not correct",70,ent.getBasesPerLine());
+        Assert.assertEquals("Contig file:gi|17981852|ref|NC_001807.4| bytes per line is not correct",71,ent.getBytesPerLine());
+    }

