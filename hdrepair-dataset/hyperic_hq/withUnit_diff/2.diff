diff --git a/src/org/hyperic/util/file/DiskList.java b/src/org/hyperic/util/file/DiskList.java
index e13391a..ea31b34 100644
--- a/src/org/hyperic/util/file/DiskList.java
+++ b/src/org/hyperic/util/file/DiskList.java
@@ -575 +575 @@
-                        log.debug(exc);
+                        log.debug("IOException while trying to read record number " + this.curIdx, exc);
diff --git a/unittest/src/org/hyperic/util/file/DiskListTest.java b/unittest/src/org/hyperic/util/file/DiskListTest.java
index 92327e3..4a3ccb8 100644
--- a/unittest/src/org/hyperic/util/file/DiskListTest.java
+++ b/unittest/src/org/hyperic/util/file/DiskListTest.java
@@ -495,0 +496,69 @@
+    public void testConcurrentIteration() throws Exception {
+
+        DiskListDataHolder holder = null;
+
+        try {
+
+            try {
+                holder = new DiskListDataHolder();
+            } catch (Exception e) {
+                e.printStackTrace();
+                fail(e.toString());
+            }
+
+            for (long i = 0; i < MAXRECS; ++i) {
+                String toPut = String.valueOf(i);
+                holder.list.addToList(toPut);                
+            }
+            
+            final int nThreads = 50;
+            IterationRunner[] threads = new IterationRunner[nThreads];
+
+            for (int i = 0; i < nThreads; ++i) {
+                threads[i] = new IterationRunner(holder.list.getListIterator());
+            }
+            
+            for (int i = 0; i < nThreads; ++i) {
+                threads[i].start();
+            }
+            
+            for (int i = 0; i < nThreads; ++i) {
+                threads[i].join();
+                if (threads[i].getFailure() != null) {
+                    threads[i].getFailure().printStackTrace();
+                    fail("Exception during iteration");
+                }
+            }
+
+        } finally {
+            
+            holder.dispose();
+            
+        }
+    }
+    
+    private static class IterationRunner extends Thread {
+        
+        private Iterator it;
+        private Exception failure;
+
+        IterationRunner(Iterator it) {
+            this.it = it;
+            this.failure = null;
+        }
+        
+        public void run() {
+            try {
+                while (it.hasNext()) {
+                    it.next();
+                }
+            } catch (Exception e) {
+                failure = e;
+            }
+        }
+        
+        Exception getFailure() {
+            return failure;
+        }
+    }
+    

