diff --git a/src-core/org/pentaho/di/core/sql/SQLCondition.java b/src-core/org/pentaho/di/core/sql/SQLCondition.java
index f3f026a..6e6498f 100644
--- a/src-core/org/pentaho/di/core/sql/SQLCondition.java
+++ b/src-core/org/pentaho/di/core/sql/SQLCondition.java
@@ -153 +153 @@
-          if (Pattern.matches("^NOT\\s*\\(.*\\)$", cleaned)) {
+          if (Pattern.matches("^NOT\\s*\\(.*\\)$", cleaned.toUpperCase())) {
diff --git a/test/org/pentaho/di/core/sql/SQLConditionTest.java b/test/org/pentaho/di/core/sql/SQLConditionTest.java
index 91bea87..a48738b 100644
--- a/test/org/pentaho/di/core/sql/SQLConditionTest.java
+++ b/test/org/pentaho/di/core/sql/SQLConditionTest.java
@@ -768,0 +769,13 @@
+  
+  public void testCondition28() throws Exception {
+    
+    RowMetaInterface rowMeta = SQLTest.generateServiceRowMeta();
+    String fieldsClause = "\"Service\".\"Category\" as \"c0\", \"Service\".\"Country\" as \"c1\" from \"Service\" as \"Service\"";
+    SQLFields fields = new SQLFields("Service", rowMeta, fieldsClause);
+
+    String conditionClause = "((not (\"Service\".\"Country\" = 'Belgium') or (\"Service\".\"Country\" is null)))";
+    SQLCondition sqlCondition = new SQLCondition("Service", conditionClause, rowMeta, fields);
+    Condition condition = sqlCondition.getCondition();
+    assertNotNull(condition);
+  }
+  
diff --git a/test/org/pentaho/di/core/sql/TransDataServletTest.java b/test/org/pentaho/di/core/sql/TransDataServletTest.java
index 0e951af..8f485ba 100644
--- a/test/org/pentaho/di/core/sql/TransDataServletTest.java
+++ b/test/org/pentaho/di/core/sql/TransDataServletTest.java
@@ -42,0 +43,14 @@
+  public void test02_NoData() throws Exception {
+    startServer();
+    database.connect();
+    
+    ResultSet resultSet = database.openQuery("SELECT * FROM Service WHERE Country = 'NoCountry'");
+    List<Object[]> rows = database.getRows(resultSet, 0, null);
+    RowMetaInterface rowMeta = database.getReturnRowMeta();
+    assertNotNull(rowMeta);
+    assertEquals(0, rows.size());
+    
+    database.disconnect();
+    stopServer();
+  }
+  
@@ -54 +68 @@
-  public void test02_MondrianQuery() throws Exception {
+  public void test03_MondrianQuery() throws Exception {
@@ -63 +77 @@
-    assertEquals(8, rows.size());
+    assertEquals(6, rows.size());

