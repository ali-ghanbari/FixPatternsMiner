diff --git a/modules/web/src/main/java/org/torquebox/web/rack/RackEnvironment.java b/modules/web/src/main/java/org/torquebox/web/rack/RackEnvironment.java
index b130eaa..4f6909e 100644
--- a/modules/web/src/main/java/org/torquebox/web/rack/RackEnvironment.java
+++ b/modules/web/src/main/java/org/torquebox/web/rack/RackEnvironment.java
@@ -54 +54 @@
-        this.errors = new RubyIO( ruby, STDIO.ERR );
+        this.errors = new RubyIO( ruby, ruby.getErr() );
diff --git a/modules/web/src/test/java/org/torquebox/web/rack/RackEnvironmentTest.java b/modules/web/src/test/java/org/torquebox/web/rack/RackEnvironmentTest.java
index a758117..31d9123 100644
--- a/modules/web/src/test/java/org/torquebox/web/rack/RackEnvironmentTest.java
+++ b/modules/web/src/test/java/org/torquebox/web/rack/RackEnvironmentTest.java
@@ -29,0 +30 @@
+import java.lang.reflect.Field;
@@ -30,0 +32 @@
+import java.util.Map;
@@ -189,0 +192,22 @@
+    @SuppressWarnings("unchecked")
+    @Test
+    public void testLeakingRubyFilenoMap() throws Exception {
+        final ServletContext servletContext = mock( ServletContext.class );
+        final HttpServletRequest servletRequest = mock( HttpServletRequest.class );
+        final ServletInputStream inputStream = new MockServletInputStream( new ByteArrayInputStream( "".getBytes() ) );
+
+        when( servletRequest.getInputStream() ).thenReturn( inputStream );
+
+        // This is hacky to do via reflection but we've had a leak in this specific HashMap
+        // and need to ensure it's fixed
+        Field filenoMapField = ruby.getClass().getDeclaredField( "filenoIntExtMap" );
+        filenoMapField.setAccessible( true );
+        Map<Integer, Integer> filenoIntExtMap = (Map<Integer, Integer>) filenoMapField.get( ruby );
+
+        int startingSize = filenoIntExtMap.size();
+        new RackEnvironment( ruby, servletContext, servletRequest );
+        int sizeAfterCreatingEnv = filenoIntExtMap.size();
+
+        assertEquals( startingSize, sizeAfterCreatingEnv );
+    }
+

