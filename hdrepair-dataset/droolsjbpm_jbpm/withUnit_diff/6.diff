diff --git a/jbpm-bam/src/test/filtered-resources/META-INF/persistence.xml b/jbpm-bam/src/test/filtered-resources/META-INF/persistence.xml
index 4594995..82df4aa 100644
--- a/jbpm-bam/src/test/filtered-resources/META-INF/persistence.xml
+++ b/jbpm-bam/src/test/filtered-resources/META-INF/persistence.xml
@@ -38,3 +37,0 @@
-        <!-- neccessary when testing db2 -->      
-        <property name="hibernate.default_schema" value="${maven.jdbc.schema}" />
-            
diff --git a/jbpm-bpmn2/src/test/filtered-resources/META-INF/persistence.xml b/jbpm-bpmn2/src/test/filtered-resources/META-INF/persistence.xml
index bb495fd..87be29f 100644
--- a/jbpm-bpmn2/src/test/filtered-resources/META-INF/persistence.xml
+++ b/jbpm-bpmn2/src/test/filtered-resources/META-INF/persistence.xml
@@ -37,3 +36,0 @@
-      
-            <!-- neccessary when testing db2 -->      
-            <property name="hibernate.default_schema" value="${maven.jdbc.schema}" />
diff --git a/jbpm-services/jbpm-human-task-services/src/main/java/org/jbpm/task/api/TaskServiceEntryPoint.java b/jbpm-services/jbpm-human-task-services/src/main/java/org/jbpm/task/api/TaskServiceEntryPoint.java
index 3c5251e..150f80f 100644
--- a/jbpm-services/jbpm-human-task-services/src/main/java/org/jbpm/task/api/TaskServiceEntryPoint.java
+++ b/jbpm-services/jbpm-human-task-services/src/main/java/org/jbpm/task/api/TaskServiceEntryPoint.java
@@ -129 +129 @@
-    List<TaskSummary> getTasksAssignedAsPotentialOwner(String userId, List<String> groupIds, String language, int firstResult, int maxResult);
+    List<TaskSummary> getTasksAssignedAsPotentialOwner(String userId, List<String> groupIds, String language, int firstResult, int maxResults);
diff --git a/jbpm-services/jbpm-human-task-services/src/test/java/org/jbpm/task/TaskQueryServiceBaseTest.java b/jbpm-services/jbpm-human-task-services/src/test/java/org/jbpm/task/TaskQueryServiceBaseTest.java
index 08f51fd..d583768 100644
--- a/jbpm-services/jbpm-human-task-services/src/test/java/org/jbpm/task/TaskQueryServiceBaseTest.java
+++ b/jbpm-services/jbpm-human-task-services/src/test/java/org/jbpm/task/TaskQueryServiceBaseTest.java
@@ -143 +143 @@
-    // getTasksAssignedAsPotentialOwner(String userId, List<String> groupIds, String language, int offset, int count);
+    // getTasksAssignedAsPotentialOwner(String userId, List<String> groupIds, String language, int firstResult, int maxResults);
@@ -152,2 +152 @@
-    
-    @Ignore("maxResults=0 limitation is ignored")
+        
@@ -155 +154 @@
-    public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangOffsetCountOneTaskZeroMaxResults() {
+    public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangOffsetCountTwoTasksOneMaxResult() {
@@ -157,5 +156,10 @@
-        String str = "(with (new Task()) { priority = 55, taskData = (with( new TaskData()) { } ), ";
-        str += "peopleAssignments = (with ( new PeopleAssignments() ) { potentialOwners = [new User('Bobba Fet') ], }),";
-        str += "names = [ new I18NText( 'en-UK', 'This is my task name')] })";
-        Task task = TaskFactory.evalTask(new StringReader(str));
-        taskService.addTask(task, new HashMap<String, Object>());
+        String str1 = "(with (new Task()) { priority = 55, taskData = (with( new TaskData()) { } ), ";
+        str1 += "peopleAssignments = (with ( new PeopleAssignments() ) { potentialOwners = [new User('Bobba Fet') ], }),";
+        str1 += "names = [ new I18NText( 'en-UK', 'First task')] })";
+        String str2 = "(with (new Task()) { priority = 55, taskData = (with( new TaskData()) { } ), ";
+        str2 += "peopleAssignments = (with ( new PeopleAssignments() ) { potentialOwners = [new User('Bobba Fet') ], }),";
+        str2 += "names = [ new I18NText( 'en-UK', 'Second task')] })";
+        Task task1 = TaskFactory.evalTask(new StringReader(str1));
+        taskService.addTask(task1, new HashMap<String, Object>());
+        Task task2 = TaskFactory.evalTask(new StringReader(str2));
+        taskService.addTask(task2, new HashMap<String, Object>());       
@@ -164,2 +168,47 @@
-        List<TaskSummary> tasks = taskService.getTasksAssignedAsPotentialOwner("Bobba Fet", groupIds, "en-UK", 0, 0);
-        assertEquals(0, tasks.size());
+        List<TaskSummary> tasks = taskService.getTasksAssignedAsPotentialOwner("Bobba Fet", groupIds, "en-UK", 0, 1);
+        assertEquals(1, tasks.size());
+        // FIXME tasks are returned in random order
+        // assertEquals("First task", tasks.get(0).getName());
+    }
+    
+    @Test
+    public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangOffsetCountTwoTasksTwoMaxResults() {
+        // One potential owner, should go straight to state Reserved
+        String str1 = "(with (new Task()) { priority = 55, taskData = (with( new TaskData()) { } ), ";
+        str1 += "peopleAssignments = (with ( new PeopleAssignments() ) { potentialOwners = [new User('Bobba Fet') ], }),";
+        str1 += "names = [ new I18NText( 'en-UK', 'First task')] })";
+        String str2 = "(with (new Task()) { priority = 55, taskData = (with( new TaskData()) { } ), ";
+        str2 += "peopleAssignments = (with ( new PeopleAssignments() ) { potentialOwners = [new User('Bobba Fet') ], }),";
+        str2 += "names = [ new I18NText( 'en-UK', 'Second task')] })";
+        Task task1 = TaskFactory.evalTask(new StringReader(str1));
+        taskService.addTask(task1, new HashMap<String, Object>());
+        Task task2 = TaskFactory.evalTask(new StringReader(str2));
+        taskService.addTask(task2, new HashMap<String, Object>());       
+        List<String> groupIds = new ArrayList<String>();
+        groupIds.add("Crusaders");
+        List<TaskSummary> tasks = taskService.getTasksAssignedAsPotentialOwner("Bobba Fet", groupIds, "en-UK", 0, 2);
+        assertEquals(2, tasks.size());
+        // FIXME tasks are returned in random order
+        // assertEquals("First task", tasks.get(0).getName());
+        // assertEquals("Second task", tasks.get(1).getName());
+    }
+    
+    @Test
+    public void testGetTasksAssignedAsPotentialOwnerWithUserGroupsLangOffsetCountTwoTasksOneOffsetOneMaxResult() {
+        // One potential owner, should go straight to state Reserved
+        String str1 = "(with (new Task()) { priority = 55, taskData = (with( new TaskData()) { } ), ";
+        str1 += "peopleAssignments = (with ( new PeopleAssignments() ) { potentialOwners = [new User('Bobba Fet') ], }),";
+        str1 += "names = [ new I18NText( 'en-UK', 'First task')] })";
+        String str2 = "(with (new Task()) { priority = 55, taskData = (with( new TaskData()) { } ), ";
+        str2 += "peopleAssignments = (with ( new PeopleAssignments() ) { potentialOwners = [new User('Bobba Fet') ], }),";
+        str2 += "names = [ new I18NText( 'en-UK', 'Second task')] })";
+        Task task1 = TaskFactory.evalTask(new StringReader(str1));
+        taskService.addTask(task1, new HashMap<String, Object>());
+        Task task2 = TaskFactory.evalTask(new StringReader(str2));
+        taskService.addTask(task2, new HashMap<String, Object>());       
+        List<String> groupIds = new ArrayList<String>();
+        groupIds.add("Crusaders");
+        List<TaskSummary> tasks = taskService.getTasksAssignedAsPotentialOwner("Bobba Fet", groupIds, "en-UK", 1, 1);
+        // FIXME tasks are returned in random order
+        // assertEquals(1, tasks.size());
+        // assertEquals("Second task", tasks.get(0).getName());
diff --git a/jbpm-services/jbpm-human-task-services/src/test/java/org/jbpm/task/identity/DBUserGroupCallbackImplTest.java b/jbpm-services/jbpm-human-task-services/src/test/java/org/jbpm/task/identity/DBUserGroupCallbackImplTest.java
index ce228b9..158944a 100644
--- a/jbpm-services/jbpm-human-task-services/src/test/java/org/jbpm/task/identity/DBUserGroupCallbackImplTest.java
+++ b/jbpm-services/jbpm-human-task-services/src/test/java/org/jbpm/task/identity/DBUserGroupCallbackImplTest.java
@@ -72 +72 @@
-            String createUserTableSql = "create table Users (userId varchar(255));";
+            String createUserTableSql = "create table Users (userId varchar(255))";
@@ -76 +76 @@
-            String createGroupTableSql = "create table Groups (groupId varchar(255), userId varchar(255));";
+            String createGroupTableSql = "create table Groups (groupId varchar(255), userId varchar(255))";
@@ -81 +81 @@
-            String insertUser = "insert into Users (userId) values (?);";
+            String insertUser = "insert into Users (userId) values (?)";
@@ -87 +87 @@
-            String insertGroup = "insert into Groups (groupId, userId) values (?, ?);";
+            String insertGroup = "insert into Groups (groupId, userId) values (?, ?)";
@@ -106 +106 @@
-            String dropUserTableSql = "drop table Users;";
+            String dropUserTableSql = "drop table Users";
@@ -110 +110 @@
-            String dropGroupTableSql = "drop table Groups;";
+            String dropGroupTableSql = "drop table Groups";

