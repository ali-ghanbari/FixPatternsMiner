diff --git a/src/edu/washington/escience/myriad/api/MasterApiServer.java b/src/edu/washington/escience/myriad/api/MasterApiServer.java
index feaeafe..a060aa7 100644
--- a/src/edu/washington/escience/myriad/api/MasterApiServer.java
+++ b/src/edu/washington/escience/myriad/api/MasterApiServer.java
@@ -30 +30 @@
-  private static final int PORT = 8753;
+  public static final int PORT = 8753;
diff --git a/test/edu/washington/escience/myriad/daemon/MasterDaemonTest.java b/test/edu/washington/escience/myriad/daemon/MasterDaemonTest.java
index 287f02f..3c76ffa 100644
--- a/test/edu/washington/escience/myriad/daemon/MasterDaemonTest.java
+++ b/test/edu/washington/escience/myriad/daemon/MasterDaemonTest.java
@@ -2,0 +3 @@
+import java.io.File;
@@ -4,0 +6 @@
+import org.apache.mina.util.AvailablePortFinder;
@@ -7,0 +10,5 @@
+import com.google.common.io.Files;
+
+import edu.washington.escience.myriad.api.MasterApiServer;
+import edu.washington.escience.myriad.coordinator.catalog.CatalogMaker;
+import edu.washington.escience.myriad.util.FSUtils;
@@ -16,2 +23,13 @@
-    /* Remember which threads were there when the test starts. */
-    Set<Thread> startThreads = ThreadUtils.getCurrentThreads();
+    File tmpFolder = Files.createTempDir();
+    try {
+      final int baseMasterPort = 8001;
+      final int baseWorkerPort = 9001;
+      final int n = 2;
+      final String[] args = new String[n + 3];
+      args[0] = tmpFolder.getAbsolutePath();
+      args[1] = Integer.toString(n);
+      args[2] = "localhost:" + baseMasterPort;
+      for (int i = 0; i < n; ++i) {
+        args[i + 3] = "localhost:" + (baseWorkerPort + i);
+      }
+      CatalogMaker.makeNNodesParallelCatalog(args);
@@ -19,3 +37,2 @@
-    /* Start the master. */
-    MasterDaemon md = new MasterDaemon(new String[] { "twoNodeLocalParallel" });
-    md.start();
+      /* Remember which threads were there when the test starts. */
+      Set<Thread> startThreads = ThreadUtils.getCurrentThreads();
@@ -23,2 +40,3 @@
-    /* Stop the master. */
-    md.stop();
+      /* Start the master. */
+      MasterDaemon md = new MasterDaemon(new String[] { tmpFolder.getAbsolutePath() });
+      md.start();
@@ -26,5 +44,14 @@
-    /* Wait for all threads that weren't there when we started to finish. */
-    Set<Thread> doneThreads = ThreadUtils.getCurrentThreads();
-    for (Thread t : doneThreads) {
-      if (!startThreads.contains(t)) {
-        t.join();
+      /* Stop the master. */
+      md.stop();
+
+      /* Wait for all threads that weren't there when we started to finish. */
+      Set<Thread> doneThreads = ThreadUtils.getCurrentThreads();
+      for (Thread t : doneThreads) {
+        if (!startThreads.contains(t)) {
+          t.join();
+        }
+      }
+    } finally {
+      FSUtils.deleteFileFolder(tmpFolder);
+      while (!AvailablePortFinder.available(8001) || !AvailablePortFinder.available(MasterApiServer.PORT)) {
+        Thread.sleep(100);
@@ -37,2 +63,0 @@
-    /* Remember which threads were there when the test starts. */
-    Set<Thread> startThreads = ThreadUtils.getCurrentThreads();
@@ -40,3 +65,13 @@
-    /* Start the master. */
-    MasterDaemon md = new MasterDaemon(new String[] { "twoNodeLocalParallel" });
-    md.start();
+    File tmpFolder = Files.createTempDir();
+    try {
+      final int baseMasterPort = 8001;
+      final int baseWorkerPort = 9001;
+      final int n = 2;
+      final String[] args = new String[n + 3];
+      args[0] = tmpFolder.getAbsolutePath();
+      args[1] = Integer.toString(n);
+      args[2] = "localhost:" + baseMasterPort;
+      for (int i = 0; i < n; ++i) {
+        args[i + 3] = "localhost:" + (baseWorkerPort + i);
+      }
+      CatalogMaker.makeNNodesParallelCatalog(args);
@@ -44,4 +79,2 @@
-    /* Stop the master. */
-    ClientResource shutdownRest = new ClientResource("http://localhost:8753/server/shutdown");
-    shutdownRest.get();
-    shutdownRest.release();
+      /* Remember which threads were there when the test starts. */
+      Set<Thread> startThreads = ThreadUtils.getCurrentThreads();
@@ -49,5 +82,20 @@
-    /* Wait for all threads that weren't there when we started to finish. */
-    Set<Thread> doneThreads = ThreadUtils.getCurrentThreads();
-    for (Thread t : doneThreads) {
-      if (!startThreads.contains(t)) {
-        t.join();
+      /* Start the master. */
+      MasterDaemon md = new MasterDaemon(new String[] { tmpFolder.getAbsolutePath() });
+      md.start();
+
+      /* Stop the master. */
+      ClientResource shutdownRest = new ClientResource("http://localhost:" + MasterApiServer.PORT + "/server/shutdown");
+      shutdownRest.get();
+      shutdownRest.release();
+
+      /* Wait for all threads that weren't there when we started to finish. */
+      Set<Thread> doneThreads = ThreadUtils.getCurrentThreads();
+      for (Thread t : doneThreads) {
+        if (!startThreads.contains(t)) {
+          t.join();
+        }
+      }
+    } finally {
+      FSUtils.deleteFileFolder(tmpFolder);
+      while (!AvailablePortFinder.available(8001) || !AvailablePortFinder.available(MasterApiServer.PORT)) {
+        Thread.sleep(100);
@@ -56,0 +105 @@
+

