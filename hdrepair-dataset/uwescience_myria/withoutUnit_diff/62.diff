diff --git a/myriadeploy/performance_profile.py b/myriadeploy/performance_profile.py
index 945cda3..79966ba 100755
--- a/myriadeploy/performance_profile.py
+++ b/myriadeploy/performance_profile.py
@@ -4 +3,0 @@
-import get_logs
@@ -7 +5,0 @@
-import myriadeploy
@@ -9,0 +8 @@
+import datetime
@@ -18 +17,11 @@
-def getQueryTaskTree(query_file):
+def serialize_datetime(datetime):
+    result = {
+        'year': datetime.year,
+        'month': datetime.month,
+        'day': datetime.day,
+        'hour': datetime.hour,
+        'minute': datetime.minute,
+        'second': datetime.second,
+        'millisecond': datetime.microsecond/1000,
+    }
+    return result
@@ -20 +29 @@
-def generateProfile(config,query_id):
+def generateProfile(path,query_id):
@@ -22,8 +31,2 @@
-    """Copies the master and worker catalogs to the remote hosts."""
-    description = config['description']
-    default_path = config['path']
-    master = config['master']
-    workers = config['workers']
-    username = config['username']
-
-    regex_operator = re.compile(r'^DEBUG \d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d* .Nonblocking query executor#\d*. (Operator) - .query_id#\d*.')
+    # filter regex   
+    regex_operator = re.compile(r'INFO  \d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d* .Nonblocking query executor#\d*. Operator - .query_id#\d*.')
@@ -34,62 +37,4 @@
-    for (i, worker) in enumerate(workers):
-        
-        # Workers are numbered from 1, not 0
-        worker_id = i + 1
-        lines = [ line.strip() for line in open("./%s/worker_%s_stdout"%(description,worker_id))]
-        lines = [ line for line in lines if regex_operator.match(line) ]
-        
-        # parse infomation from each log message
-        tuples = [ re.findall(r'DEBUG (\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2}),(\d*) .Nonblocking query executor#\d*. Operator - .query_id#(\d*).edu\.washington\.escience\.myria\.\w*\.(\w*)@(\w*):([\w|\W]*)', line) for line in lines]
-        tuples = [i[0] for i in tuples]
-        tuples = [ (i[8], 
-                    {
-                        'year':int(i[0]),
-                        'month':int(i[1]),
-                        'day':int(i[2]),
-                        'hours':int(i[3]),
-                        'minutes':int(i[4]),
-                        'seconds':int(i[5]),
-                        'milliseconds':int(i[6]),
-                        'query_id':i[7],
-                        'operator':i[8], 
-                        'hashcode':i[9], 
-                        'message':i[10]
-                    }
-                    )
-                   for i in tuples ]
-        
-
-        # filter out unrelevant queries
-        tuples = [ i for i in tuples if int(i[1]['query_id']) == query_id ]
-
-        # group by operators
-        operators = {}
-        for k,v in tuples:
-            v_hash = v['hashcode']
-            del v['hashcode']
-            if operators.has_key(k):
-                if operators[k].has_key(v_hash):
-                    operators[k][v_hash].append(v)
-                else:
-                    operators[k][v_hash] = [v]
-            else:
-                operators[k]={v_hash:[v]};
-        
-        # get tasks in each worker
-        for k,v in operators.items():
-            for hashcode,entries in v.items():
-                task = {}
-                if len(entries) !=2:
-                    print >> sys.stderr, " Operator %s (%s) appears %d times! "%(k,hashcode,len(entry))
-                    return
-                for e in entries:
-                    if e['message']=='begin to process':
-                        task['begin_date'] = {'year': e['year'], 'month':e['month'], 'day':e['day'], 'hours':e['hours'], 'minutes':e['minutes'], 'seconds':e['seconds'], 'milliseconds':e['milliseconds']}    
-                    else:    
-                        task['end_date'] = {'year': e['year'], 'month':e['month'], 'day':e['day'], 'hours':e['hours'], 'minutes':e['minutes'], 'seconds':e['seconds'], 'milliseconds':e['milliseconds']}  
-                #taskName = "worker_%d.%s"%(worker_id,k)
-                taskName = k
-                task['taskName'] = taskName
-                tasks.append(task)
-                if taskName not in taskNames:
-                    taskNames.append(taskName)
+            
+    # Workers are numbered from 1, not 0
+    lines = [ line.strip() for line in open(path)]
+    lines = [ line for line in lines if regex_operator.match(line) ]
@@ -96,0 +42,75 @@
+    # parse infomation from each log message
+    tuples = [ re.findall(r'INFO  (\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2}),(\d*) .Nonblocking query executor#\d*. Operator - .query_id#(\d*)..([\w(),]*)@(\w*)..edu\.washington\.escience\.myria\.\w*\.(\w*)@(\w*).:([\w|\W]*)', line) 
+                for line in lines]
+    tuples = [i[0] for i in tuples]
+    tuples = [(i[8],
+                {
+                    'time': datetime.datetime(int(i[0]),int(i[1]),int(i[2]),int(i[3]), int(i[4]), int(i[5]), int(i[6])*1000),
+                    'query_id':i[7],
+                    'operator_name':i[8],
+                    'fragment_id': i[9], 
+                    'operator_type': i[10],
+                    'hashcode':i[11], 
+                    'message':i[12]
+                })
+            for i in tuples ]
+    
+    # filter out unrelevant queries
+    tuples = [ i for i in tuples if int(i[1]['query_id']) == query_id ]
+
+    # retrieve execution time information
+    for tp in tuples:
+        match = re.search(r' executionTime (\d+) ms', tp[1]['message'])
+        if match:
+            tp[1]['executionTime'] = match.group(1)
+            tp[1]['message'] = 'executionTime'
+    
+
+    # group by operators
+    operators = {}
+    for k,v in tuples:
+        v_hash = v['hashcode']
+        del v['hashcode']
+        if operators.has_key(k):
+            if operators[k].has_key(v_hash):
+                operators[k][v_hash].append(v)
+            else:
+                operators[k][v_hash] = [v]
+        else:
+            operators[k]={v_hash:[v]};
+
+    # get tasks in each worker
+    for k,v in operators.items():
+        for hashcode,entries in v.items():
+            task = {}
+            if len(entries) !=3:
+                print >> sys.stderr, " Operator %s (%s) appears %d times! "%(k,hashcode,len(entries))
+                return
+            for e in entries:
+                if e['message']=='begin to process':
+                    #task['begin_date'] = serialize_datetime(e['time'])
+                    task['begin_date'] = e['time']
+                elif e['message']=='End of Processing (EOS)':    
+                    #task['end_date'] = serialize_datetime(e['time'])
+                    task['end_date'] = e['time']
+                elif e['message']=='executionTime':
+                    task['executionTime'] = int(e['executionTime'])
+
+            taskName = k
+            task['taskName'] = taskName
+            tasks.append(task)
+            if taskName not in taskNames:
+                taskNames.append(taskName)
+
+    #generate the fake execution start time
+    for task in tasks:
+        task['execution_start_time'] = task['end_date'] - datetime.timedelta(milliseconds=task['executionTime'])
+        if task['execution_start_time']<task['begin_date'] :
+            task['execution_start_time'] = task['begin_date']
+            task['executionTime'] = int(round((task['end_date']-task['begin_date']).total_seconds()*1000))
+
+        # serialize the date    
+        task['execution_start_time'] = serialize_datetime(task['execution_start_time'])
+        task['begin_date'] = serialize_datetime(task['begin_date'])
+        task['end_date'] = serialize_datetime(task['end_date'])
+
@@ -107 +127 @@
-    if len(argv) != 3:
+    if len(argv) != 2:
@@ -113,3 +133,3 @@
-    config = myriadeploy.read_config_file(argv[1])
-    get_logs.getlog(config)
-    generateProfile(config,2)
+    #config = myriadeploy.read_config_file(argv[1])
+    #get_logs.getlog(config)
+    generateProfile(argv[1],28)
diff --git a/src/edu/washington/escience/myria/operator/Operator.java b/src/edu/washington/escience/myria/operator/Operator.java
index f2460e8..bf9d7f7 100644
--- a/src/edu/washington/escience/myria/operator/Operator.java
+++ b/src/edu/washington/escience/myria/operator/Operator.java
@@ -404 +404 @@
-    if (startProcessing && isProfilingMode()) {
+    if (startProcessing && isProfilingMode() && !eos()) {

