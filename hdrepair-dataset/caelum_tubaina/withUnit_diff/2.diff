diff --git a/src/main/java/br/com/caelum/tubaina/util/HtmlSanitizer.java b/src/main/java/br/com/caelum/tubaina/util/HtmlSanitizer.java
index fd6a8eb..bea1c20 100644
--- a/src/main/java/br/com/caelum/tubaina/util/HtmlSanitizer.java
+++ b/src/main/java/br/com/caelum/tubaina/util/HtmlSanitizer.java
@@ -100,0 +101 @@
+					sane.append(current);
diff --git a/src/test/java/br/com/caelum/tubaina/parser/html/kindle/KindleGeneratorTest.java b/src/test/java/br/com/caelum/tubaina/parser/html/kindle/KindleGeneratorTest.java
index ff170f1..e65540f 100644
--- a/src/test/java/br/com/caelum/tubaina/parser/html/kindle/KindleGeneratorTest.java
+++ b/src/test/java/br/com/caelum/tubaina/parser/html/kindle/KindleGeneratorTest.java
@@ -2,0 +3 @@
+import static org.junit.Assert.assertEquals;
@@ -11,0 +13 @@
+import java.util.Scanner;
@@ -85,0 +88,31 @@
+    private Book createsSimpleEscapedColonBook(String title) {
+    	BookBuilder builder = builder(title);
+    	
+    	builder.addReaderFromString(
+    			"[chapter     O que é java?   ]\n" + "texto da seção\n Perceba que renomeamos a classe %%mysql-server%% para "
+    					+ "%%mysql<::server%%. Esta é a nomenclatura padrão que o Puppet entende para importar classes e tipos "
+    					+ "dentro do mesmo módulo. Da mesma forma, devemos também renomear o tipo definido %%mysql-db%% para"
+    					+ " %%mysql<::db%% dentro :");
+    	
+    	builder.addReaderFromString("[chapter Introdução]\n"
+    			+ "Algum texto de introdução\n");
+    	
+    	return builder.build();
+    }
+
+    @Test
+    public void shouldCreateTheBookFileWithEscapedSemicolon() throws Exception {
+    	Book book = createsSimpleEscapedColonBook("livro");
+    	new KindleModule().inject(book);
+    	
+    	generator.generate(book, tempDir);
+    	
+    	File theBookItself = new File(tempDir, "index.html");
+    	String fileContent = new Scanner(theBookItself).useDelimiter("$$").next();
+    	
+    	File expectedHtml = new File("src/test/resources/kindle/htmlWithEscapedRubyHackCodeExpected.html");
+    	String expectedContent = new Scanner(expectedHtml).useDelimiter("$$").next();
+    	
+    	assertEquals(expectedContent, fileContent);
+    }
+    
diff --git a/src/test/resources/kindle/htmlWithEscapedRubyHackCodeExpected.html b/src/test/resources/kindle/htmlWithEscapedRubyHackCodeExpected.html
new file mode 100644
index 0000000..fec86dc
--- /dev/null
+++ b/src/test/resources/kindle/htmlWithEscapedRubyHackCodeExpected.html
@@ -0,0 +1,34 @@
+<!DOCTYPE html>
+<html>
+<head>
+	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
+	<link rel="stylesheet" href="includes/css/layout.css" type="text/css" media="screen, print">
+	
+</head>
+<body>
+	
+	<div class='referenceable'>
+		<h2 class='referenceableTitle'>1 - O que &eacute; java?</h2>
+		<a id="o-que-e-java" class='label'></a>
+
+		<p>texto da se&ccedil;&atilde;o
+ Perceba que renomeamos a classe <code>mysql-server</code> para <code>mysql&#58;&#58;server</code>. Esta &eacute; a nomenclatura padr&atilde;o que o Puppet entende para importar classes e tipos dentro do mesmo m&oacute;dulo. Da mesma forma, devemos tamb&eacute;m renomear o tipo definido <code>mysql-db</code> para <code>mysql&#58;&#58;db</code> dentro :</p>
+    	
+		
+	   	
+   	</div>
+				
+						
+	<div class='referenceable'>
+		<h2 class='referenceableTitle'>2 - Introdu&ccedil;&atilde;o</h2>
+		<a id="introducao" class='label'></a>
+
+		<p>Algum texto de introdu&ccedil;&atilde;o</p>
+    	
+		
+	   	
+   	</div>
+				
+						
+
+

