diff --git a/archiva-base/archiva-proxy/src/main/java/org/apache/maven/archiva/proxy/DefaultRepositoryProxyConnectors.java b/archiva-base/archiva-proxy/src/main/java/org/apache/maven/archiva/proxy/DefaultRepositoryProxyConnectors.java
index 5f78d78..208f822 100644
--- a/archiva-base/archiva-proxy/src/main/java/org/apache/maven/archiva/proxy/DefaultRepositoryProxyConnectors.java
+++ b/archiva-base/archiva-proxy/src/main/java/org/apache/maven/archiva/proxy/DefaultRepositoryProxyConnectors.java
@@ -553 +553 @@
-            // Do not cache url here.
+            urlFailureCache.cacheFailure( url );
diff --git a/archiva-base/archiva-proxy/src/test/java/org/apache/maven/archiva/proxy/CacheFailuresTransferTest.java b/archiva-base/archiva-proxy/src/test/java/org/apache/maven/archiva/proxy/CacheFailuresTransferTest.java
index 8425bfb..73452ad 100644
--- a/archiva-base/archiva-proxy/src/test/java/org/apache/maven/archiva/proxy/CacheFailuresTransferTest.java
+++ b/archiva-base/archiva-proxy/src/test/java/org/apache/maven/archiva/proxy/CacheFailuresTransferTest.java
@@ -59 +59 @@
-        saveRemoteRepositoryConfig( "badproxied2", "Bad Proxied 2", "test://bad.machine.com/repo/", "default" );
+        saveRemoteRepositoryConfig( "badproxied2", "Bad Proxied 2", "test://bad.machine.com/anotherrepo/", "default" );
@@ -74,2 +74,6 @@
-        // TODO: test failure is cached!
-
+        wagonMockControl.verify();
+		
+		// Second attempt to download same artifact use cache
+        wagonMockControl.reset();
+        wagonMockControl.replay();
+		downloadedFile = proxyHandler.fetchFromProxies( managedDefaultRepository, artifact );
@@ -95 +99 @@
-        saveRemoteRepositoryConfig( "badproxied2", "Bad Proxied 2", "test://bad.machine.com/repo/", "default" );
+        saveRemoteRepositoryConfig( "badproxied2", "Bad Proxied 2", "test://bad.machine.com/anotherrepo/", "default" );
@@ -110,2 +113,0 @@
-        // TODO: test failure is not cached!
-
@@ -113,0 +116,10 @@
+		// Second attempt to download same artifact DOES NOT use cache
+        wagonMockControl.reset();
+        wagonMock.get( path, new File( expectedFile.getParentFile(), expectedFile.getName() + ".tmp" ) );
+        wagonMockControl.setThrowable( new ResourceDoesNotExistException( "resource does not exist." ), 2 );
+        wagonMockControl.replay();
+		
+		downloadedFile = proxyHandler.fetchFromProxies( managedDefaultRepository, artifact );
+		
+        wagonMockControl.verify();
+		

