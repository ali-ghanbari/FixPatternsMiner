diff --git a/subprojects/plugins/src/integTest/groovy/org/gradle/java/compile/incremental/CrossTaskIncrementalJavaCompilationIntegrationTest.groovy b/subprojects/plugins/src/integTest/groovy/org/gradle/java/compile/incremental/CrossTaskIncrementalJavaCompilationIntegrationTest.groovy
index c2c7ffd..7d13005 100644
--- a/subprojects/plugins/src/integTest/groovy/org/gradle/java/compile/incremental/CrossTaskIncrementalJavaCompilationIntegrationTest.groovy
+++ b/subprojects/plugins/src/integTest/groovy/org/gradle/java/compile/incremental/CrossTaskIncrementalJavaCompilationIntegrationTest.groovy
@@ -344,0 +345,18 @@
+
+    def "changed jar with duplicate class appearing earlier on classpath must trigger compilation"() {
+        java impl: ["class A extends org.junit.Assert {}"]
+        file("impl/build.gradle") << """
+            configurations.compile.dependencies.clear()
+            dependencies { compile 'junit:junit:4.11' }
+        """
+
+        impl.snapshot { run("impl:compileJava") }
+
+        when:
+        //add jar with duplicate class that will be earlier on the classpath (project dependencies are earlier on classpath)
+        file("api/src/main/java/org/junit/Assert.java") << "public class Assert {}"
+        file("impl/build.gradle") << "dependencies { compile project(':api') }"
+        run("impl:compileJava")
+
+        then: impl.recompiledClasses("A")
+    }
diff --git a/subprojects/plugins/src/main/groovy/org/gradle/api/internal/tasks/compile/incremental/jar/JarChangeDependentsFinder.java b/subprojects/plugins/src/main/groovy/org/gradle/api/internal/tasks/compile/incremental/jar/JarChangeDependentsFinder.java
index dfe765a..ad85e88 100644
--- a/subprojects/plugins/src/main/groovy/org/gradle/api/internal/tasks/compile/incremental/jar/JarChangeDependentsFinder.java
+++ b/subprojects/plugins/src/main/groovy/org/gradle/api/internal/tasks/compile/incremental/jar/JarChangeDependentsFinder.java
@@ -37,3 +37,6 @@
-            //TODO SF consider the case where newly added jar contains a duplicate class and the new jar ends up higher on the classpath
-            //we should probably fix the tests and rebuild everything in case a jar is added.
-            return new DefaultDependentsSet();
+            //TODO - potentially
+            //the new jar may contain a duplicate class and appear earlier on the classpath, for safety, we'll rebuild everything
+            //this can be improved - we can snapshot the jars on classpath beforehand and keep track of duplicate classes or model the classpath snapshot
+            //this way we will know if the new jar with duplicate class is earlier or later on the classpath.
+            //If later, we would not recompile, if earlier, we would recompile only classes that depend on duplicate classes
+            return new DefaultDependentsSet(true);

