diff --git a/qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession_0_10.java b/qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession_0_10.java
index 1eaccf5..6fa22b7 100644
--- a/qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession_0_10.java
+++ b/qpid/java/client/src/main/java/org/apache/qpid/client/AMQSession_0_10.java
@@ -944,0 +945 @@
+        flushAcknowledgments();
diff --git a/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/QueueDepthWithSelectorTest.java b/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/QueueDepthWithSelectorTest.java
index 6211dd8..74f50e8 100644
--- a/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/QueueDepthWithSelectorTest.java
+++ b/qpid/java/systests/src/main/java/org/apache/qpid/server/queue/QueueDepthWithSelectorTest.java
@@ -24,12 +23,0 @@
-import junit.framework.TestCase;
-import org.apache.log4j.Level;
-import org.apache.log4j.Logger;
-
-import org.apache.qpid.AMQException;
-import org.apache.qpid.client.AMQDestination;
-import org.apache.qpid.client.AMQSession;
-import org.apache.qpid.client.transport.TransportConnection;
-import org.apache.qpid.jndi.PropertiesFileInitialContextFactory;
-import org.apache.qpid.server.registry.ApplicationRegistry;
-import org.apache.qpid.server.util.InternalBrokerBaseCase;
-
@@ -37 +24,0 @@
-import javax.jms.ConnectionFactory;
@@ -44,4 +31,5 @@
-import javax.naming.Context;
-import javax.naming.NamingException;
-import javax.naming.spi.InitialContextFactory;
-import java.util.Hashtable;
+
+import org.apache.qpid.AMQException;
+import org.apache.qpid.client.AMQDestination;
+import org.apache.qpid.client.AMQSession;
+import org.apache.qpid.test.utils.QpidBrokerTestCase;
@@ -55,2 +42,0 @@
- *
- * Why is this hardcoded to InVM testing, should be converted to QTC.
@@ -58 +44 @@
-public class QueueDepthWithSelectorTest extends InternalBrokerBaseCase
+public class QueueDepthWithSelectorTest extends QpidBrokerTestCase
@@ -60,3 +45,0 @@
-    protected static final Logger _logger = Logger.getLogger(QueueDepthWithSelectorTest.class);
-
-    protected final String BROKER = "vm://:"+ApplicationRegistry.DEFAULT_INSTANCE;
@@ -65,2 +47,0 @@
-
-    protected Context _context;
@@ -85,20 +65,0 @@
-        TransportConnection.createVMBroker(ApplicationRegistry.DEFAULT_INSTANCE);
-
-        System.err.println("amqj.logging.level:" + System.getProperty("amqj.logging.level"));
-        System.err.println("_logger.level:" + _logger.getLevel());
-        System.err.println("_logger.isE-Error:" + _logger.isEnabledFor(Level.ERROR));
-        System.err.println("_logger.isE-Warn:" + _logger.isEnabledFor(Level.WARN));
-        System.err.println("_logger.isInfo:" + _logger.isInfoEnabled() + ":" + _logger.isEnabledFor(Level.INFO));
-        System.err.println("_logger.isDebug:" + _logger.isDebugEnabled() + ":" + _logger.isEnabledFor(Level.DEBUG));
-        System.err.println("_logger.isTrace:" + _logger.isTraceEnabled() + ":" + _logger.isEnabledFor(Level.TRACE));
-
-        System.err.println(Logger.getRootLogger().getLoggerRepository());
-
-        InitialContextFactory factory = new PropertiesFileInitialContextFactory();
-
-        Hashtable<String, String> env = new Hashtable<String, String>();
-
-        env.put("connectionfactory.connection", "amqp://guest:guest@TTL_TEST_ID/" + VHOST + "?brokerlist='" + BROKER + "'");
-        env.put("queue.queue", QUEUE);
-
-        _context = factory.getInitialContext(env);
@@ -107,3 +68,7 @@
-        _queue = (Queue) _context.lookup("queue");
-        init();
-    }
+        _queue = getTestQueue();
+        
+        //Create Producer
+        _producerConnection = getConnection();
+        _producerConnection.start();
+        _producerSession = _producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
+        _producer = _producerSession.createProducer(_queue);
@@ -111,15 +76,5 @@
-    @Override
-    public void tearDown() throws Exception
-    {
-        if (_producerConnection != null)
-        {
-            _producerConnection.close();
-        }
-
-        if (_clientConnection != null)
-        {
-            _clientConnection.close();
-        }
-
-        TransportConnection.killVMBroker(ApplicationRegistry.DEFAULT_INSTANCE);
-        super.tearDown();        
+        // Create consumer
+        _clientConnection = getConnection();
+        _clientConnection.start();
+        _clientSession = _clientConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
+        _consumer = _clientSession.createConsumer(_queue, "key = 23");
@@ -142 +97,2 @@
-        verifyAllMessagesRecevied(0);
+        verifyAllMessagesRecevied(50);
+        verifyBrokerState(0);
@@ -152,15 +107,0 @@
-    protected void init() throws NamingException, JMSException, AMQException
-    {
-        //Create Producer
-        _producerConnection = ((ConnectionFactory) _context.lookup("connection")).createConnection();
-        _producerConnection.start();
-        _producerSession = _producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
-        _producer = _producerSession.createProducer(_queue);
-
-        // Create consumer
-        _clientConnection = ((ConnectionFactory) _context.lookup("connection")).createConnection();
-        _clientConnection.start();
-        _clientSession = _clientConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
-        _consumer = _clientSession.createConsumer(_queue, "key = 23");
-    }
-
@@ -171 +112,2 @@
-            _clientConnection = ((ConnectionFactory) _context.lookup("connection")).createConnection();
+            Connection connection = getConnection();
+            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
@@ -173,9 +114,0 @@
-            _clientSession = _clientConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
-        }
-        catch (Exception e)
-        {
-            fail(e.getMessage());
-        }
-
-        try
-        {
@@ -183 +116 @@
-            long queueDepth = ((AMQSession) _clientSession).getQueueDepth((AMQDestination) _queue);
+            long queueDepth = ((AMQSession) session).getQueueDepth((AMQDestination) _queue);
@@ -184,0 +118,2 @@
+            
+            connection.close();
@@ -194 +129 @@
-        finally
+        catch (Exception e)
@@ -196,8 +131 @@
-            try
-            {
-                _clientConnection.close();
-            }
-            catch (JMSException e)
-            {
-                fail(e.getMessage());
-            }
+            fail(e.getMessage());
@@ -205 +132,0 @@
-
@@ -210 +136,0 @@
-
@@ -213 +139 @@
-        for (int i = 0; i < MSG_COUNT; i++)
+        for (int i = 0; i < expectedDepth; i++)
@@ -218,4 +144 @@
-
-        long queueDepth = ((AMQSession) _clientSession).getQueueDepth((AMQDestination) _queue);
-        assertEquals("Session reports Queue depth not as expected", expectedDepth, queueDepth);
-
+        
@@ -234 +157 @@
-        for (msgId = 0; msgId < MSG_COUNT; msgId++)
+        for (msgId = 0; msgId < expectedDepth; msgId++)
@@ -244,3 +166,0 @@
-     *
-     * @return
-     *
@@ -256 +175,0 @@
-

