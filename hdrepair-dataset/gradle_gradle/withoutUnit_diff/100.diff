diff --git a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/VisualStudioPlugin.groovy b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/VisualStudioPlugin.groovy
index 1a772b2..a7cf92e 100644
--- a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/VisualStudioPlugin.groovy
+++ b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/VisualStudioPlugin.groovy
@@ -32 +31,0 @@
-
@@ -86,3 +85,2 @@
-            factory { new SolutionFile() }
-            onConfigure { SolutionFile solutionFile ->
-                solutionFile.uuid = solution.uuid
+            factory { new VisualStudioSolutionFile() }
+            onConfigure { VisualStudioSolutionFile solutionFile ->
@@ -101,2 +99,2 @@
-            factory { new ProjectFile(new ProjectRelativeFileTransformer(project)) }
-            onConfigure { ProjectFile projectFile ->
+            factory { new VisualStudioProjectFile(new ProjectRelativeFileTransformer(project)) }
+            onConfigure { VisualStudioProjectFile projectFile ->
@@ -127,2 +125,2 @@
-            factory { new FiltersFile(new ProjectRelativeFileTransformer(project)) }
-            onConfigure { FiltersFile filtersFile ->
+            factory { new VisualStudioFiltersFile(new ProjectRelativeFileTransformer(project)) }
+            onConfigure { VisualStudioFiltersFile filtersFile ->
diff --git a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/FiltersFile.groovy b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/FiltersFile.groovy
deleted file mode 100644
index 2a1c6f0..0000000
--- a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/FiltersFile.groovy
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright 2013 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.gradle.ide.visualstudio.model
-
-import org.gradle.api.Transformer
-import org.gradle.api.internal.xml.XmlTransformer
-import org.gradle.plugins.ide.internal.generator.XmlPersistableConfigurationObject
-
-class FiltersFile extends XmlPersistableConfigurationObject {
-    private final Transformer<String, File> fileLocationResolver
-
-    FiltersFile(Transformer<String, File> fileLocationResolver) {
-        super(new XmlTransformer())
-        this.fileLocationResolver = fileLocationResolver
-    }
-
-    protected String getDefaultResourceName() {
-        'default.vcxproj.filters'
-    }
-
-    def addSource(File sourceFile) {
-        sources.appendNode("ClCompile", [Include: toPath(sourceFile)]).appendNode('Filter', 'Source Files')
-    }
-
-    def addHeader(File headerFile) {
-        headers.appendNode("ClInclude", [Include: toPath(headerFile)]).appendNode('Filter', 'Header Files')
-    }
-
-    def getFilters() {
-        return xml.ItemGroup.findAll({ it.'@Label' == 'Filters' })[0]
-    }
-
-    private Node getSources() {
-        return xml.ItemGroup.find({ it.'@Label' == 'Sources' }) as Node
-    }
-
-    private Node getHeaders() {
-        return xml.ItemGroup.find({ it.'@Label' == 'Headers' }) as Node
-    }
-
-    private String toPath(File it) {
-        fileLocationResolver.transform(it)
-    }
-
-}
\ No newline at end of file
diff --git a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/ProjectFile.groovy b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/ProjectFile.groovy
deleted file mode 100644
index 94655bb..0000000
--- a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/ProjectFile.groovy
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Copyright 2013 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.ide.visualstudio.model
-
-import org.gradle.api.Transformer
-import org.gradle.api.internal.xml.XmlTransformer
-import org.gradle.plugins.ide.internal.generator.XmlPersistableConfigurationObject
-
-class ProjectFile extends XmlPersistableConfigurationObject {
-    private final Transformer<String, File> fileLocationResolver
-
-    ProjectFile(Transformer<String, File> fileLocationResolver) {
-        super(new XmlTransformer())
-        this.fileLocationResolver = fileLocationResolver
-    }
-
-    protected String getDefaultResourceName() {
-        'default.vcxproj'
-    }
-
-    def setProjectUuid(String uuid) {
-        Node globals = xml.PropertyGroup.find({it.'@Label' == 'Globals'}) as Node
-        globals.appendNode("ProjectGUID", uuid)
-    }
-
-    def addSourceFile(File it) {
-        def sources = xml.ItemGroup.find({ it.'@Label' == 'Sources' }) as Node
-        sources.appendNode("ClCompile", [Include: toPath(it)])
-    }
-
-    def addHeaderFile(File it) {
-        def headers = xml.ItemGroup.find({ it.'@Label' == 'Headers' }) as Node
-        headers.appendNode("ClInclude", [Include: toPath(it)])
-    }
-
-    def addConfiguration(VisualStudioProjectConfiguration configuration) {
-        def configNode = configurations.appendNode("ProjectConfiguration", [Include: configuration.name])
-        configNode.appendNode("Configuration", configuration.configurationName)
-        configNode.appendNode("Platform", configuration.platformName)
-
-        Node defaultProps = xml.Import.find({ it.'@Project' == '$(VCTargetsPath)\\Microsoft.Cpp.Default.props'}) as Node
-        defaultProps + {
-            PropertyGroup(Label: "Configuration", Condition: "'\$(Configuration)|\$(Platform)'=='${configuration.name}'") {
-                ConfigurationType(configuration.type)
-                UseDebugLibraries(configuration.debug)
-            }
-        }
-
-        final configCondition = "'\$(Configuration)|\$(Platform)'=='${configuration.name}'"
-        final includePath = toPath(configuration.includePaths).join(";")
-        Node userMacros = xml.PropertyGroup.find({ it.'@Label' == 'UserMacros'}) as Node
-        userMacros + {
-            PropertyGroup(Condition: configCondition) {
-                NMakeBuildCommandLine("gradlew.bat ${configuration.buildTask}")
-                NMakeCleanCommandLine("gradlew.bat ${configuration.cleanTask}")
-                NMakeReBuildCommandLine("gradlew.bat ${configuration.cleanTask} ${configuration.buildTask}")
-                NMakePreprocessorDefinitions(configuration.defines.join(";"))
-                NMakeIncludeSearchPath(includePath)
-                NMakeOutput(toPath(configuration.outputFile))
-                IntDir("\$(ProjectName)\\\$(Configuration)\\")
-            }
-            ItemDefinitionGroup(Condition: configCondition) {
-                ClCompile {
-                    AdditionalIncludeDirectories(includePath)
-                    PreprocessorDefinitions(configuration.defines.join(";"))
-                }
-                Link {
-                    GenerateDebugInformation("true")
-                }
-            }
-        }
-    }
-
-    def addProjectReference(VisualStudioProject referencedProject) {
-        Node references = xml.ItemGroup.find({ it.'@Label' == 'References' }) as Node
-        references.appendNode("ProjectReference", [Include: referencedProject.projectFile])
-                  .appendNode("Project", referencedProject.uuid)
-    }
-
-    private Node getConfigurations() {
-        return xml.ItemGroup.find({ it.'@Label' == 'ProjectConfigurations' }) as Node
-    }
-
-    private List<String> toPath(List<File> files) {
-        return files.collect({toPath(it)})
-    }
-
-    private String toPath(File it) {
-        fileLocationResolver.transform(it)
-    }
-}
\ No newline at end of file
diff --git a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/SolutionFile.groovy b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/SolutionFile.groovy
deleted file mode 100644
index d4f702a..0000000
--- a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/SolutionFile.groovy
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright 2013 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.ide.visualstudio.model
-
-import org.gradle.plugins.ide.internal.generator.AbstractPersistableConfigurationObject
-
-class SolutionFile extends AbstractPersistableConfigurationObject {
-    private String uuid
-    private baseText
-    private vsProjects = []
-
-    protected String getDefaultResourceName() {
-        'default.sln'
-    }
-
-    void setUuid(String uuid) {
-        this.uuid = uuid
-    }
-
-    void addProject(VisualStudioProject vsProject) {
-        vsProjects << vsProject
-    }
-
-    @Override
-    void load(InputStream inputStream) throws Exception {
-        baseText = inputStream.text
-    }
-
-    @Override
-    void store(OutputStream outputStream) {
-        outputStream << baseText
-        vsProjects.each { VisualStudioProject vsProject ->
-            outputStream << """
-Project("${uuid}") = "${vsProject.getName()}", "${vsProject.getProjectFile()}", "${vsProject.getUuid()}"
-EndProject
-"""
-        }
-        outputStream << """
-Global
-    GlobalSection(SolutionConfigurationPlatforms) = preSolution
-        debug|Win32=debug|Win32
-    EndGlobalSection
-EndGlobal
-"""
-
-
-    }
-}
\ No newline at end of file
diff --git a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioFiltersFile.groovy b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioFiltersFile.groovy
new file mode 100644
index 0000000..7d303cf
--- /dev/null
+++ b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioFiltersFile.groovy
@@ -0,0 +1,58 @@
+/*
+ * Copyright 2013 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gradle.ide.visualstudio.model
+
+import org.gradle.api.Transformer
+import org.gradle.api.internal.xml.XmlTransformer
+import org.gradle.plugins.ide.internal.generator.XmlPersistableConfigurationObject
+
+class VisualStudioFiltersFile extends XmlPersistableConfigurationObject {
+    private final Transformer<String, File> fileLocationResolver
+
+    VisualStudioFiltersFile(Transformer<String, File> fileLocationResolver) {
+        super(new XmlTransformer())
+        this.fileLocationResolver = fileLocationResolver
+    }
+
+    protected String getDefaultResourceName() {
+        'default.vcxproj.filters'
+    }
+
+    def addSource(File sourceFile) {
+        sources.appendNode("ClCompile", [Include: toPath(sourceFile)]).appendNode('Filter', 'Source Files')
+    }
+
+    def addHeader(File headerFile) {
+        headers.appendNode("ClInclude", [Include: toPath(headerFile)]).appendNode('Filter', 'Header Files')
+    }
+
+    def getFilters() {
+        return xml.ItemGroup.findAll({ it.'@Label' == 'Filters' })[0]
+    }
+
+    private Node getSources() {
+        return xml.ItemGroup.find({ it.'@Label' == 'Sources' }) as Node
+    }
+
+    private Node getHeaders() {
+        return xml.ItemGroup.find({ it.'@Label' == 'Headers' }) as Node
+    }
+
+    private String toPath(File it) {
+        fileLocationResolver.transform(it)
+    }
+
+}
\ No newline at end of file
diff --git a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioProjectFile.groovy b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioProjectFile.groovy
new file mode 100644
index 0000000..ab6e335
--- /dev/null
+++ b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioProjectFile.groovy
@@ -0,0 +1,105 @@
+/*
+ * Copyright 2013 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gradle.ide.visualstudio.model
+
+import org.gradle.api.Transformer
+import org.gradle.api.internal.xml.XmlTransformer
+import org.gradle.plugins.ide.internal.generator.XmlPersistableConfigurationObject
+
+class VisualStudioProjectFile extends XmlPersistableConfigurationObject {
+    private final Transformer<String, File> fileLocationResolver
+
+    VisualStudioProjectFile(Transformer<String, File> fileLocationResolver) {
+        super(new XmlTransformer())
+        this.fileLocationResolver = fileLocationResolver
+    }
+
+    protected String getDefaultResourceName() {
+        'default.vcxproj'
+    }
+
+    def setProjectUuid(String uuid) {
+        Node globals = xml.PropertyGroup.find({it.'@Label' == 'Globals'}) as Node
+        globals.appendNode("ProjectGUID", uuid)
+    }
+
+    def addSourceFile(File it) {
+        def sources = xml.ItemGroup.find({ it.'@Label' == 'Sources' }) as Node
+        sources.appendNode("ClCompile", [Include: toPath(it)])
+    }
+
+    def addHeaderFile(File it) {
+        def headers = xml.ItemGroup.find({ it.'@Label' == 'Headers' }) as Node
+        headers.appendNode("ClInclude", [Include: toPath(it)])
+    }
+
+    def addConfiguration(VisualStudioProjectConfiguration configuration) {
+        def configNode = configurations.appendNode("ProjectConfiguration", [Include: configuration.name])
+        configNode.appendNode("Configuration", configuration.configurationName)
+        configNode.appendNode("Platform", configuration.platformName)
+
+        Node defaultProps = xml.Import.find({ it.'@Project' == '$(VCTargetsPath)\\Microsoft.Cpp.Default.props'}) as Node
+        defaultProps + {
+            PropertyGroup(Label: "Configuration", Condition: "'\$(Configuration)|\$(Platform)'=='${configuration.name}'") {
+                ConfigurationType(configuration.type)
+                UseDebugLibraries(configuration.debug)
+            }
+        }
+
+        final configCondition = "'\$(Configuration)|\$(Platform)'=='${configuration.name}'"
+        final includePath = toPath(configuration.includePaths).join(";")
+        Node userMacros = xml.PropertyGroup.find({ it.'@Label' == 'UserMacros'}) as Node
+        userMacros + {
+            PropertyGroup(Condition: configCondition) {
+                NMakeBuildCommandLine("gradlew.bat ${configuration.buildTask}")
+                NMakeCleanCommandLine("gradlew.bat ${configuration.cleanTask}")
+                NMakeReBuildCommandLine("gradlew.bat ${configuration.cleanTask} ${configuration.buildTask}")
+                NMakePreprocessorDefinitions(configuration.defines.join(";"))
+                NMakeIncludeSearchPath(includePath)
+                NMakeOutput(toPath(configuration.outputFile))
+                IntDir("\$(ProjectName)\\\$(Configuration)\\")
+            }
+            ItemDefinitionGroup(Condition: configCondition) {
+                ClCompile {
+                    AdditionalIncludeDirectories(includePath)
+                    PreprocessorDefinitions(configuration.defines.join(";"))
+                }
+                Link {
+                    GenerateDebugInformation("true")
+                }
+            }
+        }
+    }
+
+    def addProjectReference(VisualStudioProject referencedProject) {
+        Node references = xml.ItemGroup.find({ it.'@Label' == 'References' }) as Node
+        references.appendNode("ProjectReference", [Include: referencedProject.projectFile])
+                  .appendNode("Project", referencedProject.uuid)
+    }
+
+    private Node getConfigurations() {
+        return xml.ItemGroup.find({ it.'@Label' == 'ProjectConfigurations' }) as Node
+    }
+
+    private List<String> toPath(List<File> files) {
+        return files.collect({toPath(it)})
+    }
+
+    private String toPath(File it) {
+        fileLocationResolver.transform(it)
+    }
+}
\ No newline at end of file
diff --git a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioSolutionBuilder.java b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioSolutionBuilder.java
index d30878e..5c021f2 100644
--- a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioSolutionBuilder.java
+++ b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioSolutionBuilder.java
@@ -50 +50 @@
-        return projectRegistry.getProjectConfiguration(nativeBinary).getProject().getName();
+        return nativeBinary.getComponent().getName();
diff --git a/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioSolutionFile.groovy b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioSolutionFile.groovy
new file mode 100644
index 0000000..3101b7b
--- /dev/null
+++ b/subprojects/cpp/src/main/groovy/org/gradle/ide/visualstudio/model/VisualStudioSolutionFile.groovy
@@ -0,0 +1,57 @@
+/*
+ * Copyright 2013 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gradle.ide.visualstudio.model
+
+import org.gradle.plugins.ide.internal.generator.AbstractPersistableConfigurationObject
+
+class VisualStudioSolutionFile extends AbstractPersistableConfigurationObject {
+    private baseText
+    private vsProjects = []
+
+    protected String getDefaultResourceName() {
+        'default.sln'
+    }
+
+    void addProject(VisualStudioProject vsProject) {
+        vsProjects << vsProject
+    }
+
+    @Override
+    void load(InputStream inputStream) throws Exception {
+        baseText = inputStream.text
+    }
+
+    @Override
+    void store(OutputStream outputStream) {
+        outputStream << baseText
+        vsProjects.each { VisualStudioProject vsProject ->
+            outputStream << """
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "${vsProject.getName()}", "${vsProject.getProjectFile()}", "${vsProject.getUuid()}"
+EndProject
+"""
+        }
+        outputStream << """
+Global
+    GlobalSection(SolutionConfigurationPlatforms) = preSolution
+        debug|Win32=debug|Win32
+    EndGlobalSection
+EndGlobal
+"""
+
+
+    }
+}
\ No newline at end of file
diff --git a/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/fixtures/SolutionFile.groovy b/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/fixtures/SolutionFile.groovy
new file mode 100644
index 0000000..454b7f8
--- /dev/null
+++ b/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/fixtures/SolutionFile.groovy
@@ -0,0 +1,54 @@
+/*
+ * Copyright 2013 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gradle.ide.visualstudio.fixtures
+
+import org.gradle.test.fixtures.file.TestFile
+import org.gradle.util.TextUtil
+
+class SolutionFile {
+    def content
+    List<String> projects
+
+    SolutionFile(TestFile solutionFile) {
+        assert solutionFile.exists()
+        content = TextUtil.normaliseLineSeparators(solutionFile.text)
+        projects = content.readLines().findAll {
+            it.startsWith("Project(")
+        }
+    }
+
+    def assertHasProjects(String... names) {
+        assert projects.size() == names.length
+        for (String name : names) {
+            assert projects.find {
+                it.startsWith(/Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "${name}", "${"${name}.vcxproj"}"/)
+            } != null
+        }
+        return true
+    }
+
+    def assertHasProjects(Map... projects) {
+        assert this.projects.size() == projects.length
+        for (Map project : projects) {
+            final projectString = /Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "${project.name}", "${project.file}", "${project.uuid}"/
+            assert this.projects.find {
+                it == projectString
+            } != null
+        }
+        return true
+    }
+}
diff --git a/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/FiltersFileTest.groovy b/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/FiltersFileTest.groovy
deleted file mode 100644
index b996272..0000000
--- a/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/FiltersFileTest.groovy
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * Copyright 2013 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.ide.visualstudio.model
-
-import org.gradle.api.Transformer
-import org.gradle.test.fixtures.file.TestDirectoryProvider
-import org.gradle.test.fixtures.file.TestFile
-import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
-import spock.lang.Specification
-
-class FiltersFileTest extends Specification {
-    TestDirectoryProvider testDirectoryProvider = new TestNameTestDirectoryProvider()
-    Transformer<String, File> fileNameTransformer = { it.name } as Transformer<String, File>
-    def filtersFile = new FiltersFile(fileNameTransformer)
-
-    def "empty filters file"() {
-        when:
-        filtersFile.loadDefaults()
-
-        then:
-        Node sourceFiles = itemGroup('Filters').Filter.find({it.'@Include' == 'Source Files'}) as Node
-        sourceFiles.Extensions[0].text() == 'cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx'
-
-        Node headerFiles = itemGroup('Filters').Filter.find({it.'@Include' == 'Header Files'}) as Node
-        headerFiles.Extensions[0].text() == 'h;hpp;hxx;hm;inl;inc;xsd'
-
-        Node resourceFiles = itemGroup('Filters').Filter.find({it.'@Include' == 'Resource Files'}) as Node
-        resourceFiles.Extensions[0].text() == 'rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav'
-
-        and:
-        itemGroup('Sources').children().isEmpty()
-        itemGroup('Headers').children().isEmpty()
-    }
-
-    def "adds sources and header files"() {
-        when:
-        filtersFile.loadDefaults()
-
-        and:
-        filtersFile.addSource(file("sourceOne"))
-        filtersFile.addSource(file("sourceTwo"))
-
-        filtersFile.addHeader(file("headerOne"))
-        filtersFile.addHeader(file("headerTwo"))
-
-        then:
-        assert sourceFile(0) == "sourceOne"
-        assert sourceFile(1) == "sourceTwo"
-
-        assert headerFile(0) == "headerOne"
-        assert headerFile(1) == "headerTwo"
-    }
-
-    private String sourceFile(int index) {
-        def source = itemGroup('Sources').ClCompile[index]
-        assert source.Filter[0].text() == 'Source Files'
-        return source.'@Include'
-    }
-
-    private String headerFile(int index) {
-        def header = itemGroup('Headers').ClInclude[index]
-        assert header.Filter[0].text() == 'Header Files'
-        return header.'@Include'
-    }
-
-    private Node itemGroup(String label) {
-        return filtersXml.ItemGroup.find({it.'@Label' == label}) as Node
-    }
-
-    private def getFiltersXml() {
-        return new XmlParser().parse(filtersFileContent)
-    }
-
-    private TestFile getFiltersFileContent() {
-        def file = testDirectoryProvider.testDirectory.file("filters.xml")
-        filtersFile.store(file)
-        return file
-    }
-
-    private TestFile file(String name) {
-        testDirectoryProvider.testDirectory.file(name)
-    }
-}
diff --git a/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/ProjectFileTest.groovy b/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/ProjectFileTest.groovy
deleted file mode 100644
index a99fa2e..0000000
--- a/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/ProjectFileTest.groovy
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
- * Copyright 2013 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.ide.visualstudio.model
-
-import org.gradle.api.Transformer
-import org.gradle.test.fixtures.file.TestDirectoryProvider
-import org.gradle.test.fixtures.file.TestFile
-import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
-import spock.lang.Specification
-
-class ProjectFileTest extends Specification {
-    TestDirectoryProvider testDirectoryProvider = new TestNameTestDirectoryProvider()
-    Transformer<String, File> fileNameTransformer = { it.name } as Transformer<String, File>
-    def projectFile = new ProjectFile(fileNameTransformer)
-
-    def "setup"() {
-        projectFile.loadDefaults()
-    }
-
-    def "empty project file"() {
-        expect:
-        itemGroup('ProjectConfigurations').children().isEmpty()
-        itemGroup('Sources').children().isEmpty()
-        itemGroup('Headers').children().isEmpty()
-    }
-
-    def "set project uuid"() {
-        when:
-        projectFile.setProjectUuid("THE_PROJECT_UUID")
-
-        then:
-        globals.ProjectGUID[0].text() == "THE_PROJECT_UUID"
-    }
-
-    def "add source and headers"() {
-        when:
-        projectFile.addSourceFile(file("sourceOne"))
-        projectFile.addSourceFile(file("sourceTwo"))
-
-        projectFile.addHeaderFile(file("headerOne"))
-        projectFile.addHeaderFile(file("headerTwo"))
-
-        then:
-        assert sourceFile(0) == "sourceOne"
-        assert sourceFile(1) == "sourceTwo"
-
-        assert headerFile(0) == "headerOne"
-        assert headerFile(1) == "headerTwo"
-    }
-
-    private String sourceFile(int index) {
-        def source = itemGroup('Sources').ClCompile[index]
-        return source.'@Include'
-    }
-
-    private String headerFile(int index) {
-        def header = itemGroup('Headers').ClInclude[index]
-        return header.'@Include'
-    }
-
-    private Node itemGroup(String label) {
-        return projectXml.ItemGroup.find({it.'@Label' == label}) as Node
-    }
-
-    private Node getGlobals() {
-        return projectXml.PropertyGroup.find({it.'@Label' == 'Globals'}) as Node
-    }
-
-    private def getProjectXml() {
-        return new XmlParser().parse(projectFileContent)
-    }
-
-    private TestFile getProjectFileContent() {
-        def file = testDirectoryProvider.testDirectory.file("project.xml")
-        projectFile.store(file)
-        return file
-    }
-
-    private TestFile file(String name) {
-        testDirectoryProvider.testDirectory.file(name)
-    }
-}
\ No newline at end of file
diff --git a/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/SolutionFileTest.groovy b/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/SolutionFileTest.groovy
deleted file mode 100644
index 41075f5..0000000
--- a/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/SolutionFileTest.groovy
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Copyright 2013 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.ide.visualstudio.model
-import org.gradle.test.fixtures.file.TestDirectoryProvider
-import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
-import org.gradle.util.TextUtil
-import spock.lang.Specification
-
-class SolutionFileTest extends Specification {
-    TestDirectoryProvider testDirectoryProvider = new TestNameTestDirectoryProvider()
-    def solutionFile = new SolutionFile()
-
-    def "setup"() {
-        solutionFile.loadDefaults()
-        solutionFile.uuid = "THE_SOLUTION_UUID"
-    }
-
-    def "empty solution file"() {
-        expect:
-        solutionFileContent ==
-"""Microsoft Visual Studio Solution File, Format Version 11.00
-# Visual C++ Express 2010
-
-Global
-    GlobalSection(SolutionConfigurationPlatforms) = preSolution
-        debug|Win32=debug|Win32
-    EndGlobalSection
-EndGlobal
-"""
-    }
-
-    def "includes project references"() {
-        when:
-        def project1 = new VisualStudioProject("project1", null)
-        solutionFile.addProject(project1)
-        def project2 = new VisualStudioProject("project2", null)
-        solutionFile.addProject(project2)
-
-        then:
-        solutionFileContent ==
-"""Microsoft Visual Studio Solution File, Format Version 11.00
-# Visual C++ Express 2010
-
-Project("THE_SOLUTION_UUID") = "project1", "project1.vcxproj", "${project1.uuid}"
-EndProject
-
-Project("THE_SOLUTION_UUID") = "project2", "project2.vcxproj", "${project2.uuid}"
-EndProject
-
-Global
-    GlobalSection(SolutionConfigurationPlatforms) = preSolution
-        debug|Win32=debug|Win32
-    EndGlobalSection
-EndGlobal
-"""
-    }
-
-    private String getSolutionFileContent() {
-        def file = testDirectoryProvider.testDirectory.file("solution.txt")
-        solutionFile.store(file)
-        return TextUtil.normaliseLineSeparators(file.text)
-    }
-}
\ No newline at end of file
diff --git a/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/VisualStudioFiltersFileTest.groovy b/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/VisualStudioFiltersFileTest.groovy
new file mode 100644
index 0000000..a7f323b
--- /dev/null
+++ b/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/VisualStudioFiltersFileTest.groovy
@@ -0,0 +1,97 @@
+/*
+ * Copyright 2013 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gradle.ide.visualstudio.model
+
+import org.gradle.api.Transformer
+import org.gradle.test.fixtures.file.TestDirectoryProvider
+import org.gradle.test.fixtures.file.TestFile
+import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
+import spock.lang.Specification
+
+class VisualStudioFiltersFileTest extends Specification {
+    TestDirectoryProvider testDirectoryProvider = new TestNameTestDirectoryProvider()
+    Transformer<String, File> fileNameTransformer = { it.name } as Transformer<String, File>
+    def filtersFile = new VisualStudioFiltersFile(fileNameTransformer)
+
+    def "empty filters file"() {
+        when:
+        filtersFile.loadDefaults()
+
+        then:
+        Node sourceFiles = itemGroup('Filters').Filter.find({it.'@Include' == 'Source Files'}) as Node
+        sourceFiles.Extensions[0].text() == 'cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx'
+
+        Node headerFiles = itemGroup('Filters').Filter.find({it.'@Include' == 'Header Files'}) as Node
+        headerFiles.Extensions[0].text() == 'h;hpp;hxx;hm;inl;inc;xsd'
+
+        Node resourceFiles = itemGroup('Filters').Filter.find({it.'@Include' == 'Resource Files'}) as Node
+        resourceFiles.Extensions[0].text() == 'rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav'
+
+        and:
+        itemGroup('Sources').children().isEmpty()
+        itemGroup('Headers').children().isEmpty()
+    }
+
+    def "adds sources and header files"() {
+        when:
+        filtersFile.loadDefaults()
+
+        and:
+        filtersFile.addSource(file("sourceOne"))
+        filtersFile.addSource(file("sourceTwo"))
+
+        filtersFile.addHeader(file("headerOne"))
+        filtersFile.addHeader(file("headerTwo"))
+
+        then:
+        assert sourceFile(0) == "sourceOne"
+        assert sourceFile(1) == "sourceTwo"
+
+        assert headerFile(0) == "headerOne"
+        assert headerFile(1) == "headerTwo"
+    }
+
+    private String sourceFile(int index) {
+        def source = itemGroup('Sources').ClCompile[index]
+        assert source.Filter[0].text() == 'Source Files'
+        return source.'@Include'
+    }
+
+    private String headerFile(int index) {
+        def header = itemGroup('Headers').ClInclude[index]
+        assert header.Filter[0].text() == 'Header Files'
+        return header.'@Include'
+    }
+
+    private Node itemGroup(String label) {
+        return filtersXml.ItemGroup.find({it.'@Label' == label}) as Node
+    }
+
+    private def getFiltersXml() {
+        return new XmlParser().parse(filtersFileContent)
+    }
+
+    private TestFile getFiltersFileContent() {
+        def file = testDirectoryProvider.testDirectory.file("filters.xml")
+        filtersFile.store(file)
+        return file
+    }
+
+    private TestFile file(String name) {
+        testDirectoryProvider.testDirectory.file(name)
+    }
+}
diff --git a/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/VisualStudioProjectFileTest.groovy b/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/VisualStudioProjectFileTest.groovy
new file mode 100644
index 0000000..9be4a55
--- /dev/null
+++ b/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/VisualStudioProjectFileTest.groovy
@@ -0,0 +1,96 @@
+/*
+ * Copyright 2013 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gradle.ide.visualstudio.model
+
+import org.gradle.api.Transformer
+import org.gradle.test.fixtures.file.TestDirectoryProvider
+import org.gradle.test.fixtures.file.TestFile
+import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
+import spock.lang.Specification
+
+class VisualStudioProjectFileTest extends Specification {
+    TestDirectoryProvider testDirectoryProvider = new TestNameTestDirectoryProvider()
+    Transformer<String, File> fileNameTransformer = { it.name } as Transformer<String, File>
+    def projectFile = new VisualStudioProjectFile(fileNameTransformer)
+
+    def "setup"() {
+        projectFile.loadDefaults()
+    }
+
+    def "empty project file"() {
+        expect:
+        itemGroup('ProjectConfigurations').children().isEmpty()
+        itemGroup('Sources').children().isEmpty()
+        itemGroup('Headers').children().isEmpty()
+    }
+
+    def "set project uuid"() {
+        when:
+        projectFile.setProjectUuid("THE_PROJECT_UUID")
+
+        then:
+        globals.ProjectGUID[0].text() == "THE_PROJECT_UUID"
+    }
+
+    def "add source and headers"() {
+        when:
+        projectFile.addSourceFile(file("sourceOne"))
+        projectFile.addSourceFile(file("sourceTwo"))
+
+        projectFile.addHeaderFile(file("headerOne"))
+        projectFile.addHeaderFile(file("headerTwo"))
+
+        then:
+        assert sourceFile(0) == "sourceOne"
+        assert sourceFile(1) == "sourceTwo"
+
+        assert headerFile(0) == "headerOne"
+        assert headerFile(1) == "headerTwo"
+    }
+
+    private String sourceFile(int index) {
+        def source = itemGroup('Sources').ClCompile[index]
+        return source.'@Include'
+    }
+
+    private String headerFile(int index) {
+        def header = itemGroup('Headers').ClInclude[index]
+        return header.'@Include'
+    }
+
+    private Node itemGroup(String label) {
+        return projectXml.ItemGroup.find({it.'@Label' == label}) as Node
+    }
+
+    private Node getGlobals() {
+        return projectXml.PropertyGroup.find({it.'@Label' == 'Globals'}) as Node
+    }
+
+    private def getProjectXml() {
+        return new XmlParser().parse(projectFileContent)
+    }
+
+    private TestFile getProjectFileContent() {
+        def file = testDirectoryProvider.testDirectory.file("project.xml")
+        projectFile.store(file)
+        return file
+    }
+
+    private TestFile file(String name) {
+        testDirectoryProvider.testDirectory.file(name)
+    }
+}
\ No newline at end of file
diff --git a/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/VisualStudioSolutionFileTest.groovy b/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/VisualStudioSolutionFileTest.groovy
new file mode 100644
index 0000000..721df7b
--- /dev/null
+++ b/subprojects/cpp/src/test/groovy/org/gradle/ide/visualstudio/model/VisualStudioSolutionFileTest.groovy
@@ -0,0 +1,65 @@
+/*
+ * Copyright 2013 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gradle.ide.visualstudio.model
+
+import org.gradle.ide.visualstudio.fixtures.SolutionFile
+import org.gradle.test.fixtures.file.TestDirectoryProvider
+import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
+import spock.lang.Specification
+
+class VisualStudioSolutionFileTest extends Specification {
+    TestDirectoryProvider testDirectoryProvider = new TestNameTestDirectoryProvider()
+    def solutionFile = new VisualStudioSolutionFile()
+
+    def "setup"() {
+        solutionFile.loadDefaults()
+    }
+
+    def "empty solution file"() {
+        expect:
+        generatedSolution.content ==
+"""Microsoft Visual Studio Solution File, Format Version 11.00
+# Visual C++ Express 2010
+
+Global
+    GlobalSection(SolutionConfigurationPlatforms) = preSolution
+        debug|Win32=debug|Win32
+    EndGlobalSection
+EndGlobal
+"""
+    }
+
+    def "includes project references"() {
+        when:
+        def project1 = new VisualStudioProject("project1", null)
+        solutionFile.addProject(project1)
+        def project2 = new VisualStudioProject("project2", null)
+        solutionFile.addProject(project2)
+
+        then:
+        generatedSolution.assertHasProjects(
+                [name: "project1", file: "project1.vcxproj", uuid: project1.uuid],
+                [name: "project2", file: "project2.vcxproj", uuid: project2.uuid]
+        )
+    }
+
+    private SolutionFile getGeneratedSolution() {
+        def file = testDirectoryProvider.testDirectory.file("solution.txt")
+        solutionFile.store(file)
+        return new SolutionFile(file)
+    }
+}
\ No newline at end of file

