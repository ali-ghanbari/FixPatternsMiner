diff --git a/subprojects/messaging/src/main/java/org/gradle/messaging/remote/internal/Message.java b/subprojects/messaging/src/main/java/org/gradle/messaging/remote/internal/Message.java
index d7fe091..c07499d 100755
--- a/subprojects/messaging/src/main/java/org/gradle/messaging/remote/internal/Message.java
+++ b/subprojects/messaging/src/main/java/org/gradle/messaging/remote/internal/Message.java
@@ -77,0 +78 @@
+                stackTrace = new StackTraceElement[0];
diff --git a/subprojects/messaging/src/test/groovy/org/gradle/messaging/remote/internal/MessageTest.groovy b/subprojects/messaging/src/test/groovy/org/gradle/messaging/remote/internal/MessageTest.groovy
index 3aa7263..098f527 100644
--- a/subprojects/messaging/src/test/groovy/org/gradle/messaging/remote/internal/MessageTest.groovy
+++ b/subprojects/messaging/src/test/groovy/org/gradle/messaging/remote/internal/MessageTest.groovy
@@ -17,0 +18 @@
+import org.gradle.internal.exceptions.AbstractMultiCauseException
@@ -26 +27,27 @@
-    def "replaces unserializable exception with placeholder"() {
+    def "can transport exception graph"() {
+        def cause1 = new RuntimeException("nested-1")
+        def cause2 = new IOException("nested-2")
+        def cause = new AbstractMultiCauseException("nested", cause1, cause2)
+        def original = new ExceptionWithExceptionField("message", cause)
+
+        when:
+        def transported = transport(new TestPayloadMessage(payload: original))
+
+        then:
+        transported.payload.class == ExceptionWithExceptionField
+        transported.payload.message == "message"
+
+        and:
+        transported.payload.throwable.class == AbstractMultiCauseException
+        transported.payload.throwable.message == "nested"
+
+        and:
+        transported.payload.throwable == transported.payload.cause
+
+        and:
+        transported.payload.throwable.causes.size() == 2
+        transported.payload.throwable.causes*.class == [RuntimeException, IOException]
+        transported.payload.throwable.causes*.message == ["nested-1", "nested-2"]
+    }
+
+    def "replaces exception with broken writeObject() method with placeholder"() {
@@ -28 +55 @@
-        def original = new UnserializableException("message", cause)
+        def original = new BrokenWriteObjectException("message", cause)
@@ -34,3 +61 @@
-        transported instanceof PlaceholderException
-        transported.message == original.message
-        transported.stackTrace == original.stackTrace
+        looksLike original, transported
@@ -37,0 +63,17 @@
+        and:
+        transported.cause.class == RuntimeException.class
+        transported.cause.message == "nested"
+        transported.cause.stackTrace == cause.getStackTrace()
+    }
+
+    def "replaces exception with field that cannot be serialized with placeholder"() {
+        def cause = new RuntimeException("nested")
+        def original = new ExceptionWithNonSerializableField("message", cause)
+
+        when:
+        def transported = transport(original)
+
+        then:
+        looksLike original, transported
+
+        and:
@@ -45 +87 @@
-        def original = new UnserializableException("message", cause)
+        def original = new BrokenWriteObjectException("message", cause)
@@ -57,3 +99,2 @@
-        transported.cause instanceof PlaceholderException
-        transported.cause.message == original.message
-        transported.cause.stackTrace == original.stackTrace
+        and:
+        looksLike original, transported.cause
@@ -60,0 +102 @@
+        and:
@@ -74,3 +116 @@
-        transported instanceof PlaceholderException
-        transported.message == original.message
-        transported.stackTrace == original.stackTrace
+        looksLike original, transported
@@ -77,0 +118 @@
+        and:
@@ -97,3 +138,2 @@
-        transported.cause instanceof PlaceholderException
-        transported.cause.message == original.message
-        transported.cause.stackTrace == original.stackTrace
+        and:
+        looksLike original, transported.cause
@@ -100,0 +141 @@
+        and:
@@ -117,3 +158,2 @@
-        transported.throwable instanceof PlaceholderException
-        transported.throwable.message == original.message
-        transported.throwable.stackTrace == original.stackTrace
+        and:
+        looksLike original, transported.throwable
@@ -120,0 +161 @@
+        and:
@@ -159,3 +200 @@
-        transported instanceof PlaceholderException
-        transported.message == original.message
-        transported.stackTrace == original.stackTrace
+        looksLike original, transported
@@ -162,0 +202 @@
+        and:
@@ -168 +208 @@
-    def "creates placeholder with toString() behaviour as original"() {
+    def "transports exception with broken toString() method"() {
@@ -170 +210 @@
-        def broken = new SerializableToStringException("message", cause)
+        def broken = new BrokenToStringException("message", cause)
@@ -178 +218 @@
-        toStringException.getMessage() == "broken toString"
+        toStringException.message == "broken toString"
@@ -188 +228,31 @@
-        toStringException.getMessage() == "broken toString"
+        toStringException.message == "broken toString"
+    }
+
+    def "transports exception with broken methods"() {
+        def broken = new CompletelyBrokenException()
+
+        when:
+        def transported = transport(broken)
+
+        then:
+        transported.class == CompletelyBrokenException
+    }
+
+    def "transports unserializable exception with broken methods"() {
+        def broken = new CompletelyBrokenException() { def Object o = new Object() }
+
+        when:
+        def transported = transport(broken)
+
+        then:
+        transported.class == PlaceholderException
+        transported.message == null
+        transported.cause == null
+        transported.stackTrace.length == 0
+
+        when:
+        transported.toString()
+
+        then:
+        RuntimeException e = thrown()
+        e.message == 'broken toString()'
@@ -204,0 +275,8 @@
+    void looksLike(Throwable original, Throwable transported) {
+        assert transported instanceof PlaceholderException
+        assert transported.exceptionClassName == original.class.name
+        assert transported.message == original.message
+        assert transported.toString() == original.toString()
+        assert transported.stackTrace == original.stackTrace
+    }
+
@@ -217,0 +296,8 @@
+    static class ExceptionWithNonSerializableField extends RuntimeException {
+        def canNotSerialize = new Object()
+
+        ExceptionWithNonSerializableField(String message, Throwable cause) {
+            super(message, cause)
+        }
+    }
+
@@ -227,2 +313,2 @@
-    static class UnserializableException extends RuntimeException {
-        UnserializableException(String message, Throwable cause) {
+    static class BrokenWriteObjectException extends RuntimeException {
+        BrokenWriteObjectException(String message, Throwable cause) {
@@ -243 +329 @@
-            throw new UnserializableException("broken toString", null);
+            throw new BrokenWriteObjectException("broken toString", null);
@@ -251,2 +337,24 @@
-    static class SerializableToStringException extends RuntimeException {
-        SerializableToStringException(String message, Throwable cause) {
+    static class CompletelyBrokenException extends RuntimeException {
+        @Override
+        String getMessage() {
+            throw new RuntimeException("broken getMessage()", null);
+        }
+
+        @Override
+        public String toString() {
+            throw new RuntimeException("broken toString()", null);
+        }
+
+        @Override
+        public Throwable getCause() {
+            throw new RuntimeException("broken getCause()", null);
+        }
+
+        @Override
+        StackTraceElement[] getStackTrace() {
+            throw new RuntimeException("broken getStackTrace()", null);
+        }
+    }
+
+    static class BrokenToStringException extends RuntimeException {
+        BrokenToStringException(String message, Throwable cause) {

