diff --git a/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativeLanguageIncrementalBuildIntegrationTest.groovy b/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativeLanguageIncrementalBuildIntegrationTest.groovy
index a74c9c8..9562c9f 100755
--- a/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativeLanguageIncrementalBuildIntegrationTest.groovy
+++ b/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativeLanguageIncrementalBuildIntegrationTest.groovy
@@ -45,0 +46 @@
+    TestFile commonHeaderFile
@@ -88,0 +90 @@
+        commonHeaderFile = app.commonHeader.writeToDir(file("src/hello"))
diff --git a/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativeLanguageIncrementalCompileIntegrationTest.groovy b/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativeLanguageIncrementalCompileIntegrationTest.groovy
index 5a17a3b..9fc3feb 100755
--- a/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativeLanguageIncrementalCompileIntegrationTest.groovy
+++ b/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativeLanguageIncrementalCompileIntegrationTest.groovy
@@ -31,0 +32 @@
+    TestFile commonHeaderFile
@@ -59,0 +61 @@
+        commonHeaderFile = app.commonHeader.writeToDir(file("src/main"))
@@ -273,0 +276 @@
+        file("src/replacement-headers/${commonHeaderFile.name}") << commonHeaderFile.text
@@ -321,0 +325 @@
+        file("src/replacement-headers/${commonHeaderFile.name}") << commonHeaderFile.text
@@ -338,0 +343 @@
+        sourceFile.parentFile.file(commonHeaderFile.name) << commonHeaderFile.text
@@ -347 +352 @@
-        outputs.recompiledFiles allSources
+        outputs.recompiledFiles allSources + [commonHeaderFile]
@@ -494,0 +500 @@
+        app.commonHeader.writeToDir(file("src/other"))
diff --git a/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativePreCompiledHeaderIntegrationTest.groovy b/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativePreCompiledHeaderIntegrationTest.groovy
index 7be8d2e..76f4bae 100644
--- a/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativePreCompiledHeaderIntegrationTest.groovy
+++ b/subprojects/language-native/src/integTest/groovy/org/gradle/language/AbstractNativePreCompiledHeaderIntegrationTest.groovy
@@ -22 +22 @@
-import org.gradle.nativeplatform.fixtures.app.PCHHelloWorldApp
+import org.gradle.nativeplatform.fixtures.app.IncrementalHelloWorldApp
@@ -29 +29 @@
-    abstract PCHHelloWorldApp getApp()
+    abstract IncrementalHelloWorldApp getApp()
@@ -65 +64,0 @@
-        assert file("src/hello/${app.sourceType}/hello.h").exists()
@@ -67,2 +66 @@
-        new SourceFile(app.sourceType, "prefixHeader.h", app.getPrefixHeaderFile("", app.libraryHeader.name, app.IOHeader).content).writeToDir(file("src/hello"))
-        assert file("src/hello/${app.sourceType}/prefixHeader.h").exists()
+        new SourceFile(app.sourceType, "common.h", app.commonHeader.content).writeToDir(file("src/hello"))
@@ -102,4 +100,2 @@
-        app.getLibrarySources(path).each { it.writeToDir(file("src/hello")) }
-        assert file("src/include/headers/hello.h").exists()
-        app.getPrefixHeaderFile(path, app.libraryHeader.name, app.IOHeader).writeToDir(file("src/include"))
-        assert file("src/include/headers/${path}prefixHeader.h").exists()
+        getLibrarySources(path).each { it.writeToDir(file("src/hello")) }
+        getCommonHeader(path).writeToDir(file("src/include"))
@@ -172,3 +168,3 @@
-        app.getLibraryHeader().writeToDir(file("src/hello2"))
-        app.getLibrarySources().find { it.name.startsWith("hello") }.writeToDir(file("src/hello2"))
-        app.getPrefixHeaderFile("", app.libraryHeader.name, app.IOHeader).writeToDir(file("src/hello2"))
+        app.libraryHeader.writeToDir(file("src/hello2"))
+        app.librarySources.find { it.name.startsWith("hello") }.writeToDir(file("src/hello2"))
+        app.commonHeader.writeToDir(file("src/hello2"))
@@ -212 +208 @@
-        app.getLibraryWithoutPCH().writeToDir(file("src/hello"))
+        libraryWithoutPCH.writeToDir(file("src/hello"))
@@ -273 +269 @@
-        app.alternate.libraryHeader.writeToDir(file("src/hello"))
+        alternateLibraryHeader.writeToDir(file("src/hello"))
@@ -289,2 +285 @@
-        app.getPrefixHeaderFile("", app.libraryHeader.name, app.IOHeader).writeToDir(file("src/hello"))
-        assert file("src/hello/headers/prefixHeader.h").exists()
+        app.commonHeader.writeToDir(file("src/hello"))
@@ -299 +294 @@
-        output.contains("The source file hello.${app.sourceExtension} includes the header prefixHeader.h but it is not the first declared header, so the pre-compiled header will not be used.")
+        output.contains("The source file hello.${app.sourceExtension} includes the header common.h but it is not the first declared header, so the pre-compiled header will not be used.")
@@ -345 +340 @@
-                            ${app.sourceType}.preCompiledHeader "${path}prefixHeader.h"
+                            ${app.sourceType}.preCompiledHeader "${path}common.h"
@@ -362,3 +357,3 @@
-        app.getLibrarySources(path).each { it.writeToDir(file("src/hello")) }
-        app.getPrefixHeaderFile(path, app.libraryHeader.name, app.IOHeader).writeToDir(file("src/hello"))
-        assert file("src/hello/headers/${path}prefixHeader.h").exists()
+        getLibrarySources(path).each { it.writeToDir(file("src/hello")) }
+        getCommonHeader(path).writeToDir(file("src/hello"))
+        assert file("src/hello/headers/${path}common.h").exists()
@@ -368 +363 @@
-        app.getAlternateLibrarySources(path).find { it.name == "hello.${app.sourceExtension}" }.writeToDir(file("src/hello"))
+        getAlternateLibrarySources(path).find { it.name == "hello.${app.sourceExtension}" }.writeToDir(file("src/hello"))
@@ -431,0 +427,36 @@
+    List<SourceFile> getLibrarySources(String headerPath) {
+        updateCommonHeaderPath(app.getLibrarySources(), headerPath)
+    }
+
+    List<SourceFile> getAlternateLibrarySources(String headerPath) {
+        updateCommonHeaderPath(app.getAlternateLibrarySources(), headerPath)
+    }
+
+    SourceFile getCommonHeader(String path) {
+        updateSourceFilePath(app.getCommonHeader(), path)
+    }
+
+    SourceFile getAlternateLibraryHeader() {
+        modifySourceFile(app.getLibraryHeader(), "compiling hello.h", "compiling althello.h")
+    }
+
+    SourceFile getLibraryWithoutPCH() {
+        def original = app.getLibrarySources().find { it.name == "sum.${app.sourceExtension}" }
+        modifySourceFile(original, "include \"common.h\"", "include \"hello.h\"")
+    }
+
+    static List<SourceFile> updateCommonHeaderPath(List<SourceFile> sourceFiles, String headerPath) {
+        return sourceFiles.collect {
+            def newContent = it.content.replaceAll("#include \"common.h\"", "#include \"${headerPath}common.h\"")
+            new SourceFile(it.path, it.name, newContent)
+        }
+    }
+
+    static SourceFile modifySourceFile(SourceFile sourceFile, String text, String replacement) {
+        new SourceFile(sourceFile.path, sourceFile.name, sourceFile.content.replaceAll(text, replacement))
+    }
+
+    static SourceFile updateSourceFilePath(SourceFile sourceFile, String path) {
+        new SourceFile("${sourceFile.path}/${path}", sourceFile.name, sourceFile.content)
+    }
+
diff --git a/subprojects/language-native/src/integTest/groovy/org/gradle/language/c/CLanguageIntegrationTest.groovy b/subprojects/language-native/src/integTest/groovy/org/gradle/language/c/CLanguageIntegrationTest.groovy
index b00d082..71243f8 100755
--- a/subprojects/language-native/src/integTest/groovy/org/gradle/language/c/CLanguageIntegrationTest.groovy
+++ b/subprojects/language-native/src/integTest/groovy/org/gradle/language/c/CLanguageIntegrationTest.groovy
@@ -52 +52 @@
-        helloWorldApp.getLibraryHeader().writeToDir(file("src/shared"))
+        helloWorldApp.library.headerFiles.each { it.writeToDir(file("src/shared")) }
diff --git a/subprojects/language-native/src/integTest/groovy/org/gradle/language/c/CPreCompiledHeaderSourcesIntegrationTest.groovy b/subprojects/language-native/src/integTest/groovy/org/gradle/language/c/CPreCompiledHeaderSourcesIntegrationTest.groovy
index 3b6da67..6acdcde 100644
--- a/subprojects/language-native/src/integTest/groovy/org/gradle/language/c/CPreCompiledHeaderSourcesIntegrationTest.groovy
+++ b/subprojects/language-native/src/integTest/groovy/org/gradle/language/c/CPreCompiledHeaderSourcesIntegrationTest.groovy
@@ -19,2 +19,2 @@
-import org.gradle.nativeplatform.fixtures.app.CPCHHelloWorldApp
-import org.gradle.nativeplatform.fixtures.app.PCHHelloWorldApp
+import org.gradle.nativeplatform.fixtures.app.CHelloWorldApp
+import org.gradle.nativeplatform.fixtures.app.IncrementalHelloWorldApp
@@ -25,2 +25,2 @@
-    PCHHelloWorldApp getApp() {
-        return new CPCHHelloWorldApp()
+    IncrementalHelloWorldApp getApp() {
+        return new CHelloWorldApp()
diff --git a/subprojects/language-native/src/integTest/groovy/org/gradle/language/cpp/CppLanguageIntegrationTest.groovy b/subprojects/language-native/src/integTest/groovy/org/gradle/language/cpp/CppLanguageIntegrationTest.groovy
index fd5b17e..b5d1a38 100755
--- a/subprojects/language-native/src/integTest/groovy/org/gradle/language/cpp/CppLanguageIntegrationTest.groovy
+++ b/subprojects/language-native/src/integTest/groovy/org/gradle/language/cpp/CppLanguageIntegrationTest.groovy
@@ -77 +77 @@
-        helloWorldApp.getLibraryHeader().writeToDir(file("src/shared"))
+        helloWorldApp.library.headerFiles.each { it.writeToDir(file("src/shared")) }
diff --git a/subprojects/language-native/src/integTest/groovy/org/gradle/language/cpp/CppPreCompiledHeaderSourcesIntegrationTest.groovy b/subprojects/language-native/src/integTest/groovy/org/gradle/language/cpp/CppPreCompiledHeaderSourcesIntegrationTest.groovy
index 2e99012..0357c19 100644
--- a/subprojects/language-native/src/integTest/groovy/org/gradle/language/cpp/CppPreCompiledHeaderSourcesIntegrationTest.groovy
+++ b/subprojects/language-native/src/integTest/groovy/org/gradle/language/cpp/CppPreCompiledHeaderSourcesIntegrationTest.groovy
@@ -19,2 +19,2 @@
-import org.gradle.nativeplatform.fixtures.app.CppPCHHelloWorldApp
-import org.gradle.nativeplatform.fixtures.app.PCHHelloWorldApp
+import org.gradle.nativeplatform.fixtures.app.CppHelloWorldApp
+import org.gradle.nativeplatform.fixtures.app.IncrementalHelloWorldApp
@@ -25,2 +25,2 @@
-    PCHHelloWorldApp getApp() {
-        return new CppPCHHelloWorldApp()
+    IncrementalHelloWorldApp getApp() {
+        return new CppHelloWorldApp()
diff --git a/subprojects/language-native/src/integTest/groovy/org/gradle/language/objectivec/ObjectiveCPreCompiledHeaderSourcesIntegrationTest.groovy b/subprojects/language-native/src/integTest/groovy/org/gradle/language/objectivec/ObjectiveCPreCompiledHeaderSourcesIntegrationTest.groovy
index 97752c0..bdf33e5 100644
--- a/subprojects/language-native/src/integTest/groovy/org/gradle/language/objectivec/ObjectiveCPreCompiledHeaderSourcesIntegrationTest.groovy
+++ b/subprojects/language-native/src/integTest/groovy/org/gradle/language/objectivec/ObjectiveCPreCompiledHeaderSourcesIntegrationTest.groovy
@@ -19,2 +19,2 @@
-import org.gradle.nativeplatform.fixtures.app.ObjectiveCPCHHelloWorldApp
-import org.gradle.nativeplatform.fixtures.app.PCHHelloWorldApp
+import org.gradle.nativeplatform.fixtures.app.IncrementalHelloWorldApp
+import org.gradle.nativeplatform.fixtures.app.ObjectiveCHelloWorldApp
@@ -28,2 +28,2 @@
-    PCHHelloWorldApp getApp() {
-        return new ObjectiveCPCHHelloWorldApp()
+    IncrementalHelloWorldApp getApp() {
+        return new ObjectiveCHelloWorldApp()
diff --git a/subprojects/language-native/src/integTest/groovy/org/gradle/language/objectivecpp/ObjectiveCppPreCompiledHeaderSourcesIntegrationTest.groovy b/subprojects/language-native/src/integTest/groovy/org/gradle/language/objectivecpp/ObjectiveCppPreCompiledHeaderSourcesIntegrationTest.groovy
index 6ea1866..4bfc883 100644
--- a/subprojects/language-native/src/integTest/groovy/org/gradle/language/objectivecpp/ObjectiveCppPreCompiledHeaderSourcesIntegrationTest.groovy
+++ b/subprojects/language-native/src/integTest/groovy/org/gradle/language/objectivecpp/ObjectiveCppPreCompiledHeaderSourcesIntegrationTest.groovy
@@ -19,2 +19,2 @@
-import org.gradle.nativeplatform.fixtures.app.ObjectiveCppPCHHelloWorldApp
-import org.gradle.nativeplatform.fixtures.app.PCHHelloWorldApp
+import org.gradle.nativeplatform.fixtures.app.IncrementalHelloWorldApp
+import org.gradle.nativeplatform.fixtures.app.ObjectiveCppHelloWorldApp
@@ -28,2 +28,2 @@
-    PCHHelloWorldApp getApp() {
-        return new ObjectiveCppPCHHelloWorldApp()
+    IncrementalHelloWorldApp getApp() {
+        return new ObjectiveCppHelloWorldApp()
diff --git a/subprojects/platform-native/src/integTest/groovy/org/gradle/nativeplatform/sourceset/GeneratedSourcesIntegrationTest.groovy b/subprojects/platform-native/src/integTest/groovy/org/gradle/nativeplatform/sourceset/GeneratedSourcesIntegrationTest.groovy
index d72314c..67d14c9 100755
--- a/subprojects/platform-native/src/integTest/groovy/org/gradle/nativeplatform/sourceset/GeneratedSourcesIntegrationTest.groovy
+++ b/subprojects/platform-native/src/integTest/groovy/org/gradle/nativeplatform/sourceset/GeneratedSourcesIntegrationTest.groovy
@@ -448 +448 @@
-        projectFile.headerFiles == [ "build/src/generated/headers/hello.h" ]
+        projectFile.headerFiles.sort() == [ "build/src/generated/headers/common.h", "build/src/generated/headers/hello.h" ]
diff --git a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CHelloWorldApp.groovy b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CHelloWorldApp.groovy
index 4796cda..ac8d8cc 100644
--- a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CHelloWorldApp.groovy
+++ b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CHelloWorldApp.groovy
@@ -40,0 +41,2 @@
+            #ifndef HELLO_H
+            #define HELLO_H
@@ -48,0 +51,8 @@
+
+            #ifdef FRENCH
+            #pragma message("<==== compiling bonjour.h ====>")
+            #else
+            #pragma message("<==== compiling hello.h ====>")
+            #endif
+
+            #endif
@@ -49,0 +60,11 @@
+    }
+
+    @Override
+    def SourceFile getCommonHeader() {
+        sourceFile("headers", "common.h", """
+            #ifndef COMMON_H
+            #define COMMON_H
+            #include "hello.h"
+            #include <stdio.h>
+            #endif
+        """)
@@ -54,2 +75 @@
-            #include <stdio.h>
-            #include "hello.h"
+            #include "common.h"
@@ -77 +97 @@
-            #include "hello.h"
+            #include "common.h"
@@ -101,2 +121 @@
-                #include <stdio.h>
-                #include "hello.h"
+                #include "common.h"
@@ -115 +134 @@
-                #include "hello.h"
+                #include "common.h"
diff --git a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CPCHHelloWorldApp.groovy b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CPCHHelloWorldApp.groovy
deleted file mode 100644
index 132c261..0000000
--- a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CPCHHelloWorldApp.groovy
+++ /dev/null
@@ -1,191 +0,0 @@
-/*
- * Copyright 2015 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.nativeplatform.fixtures.app
-
-import org.gradle.integtests.fixtures.SourceFile
-
-class CPCHHelloWorldApp extends PCHHelloWorldApp {
-
-    @Override
-    SourceFile getMainSource() {
-        sourceFile("c", "main.c", """
-            // Simple hello world app
-            #include <stdio.h>
-            #include "hello.h"
-
-            int main () {
-                sayHello();
-                printf("%d", sum(5, 7));
-                return 0;
-            }
-        """);
-    }
-
-    @Override
-    SourceFile getLibraryHeader() {
-        sourceFile("headers", "hello.h", """
-            #ifndef HELLO_H
-            #define HELLO_H
-            #ifdef _WIN32
-            #define DLL_FUNC __declspec(dllexport)
-            #else
-            #define DLL_FUNC
-            #endif
-
-            void DLL_FUNC sayHello();
-            int DLL_FUNC sum(int a, int b);
-
-            #ifdef FRENCH
-            #pragma message("<==== compiling bonjour.h ====>")
-            #else
-            #pragma message("<==== compiling hello.h ====>")
-            #endif
-            #endif
-        """);
-    }
-
-    @Override
-    SourceFile getLibraryWithoutPCH() {
-        return sourceFile("c", "sum2.c", """
-            #include "hello.h"
-
-            int DLL_FUNC sum2(int a, int b) {
-                return sum(a, b);
-            }
-        """)
-    }
-
-    @Override
-    public TestApp getAlternate() {
-        return new TestApp() {
-            @Override
-            SourceFile getMainSource() {
-                return getAlternateMainSource()
-            }
-
-            @Override
-            SourceFile getLibraryHeader() {
-                return sourceFile("headers", "hello.h", """
-                    #ifndef HELLO_H
-                    #define HELLO_H
-                    #ifdef _WIN32
-                    #define DLL_FUNC __declspec(dllexport)
-                    #else
-                    #define DLL_FUNC
-                    #endif
-
-                    void DLL_FUNC sayHello();
-                    int DLL_FUNC sum(int a, int b);
-
-                    #pragma message("<==== compiling althello.h ====>")
-                    #endif
-                """);
-            }
-
-            @Override
-            List<SourceFile> getLibrarySources() {
-                return getAlternateLibrarySources()
-            }
-        }
-    }
-
-    @Override
-    List<SourceFile> getLibrarySources() {
-        return getLibrarySources("")
-    }
-
-    @Override
-    List<SourceFile> getLibrarySources(String headerPath) {
-        return [
-                sourceFile("c", "hello.c", """
-                    #include "${headerPath}prefixHeader.h"
-
-                    #ifdef FRENCH
-                    char* greeting() {
-                        return "${HELLO_WORLD_FRENCH}";
-                    }
-                    #endif
-                    #ifdef CUSTOM
-                    char* greeting() {
-                        return CUSTOM;
-                    }
-                    #endif
-                    void DLL_FUNC sayHello() {
-                        #if defined(FRENCH) || defined(CUSTOM)
-                        printf("%s\\n", greeting());
-                        #else
-                        printf("${HELLO_WORLD}\\n");
-                        #endif
-                        fflush(stdout);
-                    }
-                """),
-                sourceFile("c", "sum.c", """
-                    #include "${headerPath}prefixHeader.h"
-
-                    int DLL_FUNC sum(int a, int b) {
-                        return a + b;
-                    }
-                """)
-        ]
-    }
-
-    @Override
-    String getIOHeader() {
-        return "stdio.h"
-    }
-
-    @Override
-    SourceFile getAlternateMainSource() {
-        return getMainSource()
-    }
-
-    @Override
-    String getAlternateOutput() {
-        return null
-    }
-
-    @Override
-    List<SourceFile> getAlternateLibrarySources() {
-        getAlternateLibrarySources("")
-    }
-
-    List<SourceFile> getAlternateLibrarySources(String headerPath) {
-        return [
-                sourceFile("c", "hello.c", """
-                    #include "${headerPath}prefixHeader.h"
-
-                    void DLL_FUNC sayHello() {
-                        printf("[${HELLO_WORLD} - ${HELLO_WORLD_FRENCH}]\\n");
-                        fflush(stdout);
-                    }
-
-                """),
-                sourceFile("c", "sum.c","""
-                    #include "${headerPath}prefixHeader.h"
-
-                    int DLL_FUNC sum(int a, int b) {
-                        return a + b;
-                    }
-                """)
-        ]
-    }
-
-    @Override
-    String getAlternateLibraryOutput() {
-        return null
-    }
-}
diff --git a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CommonHeaderHelloWorldApp.groovy b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CommonHeaderHelloWorldApp.groovy
new file mode 100644
index 0000000..6a2f101
--- /dev/null
+++ b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CommonHeaderHelloWorldApp.groovy
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2015 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gradle.nativeplatform.fixtures.app
+
+import org.gradle.integtests.fixtures.SourceFile
+
+
+abstract class CommonHeaderHelloWorldApp extends HelloWorldApp {
+    public abstract SourceFile getCommonHeader();
+
+    @Override
+    public TestNativeComponent getLibrary() {
+        return new TestNativeComponent() {
+            @Override
+            public List<SourceFile> getSourceFiles() {
+                return getLibrarySources();
+            }
+
+            @Override
+            public List<SourceFile> getHeaderFiles() {
+                return Arrays.asList(getLibraryHeader(), getCommonHeader());
+            }
+        };
+    }
+}
diff --git a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CppHelloWorldApp.groovy b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CppHelloWorldApp.groovy
index daff0ce..74a2be6 100644
--- a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CppHelloWorldApp.groovy
+++ b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CppHelloWorldApp.groovy
@@ -55,0 +56,2 @@
+            #ifndef HELLO_H
+            #define HELLO_H
@@ -67,0 +70,8 @@
+
+            #ifdef FRENCH
+            #pragma message("<==== compiling bonjour.h ====>")
+            #else
+            #pragma message("<==== compiling hello.h ====>")
+            #endif
+
+            #endif
@@ -68,0 +79,11 @@
+    }
+
+    @Override
+    def SourceFile getCommonHeader() {
+        sourceFile("headers", "common.h", """
+            #ifndef COMMON_H
+            #define COMMON_H
+            #include "hello.h"
+            #include <iostream>
+            #endif
+        """)
@@ -73,2 +94 @@
-            #include <iostream>
-            #include "hello.h"
+            #include "common.h"
@@ -91 +111 @@
-            #include "hello.h"
+            #include "common.h"
@@ -101,2 +121 @@
-            #include <iostream>
-            #include "hello.h"
+            #include "common.h"
@@ -114 +133 @@
-            #include "hello.h"
+            #include "common.h"
diff --git a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CppPCHHelloWorldApp.groovy b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CppPCHHelloWorldApp.groovy
deleted file mode 100644
index c59a45d..0000000
--- a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/CppPCHHelloWorldApp.groovy
+++ /dev/null
@@ -1,196 +0,0 @@
-/*
- * Copyright 2015 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.nativeplatform.fixtures.app
-
-import org.gradle.integtests.fixtures.SourceFile
-
-class CppPCHHelloWorldApp extends PCHHelloWorldApp {
-    @Override
-    SourceFile getMainSource() {
-        return sourceFile("cpp", "main.cpp", """
-            // Simple hello world app
-            #include <iostream>
-            #include "hello.h"
-
-            int main () {
-              Greeter greeter;
-              greeter.sayHello();
-              std::cout << sum(5, 7);
-              return 0;
-            }
-        """);
-    }
-
-    @Override
-    SourceFile getLibraryHeader() {
-        return sourceFile("headers", "hello.h", """
-            #ifndef HELLO_H
-            #define HELLO_H
-            #ifdef _WIN32
-            #define DLL_FUNC __declspec(dllexport)
-            #else
-            #define DLL_FUNC
-            #endif
-
-            class Greeter {
-                public:
-                void DLL_FUNC sayHello();
-            };
-
-            int DLL_FUNC sum(int a, int b);
-            #ifdef FRENCH
-            #pragma message("<==== compiling bonjour.h ====>")
-            #else
-            #pragma message("<==== compiling hello.h ====>")
-            #endif
-            #endif
-        """);
-    }
-
-    @Override
-    SourceFile getLibraryWithoutPCH() {
-        return sourceFile("cpp", "sum2.cpp", """
-            #include "hello.h"
-
-            int DLL_FUNC sum2(int a, int b) {
-                return sum(a, b);
-            }
-        """)
-    }
-
-    @Override
-    TestApp getAlternate() {
-        return new TestApp() {
-            @Override
-            SourceFile getMainSource() {
-                return getAlternateMainSource()
-            }
-
-            @Override
-            SourceFile getLibraryHeader() {
-                return sourceFile("headers", "hello.h", """
-                    #ifndef HELLO_H
-                    #define HELLO_H
-                    #ifdef _WIN32
-                    #define DLL_FUNC __declspec(dllexport)
-                    #else
-                    #define DLL_FUNC
-                    #endif
-
-                    class Greeter {
-                        public:
-                        void DLL_FUNC sayHello();
-                    };
-
-                    int DLL_FUNC sum(int a, int b);
-                    #pragma message("<==== compiling althello.h ====>")
-                    #endif
-                """);
-            }
-
-            @Override
-            List<SourceFile> getLibrarySources() {
-                return getAlternateLibrarySources()
-            }
-        }
-    }
-
-    @Override
-    List<SourceFile> getLibrarySources() {
-        return getLibrarySources("")
-    }
-
-    @Override
-    List<SourceFile> getLibrarySources(String path) {
-        return [
-                sourceFile("cpp", "hello.cpp", """
-                    #include "${path}prefixHeader.h"
-
-                    #ifdef FRENCH
-                    const char* greeting() {
-                        return "${HELLO_WORLD_FRENCH}";
-                    }
-                    #endif
-
-                    void DLL_FUNC Greeter::sayHello() {
-                        #ifdef FRENCH
-                        std::cout << greeting() << std::endl;
-                        #else
-                        std::cout << "${HELLO_WORLD}" << std::endl;
-                        #endif
-                    }
-                """),
-                sourceFile("cpp", "sum.cpp", """
-                    #include "${path}prefixHeader.h"
-
-                    int DLL_FUNC sum(int a, int b) {
-                        return a + b;
-                    }
-                """)
-        ]
-    }
-
-    @Override
-    String getIOHeader() {
-        return "iostream"
-    }
-
-    @Override
-    SourceFile getAlternateMainSource() {
-        return getMainSource()
-    }
-
-    @Override
-    String getAlternateOutput() {
-        return null
-    }
-
-    @Override
-    List<SourceFile> getAlternateLibrarySources() {
-        return getAlternateLibrarySources("")
-    }
-
-    @Override
-    List<SourceFile> getAlternateLibrarySources(String path) {
-        return [
-                sourceFile("cpp", "hello.cpp", """
-                    #include "${path}prefixHeader.h"
-
-                    void DLL_FUNC Greeter::sayHello() {
-                        std::cout << "[${HELLO_WORLD} - ${HELLO_WORLD_FRENCH}]" << std::endl;
-                    }
-
-                    // Extra function to ensure library has different size
-                    int anotherFunction() {
-                        return 1000;
-                    }
-                """),
-                sourceFile("cpp", "sum.cpp", """
-                    #include "${path}prefixHeader.h"
-
-                    int DLL_FUNC sum(int a, int b) {
-                        return a + b;
-                    }
-                """)
-        ]
-    }
-
-    @Override
-    String getAlternateLibraryOutput() {
-        return null
-    }
-}
diff --git a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/IncrementalHelloWorldApp.java b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/IncrementalHelloWorldApp.java
index b9e0c42..887400e 100644
--- a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/IncrementalHelloWorldApp.java
+++ b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/IncrementalHelloWorldApp.java
@@ -23 +23 @@
-public abstract class IncrementalHelloWorldApp extends HelloWorldApp {
+public abstract class IncrementalHelloWorldApp extends CommonHeaderHelloWorldApp {
diff --git a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCHelloWorldApp.groovy b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCHelloWorldApp.groovy
index 98e4cdd..65ca7d3 100644
--- a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCHelloWorldApp.groovy
+++ b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCHelloWorldApp.groovy
@@ -59,0 +60,2 @@
+            #ifndef HELLO_H
+            #define HELLO_H
@@ -66,0 +69,8 @@
+
+            #ifdef FRENCH
+            #pragma message("<==== compiling bonjour.h ====>")
+            #else
+            #pragma message("<==== compiling hello.h ====>")
+            #endif
+
+            #endif
@@ -67,0 +78,11 @@
+    }
+
+    @Override
+    def SourceFile getCommonHeader() {
+        sourceFile("headers", "common.h", """
+            #ifndef COMMON_H
+            #define COMMON_H
+            #include "hello.h"
+            #include <stdio.h>
+            #endif
+        """)
@@ -74 +95 @@
-            #import "hello.h"
+            #include "common.h"
@@ -87 +108 @@
-            #import "hello.h"
+            #include "common.h"
@@ -100 +121 @@
-            #import "hello.h"
+            #include "common.h"
@@ -115 +136 @@
-            #import "hello.h"
+            #include "common.h"
@@ -117 +138 @@
-            int sum (int a, int b)
+            int sum(int a, int b)
diff --git a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCPCHHelloWorldApp.groovy b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCPCHHelloWorldApp.groovy
deleted file mode 100644
index 00fcdec..0000000
--- a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCPCHHelloWorldApp.groovy
+++ /dev/null
@@ -1,208 +0,0 @@
-/*
- * Copyright 2015 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.nativeplatform.fixtures.app
-
-import org.gradle.integtests.fixtures.SourceFile
-
-class ObjectiveCPCHHelloWorldApp extends PCHHelloWorldApp {
-
-    @Override
-    SourceFile getMainSource() {
-        return sourceFile("objc", "main.m", """
-            // Simple hello world app
-            #include "hello.h"
-
-            int main(int argc, const char * argv[])
-            {
-                Greeter* greeter = [Greeter new];
-                [greeter sayHello];
-                [greeter release];
-                printf("%d", sum(7, 5));
-                return 0;
-            }
-        """);
-    }
-
-    @Override
-    SourceFile getLibraryHeader() {
-        return sourceFile("headers", "hello.h", """
-            #ifndef HELLO_H
-            #define HELLO_H
-            #import <Foundation/Foundation.h>
-
-            @interface Greeter : NSObject
-                - (void)sayHello;
-            @end
-
-            int sum(int a, int b);
-
-            #ifdef FRENCH
-            #pragma message("<==== compiling bonjour.h ====>")
-            #else
-            #pragma message("<==== compiling hello.h ====>")
-            #endif
-            #endif
-        """);
-    }
-
-    @Override
-    SourceFile getLibraryWithoutPCH() {
-        return sourceFile("objc", "sum2.m", """
-            #import "hello.h"
-
-            int sum2 (int a, int b)
-            {
-                return sum(a, b);
-            }
-        """)
-    }
-
-    @Override
-    TestApp getAlternate() {
-        return new TestApp() {
-            @Override
-            SourceFile getMainSource() {
-                return getAlternateMainSource()
-            }
-
-            @Override
-            SourceFile getLibraryHeader() {
-                return sourceFile("headers", "hello.h", """
-                #ifndef HELLO_H
-                #define HELLO_H
-                #import <Foundation/Foundation.h>
-
-                @interface Greeter : NSObject
-                    - (void)sayHello;
-                @end
-
-                int sum(int a, int b);
-
-                #pragma message("<==== compiling althello.h ====>")
-                #endif
-            """);
-            }
-
-            @Override
-            List<SourceFile> getLibrarySources() {
-                return getAlternateLibrarySources()
-            }
-        }
-    }
-
-    @Override
-    List<SourceFile> getLibrarySources() {
-        return getLibrarySources("")
-    }
-
-    @Override
-    List<SourceFile> getLibrarySources(String path) {
-        return [
-                sourceFile("objc", "hello.m", """
-            #import "${path}prefixHeader.h"
-
-            @implementation Greeter
-            - (void) sayHello {
-                NSString *helloWorld = @"${HELLO_WORLD}";
-                #ifdef FRENCH
-                helloWorld = @"${HELLO_WORLD_FRENCH}";
-                #endif
-                fprintf(stdout, "%s\\n", [helloWorld UTF8String]);
-            }
-            @end
-        """),
-                sourceFile("objc", "sum.m", """
-            #import "${path}prefixHeader.h"
-
-            int sum (int a, int b)
-            {
-                return a + b;
-            }
-        """)]
-    }
-
-    @Override
-    String getIOHeader() {
-        return "stdio.h"
-    }
-
-    @Override
-    SourceFile getAlternateMainSource() {
-        return getMainSource()
-    }
-
-    @Override
-    String getAlternateOutput() {
-        return null
-    }
-
-    @Override
-    List<SourceFile> getAlternateLibrarySources() {
-        return getAlternateLibrarySources("")
-    }
-
-    @Override
-    String getAlternateLibraryOutput() {
-        return null
-    }
-
-    @Override
-    List<SourceFile> getAlternateLibrarySources(String path) {
-        return [
-                sourceFile("objc", "hello.m", """
-            #import "${path}prefixHeader.h"
-
-            @implementation Greeter
-            - (void) sayHello {
-                NSString *helloWorld = @"${HELLO_WORLD} - ${HELLO_WORLD_FRENCH}";
-                fprintf(stdout, "%s\\n", [helloWorld UTF8String]);
-            }
-            @end
-
-            // Extra function to ensure library has different size
-            int anotherFunction() {
-                return 1000;
-            }
-        """),
-                sourceFile("objc", "sum.m", """
-            #import "${path}prefixHeader.h"
-
-            int sum (int a, int b)
-            {
-                return a + b;
-            }
-        """)]
-    }
-
-    public String getExtraConfiguration(String binaryName = null) {
-        return """
-            binaries.matching { ${binaryName ? "it.name == '$binaryName'" : "true"} }.all {
-                if (targetPlatform.operatingSystem.macOsX) {
-                    linker.args "-framework", "Foundation"
-                } else {
-                    objcCompiler.args "-I/usr/include/GNUstep", "-I/usr/local/include/objc", "-fconstant-string-class=NSConstantString", "-D_NATIVE_OBJC_EXCEPTIONS"
-                    linker.args "-lgnustep-base", "-lobjc"
-                }
-            }
-        """
-    }
-
-    @Override
-    List<String> getPluginList() {
-        ['objective-c']
-    }
-}
diff --git a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCppHelloWorldApp.groovy b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCppHelloWorldApp.groovy
index dc55678..2b644aa 100644
--- a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCppHelloWorldApp.groovy
+++ b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCppHelloWorldApp.groovy
@@ -42,0 +43,2 @@
+            #ifndef HELLO_H
+            #define HELLO_H
@@ -50,0 +53,8 @@
+
+            #ifdef FRENCH
+            #pragma message("<==== compiling bonjour.h ====>")
+            #else
+            #pragma message("<==== compiling hello.h ====>")
+            #endif
+
+            #endif
@@ -51,0 +62,11 @@
+    }
+
+    @Override
+    def SourceFile getCommonHeader() {
+        sourceFile("headers", "common.h", """
+            #ifndef COMMON_H
+            #define COMMON_H
+            #include "hello.h"
+            #include <iostream>
+            #endif
+        """)
@@ -56,0 +78 @@
+            #include "common.h"
@@ -58 +79,0 @@
-            #include "hello.h"
@@ -81 +102 @@
-            #include "hello.h"
+            #include "common.h"
@@ -113,0 +135 @@
+            #include "common.h"
@@ -116 +137,0 @@
-            #include "hello.h"
@@ -123 +144 @@
-            #include "hello.h"
+            #include "common.h"
diff --git a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCppPCHHelloWorldApp.groovy b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCppPCHHelloWorldApp.groovy
deleted file mode 100644
index 60a96a0..0000000
--- a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/ObjectiveCppPCHHelloWorldApp.groovy
+++ /dev/null
@@ -1,196 +0,0 @@
-/*
- * Copyright 2015 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.nativeplatform.fixtures.app
-
-import org.gradle.integtests.fixtures.SourceFile
-
-class ObjectiveCppPCHHelloWorldApp extends PCHHelloWorldApp {
-    @Override
-    SourceFile getMainSource() {
-        return sourceFile("objcpp", "main.mm", """
-            // Simple hello world app
-            #define __STDC_LIMIT_MACROS
-            #include <stdint.h>
-            #import <Foundation/Foundation.h>
-            #include "hello.h"
-
-            int main (int argc, const char * argv[])
-            {
-                sayHello();
-                printf("%d", sum(7, 5));
-                return 0;
-            }
-        """);
-    }
-
-    @Override
-    SourceFile getLibraryHeader() {
-        return sourceFile("headers", "hello.h", """
-            #ifndef HELLO_H
-            #define HELLO_H
-            void sayHello();
-            int sum(int a, int b);
-            #ifdef FRENCH
-            #pragma message("<==== compiling bonjour.h ====>")
-            #else
-            #pragma message("<==== compiling hello.h ====>")
-            #endif
-            #endif
-        """);
-    }
-
-    @Override
-    SourceFile getLibraryWithoutPCH() {
-        return sourceFile("objcpp", "sum2.mm", """
-            #include "hello.h"
-            int sum2(int a, int b) {
-                return sum(a, b);
-            }
-        """)
-    }
-
-    @Override
-    TestApp getAlternate() {
-        return new TestApp() {
-            @Override
-            SourceFile getMainSource() {
-                return getAlternateMainSource()
-            }
-
-            @Override
-            SourceFile getLibraryHeader() {
-                return sourceFile("headers", "hello.h", """
-                    #ifndef HELLO_H
-                    #define HELLO_H
-                    void sayHello();
-                    int sum(int a, int b);
-
-                    #pragma message("<==== compiling althello.h ====>")
-                    #endif
-                """);
-            }
-
-            @Override
-            List<SourceFile> getLibrarySources() {
-                return getAlternateLibrarySources()
-            }
-        }
-    }
-
-    @Override
-    List<SourceFile> getLibrarySources() {
-        return getLibrarySources("")
-    }
-
-    @Override
-    List<SourceFile> getLibrarySources(String path) {
-        return [
-                sourceFile("objcpp", "hello.mm", """
-                    #define __STDC_LIMIT_MACROS
-                    #include "${path}prefixHeader.h"
-                    #include <stdint.h>
-                    #import <Foundation/Foundation.h>
-
-                    #ifdef FRENCH
-                    const char* greeting() {
-                        return "${HELLO_WORLD_FRENCH}";
-                    }
-                    #endif
-
-                    void sayHello() {
-                        #ifdef FRENCH
-                        std::cout << greeting() << std::endl;
-                        #else
-                        NSString *helloWorld = @"${HELLO_WORLD}\\n";
-                        NSFileHandle *stdout = [NSFileHandle fileHandleWithStandardOutput];
-                        NSData *strData = [helloWorld dataUsingEncoding: NSASCIIStringEncoding];
-                        [stdout writeData: strData];
-                        #endif
-                    }
-                """),
-                sourceFile("objcpp", "sum.mm", """
-                    #include "${path}prefixHeader.h"
-                    int sum(int a, int b) {
-                        return a + b;
-                    }
-                """)
-        ]
-    }
-
-    @Override
-    String getIOHeader() {
-        return "iostream"
-    }
-
-    @Override
-    SourceFile getAlternateMainSource() {
-        return getMainSource()
-    }
-
-    @Override
-    String getAlternateOutput() {
-        return null
-    }
-
-    @Override
-    List<SourceFile> getAlternateLibrarySources() {
-        return getAlternateLibrarySources("")
-    }
-
-    @Override
-    String getAlternateLibraryOutput() {
-        return null
-    }
-
-    @Override
-    List<SourceFile> getAlternateLibrarySources(String path) {
-        return [
-                sourceFile("objcpp", "hello.mm", """
-            #define __STDC_LIMIT_MACROS
-            #include "${path}prefixHeader.h"
-            #include <stdint.h>
-
-            void sayHello() {
-                std::cout << "${HELLO_WORLD} - ${HELLO_WORLD_FRENCH}" << std::endl;
-            }
-        """),
-                sourceFile("objcpp", "sum.mm", """
-            #include "${path}prefixHeader.h"
-            int sum(int a, int b) {
-                return a + b;
-            }
-        """)]
-    }
-
-    public String getExtraConfiguration(String binaryName = null) {
-        return """
-            binaries.matching { ${binaryName ? "it.name == '$binaryName'" : "true"} }.all {
-                if (targetPlatform.operatingSystem.macOsX) {
-                    linker.args "-framework", "Foundation"
-                } else {
-                    objcppCompiler.args "-I/usr/include/GNUstep", "-I/usr/local/include/objc", "-fconstant-string-class=NSConstantString", "-D_NATIVE_OBJC_EXCEPTIONS"
-                    linker.args "-lgnustep-base", "-lobjc"
-                }
-            }
-        """
-    }
-
-    @Override
-    List<String> getPluginList() {
-        ['objective-cpp']
-    }
-}
diff --git a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/PCHHelloWorldApp.groovy b/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/PCHHelloWorldApp.groovy
deleted file mode 100644
index a87f5ac..0000000
--- a/subprojects/platform-native/src/testFixtures/groovy/org/gradle/nativeplatform/fixtures/app/PCHHelloWorldApp.groovy
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright 2015 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.nativeplatform.fixtures.app
-
-import org.gradle.integtests.fixtures.SourceFile
-
-abstract class PCHHelloWorldApp extends IncrementalHelloWorldApp {
-    abstract List<SourceFile> getLibrarySources(String path)
-    abstract List<SourceFile> getAlternateLibrarySources(String path)
-    abstract SourceFile getLibraryWithoutPCH()
-    abstract String getIOHeader()
-
-    public SourceFile getBrokenFile() {
-        return null
-    }
-
-    public SourceFile getPrefixHeaderFile(String path, String... headers) {
-        return sourceFile("headers/${path}", "prefixHeader.h", """
-            #ifndef PREFIX_HEADER_H
-            ${includeAll(headers)}
-            #endif
-        """)
-    }
-
-    private static String includeAll(String... headers) {
-        headers.collect { header ->
-            if (header.startsWith("<")) {
-                return "#include ${header}"
-            } else {
-                return "#include \"${header}\""
-            }
-        }.join("\n")
-    }
-
-    @Override
-    List<SourceFile> getHeaderFiles() {
-        def headerFiles = super.getHeaderFiles()
-        headerFiles.add(getPrefixHeaderFile("", "prefixheader.h"))
-        return headerFiles
-    }
-}
diff --git a/subprojects/testing-native/src/integTest/groovy/org/gradle/nativeplatform/test/cunit/CUnitIntegrationTest.groovy b/subprojects/testing-native/src/integTest/groovy/org/gradle/nativeplatform/test/cunit/CUnitIntegrationTest.groovy
index a74bdf0..8a06674 100755
--- a/subprojects/testing-native/src/integTest/groovy/org/gradle/nativeplatform/test/cunit/CUnitIntegrationTest.groovy
+++ b/subprojects/testing-native/src/integTest/groovy/org/gradle/nativeplatform/test/cunit/CUnitIntegrationTest.groovy
@@ -416,0 +417 @@
+                "src/hello/headers/common.h",
diff --git a/subprojects/testing-native/src/integTest/groovy/org/gradle/nativeplatform/test/googletest/GoogleTestIntegrationTest.groovy b/subprojects/testing-native/src/integTest/groovy/org/gradle/nativeplatform/test/googletest/GoogleTestIntegrationTest.groovy
index 0ef7952..bfea5c7 100755
--- a/subprojects/testing-native/src/integTest/groovy/org/gradle/nativeplatform/test/googletest/GoogleTestIntegrationTest.groovy
+++ b/subprojects/testing-native/src/integTest/groovy/org/gradle/nativeplatform/test/googletest/GoogleTestIntegrationTest.groovy
@@ -386,0 +387 @@
+                "src/hello/headers/common.h",

