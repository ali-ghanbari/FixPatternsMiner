diff --git a/sonar-application/src/main/java/org/sonar/application/EmbeddedTomcat.java b/sonar-application/src/main/java/org/sonar/application/EmbeddedTomcat.java
index db22f41..44679ab 100644
--- a/sonar-application/src/main/java/org/sonar/application/EmbeddedTomcat.java
+++ b/sonar-application/src/main/java/org/sonar/application/EmbeddedTomcat.java
@@ -49,0 +50,2 @@
+    System.setProperty("org.apache.catalina.startup.EXIT_ON_INIT_FAILURE", "true");
+
diff --git a/sonar-application/src/test/java/org/sonar/application/ConnectorsTest.java b/sonar-application/src/test/java/org/sonar/application/ConnectorsTest.java
index b437227..b40b79b 100644
--- a/sonar-application/src/test/java/org/sonar/application/ConnectorsTest.java
+++ b/sonar-application/src/test/java/org/sonar/application/ConnectorsTest.java
@@ -63,0 +64,14 @@
+  public void disable_shutdown_port_if_missing_token() throws Exception {
+    Properties p = new Properties();
+    // only the port, but not the token
+    p.setProperty(Connectors.PROPERTY_SHUTDOWN_PORT, "9010");
+    Props props = new Props(p);
+
+    Tomcat tomcat = mock(Tomcat.class, Mockito.RETURNS_DEEP_STUBS);
+    Connectors.configure(tomcat, props);
+
+    verify(tomcat.getServer(), never()).setPort(anyInt());
+    verify(tomcat.getServer(), never()).setShutdown(anyString());
+  }
+
+  @Test
diff --git a/sonar-application/src/test/java/org/sonar/application/PropsTest.java b/sonar-application/src/test/java/org/sonar/application/PropsTest.java
index b2bd5d0..99236b7 100644
--- a/sonar-application/src/test/java/org/sonar/application/PropsTest.java
+++ b/sonar-application/src/test/java/org/sonar/application/PropsTest.java
@@ -48,0 +49 @@
+    p.setProperty("blank", "");
@@ -52,0 +54,2 @@
+    assertThat(props.intOf("blank")).isNull();
+    assertThat(props.intOf("blank", 55)).isEqualTo(55);
diff --git a/sonar-application/src/test/java/org/sonar/application/WebappTest.java b/sonar-application/src/test/java/org/sonar/application/WebappTest.java
new file mode 100644
index 0000000..8bc3974
--- /dev/null
+++ b/sonar-application/src/test/java/org/sonar/application/WebappTest.java
@@ -0,0 +1,55 @@
+/*
+ * SonarQube, open source software quality management tool.
+ * Copyright (C) 2008-2013 SonarSource
+ * mailto:contact AT sonarsource DOT com
+ *
+ * SonarQube is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * SonarQube is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+package org.sonar.application;
+
+import org.apache.catalina.startup.Tomcat;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
+
+import java.io.File;
+
+import static org.fest.assertions.Assertions.assertThat;
+import static org.fest.assertions.Fail.fail;
+import static org.mockito.Mockito.*;
+
+public class WebappTest {
+
+  @Rule
+  public TemporaryFolder temp = new TemporaryFolder();
+
+  @Test
+  public void fail_on_error() throws Exception {
+    Env env = mock(Env.class);
+    File webDir = temp.newFolder("web");
+    when(env.file("web")).thenReturn(webDir);
+
+    Tomcat tomcat = mock(Tomcat.class, RETURNS_DEEP_STUBS);
+    when(tomcat.addContext("", webDir.getAbsolutePath())).thenThrow(new NullPointerException());
+
+    try {
+      Webapp.configure(tomcat, env, mock(Props.class));
+      fail();
+    } catch (IllegalStateException e) {
+      assertThat(e).hasMessage("Fail to configure webapp");
+    }
+
+  }
+}

