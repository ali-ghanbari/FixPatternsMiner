diff --git a/src/main/java/org/culturegraph/mf/stream/pipe/sort/AbstractTripleSort.java b/src/main/java/org/culturegraph/mf/stream/pipe/sort/AbstractTripleSort.java
index 3a1c667..f28e7f3 100644
--- a/src/main/java/org/culturegraph/mf/stream/pipe/sort/AbstractTripleSort.java
+++ b/src/main/java/org/culturegraph/mf/stream/pipe/sort/AbstractTripleSort.java
@@ -175,0 +176 @@
+		MemoryWarningSystem.removeListener(this);
diff --git a/src/test/java/org/culturegraph/mf/stream/pipe/sort/AbstractTripleSortTest.java b/src/test/java/org/culturegraph/mf/stream/pipe/sort/AbstractTripleSortTest.java
index c40d501..6c4bad8 100644
--- a/src/test/java/org/culturegraph/mf/stream/pipe/sort/AbstractTripleSortTest.java
+++ b/src/test/java/org/culturegraph/mf/stream/pipe/sort/AbstractTripleSortTest.java
@@ -17,0 +18,5 @@
+import static org.junit.Assert.assertTrue;
+
+import java.lang.ref.ReferenceQueue;
+import java.lang.ref.WeakReference;
+
@@ -51,0 +57,20 @@
+	/**
+	 * This test case may throw fail unexpectedly as it relies on the
+	 * garbage collector to run when calling {@code System.gc()}. This
+	 * is not guaranteed by the JVM.
+	 */
+	@Test
+	public void issue192ShouldUnregisterFromTheJVMToNotCauseMemoryLeak() {
+
+		// Get weak reference for checking whether the object was actually freed later:
+		final ReferenceQueue<AbstractTripleSort> refQueue = new ReferenceQueue<AbstractTripleSort>();
+		final WeakReference<AbstractTripleSort> weakRef = new WeakReference<AbstractTripleSort>(tripleSort, refQueue);
+
+		tripleSort.closeStream();
+		tripleSort = null;
+
+		System.gc();
+
+		assertTrue(weakRef.isEnqueued());
+	}
+

