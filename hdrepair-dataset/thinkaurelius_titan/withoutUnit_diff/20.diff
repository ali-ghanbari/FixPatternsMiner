diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/locking/consistentkey/LockClaim.java b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/locking/consistentkey/LockClaim.java
index 22ef6a6..40b54bd 100644
--- a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/locking/consistentkey/LockClaim.java
+++ b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/locking/consistentkey/LockClaim.java
@@ -84 +84,19 @@
-        if (null != lockCol) return lockCol;
+        /*
+         * ConsistentKeyLockTransaction#writeBlindLockClaim(...) calls this
+         * method with a current timestamp and writes the result to storage. If
+         * said write takes longer than the configured lock wait time, then
+         * writeBlindLockClaim(...) deletes the column, generates another
+         * current timestamp, calls this method again with the updated
+         * timestamp, and writes the resulting column. If this method returns a
+         * stale cached column containing the old timestamp, then lock
+         * verification will later fail with a "timestamp mismatch" exception
+         * 
+         * Either writeBlindLockClaim(...) must be modified to use the same
+         * timestamp for all attempts to write any given lock (even if some
+         * writes take too long and have to be retried), or this method must not
+         * cache the return value irrespective of the ts argument.
+         * 
+         * I'm taking the latter approach here for the stable branch because
+         * it's a one-liner change.
+         */
+        //if (null != lockCol) return lockCol;

