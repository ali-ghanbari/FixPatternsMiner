diff --git a/crud/src/main/java/com/redhat/lightblue/crud/interceptors/UIDInterceptor.java b/crud/src/main/java/com/redhat/lightblue/crud/interceptors/UIDInterceptor.java
index 5cfd726..e6f754a 100644
--- a/crud/src/main/java/com/redhat/lightblue/crud/interceptors/UIDInterceptor.java
+++ b/crud/src/main/java/com/redhat/lightblue/crud/interceptors/UIDInterceptor.java
@@ -42,0 +43 @@
+                                InterceptPoint.PRE_MEDIATOR_SAVE,
diff --git a/crud/src/test/java/com/redhat/lightblue/mediator/MediatorTest.java b/crud/src/test/java/com/redhat/lightblue/mediator/MediatorTest.java
index 9507c43..e949e06 100644
--- a/crud/src/test/java/com/redhat/lightblue/mediator/MediatorTest.java
+++ b/crud/src/test/java/com/redhat/lightblue/mediator/MediatorTest.java
@@ -66,0 +67 @@
+        CRUDSaveResponse saveResponse;
@@ -83 +84,2 @@
-            return null;
+            this.ctx=ctx;
+            return saveResponse;
@@ -90,0 +93 @@
+            this.ctx=ctx;
@@ -368,0 +372,32 @@
+
+    @Test
+    public void uidTermsTest() throws Exception {
+        mdManager.md = getMd("./termsmd.json");
+        InsertionRequest req = new InsertionRequest();
+        req.setEntityVersion(new EntityVersion("terms", "0.14.1-SNAPSHOT"));
+        req.setEntityData(loadJsonNode("./termsdata.json"));
+        req.setReturnFields(null);
+        mockCrudController.insertResponse=new CRUDInsertionResponse();
+        Response response = mediator.insert(req);
+        System.out.println(response.getDataErrors());
+        System.out.println(response.getErrors());
+        Assert.assertEquals(0,response.getErrors().size());
+        Assert.assertEquals(0,response.getDataErrors().size());
+        System.out.println(mockCrudController.ctx.getDocuments().get(0));
+    }
+
+    @Test
+    public void uidTermsSaveTest() throws Exception {
+        mdManager.md = getMd("./termsmd.json");
+        SaveRequest req = new SaveRequest();
+        req.setEntityVersion(new EntityVersion("terms", "0.14.1-SNAPSHOT"));
+        req.setEntityData(loadJsonNode("./termsdata.json"));
+        req.setReturnFields(null);
+        mockCrudController.saveResponse=new CRUDSaveResponse();
+        Response response = mediator.save(req);
+        System.out.println(response.getDataErrors());
+        System.out.println(response.getErrors());
+        Assert.assertEquals(0,response.getErrors().size());
+        Assert.assertEquals(0,response.getDataErrors().size());
+        System.out.println(mockCrudController.ctx.getDocuments().get(0));
+    }
diff --git a/crud/src/test/resources/termsdata.json b/crud/src/test/resources/termsdata.json
new file mode 100644
index 0000000..47f929e
--- /dev/null
+++ b/crud/src/test/resources/termsdata.json
@@ -0,0 +1 @@
+{"termsVerbiage":[{"statusCode":"active","termsVerbiageTranslation":[{"statusCode":"inactive","localeCode":"en","localeText":"English","version":1},{"statusCode":"inactive","localeCode":"en","localeText":"English","version":2},{"localeCode":"en","statusCode":"inactive","localeText":"English","version":3}],"name":"New Term","termsVerbiageTranslation#":2}],"lastUpdateDate":"20141021T20:51:26.973+0000","statusCode":"active","creationDate":"20141021T20:51:26.973+0000","termsCategoryCode":"user","termsTypeCode":"NDA","createdBy":"Marek","_id":"5446c74fe4b02251a5376918","termsVerbiage#":1,"lastUpdatedBy":"Marek","objectType":"terms"}
diff --git a/crud/src/test/resources/termsmd.json b/crud/src/test/resources/termsmd.json
new file mode 100644
index 0000000..f363e17
--- /dev/null
+++ b/crud/src/test/resources/termsmd.json
@@ -0,0 +1,279 @@
+{
+
+    "entityInfo": {
+        "name": "terms",
+        "defaultVersion": "0.14.0-SNAPSHOT",
+        "indexes": [
+            {
+                "name": null,
+                "unique": true,
+                "fields": [
+                    {
+                        "field": "localeCode",
+                        "dir": "$desc"
+                    },
+                    {
+                        "field": "version",
+                        "dir": "$asc"
+                    },
+                    {
+                        "field": "termsVerbiage.uid",
+                        "dir": "$asc"
+                    }
+                ]
+            }
+        ],
+        "enums": [
+            {
+                "name": "statusCode",
+                "values": [
+                    "active",
+                    "inactive"
+                ]
+            },
+            {
+                "name": "termsCategoryCode",
+                "values": [
+                    "customer",
+                    "indemnification",
+                    "user"
+                ]
+            },
+            {
+                "name": "termsTypeCode",
+                "values": [
+                    "site",
+                    "T7",
+                    "application",
+                    "subscription",
+                    "NDA",
+                    "indemnification",
+                    "purchase"
+                ]
+            },
+            {
+                "name": "operator",
+                "values": [
+                    "start_with",
+                    "contains",
+                    "not_contains",
+                    "not_equals",
+                    "equals",
+                    "end_with"
+                ]
+            }
+        ],
+        "datastore": {
+            "datasource": "mongodata",
+            "collection": "terms",
+            "backend": "mongo"
+        }
+    },
+    "schema": {
+        "name": "terms",
+        "version": {
+            "value": "0.14.1-SNAPSHOT",
+            "changelog": "Initial version"
+        },
+        "status": {
+            "value": "active"
+        },
+        "access": {
+            "insert": [
+                "anyone"
+            ],
+            "update": [
+                "anyone"
+            ],
+            "find": [
+                "anyone"
+            ],
+            "delete": [
+                "anyone"
+            ]
+        },
+        "fields": {
+            "startDate": {
+                "type": "date"
+            },
+            "optionalFlag": {
+                "type": "boolean"
+            },
+            "test": {
+                "type": "string"
+            },
+            "hostname": {
+                "type": "string"
+            },
+            "termsVerbiage": {
+                "type": "array",
+                "items": {
+                    "type": "object",
+                    "fields": {
+                        "uid": {
+                            "type": "uid"
+                        },
+                        "statusCode": {
+                            "type": "string",
+                            "constraints": {
+                                "enum": "statusCode",
+                                "required": true
+                            }
+                        },
+                        "startDate": {
+                            "type": "date"
+                        },
+                        "termsVerbiageTranslation": {
+                            "type": "array",
+                            "items": {
+                                "type": "object",
+                                "fields": {
+                                    "uid": {
+                                        "type": "uid",
+                                        "constraints": {
+                                            "required": true
+                                        }
+                                    },
+                                    "statusCode": {
+                                        "type": "string",
+                                        "constraints": {
+                                            "enum": "statusCode",
+                                            "required": true
+                                        }
+                                    },
+                                    "startDate": {
+                                        "type": "date"
+                                    },
+                                    "versionText": {
+                                        "type": "string"
+                                    },
+                                    "pdf": {
+                                        "type": "binary"
+                                    },
+                                    "localeCode": {
+                                        "type": "string"
+                                    },
+                                    "localeText": {
+                                        "type": "string"
+                                    },
+                                    "bodyText": {
+                                        "type": "string"
+                                    },
+                                    "endDate": {
+                                        "type": "date"
+                                    },
+                                    "URL": {
+                                        "type": "string"
+                                    },
+                                    "publishedFlag": {
+                                        "type": "boolean"
+                                    },
+                                    "version": {
+                                        "type": "integer"
+                                    }
+                                }
+                            }
+                        },
+                        "versionText": {
+                            "type": "string"
+                        },
+                        "description": {
+                            "type": "string"
+                        },
+                        "name": {
+                            "type": "string"
+                        },
+                        "endDate": {
+                            "type": "date"
+                        },
+                        "termsVerbiageTranslation#": {
+                            "type": "integer",
+                            "access": {
+                                "find": [
+                                    "anyone"
+                                ]
+                            }
+                        }
+                    }
+                }
+            },
+            "siteCode": {
+                "type": "string"
+            },
+            "productAttribute": {
+                "type": "string"
+            },
+            "lastUpdateDate": {
+                "type": "date",
+                "constraints": {
+                    "required": true
+                }
+            },
+            "statusCode": {
+                "type": "string",
+                "constraints": {
+                    "enum": "statusCode",
+                    "required": true
+                }
+            },
+            "creationDate": {
+                "type": "date",
+                "constraints": {
+                    "required": true
+                }
+            },
+            "termsCategoryCode": {
+                "type": "string",
+                "constraints": {
+                    "enum": "termsCategoryCode"
+                }
+            },
+            "termsTypeCode": {
+                "type": "string",
+                "constraints": {
+                    "enum": "termsTypeCode",
+                    "required": true
+                }
+            },
+            "createdBy": {
+                "type": "string",
+                "constraints": {
+                    "required": true
+                }
+            },
+            "_id": {
+                "type": "uid"
+            },
+            "termsVerbiage#": {
+                "type": "integer",
+                "access": {
+                    "find": [
+                        "anyone"
+                    ]
+                }
+            },
+            "lastUpdatedBy": {
+                "type": "string",
+                "constraints": {
+                    "required": true
+                }
+            },
+            "objectType": {
+                "type": "string",
+                "access": {
+                    "find": [
+                        "anyone"
+                    ],
+                    "update": [
+                        "noone"
+                    ]
+                },
+                "constraints": {
+                    "minLength": 1,
+                    "required": true
+                }
+            }
+        }
+    }
+
+}

