diff --git a/Core/WPISuite/src/edu/wpi/cs/wpisuitetng/modules/core/entitymanagers/UserDeserializer.java b/Core/WPISuite/src/edu/wpi/cs/wpisuitetng/modules/core/entitymanagers/UserDeserializer.java
index 7ab7647..ce963ed 100644
--- a/Core/WPISuite/src/edu/wpi/cs/wpisuitetng/modules/core/entitymanagers/UserDeserializer.java
+++ b/Core/WPISuite/src/edu/wpi/cs/wpisuitetng/modules/core/entitymanagers/UserDeserializer.java
@@ -49 +49 @@
-		 int idNum = deflated.getAsInt();
+		 int idNum = deflated.get("idNum").getAsInt();
diff --git a/Core/WPISuite/test/edu/wpi/cs/wpisuitetng/modules/core/UserDeserializerTest.java b/Core/WPISuite/test/edu/wpi/cs/wpisuitetng/modules/core/UserDeserializerTest.java
index 4063019..8dd8ba3 100644
--- a/Core/WPISuite/test/edu/wpi/cs/wpisuitetng/modules/core/UserDeserializerTest.java
+++ b/Core/WPISuite/test/edu/wpi/cs/wpisuitetng/modules/core/UserDeserializerTest.java
@@ -15,0 +16,2 @@
+
+import org.junit.Before;
@@ -17,0 +20,2 @@
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
@@ -18,0 +23 @@
+import com.google.gson.JsonSyntaxException;
@@ -20,0 +26 @@
+import edu.wpi.cs.wpisuitetng.modules.core.models.User;
@@ -28,0 +35,9 @@
+	
+	GsonBuilder gson;
+	
+	@Before
+	public void setUp()
+	{
+		this.gson = new GsonBuilder();
+		this.gson.registerTypeAdapter(User.class, new UserDeserializer());
+	}
@@ -66,0 +82,52 @@
+	
+	@Test
+	/**
+	 * Tests deserializing when the given JSON string has all attributes.
+	 */
+	public void deserializeUserFull()
+	{
+		String jsonUser ="{name:\"Tyler\", username:\"twack\", idNum:2, password:\"abcde\"}";
+		Gson deserializer = this.gson.create();
+		
+		User inflated = deserializer.fromJson(jsonUser, User.class);
+		
+		assertEquals(2, inflated.getIdNum());
+		assertTrue(inflated.getName().equals("Tyler"));
+		assertTrue(inflated.getUsername().equals("twack"));
+		
+		assertFalse(inflated.matchPassword("abcde"));
+		assertFalse(inflated.matchPassword(null));
+	}
+	
+	@Test
+	/**
+	 * Tests User deserialization when the given string is missing fields (but has the unique identifier idNum)
+	 */
+	public void deserializeUserMissingFields()
+	{
+		String jsonUser ="{name:\"Tyler\", idNum:2}";
+		Gson deserializer = this.gson.create();
+		
+		User inflated = deserializer.fromJson(jsonUser, User.class);
+		
+		assertEquals(2, inflated.getIdNum());
+		assertEquals(null, inflated.getUsername());
+		assertTrue(inflated.getName().equals("Tyler"));
+		
+		assertFalse(inflated.matchPassword(null));
+	}
+	
+	@Test(expected=JsonParseException.class)
+	/**
+	 * Tests error handling in the deserializer -- an exception should be thrown if
+	 * 	the user fails to include the Unique Identifier field (User->idNum)
+	 */
+	public void deserializeUserMissingId()
+	{
+		String jsonUser ="{name:\"Tyler\", username:\"twack\", password:\"abcde\"}";
+		Gson deserializer = this.gson.create();
+		
+		User inflated = deserializer.fromJson(jsonUser, User.class); // exception expected.
+		
+		fail("exception not thrown");
+	}

