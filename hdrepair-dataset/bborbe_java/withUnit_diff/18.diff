diff --git a/Makefile b/Makefile
index 1cdec52..c52b22c 100644
--- a/Makefile
+++ b/Makefile
@@ -43 +43 @@
-	scp bridge/war/office/target/bridge_office.war bborbe@bborbe.devel.lf.seibert-media.net:~/
+	scp bridge/war/office/target/bridge.war bborbe@bborbe.devel.lf.seibert-media.net:~/
diff --git a/task_gui/src/main/java/de/benjaminborbe/task/gui/util/TaskContextComparator.java b/task_gui/src/main/java/de/benjaminborbe/task/gui/util/TaskContextComparator.java
index 881c578..59a2fe2 100644
--- a/task_gui/src/main/java/de/benjaminborbe/task/gui/util/TaskContextComparator.java
+++ b/task_gui/src/main/java/de/benjaminborbe/task/gui/util/TaskContextComparator.java
@@ -10 +10 @@
-		return o.getName();
+		return o.getName() != null ? o.getName().toLowerCase() : o.getName();
diff --git a/task_gui/src/test/java/de/benjaminborbe/task/gui/util/TaskContextComparatorUnitTest.java b/task_gui/src/test/java/de/benjaminborbe/task/gui/util/TaskContextComparatorUnitTest.java
new file mode 100644
index 0000000..c87f013
--- /dev/null
+++ b/task_gui/src/test/java/de/benjaminborbe/task/gui/util/TaskContextComparatorUnitTest.java
@@ -0,0 +1,39 @@
+package de.benjaminborbe.task.gui.util;
+
+import static org.junit.Assert.assertEquals;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import org.easymock.EasyMock;
+import org.junit.Test;
+
+import de.benjaminborbe.task.api.TaskContext;
+
+public class TaskContextComparatorUnitTest {
+
+	@Test
+	public void testCompare() {
+		final TaskContextComparator c = new TaskContextComparator();
+
+		{
+			final List<TaskContext> list = new ArrayList<TaskContext>();
+			list.add(build("a"));
+			list.add(build("B"));
+			list.add(build("c"));
+			list.add(build("D"));
+			Collections.sort(list, c);
+			assertEquals("a", list.get(0).getName());
+			assertEquals("B", list.get(1).getName());
+			assertEquals("c", list.get(2).getName());
+			assertEquals("D", list.get(3).getName());
+		}
+	}
+
+	private TaskContext build(final String string) {
+		final TaskContext c = EasyMock.createMock(TaskContext.class);
+		EasyMock.expect(c.getName()).andReturn(string).anyTimes();
+		EasyMock.replay(c);
+		return c;
+	}
+}

