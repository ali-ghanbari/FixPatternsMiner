diff --git a/code/src/java/plugin/pretokens/test/PreCheckBaseTester.java b/code/src/java/plugin/pretokens/test/PreCheckBaseTester.java
index 5336e68..2304cb5 100644
--- a/code/src/java/plugin/pretokens/test/PreCheckBaseTester.java
+++ b/code/src/java/plugin/pretokens/test/PreCheckBaseTester.java
@@ -62 +62 @@
-			runningTotal = prereq.getOperator().compare(characterCheckBonus, operand);
+			runningTotal = prereq.getOperator().compare(characterCheckBonus, operand) > 0 ? 1 : 0;
diff --git a/code/src/test/pcgen/core/prereq/PreCheckBaseTest.java b/code/src/test/pcgen/core/prereq/PreCheckBaseTest.java
new file mode 100644
index 0000000..c04cefb
--- /dev/null
+++ b/code/src/test/pcgen/core/prereq/PreCheckBaseTest.java
@@ -0,0 +1,156 @@
+/*
+ * PreCheckBaseTest.java
+ *
+ * Copyright 2006 (C) Aaron Divinsky <boomer70@yahoo.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	   See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ *
+ */
+package pcgen.core.prereq;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+import pcgen.AbstractCharacterTestCase;
+import pcgen.core.Globals;
+import pcgen.core.PCClass;
+import pcgen.core.PlayerCharacter;
+import pcgen.core.bonus.Bonus;
+import pcgen.core.bonus.BonusObj;
+import pcgen.persistence.lst.prereq.PreParserFactory;
+import pcgen.core.PObject;
+import pcgen.core.SettingsHandler;
+
+/**
+ * <code>PreCheckBaseTest</code> tests that the PRECHECKBASE tag is
+ * working correctly.
+ *
+ * Last Editor: $Author: $
+ * Last Edited: $Date$
+ *
+ * @author Aaron Divinsky <boomer70@yahoo.com>
+ * @version $Revision$
+ */
+public class PreCheckBaseTest extends AbstractCharacterTestCase
+{
+	PCClass myClass = new PCClass();
+
+	public static void main(final String[] args)
+	{
+		junit.swingui.TestRunner.run(PreCheckBaseTest.class);
+	}
+
+	/**
+	 * @return Test
+	 */
+	public static Test suite()
+	{
+		return new TestSuite(PreCheckBaseTest.class);
+	}
+
+	/**
+	 * Test that Base Checks work
+	 * @throws Exception
+	 */
+	public void testBase()
+		throws Exception
+	{
+		final PlayerCharacter character = getCharacter();
+		character.incrementClassLevel(1, myClass, true);
+
+		character.calcActiveBonuses();
+
+		Prerequisite prereq;
+
+		final PreParserFactory factory = PreParserFactory.getInstance();
+		prereq = factory.parse("PRECHECKBASE:1,Fortitude=0");
+
+		assertTrue("Character's Fort save should be 0",
+				   PrereqHandler.passes(prereq, character, null));
+
+		prereq = factory.parse("PRECHECKBASE:1,Will=2");
+
+		assertTrue("Character's Will save should be 2",
+				   PrereqHandler.passes(prereq, character, null));
+
+		prereq = factory.parse("PRECHECKBASE:1,Fortitude=1,Will=2");
+		assertTrue("Character's Will save should be 2",
+				   PrereqHandler.passes(prereq, character, null));
+		prereq = factory.parse("PRECHECKBASE:2,Fortitude=1,Will=2");
+		assertFalse("Character's Fort save not 1",
+					PrereqHandler.passes(prereq, character, null));
+	}
+
+	public void testBonus()
+		throws Exception
+	{
+		final PlayerCharacter character = getCharacter();
+
+		final BonusObj fortBonus = Bonus.newBonus("1|CHECKS|Fortitude|1");
+		myClass.addBonusList(fortBonus);
+
+		character.incrementClassLevel(1, myClass, true);
+
+		character.calcActiveBonuses();
+
+		Prerequisite prereq;
+
+		final PreParserFactory factory = PreParserFactory.getInstance();
+		prereq = factory.parse("PRECHECKBASE:1,Fortitude=1");
+
+		assertFalse("Character's base Fort save should be 0",
+				   PrereqHandler.passes(prereq, character, null));
+
+		prereq = factory.parse("PRECHECKBASE:1,Will=2");
+
+		assertTrue("Character's Will save should be 2",
+				   PrereqHandler.passes(prereq, character, null));
+
+		prereq = factory.parse("PRECHECKBASE:1,Fortitude=1,Will=3");
+		assertFalse("Character's Will save should be 2",
+				   PrereqHandler.passes(prereq, character, null));
+		prereq = factory.parse("PRECHECKBASE:2,Fortitude=1,Will=2");
+		assertFalse("Character's base Fort save not 1",
+					PrereqHandler.passes(prereq, character, null));
+	}
+
+	protected void setUp()
+		throws Exception
+	{
+		super.setUp();
+
+		PObject obj = new PObject();
+		obj.setName("Fortitude");
+		SettingsHandler.getGame().addToCheckList(obj);
+
+		obj = new PObject();
+		obj.setName("Reflex");
+		SettingsHandler.getGame().addToCheckList(obj);
+
+		obj = new PObject();
+		obj.setName("Will");
+		SettingsHandler.getGame().addToCheckList(obj);
+
+		myClass.setName("My Class");
+		myClass.setAbbrev("Myc");
+		myClass.setSkillPointFormula("3");
+		final BonusObj fortRefBonus = Bonus.newBonus(
+			"1|CHECKS|BASE.Fortitude,BASE.Reflex|CL/3");
+		myClass.addBonusList(fortRefBonus);
+		final BonusObj willBonus = Bonus.newBonus("1|CHECKS|BASE.Will|CL/2+2");
+		myClass.addBonusList(willBonus);
+		Globals.getClassList().add(myClass);
+	}
+}
diff --git a/code/src/test/pcgen/core/prereq/PreCityTest.java b/code/src/test/pcgen/core/prereq/PreCityTest.java
new file mode 100644
index 0000000..19de380
--- /dev/null
+++ b/code/src/test/pcgen/core/prereq/PreCityTest.java
@@ -0,0 +1,83 @@
+/*
+ * PreCityTest.java
+ *
+ * Copyright 2006 (C) Aaron Divinsky <boomer70@yahoo.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	   See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ *
+ */
+package pcgen.core.prereq;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+import pcgen.AbstractCharacterTestCase;
+import pcgen.core.PlayerCharacter;
+import pcgen.persistence.lst.prereq.PreParserFactory;
+
+/**
+ * <code>PreCityTest</code> tests that the PRECITY tag is
+ * working correctly.
+ *
+ * Last Editor: $Author: $
+ * Last Edited: $Date$
+ *
+ * @author Aaron Divinsky <boomer70@yahoo.com>
+ * @version $Revision$
+ */
+public class PreCityTest extends AbstractCharacterTestCase
+{
+	public static void main(final String[] args)
+	{
+		junit.swingui.TestRunner.run(PreCityTest.class);
+	}
+
+	/**
+	 * @return Test
+	 */
+	public static Test suite()
+	{
+		return new TestSuite(PreCityTest.class);
+	}
+
+	/**
+	 * Test the PRECITY code
+	 * @throws Exception
+	 */
+	public void testCity()
+		throws Exception
+	{
+		final PlayerCharacter character = getCharacter();
+		character.setResidence("Klamath");
+
+		Prerequisite prereq;
+
+		final PreParserFactory factory = PreParserFactory.getInstance();
+		prereq = factory.parse("PRECITY:Klamath");
+
+		assertTrue("Character is from Klamath",
+				   PrereqHandler.passes(prereq, character, null));
+
+		prereq = factory.parse("PRECITY:KLAMATH");
+
+		assertTrue("Case is not significant",
+				   PrereqHandler.passes(prereq, character, null));
+
+		prereq = factory.parse("PRECITY:Klam");
+
+		assertFalse("Requires a full match",
+					PrereqHandler.passes(prereq, character, null));
+	}
+}

