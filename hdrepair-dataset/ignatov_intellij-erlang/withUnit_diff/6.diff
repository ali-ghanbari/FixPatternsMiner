diff --git a/testData/quickfixes/introduce_record/simple-after.erl b/testData/quickfixes/introduce_record/simple-after.erl
new file mode 100644
index 0000000..1d9c170
--- /dev/null
+++ b/testData/quickfixes/introduce_record/simple-after.erl
@@ -0,0 +1,3 @@
+-record(test_record, {}).
+
+foo() -> #test_recor<caret>d
\ No newline at end of file
diff --git a/testData/quickfixes/introduce_record/simple.erl b/testData/quickfixes/introduce_record/simple.erl
new file mode 100644
index 0000000..2d9dc11
--- /dev/null
+++ b/testData/quickfixes/introduce_record/simple.erl
@@ -0,0 +1 @@
+foo() -> #test_recor<caret>d
\ No newline at end of file
diff --git a/testData/quickfixes/introduce_record/surroundedByDeclarations-after.erl b/testData/quickfixes/introduce_record/surroundedByDeclarations-after.erl
new file mode 100644
index 0000000..cb1dadf
--- /dev/null
+++ b/testData/quickfixes/introduce_record/surroundedByDeclarations-after.erl
@@ -0,0 +1,13 @@
+-record(test_record, {}).
+-record(record1, {foo, bar}).
+
+f1() -> ok.
+
+f2() -> case ok of
+          ok -> #test_recor<caret>d;
+          _ -> ok
+        end.
+
+f3() -> ok.
+
+-record(record2, {foo, bar}).
\ No newline at end of file
diff --git a/testData/quickfixes/introduce_record/surroundedByDeclarations.erl b/testData/quickfixes/introduce_record/surroundedByDeclarations.erl
new file mode 100644
index 0000000..c1bcf8a
--- /dev/null
+++ b/testData/quickfixes/introduce_record/surroundedByDeclarations.erl
@@ -0,0 +1,12 @@
+-record(record1, {foo, bar}).
+
+f1() -> ok.
+
+f2() -> case ok of
+          ok -> #test_recor<caret>d;
+          _ -> ok
+        end.
+
+f3() -> ok.
+
+-record(record2, {foo, bar}).
\ No newline at end of file
diff --git a/testData/quickfixes/introduce_record/withPrecedingFunctions-after.erl b/testData/quickfixes/introduce_record/withPrecedingFunctions-after.erl
new file mode 100644
index 0000000..7247165
--- /dev/null
+++ b/testData/quickfixes/introduce_record/withPrecedingFunctions-after.erl
@@ -0,0 +1,5 @@
+-record(test_record, {}).
+
+foo() -> ok.
+
+bar() -> #test_recor<caret>d
\ No newline at end of file
diff --git a/testData/quickfixes/introduce_record/withPrecedingFunctions.erl b/testData/quickfixes/introduce_record/withPrecedingFunctions.erl
new file mode 100644
index 0000000..df1c67e
--- /dev/null
+++ b/testData/quickfixes/introduce_record/withPrecedingFunctions.erl
@@ -0,0 +1,3 @@
+foo() -> ok.
+
+bar() -> #test_recor<caret>d
\ No newline at end of file
diff --git a/testData/quickfixes/introduce_record/withPrecedingRecords-after.erl b/testData/quickfixes/introduce_record/withPrecedingRecords-after.erl
new file mode 100644
index 0000000..82b3d53
--- /dev/null
+++ b/testData/quickfixes/introduce_record/withPrecedingRecords-after.erl
@@ -0,0 +1,4 @@
+-record(test_record, {}).
+-record(foo, {}).
+
+bar() -> #test_recor<caret>d
\ No newline at end of file
diff --git a/testData/quickfixes/introduce_record/withPrecedingRecords.erl b/testData/quickfixes/introduce_record/withPrecedingRecords.erl
new file mode 100644
index 0000000..22a1a58
--- /dev/null
+++ b/testData/quickfixes/introduce_record/withPrecedingRecords.erl
@@ -0,0 +1,3 @@
+-record(foo, {}).
+
+bar() -> #test_recor<caret>d
\ No newline at end of file
diff --git a/tests/org/intellij/erlang/ErlangTestCase.java b/tests/org/intellij/erlang/ErlangTestCase.java
index 9e32010..71dbd3f 100644
--- a/tests/org/intellij/erlang/ErlangTestCase.java
+++ b/tests/org/intellij/erlang/ErlangTestCase.java
@@ -61,0 +62 @@
+    suite.addTestSuite(ErlangIntroduceRecordFixTest.class);
diff --git a/tests/org/intellij/erlang/quickfixes/ErlangIntroduceRecordFixTest.java b/tests/org/intellij/erlang/quickfixes/ErlangIntroduceRecordFixTest.java
new file mode 100644
index 0000000..e54a3d1
--- /dev/null
+++ b/tests/org/intellij/erlang/quickfixes/ErlangIntroduceRecordFixTest.java
@@ -0,0 +1,29 @@
+package org.intellij.erlang.quickfixes;
+
+import org.intellij.erlang.inspection.ErlangUnresolvedRecordInspection;
+
+/**
+ * @author savenko
+ */
+public class ErlangIntroduceRecordFixTest extends ErlangQuickFixTestBase {
+
+  @SuppressWarnings("unchecked")
+  @Override
+  protected void setUp() throws Exception {
+    System.setProperty("idea.platform.prefix", "Idea");
+    super.setUp();
+    myFixture.enableInspections(ErlangUnresolvedRecordInspection.class);
+  }
+
+  @Override
+  protected String getTestDataPath() {
+    return "testData/quickfixes/introduce_record/";
+  }
+
+  private void doIntroduceRecordTest()                        { doTest("Introduce new record"); }
+
+  public void testSimple() throws Throwable                   { doIntroduceRecordTest(); }
+  public void testWithPrecedingFunctions() throws Throwable   { doIntroduceRecordTest(); }
+  public void testWithPrecedingRecords() throws Throwable     { doIntroduceRecordTest(); }
+  public void testSurroundedByDeclarations() throws Throwable { doIntroduceRecordTest(); }
+}

