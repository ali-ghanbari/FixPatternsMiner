diff --git a/src/org/intellij/erlang/psi/impl/ErlangVarProcessor.java b/src/org/intellij/erlang/psi/impl/ErlangVarProcessor.java
index b6b9d65..ee493cd 100644
--- a/src/org/intellij/erlang/psi/impl/ErlangVarProcessor.java
+++ b/src/org/intellij/erlang/psi/impl/ErlangVarProcessor.java
@@ -88 +88 @@
-    if (caseExpression == caseExpressionOrigin && crClause != crClauseOrigin) return true;
+    if (caseExpressionOrigin != null && caseExpression == caseExpressionOrigin && crClause != crClauseOrigin) return true;
diff --git a/testData/highlighting/VariableResolve.erl b/testData/highlighting/VariableResolve.erl
index 206caed..35f538d 100644
--- a/testData/highlighting/VariableResolve.erl
+++ b/testData/highlighting/VariableResolve.erl
@@ -1 +1 @@
--export([get_profile/2, name_to_pid/1]).
+-export([get_profile/2, name_to_pid/1, do_receive/6]).
@@ -30,0 +31,38 @@
+  end.
+
+-record(device_token, {bucket_id, apikey}).
+-define(SCREEN, 1).
+-define(TYPE_MULTIPART, 1).
+-define(TYPE_JSON, 1).
+-record(part, {value, content_type, value, content_type, value, content_type}).
+
+do_receive(DeviceToken, ChannelPID, DeviceID, ChangeID, ChannelRef, WithAttachments) ->
+  receive
+    {ChannelPID, {ChannelRef, Members, Messages, Dest, CurrentCid, CreatedBy, CreateTime}} ->
+      APIKey = DeviceToken#device_token.apikey,
+      Output = [APIKey, {poll, ok}, ChannelPID, ChannelRef,
+        DeviceID, Members, Messages, Dest, CurrentCid,
+        CreatedBy, CreateTime, {}],
+      io:format("receive : APIKey=~p, DeviceID=~p / (ChannelRef=~p : ChannelPID=~p) - Output=~p",
+        [APIKey, DeviceID, ChannelRef, ChannelPID, Output]),
+
+      JsonPart = Output,
+      case WithAttachments of
+        true ->
+          BucketID = DeviceToken#device_token.bucket_id,
+          ImageParts = [BucketID, ?SCREEN, Messages, []],
+          {200, ?TYPE_MULTIPART, [#part{content_type=?TYPE_JSON, value=JsonPart} | ImageParts]};
+        _ ->
+          {200, ?TYPE_MULTIPART, [#part{content_type=?TYPE_JSON, value=JsonPart}]}
+      end;
+    {ChannelPID, timeout} ->
+      JsonPart = [[{poll, timeout}]],
+      {200, ?TYPE_MULTIPART, [#part{content_type=?TYPE_JSON, value=JsonPart}]};
+    X ->
+      lager:error("receive : DeviceID=~p, ChannelPID=~p/ChannelRef=~p, Failed to match pattern: ~p",
+        [DeviceID, ChannelPID, ChannelRef, X]),
+      erlang:error(unexpected_message, X)
+  after 70000 ->
+    lager:error("TIMEOUT! DeviceID=~p, ChannelRef=~p, ChangeID=~p, ChannelPID=~p",
+      [DeviceID, ChannelRef, ChangeID, ChannelPID]),
+    erlang:error(receive_timeout, 70000)

