diff --git a/repo/repo-sql-impl-test/src/test/java/com/evolveum/midpoint/repo/sql/PerformanceTest.java b/repo/repo-sql-impl-test/src/test/java/com/evolveum/midpoint/repo/sql/PerformanceTest.java
index e2fa625..372f822 100644
--- a/repo/repo-sql-impl-test/src/test/java/com/evolveum/midpoint/repo/sql/PerformanceTest.java
+++ b/repo/repo-sql-impl-test/src/test/java/com/evolveum/midpoint/repo/sql/PerformanceTest.java
@@ -90 +90 @@
-                    for (int k = 1; k < RESOURCE_OIDS.size(); k++) {
+                    for (int k = 1; k <= RESOURCE_OIDS.size(); k++) {
@@ -233 +233 @@
-}
\ No newline at end of file
+}
diff --git a/repo/repo-sql-impl-test/src/test/java/com/evolveum/midpoint/repo/sql/QueryInterpreterTest.java b/repo/repo-sql-impl-test/src/test/java/com/evolveum/midpoint/repo/sql/QueryInterpreterTest.java
index 233384d..c9e5f32 100644
--- a/repo/repo-sql-impl-test/src/test/java/com/evolveum/midpoint/repo/sql/QueryInterpreterTest.java
+++ b/repo/repo-sql-impl-test/src/test/java/com/evolveum/midpoint/repo/sql/QueryInterpreterTest.java
@@ -36,0 +37 @@
+import com.evolveum.midpoint.repo.sql.data.common.type.RParentOrgRef;
@@ -793,42 +793,0 @@
-    @Test(enabled = false)    //TODO ENABLE [lazyman]
-    public void queryOrgStructure() throws Exception {
-        Session session = open();
-
-        try {
-            ProjectionList list = Projections.projectionList();
-            addFullObjectProjectionList("o", list, false);
-            addFullObjectProjectionList("o", list, true);
-            list.add(Projections.groupProperty("o.name.orig"));
-            list.add(Projections.groupProperty("closure.descendant"));
-
-
-            Criteria main = session.createCriteria(RObject.class, "o");
-            main.createCriteria("descendants", "closure").setFetchMode("closure.ancestor", FetchMode.DEFAULT)
-                    .createAlias("closure.ancestor", "anc").setProjection(list);
-            main.addOrder(Order.asc("o.name.orig"));
-
-            Conjunction conjunction = Restrictions.conjunction();
-            conjunction.add(Restrictions.eq("anc.oid", "some oid"));
-            conjunction.add(Restrictions.le("closure.depth", 1));
-            conjunction.add(Restrictions.gt("closure.depth", 0));
-            main.add(conjunction);
-
-            String expected = HibernateToSqlTranslator.toSql(main);
-
-            OrgFilter orgFilter = OrgFilter.createOrg("some oid", OrgFilter.Scope.ONE_LEVEL);
-            ObjectQuery query = ObjectQuery.createObjectQuery(orgFilter);
-            query.setPaging(ObjectPaging.createPaging(null, null, ObjectType.F_NAME, OrderDirection.ASCENDING));
-
-            String real = getInterpretedQuery(session, ObjectType.class, query);
-
-            LOGGER.info("exp. query>\n{}\nreal query>\n{}", new Object[]{expected, real});
-
-            OperationResult result = new OperationResult("query org structure");
-            repositoryService.searchObjects(ObjectType.class, query, null, result);
-
-            AssertJUnit.assertEquals(expected, real);
-        } finally {
-            close(session);
-        }
-    }
-
@@ -942,5 +900,0 @@
-            Query query = session.createQuery(
-                    "select o.fullObject,o.stringsCount,o.longsCount,o.datesCount,o.referencesCount,o.polysCount from " +
-                            "ROrg as o where o.oid in (select distinct p.ownerOid from RParentOrgRef p where p.targetOid=:oid)"
-            );
-            query.setString("oid", "1234");
@@ -948 +902,13 @@
-            String expected = HibernateToSqlTranslator.toSql(factory, query.getQueryString());
+            Criteria main = session.createCriteria(ROrg.class, "o");
+            ProjectionList projections = Projections.projectionList();
+            addFullObjectProjectionList("o", projections, false);
+            main.setProjection(projections);
+
+            DetachedCriteria detached = DetachedCriteria.forClass(RParentOrgRef.class, "p");
+            detached.setProjection(Projections.distinct(Projections.property("p.ownerOid")));
+            detached.add(Restrictions.eq("p.targetOid", "some oid"));
+
+            main.add(Subqueries.propertyIn("o.oid", detached));
+            main.addOrder(Order.asc("o.name.orig"));
+
+            String expected = HibernateToSqlTranslator.toSql(main);
diff --git a/repo/repo-sql-impl/src/main/java/com/evolveum/midpoint/repo/sql/query/QueryEngine.java b/repo/repo-sql-impl/src/main/java/com/evolveum/midpoint/repo/sql/query/QueryEngine.java
index dda5dd3..ff6e56d 100644
--- a/repo/repo-sql-impl/src/main/java/com/evolveum/midpoint/repo/sql/query/QueryEngine.java
+++ b/repo/repo-sql-impl/src/main/java/com/evolveum/midpoint/repo/sql/query/QueryEngine.java
@@ -27 +27 @@
-        queryLibrary.add(new OrgFilterQuery());
+//        queryLibrary.add(new OrgFilterQuery());

