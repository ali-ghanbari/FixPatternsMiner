diff --git a/core/src/main/java/com/digitalpebble/storm/crawler/util/MetadataTransfer.java b/core/src/main/java/com/digitalpebble/storm/crawler/util/MetadataTransfer.java
index 85f3082..3ac699b 100644
--- a/core/src/main/java/com/digitalpebble/storm/crawler/util/MetadataTransfer.java
+++ b/core/src/main/java/com/digitalpebble/storm/crawler/util/MetadataTransfer.java
@@ -102 +102 @@
-            md.setValue(depthKeyName, Integer.toString(depth++));
+            md.setValue(depthKeyName, Integer.toString(++depth));
diff --git a/core/src/test/java/com/digitalpebble/storm/crawler/util/MetadataTransferTest.java b/core/src/test/java/com/digitalpebble/storm/crawler/util/MetadataTransferTest.java
new file mode 100644
index 0000000..ef2d28a
--- /dev/null
+++ b/core/src/test/java/com/digitalpebble/storm/crawler/util/MetadataTransferTest.java
@@ -0,0 +1,43 @@
+/**
+ * Licensed to DigitalPebble Ltd under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * DigitalPebble licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.digitalpebble.storm.crawler.util;
+
+import java.net.MalformedURLException;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.digitalpebble.storm.crawler.Metadata;
+
+public class MetadataTransferTest {
+    @Test
+    public void testTransfer() throws MalformedURLException {
+        Map<String, Object> conf = new HashMap<String, Object>();
+        conf.put(MetadataTransfer.trackDepthParamName, true);
+        MetadataTransfer mdt = new MetadataTransfer(conf);
+        Metadata parentMD = new Metadata();
+        Metadata outlinkMD = mdt.getMetaForOutlink("http://www.example.com",
+                parentMD);
+        // test the value of track seed and depth
+        Assert.assertEquals("1",
+                outlinkMD.getFirstValue(MetadataTransfer.depthKeyName));
+        String[] urlpath = outlinkMD.getValues(MetadataTransfer.urlPathKeyName);
+        Assert.assertEquals(1, urlpath.length);
+    }
+}

