diff --git a/plugins/org.eclipse.recommenders.completion.rcp/src/org/eclipse/recommenders/completion/rcp/CompletionContexts.java b/plugins/org.eclipse.recommenders.completion.rcp/src/org/eclipse/recommenders/completion/rcp/CompletionContexts.java
index 2660184..798bdfe 100644
--- a/plugins/org.eclipse.recommenders.completion.rcp/src/org/eclipse/recommenders/completion/rcp/CompletionContexts.java
+++ b/plugins/org.eclipse.recommenders.completion.rcp/src/org/eclipse/recommenders/completion/rcp/CompletionContexts.java
@@ -61 +61 @@
-            if (!isJavaIdentifierPart(c) && c != '.') {
+            if (!(isJavaIdentifierPart(c) || c == '@' || c == '{' || c == '}') && c != '.') {
diff --git a/tests/org.eclipse.recommenders.completion.rcp.tests/src/org/eclipse/recommenders/completion/rcp/CompletionContextsTest.java b/tests/org.eclipse.recommenders.completion.rcp.tests/src/org/eclipse/recommenders/completion/rcp/CompletionContextsTest.java
index e4e401a..965e9b2 100644
--- a/tests/org.eclipse.recommenders.completion.rcp.tests/src/org/eclipse/recommenders/completion/rcp/CompletionContextsTest.java
+++ b/tests/org.eclipse.recommenders.completion.rcp.tests/src/org/eclipse/recommenders/completion/rcp/CompletionContextsTest.java
@@ -3 +3,2 @@
-import static org.junit.Assert.assertEquals;
+import static org.hamcrest.Matchers.*;
+import static org.junit.Assert.assertThat;
@@ -5 +5,0 @@
-import java.util.Collection;
@@ -18,2 +18,2 @@
-    private String displayString;
-    private String expected;
+    private final String displayString;
+    private final String expectedPrefixMatchingArea;
@@ -21 +21 @@
-    public CompletionContextsTest(String displayString, String expected) {
+    public CompletionContextsTest(String displayString, String expectedPrefixMatchingArea) {
@@ -23 +23 @@
-        this.expected = expected;
+        this.expectedPrefixMatchingArea = expectedPrefixMatchingArea;
@@ -27,8 +27,21 @@
-    public static Collection<Object[]> input() {
-        LinkedList<Object[]> data = Lists.newLinkedList();
-        data.add(new String[] { "blockedHandler : Dialog", "blockedHandler" });
-        data.add(new String[] { "layout(boolean changed)", "layout" });
-        data.add(new String[] { "add(Object o) : Object", "add" });
-        data.add(new String[] { "ArrayList(Collection<? extends String> c)", "ArrayList" });
-        data.add(new String[] { "org.eclipse.package", "org.eclipse.package" });
-        return data;
+    public static Iterable<Object[]> scenarios() {
+        LinkedList<Object[]> scenarios = Lists.newLinkedList();
+
+        scenarios.add(new String[] { "blockedHandler : Dialog", "blockedHandler" });
+
+        scenarios.add(new String[] { "layout(boolean changed)", "layout" });
+        scenarios.add(new String[] { "add(Object o) : Object", "add" });
+
+        scenarios.add(new String[] { "ArrayList ()VLjava.util.ArrayList<TE;>;", "ArrayList" });
+        scenarios.add(new String[] { "ZipFile (Ljava.io.File;I)VLjava.util.zip.ZipFile;", "ZipFile" });
+
+        scenarios.add(new String[] { "List() Anonymous Inner Type - java.awt.geom", "List" });
+
+        scenarios.add(new String[] { "org.eclipse.package", "org.eclipse.package" });
+
+        scenarios.add(new String[] { "@deprecated", "@deprecated" });
+        scenarios.add(new String[] { "{@value}", "{@value}" });
+
+        scenarios.add(new String[] { "Override Ljava.lang.Override;", "Override" });
+
+        return scenarios;
@@ -38,3 +51,2 @@
-    public void test() {
-        final String actual = CompletionContexts.getPrefixMatchingArea(displayString);
-        assertEquals(expected, actual);
+    public void testGetPrefixMatchingArea() {
+        assertThat(CompletionContexts.getPrefixMatchingArea(displayString), is(equalTo(expectedPrefixMatchingArea)));

