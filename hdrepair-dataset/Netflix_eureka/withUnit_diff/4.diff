diff --git a/eureka-client/src/main/java/com/netflix/discovery/shared/Applications.java b/eureka-client/src/main/java/com/netflix/discovery/shared/Applications.java
index 2631a35..4537877 100755
--- a/eureka-client/src/main/java/com/netflix/discovery/shared/Applications.java
+++ b/eureka-client/src/main/java/com/netflix/discovery/shared/Applications.java
@@ -398,0 +399,2 @@
+        this.shuffleVirtualHostNameMap.clear();
+        this.shuffledSecureVirtualHostNameMap.clear();
diff --git a/eureka-client/src/test/java/com/netflix/discovery/shared/ApplicationsTest.java b/eureka-client/src/test/java/com/netflix/discovery/shared/ApplicationsTest.java
new file mode 100644
index 0000000..7cfcb83
--- /dev/null
+++ b/eureka-client/src/test/java/com/netflix/discovery/shared/ApplicationsTest.java
@@ -0,0 +1,51 @@
+package com.netflix.discovery.shared;
+
+
+import com.google.common.collect.Iterables;
+import com.netflix.appinfo.DataCenterInfo;
+import com.netflix.appinfo.InstanceInfo;
+
+import org.junit.Test;
+
+import java.util.List;
+
+import static junit.framework.Assert.assertNull;
+import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+
+public class ApplicationsTest {
+
+    /**
+     * Test that instancesMap in Application and shuffleVirtualHostNameMap in Applications are
+     * correctly updated when the last instance is removed from an application and shuffleInstances
+     * has been run.
+     */
+    @Test
+    public void shuffleVirtualHostNameMapLastInstanceTest() {
+        DataCenterInfo myDCI = new DataCenterInfo(){
+            public DataCenterInfo.Name getName(){return DataCenterInfo.Name.MyOwn;}
+        };
+        InstanceInfo instanceInfo = InstanceInfo.Builder.newBuilder()
+                                                        .setAppName("test")
+                                                        .setVIPAddress("test.testname:1")
+                                                        .setDataCenterInfo(myDCI)
+                                                        .setHostName("test.hostname").build();
+
+        Application application = new Application("TestApp");
+        application.addInstance(instanceInfo);
+        Applications applications = new Applications();
+        applications.addApplication(application);
+        applications.shuffleInstances(true);
+        List<InstanceInfo> testApp = applications.getInstancesByVirtualHostName("test.testname:1");
+
+        assertEquals(Iterables.getOnlyElement(testApp),
+                     application.getByInstanceId("test.hostname"));
+
+        application.removeInstance(instanceInfo);
+        applications.shuffleInstances(true);
+        testApp = applications.getInstancesByVirtualHostName("test.testname:1");
+
+        assertNull(application.getByInstanceId("test.hostname"));
+        assertTrue(testApp.isEmpty());
+    }
+}

