diff --git a/liquibase-core/src/main/java/liquibase/database/core/MSSQLDatabase.java b/liquibase-core/src/main/java/liquibase/database/core/MSSQLDatabase.java
index a06241e..3c05a5f 100644
--- a/liquibase-core/src/main/java/liquibase/database/core/MSSQLDatabase.java
+++ b/liquibase-core/src/main/java/liquibase/database/core/MSSQLDatabase.java
@@ -349 +349 @@
-                    caseSensitive = collation.contains("_CI_");
+                    caseSensitive = ! collation.contains("_CI_");
diff --git a/liquibase-core/src/test/java/liquibase/database/core/MSSQLDatabaseTest.java b/liquibase-core/src/test/java/liquibase/database/core/MSSQLDatabaseTest.java
index 6fdee69..54b72e6 100644
--- a/liquibase-core/src/test/java/liquibase/database/core/MSSQLDatabaseTest.java
+++ b/liquibase-core/src/test/java/liquibase/database/core/MSSQLDatabaseTest.java
@@ -2,0 +3,8 @@
+import static org.easymock.classextension.EasyMock.*;
+
+import java.sql.Connection;
+import java.sql.ResultSet;
+import java.sql.ResultSetMetaData;
+import java.sql.SQLException;
+import java.sql.Statement;
+
@@ -4,0 +13 @@
+import liquibase.database.jvm.JdbcConnection;
@@ -6 +15 @@
-import org.junit.Assert;
+
@@ -34 +43 @@
-        Assert.assertEquals("GETDATE()", getDatabase().getCurrentDateTimeFunction());
+        assertEquals("GETDATE()", getDatabase().getCurrentDateTimeFunction());
@@ -67,0 +77,44 @@
+    
+    private Database getADatabaseWithCollation( final String collation ) throws DatabaseException, SQLException {
+		Database database = getDatabase();
+		JdbcConnection connection = createMock(JdbcConnection.class);
+		expect(connection.getConnectionUserName()).andReturn("user").anyTimes();
+		expect(connection.getURL()).andReturn("URL").anyTimes();
+		expect(connection.getAutoCommit()).andReturn(getDatabase().getAutoCommitMode()).anyTimes();
+
+		Connection sqlConnection = createMock(Connection.class);
+		Statement statement = createMock(Statement.class);
+		ResultSet resultSet = createMock(ResultSet.class);
+		ResultSetMetaData metadata = createMock(ResultSetMetaData.class);
+
+		expect(connection.getUnderlyingConnection()).andReturn(sqlConnection).anyTimes();
+		expect( sqlConnection.createStatement()).andReturn(statement);
+		expect( statement.executeQuery("SELECT CONVERT(varchar(100), SERVERPROPERTY('COLLATION'))")).andReturn(resultSet);
+		expect( resultSet.next() ).andReturn(true);
+		expect( resultSet.getMetaData() ).andReturn(metadata);
+		expect( metadata.getColumnCount() ).andReturn(1);
+		expect( resultSet.getString(1)).andReturn(collation);
+		expect( resultSet.next() ).andReturn(false);
+
+		connection.attached(database);
+		replay(connection, sqlConnection, statement, resultSet, metadata);
+		database.setConnection(connection);
+		return database;
+    }
+    
+    @Test
+    public void caseSensitiveBinaryCollation() throws Exception {
+    	Database database =  getADatabaseWithCollation("Latin1_General_BIN");
+    	assertTrue( "Should be case sensitive", database.isCaseSensitive() );
+    }
+
+    @Test
+    public void caseSensitiveCICollation() throws Exception {
+    	Database database = getADatabaseWithCollation("Latin1_General_CI_AI");
+    	assertFalse( "Should be case insensitive", database.isCaseSensitive() );
+    }
+    @Test
+    public void caseSensitiveCSCollation() throws Exception {
+    	Database database =getADatabaseWithCollation("Latin1_General_CS_AI");    	
+    	assertTrue( "Should be case sensitive", database.isCaseSensitive() );
+    }

