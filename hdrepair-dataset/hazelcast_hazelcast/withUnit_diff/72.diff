diff --git a/hazelcast/src/main/java/com/hazelcast/replicatedmap/record/AbstractReplicatedRecordStore.java b/hazelcast/src/main/java/com/hazelcast/replicatedmap/record/AbstractReplicatedRecordStore.java
index 4cbc66f..6800836 100644
--- a/hazelcast/src/main/java/com/hazelcast/replicatedmap/record/AbstractReplicatedRecordStore.java
+++ b/hazelcast/src/main/java/com/hazelcast/replicatedmap/record/AbstractReplicatedRecordStore.java
@@ -98 +98 @@
-        if (ttlMillis > 0 && System.currentTimeMillis() - replicatedRecord.getUpdateTime() > ttlMillis) {
+        if (ttlMillis > 0 && System.currentTimeMillis() - replicatedRecord.getUpdateTime() >= ttlMillis) {
diff --git a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTest.java b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTest.java
index cce996d..93459dc 100644
--- a/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/replicatedmap/ReplicatedMapTest.java
@@ -26,0 +27 @@
+import com.hazelcast.replicatedmap.record.ReplicationPublisher;
@@ -52 +52,0 @@
-import static org.junit.Assert.assertNull;
@@ -258,0 +259,7 @@
+        // Prevent further updates
+        getReplicationPublisher(map2).emptyReplicationQueue();
+        getReplicationPublisher(map1).emptyReplicationQueue();
+
+        // Give a bit of time to process last batch of updates
+        TimeUnit.SECONDS.sleep(2);
+
@@ -283,2 +290 @@
-        Thread.sleep(2000);
-
+        int map2Updated = 0;
@@ -286 +292,3 @@
-            assertNull(map2.get(entry.getKey()));
+            if (map2.get(entry.getKey()) == null) {
+                map2Updated++;
+            }
@@ -288,0 +297 @@
+        int map1Updated = 0;
@@ -290 +299,3 @@
-            assertNull(map1.get(entry.getKey()));
+            if (map1.get(entry.getKey()) == null) {
+                map1Updated++;
+            }
@@ -291,0 +303,3 @@
+
+        assertMatchSuccessfulOperationQuota(0.75, map2entries.size(), map2Updated);
+        assertMatchSuccessfulOperationQuota(0.75, map1entries.size(), map1Updated);
@@ -1055,0 +1070,7 @@
+    private <K, V> ReplicationPublisher<K, V> getReplicationPublisher(ReplicatedMap<K, V> map)
+            throws Exception {
+        ReplicatedMapProxy proxy = (ReplicatedMapProxy) map;
+        AbstractReplicatedRecordStore store = (AbstractReplicatedRecordStore) REPLICATED_RECORD_STORE.get(proxy);
+        return store.getReplicationPublisher();
+    }
+

