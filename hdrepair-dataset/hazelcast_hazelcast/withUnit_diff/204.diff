diff --git a/hazelcast/src/main/java/com/hazelcast/impl/ListenerManager.java b/hazelcast/src/main/java/com/hazelcast/impl/ListenerManager.java
index d63ef6c..6765395 100644
--- a/hazelcast/src/main/java/com/hazelcast/impl/ListenerManager.java
+++ b/hazelcast/src/main/java/com/hazelcast/impl/ListenerManager.java
@@ -300,0 +301,2 @@
+            }else if (event.getEventType() == EntryEvent.EntryEventType.EVICTED) {
+                l.entryEvicted(event);
diff --git a/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java b/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java
index 1fb62f3..f7106a1 100644
--- a/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java
@@ -232 +232 @@
-    public void testMapPutWitTTL() throws Exception{
+    public void testMapPutWitTTL() throws Exception {
@@ -271 +271 @@
-    public void testListItemListener(){
+    public void testListItemListener() {
@@ -274,5 +274,5 @@
-        list.addItemListener(new ItemListener<String>(){
-         public void itemAdded(String item) {
-            assertEquals("hello", item);
-            latch.countDown();
-        }
+        list.addItemListener(new ItemListener<String>() {
+            public void itemAdded(String item) {
+                assertEquals("hello", item);
+                latch.countDown();
+            }
@@ -280,3 +280,3 @@
-        public void itemRemoved(String item) {
-            assertEquals("hello", item);
-            latch.countDown();
+            public void itemRemoved(String item) {
+                assertEquals("hello", item);
+                latch.countDown();
@@ -288 +288 @@
-            assertTrue (latch.await(5, TimeUnit.SECONDS));
+            assertTrue(latch.await(5, TimeUnit.SECONDS));
@@ -294 +294 @@
-    public void testSetItemListener(){
+    public void testSetItemListener() {
@@ -297,5 +297,5 @@
-        set.addItemListener(new ItemListener<String>(){
-         public void itemAdded(String item) {
-            assertEquals("hello", item);
-            latch.countDown();
-        }
+        set.addItemListener(new ItemListener<String>() {
+            public void itemAdded(String item) {
+                assertEquals("hello", item);
+                latch.countDown();
+            }
@@ -303,3 +303,3 @@
-        public void itemRemoved(String item) {
-            assertEquals("hello", item);
-            latch.countDown();
+            public void itemRemoved(String item) {
+                assertEquals("hello", item);
+                latch.countDown();
@@ -311 +311 @@
-            assertTrue (latch.await(5, TimeUnit.SECONDS));
+            assertTrue(latch.await(5, TimeUnit.SECONDS));
@@ -317 +317 @@
-    public void testQueueItemListener(){
+    public void testQueueItemListener() {
@@ -320,5 +320,5 @@
-        queue.addItemListener(new ItemListener<String>(){
-         public void itemAdded(String item) {
-            assertEquals("hello", item);
-            latch.countDown();
-        }
+        queue.addItemListener(new ItemListener<String>() {
+            public void itemAdded(String item) {
+                assertEquals("hello", item);
+                latch.countDown();
+            }
@@ -326,3 +326,3 @@
-        public void itemRemoved(String item) {
-            assertEquals("hello", item);
-            latch.countDown();
+            public void itemRemoved(String item) {
+                assertEquals("hello", item);
+                latch.countDown();
@@ -334 +334 @@
-            assertTrue (latch.await(5, TimeUnit.SECONDS));
+            assertTrue(latch.await(5, TimeUnit.SECONDS));
diff --git a/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java b/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java
index f922195..2ffd6ea 100644
--- a/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/impl/ClusterTest.java
@@ -20 +20,4 @@
-import com.hazelcast.config.*;
+import com.hazelcast.config.Config;
+import com.hazelcast.config.MapConfig;
+import com.hazelcast.config.SymmetricEncryptionConfig;
+import com.hazelcast.config.XmlConfigBuilder;
@@ -28 +30,0 @@
-import static org.junit.Assert.assertEquals;
@@ -30 +31,0 @@
-import org.junit.Ignore;
@@ -310 +311 @@
-        assertEquals("value2", h2.getMap("default").get("1")); 
+        assertEquals("value2", h2.getMap("default").get("1"));
@@ -357 +358 @@
-    
+
@@ -376,2 +376,0 @@
-
-
@@ -1001,0 +1001,41 @@
+
+    /**
+     * Fix for the issue 156
+     * When an entry is in a map for more than TTL time
+     * the entry should get evicted and eviction event
+     * should be fired.
+     *
+     * @throws Exception
+     */
+    @Test
+    public void testMapEvictionWithTTL() throws Exception {
+        Config cfg = new Config();
+        Map<String, MapConfig> mapConfigs = new HashMap<String, MapConfig>();
+        MapConfig mCfg = new MapConfig();
+        mCfg.setTimeToLiveSeconds(3);
+        mapConfigs.put("testMapEvictionWithTTL", mCfg);
+        cfg.setMapMapConfigs(mapConfigs);
+        HazelcastInstance h1 = Hazelcast.newHazelcastInstance(cfg);
+        IMap map1 = h1.getMap("testMapEvictionWithTTL");
+        final CountDownLatch latch = new CountDownLatch(1);
+        map1.addEntryListener(new EntryListener() {
+            public void entryAdded(EntryEvent entryEvent) {
+            }
+
+            public void entryRemoved(EntryEvent entryEvent) {
+            }
+
+            public void entryUpdated(EntryEvent entryEvent) {
+            }
+
+            public void entryEvicted(EntryEvent entryEvent) {
+                assertEquals("1", entryEvent.getKey());
+                assertEquals("v1", entryEvent.getValue());
+                latch.countDown();
+            }
+        }, true);
+        map1.put("1", "v1");
+        Assert.assertTrue(map1.get("1").equals("v1"));
+        Assert.assertTrue(latch.await(10, TimeUnit.SECONDS));
+        Assert.assertTrue(map1.get("1") == null);
+    }

