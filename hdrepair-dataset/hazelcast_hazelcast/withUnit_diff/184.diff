diff --git a/hazelcast/src/main/java/com/hazelcast/impl/AbstractRecord.java b/hazelcast/src/main/java/com/hazelcast/impl/AbstractRecord.java
index ed2c951..5fade85 100644
--- a/hazelcast/src/main/java/com/hazelcast/impl/AbstractRecord.java
+++ b/hazelcast/src/main/java/com/hazelcast/impl/AbstractRecord.java
@@ -284 +284 @@
-        long lastTouch = Math.max(lastAccessTime, creationTime);
+        long lastTouch = Math.max(lastUpdateTime, Math.max(lastAccessTime, creationTime));
diff --git a/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java b/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java
index 8d5c276..75abc28 100644
--- a/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java
@@ -19,0 +20 @@
+import com.hazelcast.config.MapConfig;
@@ -30,0 +32 @@
+import java.util.concurrent.atomic.AtomicInteger;
@@ -688,0 +691 @@
+
@@ -1354,2 +1357,2 @@
-        IMap<String,String> map = h.getMap("testIssue174NearCacheContainsKeySingleNode");
-        map.put("key","value");
+        IMap<String, String> map = h.getMap("testIssue174NearCacheContainsKeySingleNode");
+        map.put("key", "value");
@@ -1358,0 +1362,45 @@
+
+    /*
+        github issue 304
+     */
+    @Test
+    public void testIssue304EvictionDespitePut() throws InterruptedException {
+        Config c = new Config();
+        c.getGroupConfig().setName("testIssue304EvictionDespitePut");
+        final HashMap<String, MapConfig> mapConfigs = new HashMap<String, MapConfig>();
+        final MapConfig value = new MapConfig();
+        value.setMaxIdleSeconds(3);
+        mapConfigs.put("default", value);
+        c.setMapConfigs(mapConfigs);
+        final Properties properties = new Properties();
+        properties.setProperty("hazelcast.map.cleanup.delay.seconds", "1"); // we need faster cleanups
+        c.setProperties(properties);
+        final HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(c);
+
+        IMap<String, Long> map = hazelcastInstance.getMap("testIssue304EvictionDespitePutMap");
+        final AtomicInteger evictCount = new AtomicInteger(0);
+        map.addEntryListener(new EntryListener<String, Long>() {
+            public void entryAdded(EntryEvent<String, Long> event) {
+            }
+
+            public void entryRemoved(EntryEvent<String, Long> event) {
+            }
+
+            public void entryUpdated(EntryEvent<String, Long> event) {
+            }
+
+            public void entryEvicted(EntryEvent<String, Long> event) {
+                evictCount.incrementAndGet();
+            }
+        }, true);
+
+
+        String key = "key";
+        for (int i = 0; i < 5; i++) {
+            map.put(key, System.currentTimeMillis());
+            Thread.sleep(1000);
+        }
+        assertEquals(evictCount.get(), 0);
+        assertNotNull(map.get(key));
+        hazelcastInstance.getLifecycleService().shutdown();
+    }

