diff --git a/hazelcast/src/main/java/com/hazelcast/nio/serialization/DefaultPortableWriter.java b/hazelcast/src/main/java/com/hazelcast/nio/serialization/DefaultPortableWriter.java
index c2c22c0..ecb1c7f 100644
--- a/hazelcast/src/main/java/com/hazelcast/nio/serialization/DefaultPortableWriter.java
+++ b/hazelcast/src/main/java/com/hazelcast/nio/serialization/DefaultPortableWriter.java
@@ -159 +159 @@
-            out.position(offset + len * 4);
+            out.writeZeroBytes(len * 4);
diff --git a/hazelcast/src/test/java/com/hazelcast/nio/serialization/PortableTest.java b/hazelcast/src/test/java/com/hazelcast/nio/serialization/PortableTest.java
index 028c5c0..e3b242c 100644
--- a/hazelcast/src/test/java/com/hazelcast/nio/serialization/PortableTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/nio/serialization/PortableTest.java
@@ -24 +23,0 @@
-import org.junit.Assert;
@@ -30,0 +30 @@
+import java.util.ArrayList;
@@ -31,0 +32 @@
+import java.util.List;
@@ -290 +291 @@
-    public void test_1096_ByteArrayContentSame(){
+    public void test_1096_ByteArrayContentSame() {
@@ -309,0 +311,80 @@
+
+    //https://github.com/hazelcast/hazelcast/issues/2172
+    @Test
+    public void test_issue2172_WritePortableArray() {
+        final SerializationService ss = new SerializationServiceBuilder().setInitialOutputBufferSize(16).build();
+
+        final TestObject2[] testObject2s = new TestObject2[100];
+        for (int i = 0; i < testObject2s.length; i++) {
+            testObject2s[i] = new TestObject2();
+        }
+        final TestObject1 testObject1 = new TestObject1(testObject2s);
+
+        ss.toData(testObject1);
+
+    }
+
+    class TestObject1 implements Portable {
+
+        private Portable[] portables;
+
+        public TestObject1() {
+        }
+
+        public TestObject1(Portable[] p) {
+            portables = p;
+        }
+
+        @Override
+        public int getFactoryId() {
+            return FACTORY_ID;
+        }
+
+        @Override
+        public int getClassId() {
+            return 1;
+        }
+
+        @Override
+        public void writePortable(PortableWriter writer) throws IOException {
+            writer.writePortableArray("list", portables);
+        }
+
+        @Override
+        public void readPortable(PortableReader reader) throws IOException {
+            throw new UnsupportedOperationException();
+        }
+
+
+    }
+
+    class TestObject2 implements Portable {
+
+        private String shortString;
+
+        public TestObject2() {
+            shortString = "Hello World";
+        }
+
+        @Override
+        public int getFactoryId() {
+            return FACTORY_ID;
+        }
+
+        @Override
+        public int getClassId() {
+            return 2;
+        }
+
+        @Override
+        public void writePortable(PortableWriter writer) throws IOException {
+            writer.writeUTF("shortString", shortString);
+        }
+
+        @Override
+        public void readPortable(PortableReader reader) throws IOException {
+            throw new UnsupportedOperationException();
+        }
+
+    }
+
@@ -869 +949,0 @@
-

