diff --git a/hazelcast/src/main/java/com/hazelcast/map/tx/TransactionalMapProxy.java b/hazelcast/src/main/java/com/hazelcast/map/tx/TransactionalMapProxy.java
index 21a86cf..cadccde 100644
--- a/hazelcast/src/main/java/com/hazelcast/map/tx/TransactionalMapProxy.java
+++ b/hazelcast/src/main/java/com/hazelcast/map/tx/TransactionalMapProxy.java
@@ -316 +316 @@
-                valueSet.remove(entry.getValue());
+                valueSet.remove(entry.getValue().value);
diff --git a/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java b/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java
index 0f276d1..5a345b4 100644
--- a/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/map/MapTransactionTest.java
@@ -1046,0 +1047,25 @@
+
+    @Test
+    public void testValuesWithPredicate_removingExistentEntry() throws TransactionException {
+        final int nodeCount = 1;
+        final String mapName = randomMapName("_testValuesWithPredicate_removingExistentEntry_");
+        final Config config = new Config();
+        final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(nodeCount);
+        final HazelcastInstance node = factory.newHazelcastInstance(config);
+        final IMap map = node.getMap(mapName);
+
+        final SampleObjects.Employee emp = new SampleObjects.Employee("name", 77, true, 10D);
+        map.put(1, emp);
+
+        node.executeTransaction(options, new TransactionalTask<Boolean>() {
+            public Boolean execute(TransactionalTaskContext context) throws TransactionException {
+                final TransactionalMap<Object, Object> txMap = context.getMap(mapName);
+                txMap.remove(1);
+                Collection<Object> coll = txMap.values(new SqlPredicate("age > 70 "));
+                assertEquals(0, coll.size());
+                return true;
+            }
+        });
+        node.shutdown();
+    }
+

