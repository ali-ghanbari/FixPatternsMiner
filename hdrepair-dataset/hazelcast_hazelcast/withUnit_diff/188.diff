diff --git a/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java b/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java
index fa6706f..abebb51 100644
--- a/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java
+++ b/hazelcast/src/main/java/com/hazelcast/impl/ConcurrentMapManager.java
@@ -542,2 +541,0 @@
-                } else if (nearCache.getMaxSize() == Integer.MAX_VALUE) {
-                    return false;
diff --git a/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java b/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java
index 919ba08..5ccabd7 100644
--- a/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/core/HazelcastTest.java
@@ -20,0 +21 @@
+import com.hazelcast.config.NearCacheConfig;
@@ -1302,0 +1304,13 @@
+
+    @Test
+    public void testIssue174NearCacheContainsKeySingleNode() {
+        Config config = new Config();
+        config.getGroupConfig().setName("testIssue174NearCacheContainsKeySingleNode");
+        NearCacheConfig nearCacheConfig = new NearCacheConfig();
+        config.getMapConfig("default").setNearCacheConfig(nearCacheConfig);
+        HazelcastInstance h = Hazelcast.newHazelcastInstance(config);
+        IMap<String,String> map = h.getMap("testIssue174NearCacheContainsKeySingleNode");
+        map.put("key","value");
+        assertTrue(map.containsKey("key"));
+        h.getLifecycleService().shutdown();
+    }

