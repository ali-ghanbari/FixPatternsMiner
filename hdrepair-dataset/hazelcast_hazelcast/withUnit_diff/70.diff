diff --git a/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java b/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java
index 74aafc7..119068a 100644
--- a/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java
+++ b/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java
@@ -156,0 +157,3 @@
+        // this get is needed for updating size estimator.
+        final Record existingRecord = records.get(key);
+        updateSizeEstimator(-calculateRecordSize(existingRecord));
diff --git a/hazelcast/src/test/java/com/hazelcast/map/SizeEstimatorTest.java b/hazelcast/src/test/java/com/hazelcast/map/SizeEstimatorTest.java
index 771004b..80440c2 100644
--- a/hazelcast/src/test/java/com/hazelcast/map/SizeEstimatorTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/map/SizeEstimatorTest.java
@@ -55,0 +56,36 @@
+
+    @Test
+    public void testHowUpdatesAffectHeapCostWithMultipleBackupNodes() throws InterruptedException {
+        // constants.
+        final String mapName = randomMapName("testUpdatesWithMultipleNodes");
+        final int nodeCount = 3;
+        final int backupCount = nodeCount - 1;
+        final int expectedReplicaCount = nodeCount;
+        final long putCount = 1L;
+        final long expectedPerEntryHeapCost = 168L;
+        // config.
+        final Config config = new Config();
+        config.getMapConfig(mapName).setBackupCount(backupCount);
+        // nodes.
+        final TestHazelcastInstanceFactory instanceFactory = new TestHazelcastInstanceFactory(nodeCount);
+        final HazelcastInstance[] nodes = instanceFactory.newInstances(config);
+        // map.
+        final IMap<Long, Long> map = nodes[0].getMap(mapName);
+        // put.
+        for (long i = 0; i < putCount; i++) {
+            map.put(i, i);
+        }
+        // update.
+        for (long i = 0; i < putCount; i++) {
+            map.put(i, i);
+        }
+        // heap cost.
+        long heapCost = 0L;
+        for (int i = 0; i < nodeCount; i++) {
+            heapCost += nodes[i].getMap(mapName).getLocalMapStats().getHeapCost();
+        }
+        // assert heap cost.
+        assertEquals("Map heap cost calculation is wrong!",
+                expectedPerEntryHeapCost * putCount * expectedReplicaCount, heapCost);
+    }
+

