diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java
index 23d7f46..4b8a24b 100644
--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java
+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/BasicInvocationFuture.java
@@ -77 +77 @@
-            if (response != null) {
+            if (response != null && !(response instanceof BasicInvocation.InternalResponse)) {
diff --git a/hazelcast/src/test/java/com/hazelcast/executor/ExecutorServiceTest.java b/hazelcast/src/test/java/com/hazelcast/executor/ExecutorServiceTest.java
index 31bcbe2..8f1bfc3 100644
--- a/hazelcast/src/test/java/com/hazelcast/executor/ExecutorServiceTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/executor/ExecutorServiceTest.java
@@ -41,0 +42,7 @@
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.junit.runner.RunWith;
+
+import javax.script.ScriptEngine;
+import javax.script.ScriptEngineManager;
+import javax.script.ScriptException;
@@ -66,6 +72,0 @@
-import javax.script.ScriptEngine;
-import javax.script.ScriptEngineManager;
-import javax.script.ScriptException;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-import org.junit.runner.RunWith;
@@ -96,0 +98,25 @@
+    @Test
+    public void testAndThen() throws ExecutionException, InterruptedException {
+        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);
+        HazelcastInstance instance1 = factory.newHazelcastInstance();
+        HazelcastInstance instance2 = factory.newHazelcastInstance();
+        String name = randomString();
+        IExecutorService executorService = instance2.getExecutorService(name);
+        BasicTestTask task = new BasicTestTask();
+        String key = generateKeyOwnedBy(instance1);
+        ICompletableFuture<String> future = (ICompletableFuture<String>) executorService.submitToKeyOwner(task, key);
+        final CountDownLatch latch = new CountDownLatch(1);
+        future.andThen(new ExecutionCallback<String>() {
+            @Override
+            public void onResponse(String response) {
+                latch.countDown();
+            }
+
+            @Override
+            public void onFailure(Throwable t) {
+            }
+        });
+        future.get();
+        assertOpenEventually(latch, 10);
+    }
+

