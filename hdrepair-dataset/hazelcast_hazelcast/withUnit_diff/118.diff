diff --git a/hazelcast/src/test/java/com/hazelcast/map/MapLockTest.java b/hazelcast/src/test/java/com/hazelcast/map/MapLockTest.java
index cc2959b..6c33ef4 100644
--- a/hazelcast/src/test/java/com/hazelcast/map/MapLockTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/map/MapLockTest.java
@@ -20,0 +21 @@
+import com.hazelcast.core.ILock;
@@ -21,0 +23 @@
+import com.hazelcast.test.AssertTask;
@@ -36,0 +39 @@
+import static junit.framework.Assert.assertEquals;
@@ -37,0 +41 @@
+import static org.junit.Assert.assertNotNull;
@@ -170 +173,0 @@
-
@@ -199,0 +203,4 @@
+    @Test(timeout = 1000*15, expected = IllegalMonitorStateException.class)
+    public void testLockOwnership() throws Exception {
+        final TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(2);
+        final Config config = new Config();
@@ -200,0 +208,55 @@
+        final HazelcastInstance node1 = nodeFactory.newHazelcastInstance(config);
+        final HazelcastInstance node2 = nodeFactory.newHazelcastInstance(config);
+
+        final IMap map1 = node1.getMap("map");
+        final IMap map2 = node2.getMap("map");
+
+        map1.lock(1);
+        map2.unlock(1);
+    }
+
+    @Test(timeout = 1000*30)
+    public void testAbsentKeyIsLocked() throws Exception {
+        final TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(2);
+
+        final String MAP_A = "MAP_A";
+        final String KEY = "KEY";
+        final String VAL_2 = "VAL_2";
+
+        final HazelcastInstance node1 = nodeFactory.newHazelcastInstance();
+        final HazelcastInstance node2 = nodeFactory.newHazelcastInstance();
+
+        final IMap map1 = node1.getMap(MAP_A);
+        final IMap map2 = node2.getMap(MAP_A);
+
+        map1.lock(KEY);
+        boolean putResult = map2.tryPut(KEY, VAL_2, 2, TimeUnit.SECONDS);
+
+        Assert.assertFalse("the result of try put should be false as the absent key is locked", putResult);
+        assertTrueEventually(new AssertTask() {
+            public void run() {
+                Assert.assertEquals("the key should be absent ", null, map1.get(KEY));
+                Assert.assertEquals("the key should be absent ", null, map2.get(KEY));
+            }
+        });
+    }
+
+    @Test
+    public void testLockTTLKey() {
+        final TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(2);
+        final HazelcastInstance node1 = nodeFactory.newHazelcastInstance();
+
+        final IMap map = node1.getMap("map");
+        final String KEY = "key";
+        final String VAL = "val";
+
+        final int TTL_SEC = 1;
+        map.put(KEY, VAL, TTL_SEC, TimeUnit.SECONDS);
+        map.lock(KEY);
+
+        sleepSeconds(TTL_SEC * 2);
+
+        assertEquals("TTL of KEY has expired, KEY is locked, we expect VAL", VAL, map.get(KEY));
+        map.unlock(KEY);
+        assertEquals("TTL of KEY has expired, KEY is unlocked, we expect null", null, map.get(KEY));
+    }
diff --git a/hazelcast/src/test/java/com/hazelcast/map/query/QueryAdvancedTest.java b/hazelcast/src/test/java/com/hazelcast/map/query/QueryAdvancedTest.java
index db18a53..2a8a6fd 100644
--- a/hazelcast/src/test/java/com/hazelcast/map/query/QueryAdvancedTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/map/query/QueryAdvancedTest.java
@@ -28,0 +29 @@
+import com.hazelcast.test.AssertTask;
@@ -125,2 +126 @@
-    @Test(timeout=1000*60)
-    @Category(ProblematicTest.class)
+    @Test
@@ -130 +130 @@
-        HazelcastInstance h1 = nodeFactory.newHazelcastInstance(cfg);
+        final HazelcastInstance h1 = nodeFactory.newHazelcastInstance(cfg);
@@ -135 +135 @@
-        int size = 50000;
+        int size = 500;
@@ -143,5 +143,10 @@
-        long startNow = Clock.currentTimeMillis();
-        while ((Clock.currentTimeMillis() - startNow) < 10000) {
-            Collection<Employee> values = imap.values(new SqlPredicate("active and name LIKE 'joe15%'"));
-            for (Employee employee : values) {
-                assertTrue(employee.isActive());
+
+        final IMap employees = h1.getMap("employees");
+        assertTrueAllTheTime(new AssertTask() {
+            @Override
+            public void run() throws Exception {
+                Collection<Employee> values = employees.values(new SqlPredicate("active and name LIKE 'joe15%'"));
+                for (Employee employee : values) {
+                    assertTrue(employee.isActive());
+                }
+                assertEquals(6, values.size());
@@ -149,2 +154,2 @@
-            assertEquals(556, values.size());
-        }
+        },3);
+
@@ -153,2 +158 @@
-    @Test(timeout=1000*60)
-    @Category(ProblematicTest.class)
+    @Test
@@ -162,3 +166,3 @@
-        for (int i = 0; i < 500; i++) {
-            Map temp = new HashMap(100);
-            for (int j = 0; j < 100; j++) {
+        for (int i = 0; i < 50; i++) {
+            Map temp = new HashMap(10);
+            for (int j = 0; j < 10; j++) {
@@ -170 +174 @@
-        assertEquals(50000, imap.size());
+        assertEquals(500, imap.size());
@@ -172 +176 @@
-        assertEquals(6400, entries.size());
+        assertEquals(30, entries.size());
@@ -180 +184 @@
-            assertEquals(6400, entries.size());
+            assertEquals(30, entries.size());
@@ -185 +188,0 @@
-    @Category(ProblematicTest.class)
@@ -194 +197 @@
-        for (int i = 0; i < 5000; i++) {
+        for (int i = 0; i < 500; i++) {
@@ -205 +208 @@
-        assertEquals(50, entries.size());
+        assertEquals(5, entries.size());
@@ -211 +214 @@
-        assertEquals(50, entries.size());
+        assertEquals(5, entries.size());
@@ -218 +221 @@
-        assertEquals(50, entries.size());
+        assertEquals(5, entries.size());
@@ -462,3 +465,2 @@
-    @Test(timeout=1000*60)
-    @Category(ProblematicTest.class)
-    public void testShutDown() {
+    @Test
+    public void testMapWithIndexAfterShutDown() {
@@ -466,9 +468,10 @@
-        cfg.getMapConfig("testShutDown").addMapIndexConfig(new MapIndexConfig("typeName", false));
-        TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(3);
-        HazelcastInstance instance = nodeFactory.newHazelcastInstance(cfg);
-        HazelcastInstance instance2 = nodeFactory.newHazelcastInstance(cfg);
-        HazelcastInstance instance3 = nodeFactory.newHazelcastInstance(cfg);
-        IMap map = instance.getMap("testShutDown");
-        int allsize = 10000;
-        int targetSize = 3000;
-        for (int i = 0; i < allsize; i++) {
+        cfg.getMapConfig("testMapWithIndexAfterShutDown").addMapIndexConfig(new MapIndexConfig("typeName", false));
+
+        HazelcastInstance[] instances = createHazelcastInstanceFactory(3).newInstances(cfg);
+
+        IMap map = instances[0].getMap("testMapWithIndexAfterShutDown");
+        int SAMPLE_SIZE_1 = 100;
+        int SAMPLE_SIZE_2 = 30;
+        int TOTAL_SIZE = SAMPLE_SIZE_1 + SAMPLE_SIZE_2;
+
+        for (int i = 0; i < SAMPLE_SIZE_1; i++) {
@@ -478 +481 @@
-        for (int i = allsize; i < allsize+targetSize; i++) {
+        for (int i = SAMPLE_SIZE_1; i < TOTAL_SIZE; i++) {
@@ -481,8 +484,14 @@
-        assertEquals(targetSize, map.values(new SqlPredicate("typeName = typex")).size());
-        instance2.shutdown();
-        // todo: this test fails if you first check the query, see issue 1282
-        assertEquals(allsize + targetSize, map.size());
-        assertEquals(targetSize, map.values(new SqlPredicate("typeName = typex")).size());
-        instance3.shutdown();
-        assertEquals(allsize + targetSize, map.size());
-        assertEquals(targetSize, map.values(new SqlPredicate("typeName = typex")).size());
+
+        Collection typexValues = map.values(new SqlPredicate("typeName = typex"));
+        assertEquals(SAMPLE_SIZE_2, typexValues.size());
+
+        instances[1].shutdown();
+
+        typexValues = map.values(new SqlPredicate("typeName = typex"));
+        assertEquals(TOTAL_SIZE, map.size());
+        assertEquals(SAMPLE_SIZE_2,typexValues.size());
+
+        instances[2].shutdown();
+
+        assertEquals(TOTAL_SIZE, map.size());
+        assertEquals(SAMPLE_SIZE_2, map.values(new SqlPredicate("typeName = typex")).size());
diff --git a/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java b/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java
index 4fbdf06..1010df6 100644
--- a/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java
+++ b/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java
@@ -50 +50 @@
-        while (numThreads.get() > MAX_THREADS) {
+        while (numThreads.get() >= MAX_THREADS) {

