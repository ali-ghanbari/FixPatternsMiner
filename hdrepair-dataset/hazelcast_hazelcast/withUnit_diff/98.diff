diff --git a/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java b/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java
index 7053bf4..7ccd999 100644
--- a/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java
+++ b/hazelcast/src/main/java/com/hazelcast/map/DefaultRecordStore.java
@@ -434 +434,2 @@
-        Set<Object> keysObject = new HashSet<Object>(keysToDelete.size());
+        // Use an ArrayList so that we don't trigger calls to equals or hashCode on the key objects
+        Collection<Object> keysObject = new ArrayList<Object>(keysToDelete.size());
diff --git a/hazelcast/src/test/java/com/hazelcast/map/IssuesTest.java b/hazelcast/src/test/java/com/hazelcast/map/IssuesTest.java
index 50b19de..1bd59c1 100644
--- a/hazelcast/src/test/java/com/hazelcast/map/IssuesTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/map/IssuesTest.java
@@ -34,0 +35 @@
+import java.io.Serializable;
@@ -274,0 +276,30 @@
+    @Test // Issue #1795
+    public void testMapClearDoesNotTriggerEqualsOrHashCodeOnKeyObject() {
+        int n = 1;
+        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(n);
+        final HazelcastInstance instance = factory.newHazelcastInstance();
+        final IMap map = instance.getMap(randomString());
+        final CompositeKey key = new CompositeKey();
+        map.put(key, "value");
+        map.clear();
+        assertFalse("hashCode method should not have been called on key during clear", CompositeKey.hashCodeCalled);
+        assertFalse("equals method should not have been called on key during clear", CompositeKey.equalsCalled);
+    }
+
+    public static class CompositeKey implements Serializable
+    {
+        static boolean hashCodeCalled = false;
+        static boolean equalsCalled = false;
+
+        @Override
+        public int hashCode() {
+            hashCodeCalled = true;
+            return super.hashCode();
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            equalsCalled = true;
+            return super.equals(o);
+        }
+    }

