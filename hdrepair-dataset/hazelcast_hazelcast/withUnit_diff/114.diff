diff --git a/hazelcast/src/main/java/com/hazelcast/map/merge/PassThroughMergePolicy.java b/hazelcast/src/main/java/com/hazelcast/map/merge/PassThroughMergePolicy.java
index 325b03f..3047bd7 100644
--- a/hazelcast/src/main/java/com/hazelcast/map/merge/PassThroughMergePolicy.java
+++ b/hazelcast/src/main/java/com/hazelcast/map/merge/PassThroughMergePolicy.java
@@ -30 +30 @@
- * if source entry has updated more recently than the destination entry.
+ * unless merging entry is not null.
diff --git a/hazelcast/src/test/java/com/hazelcast/map/query/QueryAdvancedTest.java b/hazelcast/src/test/java/com/hazelcast/map/query/QueryAdvancedTest.java
index 2a8a6fd..1804eed 100644
--- a/hazelcast/src/test/java/com/hazelcast/map/query/QueryAdvancedTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/map/query/QueryAdvancedTest.java
@@ -472,3 +472,3 @@
-        IMap map = instances[0].getMap("testMapWithIndexAfterShutDown");
-        int SAMPLE_SIZE_1 = 100;
-        int SAMPLE_SIZE_2 = 30;
+        final IMap map = instances[0].getMap("testMapWithIndexAfterShutDown");
+        final int SAMPLE_SIZE_1 = 100;
+        final int SAMPLE_SIZE_2 = 30;
@@ -490 +489,0 @@
-        typexValues = map.values(new SqlPredicate("typeName = typex"));
@@ -492 +491,6 @@
-        assertEquals(SAMPLE_SIZE_2,typexValues.size());
+        assertTrueEventually(new AssertTask() {
+            public void run() {
+                final Collection values = map.values(new SqlPredicate("typeName = typex"));
+                assertEquals(SAMPLE_SIZE_2, values.size());
+            }
+        });
@@ -497 +501,6 @@
-        assertEquals(SAMPLE_SIZE_2, map.values(new SqlPredicate("typeName = typex")).size());
+        assertTrueEventually(new AssertTask() {
+            public void run() {
+                final Collection values = map.values(new SqlPredicate("typeName = typex"));
+                assertEquals(SAMPLE_SIZE_2, values.size());
+            }
+        });

