diff --git a/hazelcast-documentation/src/EntryProcessor.md b/hazelcast-documentation/src/EntryProcessor.md
index 7171bad..95c95cb 100644
--- a/hazelcast-documentation/src/EntryProcessor.md
+++ b/hazelcast-documentation/src/EntryProcessor.md
@@ -16 +16 @@
-***NOTE***: When `in-memory-format` is `OBJECT` old value of the updated entry will be null.
+***NOTE***: When `in-memory-format` is `OBJECT`, old value of the updated entry will be null.
@@ -70 +70 @@
-***NOTE***: You should explicitly call ```setValue``` method of ```Map.Entry``` when modifying data in EP otherwise EP will be accepted as read-only.
+***NOTE***: You should explicitly call `setValue` method of `Map.Entry` when modifying data in Entry Processor. Otherwise, Entry Processpr will be accepted as read-only.
diff --git a/hazelcast-documentation/src/HazelcastConfiguration.md b/hazelcast-documentation/src/HazelcastConfiguration.md
index 44c206e..c13104d 100644
--- a/hazelcast-documentation/src/HazelcastConfiguration.md
+++ b/hazelcast-documentation/src/HazelcastConfiguration.md
@@ -480 +480 @@
-- `statistics-enabled: If set as `true`, you can retrieve statistics for this Queue using the method `getLocalQueueStats()`.
+- `statistics-enabled`: If set as `true`, you can retrieve statistics for this Queue using the method `getLocalQueueStats()`.
@@ -484 +484 @@
-This configuration is for ???. It has below attributes.
+**Declarative Configuration:**
@@ -486,3 +486,53 @@
-- statistics-enabled:
-- global-ordering-enabled:
-- message-listeners:
+```xml
+<hazelcast>
+  ...
+  <topic name="yourTopicName">
+    <global-ordering-enabled>true</global-ordering-enabled>
+    <statistics-enabled>true</statistics-enabled>
+    <message-listeners>
+      <message-listener>MessageListenerImpl</message-listener>
+    </message-listeners>
+  </topic>
+  ...
+</hazelcast>
+```
+
+**Programmatic Configuration:**
+
+```java
+TopicConfig topicConfig = new TopicConfig();
+topicConfig.setGlobalOrderingEnabled( true );
+topicConfig.setStatisticsEnabled( true );
+topicConfig.setName( "yourTopicName" );
+MessageListener<String> implementation = new MessageListener<String>() {
+  @Override
+  public void onMessage( Message<String> message ) {
+    // process the message
+  }
+};
+topicConfig.addMessageListenerConfig( new ListenerConfig( implementation ) );
+HazelcastInstance instance = Hazelcast.newHazelcastInstance()
+```
+
+
+It has below attributes.
+
+- statistics-enabled: By default, it is **true**, meaning statistics are calculated.
+- global-ordering-enabled: By default, it is **false**, meaning there is no global order guarantee by default.???
+- message-listeners: ???
+
+
+
+Topic related but not topic specific configuration parameters
+
+   - `hazelcast.event.queue.capacity`: default value is 1,000,000.
+   - `hazelcast.event.queue.timeout.millis`: default value is 250.
+   - `hazelcast.event.thread.count`: default value is 5.
+   
+<br></br>
+***RELATED INFORMATION*** 
+
+*For description of these parameters, please see [Global Event Configuration](#global-event-configuration)*
+
+
+
diff --git a/hazelcast/src/main/java/com/hazelcast/core/MapStore.java b/hazelcast/src/main/java/com/hazelcast/core/MapStore.java
index a38abd1..b4db8ad 100644
--- a/hazelcast/src/main/java/com/hazelcast/core/MapStore.java
+++ b/hazelcast/src/main/java/com/hazelcast/core/MapStore.java
@@ -36,0 +37,4 @@
+ * <p/>
+ * Note that in write-behind mode, there is a possibility that a map-store
+ * implementation can be used by multiple threads at the same time, calling methods like
+ * {@link IMap#flush()} or {@link IMap#evict(Object)} may trigger this behavior.
diff --git a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionTest.java b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionTest.java
index bfaf5cf..6d399f7 100644
--- a/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/concurrent/lock/ConditionTest.java
@@ -33,0 +34 @@
+import static org.junit.Assert.assertTrue;
@@ -159,5 +160,2 @@
-    public void testAwaitTime_whenNotSignalled() throws InterruptedException {
-        Config config = new Config();
-        int callTimeoutMillis = 3000;
-        config.setProperty("hazelcast.operation.call.timeout.millis", String.valueOf(callTimeoutMillis));
-        HazelcastInstance instance = createHazelcastInstance(config);
+    public void testAwaitTime_whenTimeout() throws InterruptedException {
+       HazelcastInstance instance = createHazelcastInstance();
@@ -166,5 +164 @@
-        String name = randomString();
-        final ICondition condition0 = lock.newCondition(name);
-
-        final int awaitMillis = callTimeoutMillis * 3;
-
+        final ICondition condition = lock.newCondition(randomString());
@@ -172,8 +166,5 @@
-        try {
-            final long begin = System.currentTimeMillis();
-            condition0.await(awaitMillis, TimeUnit.MILLISECONDS);
-            final long end = System.currentTimeMillis();
-            assertEquals(awaitMillis, end - begin, 1000);
-        } finally {
-            lock.unlock();
-        }
+
+        boolean success = condition.await(1, TimeUnit.MILLISECONDS);
+
+        assertFalse(success);
+        assertTrue(lock.isLockedByCurrentThread());

