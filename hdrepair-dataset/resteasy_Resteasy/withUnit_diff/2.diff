diff --git a/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/util/WeightedMediaType.java b/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/util/WeightedMediaType.java
index 80a0959..397b899 100644
--- a/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/util/WeightedMediaType.java
+++ b/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/util/WeightedMediaType.java
@@ -149 +149 @@
-         throw new RuntimeException("MediaType q parameter must be a float: " + type, e);
+         throw new LoggableFailure("MediaType q parameter must be a float: " + type, HttpResponseCodes.SC_BAD_REQUEST);
diff --git a/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/finegrain/resource/ClientErrorTest.java b/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/finegrain/resource/ClientErrorTest.java
index 36c5fae..e1d205e 100644
--- a/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/finegrain/resource/ClientErrorTest.java
+++ b/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/finegrain/resource/ClientErrorTest.java
@@ -225,0 +226,58 @@
+   @Test
+   public void testBadAcceptMediaTypeNoSubType()
+   {
+      HttpClient client = new HttpClient();
+      GetMethod method = createGetMethod("/complex/match");
+      method.addRequestHeader(HttpHeaderNames.ACCEPT, "text");
+      try
+      {
+         int status = client.executeMethod(method);
+         Assert.assertEquals(status, HttpServletResponse.SC_BAD_REQUEST);
+      }
+      catch (IOException e)
+      {
+         throw new RuntimeException(e);
+      }
+      finally {
+         method.releaseConnection();
+      }
+   }
+
+   @Test
+   public void testBadAcceptMediaTypeNonNumericQualityValue()
+   {
+      HttpClient client = new HttpClient();
+      GetMethod method = createGetMethod("/complex/match");
+      method.addRequestHeader(HttpHeaderNames.ACCEPT, "text/plain; q=bad");
+      try
+      {
+         int status = client.executeMethod(method);
+         Assert.assertEquals(status, HttpServletResponse.SC_BAD_REQUEST);
+      }
+      catch (IOException e)
+      {
+         throw new RuntimeException(e);
+      }
+      finally {
+         method.releaseConnection();
+      }
+   }
+
+   @Test
+   public void testBadContentType()
+   {
+      HttpClient client = new HttpClient();
+      PostMethod method = createPostMethod("/");
+      try
+      {
+         method.setRequestEntity(new StringRequestEntity("content", "text", null));
+         int status = client.executeMethod(method);
+         Assert.assertEquals(status, HttpResponseCodes.SC_BAD_REQUEST);
+      }
+      catch (IOException e)
+      {
+         method.releaseConnection();
+         throw new RuntimeException(e);
+      }
+      method.releaseConnection();
+   }

