diff --git a/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/util/AcceptableVariant.java b/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/util/AcceptableVariant.java
index 3732733..68a09ff 100644
--- a/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/util/AcceptableVariant.java
+++ b/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/util/AcceptableVariant.java
@@ -130 +130 @@
-            return produce.getVariant();
+            if (match) return produce.getVariant();
diff --git a/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/finegrain/resource/VariantsTest.java b/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/finegrain/resource/VariantsTest.java
index 192e5ca..7831c66 100644
--- a/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/finegrain/resource/VariantsTest.java
+++ b/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/finegrain/resource/VariantsTest.java
@@ -41,0 +42 @@
+      dispatcher.getRegistry().addPerRequestResource(EncodingVariantResource.class);
@@ -272,0 +274,78 @@
+   @Path("/encoding")
+   public static class EncodingVariantResource
+   {
+      @GET
+      public Response doGet(@Context Request r)
+      {
+         List<Variant> vs = Variant.VariantListBuilder.newInstance().languages(new Locale("en")).encodings("enc1", "enc2", "enc3").add().build();
+         Variant v = r.selectVariant(vs);
+         if (v == null)
+            return Response.notAcceptable(vs).build();
+         else
+            return Response.ok(v.getEncoding(), v).build();
+      }
+   }
+
+   @Test
+   public void testGetEncoding1() throws IOException
+   {
+      HttpClient client = new HttpClient();
+      GetMethod method = createGetMethod("/encoding");
+      method.addRequestHeader(HttpHeaderNames.ACCEPT_LANGUAGE, "en");
+      method.addRequestHeader(HttpHeaderNames.ACCEPT_ENCODING, "enc1");
+      try
+      {
+         int status = client.executeMethod(method);
+         Assert.assertEquals(status, HttpResponseCodes.SC_OK);
+         Assert.assertEquals("enc1", method.getResponseBodyAsString());
+         Assert.assertEquals("enc1", method.getResponseHeader(HttpHeaderNames.CONTENT_ENCODING).getValue());
+      }
+      catch (IOException e)
+      {
+         throw new RuntimeException(e);
+      }
+      method.releaseConnection();
+   }
+
+   @Test
+   public void testGetEncoding2() throws IOException
+   {
+      HttpClient client = new HttpClient();
+      GetMethod method = createGetMethod("/encoding");
+      method.addRequestHeader(HttpHeaderNames.ACCEPT_LANGUAGE, "en");
+      method.addRequestHeader(HttpHeaderNames.ACCEPT_ENCODING, "enc2");
+      try
+      {
+         int status = client.executeMethod(method);
+         Assert.assertEquals(status, HttpResponseCodes.SC_OK);
+         Assert.assertEquals("enc2", method.getResponseBodyAsString());
+         Assert.assertEquals("enc2", method.getResponseHeader(HttpHeaderNames.CONTENT_ENCODING).getValue());
+      }
+      catch (IOException e)
+      {
+         throw new RuntimeException(e);
+      }
+      method.releaseConnection();
+   }
+
+   @Test
+   public void testGetEncoding3() throws IOException
+   {
+      HttpClient client = new HttpClient();
+      GetMethod method = createGetMethod("/encoding");
+      method.addRequestHeader(HttpHeaderNames.ACCEPT_LANGUAGE, "en");
+      method.addRequestHeader(HttpHeaderNames.ACCEPT_ENCODING, "enc3");
+      try
+      {
+         int status = client.executeMethod(method);
+         Assert.assertEquals(status, HttpResponseCodes.SC_OK);
+         Assert.assertEquals("enc3", method.getResponseBodyAsString());
+         Assert.assertEquals("enc3", method.getResponseHeader(HttpHeaderNames.CONTENT_ENCODING).getValue());
+      }
+      catch (IOException e)
+      {
+         throw new RuntimeException(e);
+      }
+      method.releaseConnection();
+   }
+

