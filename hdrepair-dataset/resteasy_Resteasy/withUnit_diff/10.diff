diff --git a/jaxrs/docbook/reference/en/modules/Abdera.xml b/jaxrs/docbook/reference/en/modules/Abdera.xml
deleted file mode 100644
index 61bd09b..0000000
--- a/jaxrs/docbook/reference/en/modules/Abdera.xml
+++ /dev/null
@@ -1,187 +0,0 @@
-<sect1 id="Adera">
-   <title>Atom support through Apache Abdera</title>
-   <para>
-      Resteasy provides support for Apache Abdera, an implementation of the Atom protocol and data format.
-      http://incubator.apache.org/abdera/
-   </para>
-   <para>
-      Abdera is a full-fledged Atom server. Resteasy only supports integration with JAX-RS for Atom data format
-      marshalling and unmarshalling to and from the Feed and Entry interface types in Abdera. Here's a simple example:
-   </para>
-   <programlisting><![CDATA[
-import org.apache.abdera.Abdera;
-import org.apache.abdera.factory.Factory;
-import org.apache.abdera.model.Entry;
-import org.apache.abdera.model.Feed;
-import org.apache.commons.httpclient.HttpClient;
-import org.apache.commons.httpclient.methods.GetMethod;
-import org.apache.commons.httpclient.methods.PutMethod;
-import org.apache.commons.httpclient.methods.StringRequestEntity;
-import org.jboss.resteasy.plugins.providers.atom.AbderaEntryProvider;
-import org.jboss.resteasy.plugins.providers.atom.AbderaFeedProvider;
-import org.jboss.resteasy.test.BaseResourceTest;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-import javax.ws.rs.Consumes;
-import javax.ws.rs.GET;
-import javax.ws.rs.PUT;
-import javax.ws.rs.Path;
-import javax.ws.rs.Produces;
-import javax.ws.rs.core.Context;
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.UriInfo;
-import javax.xml.bind.JAXBContext;
-import java.io.StringReader;
-import java.io.StringWriter;
-import java.util.Date;
-
-/**
- * @author <a href="mailto:bill@burkecentral.com">Bill Burke</a>
- * @version $Revision: 1 $
- */
-public class AbderaTest extends BaseResourceTest
-{
-
-   @Path("atom")
-   public static class MyResource
-   {
-      private static final Abdera abdera = new Abdera();
-
-      @GET
-      @Path("feed")
-      @Produces(MediaType.APPLICATION_ATOM_XML)
-      public Feed getFeed(@Context UriInfo uri) throws Exception
-      {
-         Factory factory = abdera.getFactory();
-         Assert.assertNotNull(factory);
-         Feed feed = abdera.getFactory().newFeed();
-         feed.setId("tag:example.org,2007:/foo");
-         feed.setTitle("Test Feed");
-         feed.setSubtitle("Feed subtitle");
-         feed.setUpdated(new Date());
-         feed.addAuthor("James Snell");
-         feed.addLink("http://example.com");
-
-
-         Entry entry = feed.addEntry();
-         entry.setId("tag:example.org,2007:/foo/entries/1");
-         entry.setTitle("Entry title");
-         entry.setUpdated(new Date());
-         entry.setPublished(new Date());
-         entry.addLink(uri.getRequestUri().toString());
-
-         Customer cust = new Customer("bill");
-
-         JAXBContext ctx = JAXBContext.newInstance(Customer.class);
-         StringWriter writer = new StringWriter();
-         ctx.createMarshaller().marshal(cust, writer);
-         entry.setContent(writer.toString(), "application/xml");
-         return feed;
-
-      }
-
-      @PUT
-      @Path("feed")
-      @Consumes(MediaType.APPLICATION_ATOM_XML)
-      public void putFeed(Feed feed) throws Exception
-      {
-         String content = feed.getEntries().get(0).getContent();
-         JAXBContext ctx = JAXBContext.newInstance(Customer.class);
-         Customer cust = (Customer) ctx.createUnmarshaller().unmarshal(new StringReader(content));
-         Assert.assertEquals("bill", cust.getName());
-
-      }
-
-      @GET
-      @Path("entry")
-      @Produces(MediaType.APPLICATION_ATOM_XML)
-      public Entry getEntry(@Context UriInfo uri) throws Exception
-      {
-         Entry entry = abdera.getFactory().newEntry();
-         entry.setId("tag:example.org,2007:/foo/entries/1");
-         entry.setTitle("Entry title");
-         entry.setUpdated(new Date());
-         entry.setPublished(new Date());
-         entry.addLink(uri.getRequestUri().toString());
-
-         Customer cust = new Customer("bill");
-
-         JAXBContext ctx = JAXBContext.newInstance(Customer.class);
-         StringWriter writer = new StringWriter();
-         ctx.createMarshaller().marshal(cust, writer);
-         entry.setContent(writer.toString(), "application/xml");
-         return entry;
-
-      }
-
-      @PUT
-      @Path("entry")
-      @Consumes(MediaType.APPLICATION_ATOM_XML)
-      public void putFeed(Entry entry) throws Exception
-      {
-         String content = entry.getContent();
-         JAXBContext ctx = JAXBContext.newInstance(Customer.class);
-         Customer cust = (Customer) ctx.createUnmarshaller().unmarshal(new StringReader(content));
-         Assert.assertEquals("bill", cust.getName());
-
-      }
-   }
-
-   @Before
-   public void setUp() throws Exception
-   {
-      dispatcher.getProviderFactory().registerProvider(AbderaFeedProvider.class);
-      dispatcher.getProviderFactory().registerProvider(AbderaEntryProvider.class);
-      dispatcher.getRegistry().addPerRequestResource(MyResource.class);
-   }
-
-   @Test
-   public void testAbderaFeed() throws Exception
-   {
-      HttpClient client = new HttpClient();
-      GetMethod method = new GetMethod("http://localhost:8081/atom/feed");
-      int status = client.executeMethod(method);
-      Assert.assertEquals(200, status);
-      String str = method.getResponseBodyAsString();
-
-      PutMethod put = new PutMethod("http://localhost:8081/atom/feed");
-      put.setRequestEntity(new StringRequestEntity(str, MediaType.APPLICATION_ATOM_XML, null));
-      status = client.executeMethod(put);
-      Assert.assertEquals(200, status);
-
-   }
-
-   @Test
-   public void testAbderaEntry() throws Exception
-   {
-      HttpClient client = new HttpClient();
-      GetMethod method = new GetMethod("http://localhost:8081/atom/entry");
-      int status = client.executeMethod(method);
-      Assert.assertEquals(200, status);
-      String str = method.getResponseBodyAsString();
-
-      PutMethod put = new PutMethod("http://localhost:8081/atom/entry");
-      put.setRequestEntity(new StringRequestEntity(str, MediaType.APPLICATION_ATOM_XML, null));
-      status = client.executeMethod(put);
-      Assert.assertEquals(200, status);
-   }
-}
-]]>
-   </programlisting>
-   <sect2 id="Abdera and Maven">
-      <title>Abdera and Maven</title>
-      <para>The Abdera provider is not included within the resteasy-jaxrs artifact. To include the Abdera provider
-         in your WAR poms, include the following. Please change the version to be the version of resteasy you
-         are working with. Also, Resteasy may be coded to pick up an older version of Abdera than what you want. You're
-         on your own at fixing this one, sorry.
-      </para>
-      <programlisting><![CDATA[
-   <dependency>
-      <groupId>org.jboss.resteasy</groupId>
-      <artifactId>abdera-atom-provider</artifactId>
-   </dependency>
-]]></programlisting>
-   </sect2>
-</sect1>
\ No newline at end of file
diff --git a/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/core/ResourceMethod.java b/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/core/ResourceMethod.java
index e1450a5..4f996c3 100644
--- a/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/core/ResourceMethod.java
+++ b/jaxrs/resteasy-jaxrs/src/main/java/org/jboss/resteasy/core/ResourceMethod.java
@@ -199 +199 @@
-      if (method.getReturnType().equals(Response.class))
+      if (Response.class.isAssignableFrom(method.getReturnType()) || rtn instanceof Response)
diff --git a/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/regression/RegressionTest.java b/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/regression/RegressionTest.java
index 6072a8a..2523589 100644
--- a/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/regression/RegressionTest.java
+++ b/jaxrs/resteasy-jaxrs/src/test/java/org/jboss/resteasy/test/regression/RegressionTest.java
@@ -16 +15,0 @@
-import java.net.URL;
@@ -17,0 +17 @@
+import java.net.URL;
@@ -51 +51 @@
-      public Response getComplex()
+      public Object getComplex()
@@ -96 +96 @@
-         HttpURLConnection conn = (HttpURLConnection)url.openConnection();
+         HttpURLConnection conn = (HttpURLConnection) url.openConnection();
@@ -105 +105 @@
-    * Test JIRA bug RESTEASY-24
+    * Test JIRA bug RESTEASY-24 and 139

