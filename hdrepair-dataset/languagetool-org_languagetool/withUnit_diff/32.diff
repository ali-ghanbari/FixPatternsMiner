diff --git a/languagetool-core/src/main/java/org/languagetool/rules/patterns/Unifier.java b/languagetool-core/src/main/java/org/languagetool/rules/patterns/Unifier.java
index 95c5b19..a357be7 100644
--- a/languagetool-core/src/main/java/org/languagetool/rules/patterns/Unifier.java
+++ b/languagetool-core/src/main/java/org/languagetool/rules/patterns/Unifier.java
@@ -201,0 +202,4 @@
+        //FIXME: this is wrong! if there are multiple readings that are equivalent
+        // in different ways, we loose this information as soon as one of the
+        // equivalence is not found by another token; at the same time, we
+        // need to filter out whatever has not been found
diff --git a/languagetool-core/src/test/java/org/languagetool/rules/patterns/UnifierTest.java b/languagetool-core/src/test/java/org/languagetool/rules/patterns/UnifierTest.java
index ea1f30b..0ff7a4b 100644
--- a/languagetool-core/src/test/java/org/languagetool/rules/patterns/UnifierTest.java
+++ b/languagetool-core/src/test/java/org/languagetool/rules/patterns/UnifierTest.java
@@ -29,0 +30,2 @@
+import org.junit.Ignore;
+import org.junit.Test;
@@ -109,7 +111,4 @@
-
-    final Element sgElement = new Element("", false, false, false);
-    sgElement.setPosElement(".*[\\.:]sg:.*", true, false);
-    unifierConfig.setEquivalence("number", "singular", sgElement);
-    final Element plElement = new Element("", false, false, false);
-    plElement.setPosElement(".*[\\.:]pl:.*", true, false);
-    unifierConfig.setEquivalence("number", "plural", plElement);
+    unifierConfig.setEquivalence("number", "singular",
+        preparePOSElement(".*[\\.:]sg:.*"));
+    unifierConfig.setEquivalence("number", "plural",
+        preparePOSElement(".*[\\.:]pl:.*"));
@@ -217,15 +216,10 @@
-    final Element sgElement = new Element("", false, false, false);
-    sgElement.setPosElement(".*[\\.:]sg:.*", true, false);
-    unifierConfig.setEquivalence("number", "singular", sgElement);
-    final Element plElement = new Element("", false, false, false);
-    plElement.setPosElement(".*[\\.:]pl:.*", true, false);
-    unifierConfig.setEquivalence("number", "plural", plElement);
-    final Element femElement = new Element("", false, false, false);
-    femElement.setPosElement(".*[\\.:]f([\\.:].*)?", true, false);
-    unifierConfig.setEquivalence("gender", "feminine", femElement);
-    final Element mascElement = new Element("", false, false, false);
-    mascElement.setPosElement(".*[\\.:]m([\\.:].*)?", true, false);
-    unifierConfig.setEquivalence("gender", "masculine", mascElement);
-    final Element neutElement = new Element("", false, false, false);
-    neutElement.setPosElement(".*[\\.:]n([\\.:].*)?", true, false);
-    unifierConfig.setEquivalence("gender", "neutral", neutElement);
+    unifierConfig.setEquivalence("number", "singular",
+        preparePOSElement(".*[\\.:]sg:.*"));
+    unifierConfig.setEquivalence("number", "plural",
+        preparePOSElement(".*[\\.:]pl:.*"));
+    unifierConfig.setEquivalence("gender", "feminine",
+        preparePOSElement(".*[\\.:]f([\\.:].*)?"));
+    unifierConfig.setEquivalence("gender", "masculine",
+        preparePOSElement(".*[\\.:]m([\\.:].*)?"));
+    unifierConfig.setEquivalence("gender", "neutral",
+        preparePOSElement(".*[\\.:]n([\\.:].*)?"));
@@ -323,2 +317,2 @@
-    assertEquals(Arrays.toString(uni.getFinalUnified()),
-        "[xx[xx/abc:sg:f*,xx/cde:pl:f*], yy[yy/abc:pl:f*,yy/abc:sg:f*]]");
+    assertEquals("[xx[xx/abc:sg:f*,xx/cde:pl:f*], yy[yy/abc:pl:f*,yy/abc:sg:f*]]",
+        Arrays.toString(uni.getFinalUnified()));
@@ -326,0 +321,2 @@
+  /**
+  @Ignore("the logic of checkNext() is wrong")
@@ -335 +331 @@
-        preparePOSElement(".*[\\.:]f([\\.:].*)?)"));
+        preparePOSElement(".*[\\.:]f([\\.:].*)?"));
@@ -337 +333,5 @@
-        preparePOSElement(".*[\\.:]m([\\.:].*)?"));
+        preparePOSElement(".*[\\.:]m1([\\.:].*)?"));
+    unifierConfig.setEquivalence("gender", "masculine",
+        preparePOSElement(".*[\\.:]m2([\\.:].*)?"));
+    unifierConfig.setEquivalence("gender", "masculine",
+        preparePOSElement(".*[\\.:]m3([\\.:].*)?"));
@@ -346,0 +347,2 @@
+    unifierConfig.setEquivalence("case", "dativus",
+        preparePOSElement(".*[\\.:]dat[\\.:]?.*"));
@@ -389,0 +392 @@
+  **/
@@ -393 +396 @@
-    el.setPosElement(".*[\\.:]sg:.*", true, false);
+    el.setPosElement(posString, true, false);
@@ -399,12 +402,8 @@
-    final Element sgElement = new Element("", false, false, false);
-    sgElement.setPosElement(".*[\\.:]sg:.*", true, false);
-    unifierConfig.setEquivalence("number", "singular", sgElement);
-    final Element plElement = new Element("", false, false, false);
-    plElement.setPosElement(".*[\\.:]pl:.*", true, false);
-    unifierConfig.setEquivalence("number", "plural", plElement);
-    final Element femElement = new Element("", false, false, false);
-    femElement.setPosElement(".*:f", true, false);
-    unifierConfig.setEquivalence("gender", "feminine", femElement);
-    final Element mascElement = new Element("", false, false, false);
-    mascElement.setPosElement(".*:m", true, false);
-    unifierConfig.setEquivalence("gender", "masculine", mascElement);
+    unifierConfig.setEquivalence("number", "singular",
+        preparePOSElement(".*[\\.:]sg:.*"));
+    unifierConfig.setEquivalence("number", "plural",
+        preparePOSElement(".*[\\.:]pl:.*"));
+    unifierConfig.setEquivalence("gender", "feminine",
+        preparePOSElement(".*:f"));
+    unifierConfig.setEquivalence("gender", "masculine",
+        preparePOSElement(".*:m"));

