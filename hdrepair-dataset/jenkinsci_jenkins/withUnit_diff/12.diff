diff --git a/core/src/main/java/hudson/model/AbstractProject.java b/core/src/main/java/hudson/model/AbstractProject.java
index 6ddc033..27fab02 100644
--- a/core/src/main/java/hudson/model/AbstractProject.java
+++ b/core/src/main/java/hudson/model/AbstractProject.java
@@ -766 +766 @@
-    private void convertUpstreamBuildTrigger(Set<AbstractProject> upstream) throws IOException {
+    protected void convertUpstreamBuildTrigger(Set<AbstractProject> upstream) throws IOException {
diff --git a/test/src/test/java/hudson/model/AbstractProjectTest.java b/test/src/test/java/hudson/model/AbstractProjectTest.java
index 15284b6..9820c03 100644
--- a/test/src/test/java/hudson/model/AbstractProjectTest.java
+++ b/test/src/test/java/hudson/model/AbstractProjectTest.java
@@ -30 +30,2 @@
-import hudson.security.GlobalMatrixAuthorizationStrategy;
+import hudson.security.*;
+import hudson.tasks.BuildTrigger;
@@ -40,0 +42,4 @@
+
+import jenkins.model.Jenkins;
+import org.acegisecurity.context.SecurityContext;
+import org.acegisecurity.context.SecurityContextHolder;
@@ -47,0 +53,4 @@
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
@@ -287,0 +297,35 @@
+
+    @Bug(13502)
+    public void testHandleBuildTrigger() throws Exception {
+        Project u = createFreeStyleProject("u"),
+                d = createFreeStyleProject("d"),
+                e = createFreeStyleProject("e");
+
+        u.addPublisher(new BuildTrigger("d", Result.SUCCESS));
+
+        jenkins.setSecurityRealm(createDummySecurityRealm());
+        ProjectMatrixAuthorizationStrategy authorizations = new ProjectMatrixAuthorizationStrategy();
+        jenkins.setAuthorizationStrategy(authorizations);
+
+        authorizations.add(Jenkins.ADMINISTER, "admin");
+        authorizations.add(Jenkins.READ, "user");
+
+        // user can READ u and CONFIGURE e
+        Map<Permission, Set<String>> permissions = new HashMap<Permission, Set<String>>();
+        permissions.put(Job.READ, Collections.singleton("user"));
+        u.addProperty(new AuthorizationMatrixProperty(permissions));
+
+        permissions = new HashMap<Permission, Set<String>>();
+        permissions.put(Job.CONFIGURE, Collections.singleton("user"));
+        e.addProperty(new AuthorizationMatrixProperty(permissions));
+
+        User user = User.get("user");
+        SecurityContext sc = ACL.impersonate(user.impersonate());
+        try {
+            e.convertUpstreamBuildTrigger(Collections.<AbstractProject>emptySet());
+        } finally {
+            SecurityContextHolder.setContext(sc);
+        }
+
+        assertEquals(1, u.getPublishersList().size());
+    }

