diff --git a/core/src/main/java/net/imglib2/roi/GeneralPathRegionOfInterest.java b/core/src/main/java/net/imglib2/roi/GeneralPathRegionOfInterest.java
index 0279156..292e045 100644
--- a/core/src/main/java/net/imglib2/roi/GeneralPathRegionOfInterest.java
+++ b/core/src/main/java/net/imglib2/roi/GeneralPathRegionOfInterest.java
@@ -207,2 +207,2 @@
-		final long[] strps = new long[ 3 * width * height / 2 ]; // avoid
-																	// re-allocation
+		final long[] strps = new long[ 3 * (width==1?2:width) * height / 2 ]; // avoid
+																				// re-allocation
diff --git a/core/src/test/java/net/imglib2/roi/GeneralPathRegionOfInterestTest.java b/core/src/test/java/net/imglib2/roi/GeneralPathRegionOfInterestTest.java
index 97bc7bb..9406d50 100644
--- a/core/src/test/java/net/imglib2/roi/GeneralPathRegionOfInterestTest.java
+++ b/core/src/test/java/net/imglib2/roi/GeneralPathRegionOfInterestTest.java
@@ -132,0 +133,24 @@
+	@Test
+	public void testOnePixelWideRoiIteration()
+	{
+		final double x0 = 6, y0 = 7, height = 5;
+		final IterableRegionOfInterest roi = makeOnePixelWideRoi( x0, y0, height );
+
+		final long imgHeight = ( int ) Math.ceil( x0 + 1 + 5 );
+		final long imgWidth = ( int ) Math.ceil( y0 + height + 5 );
+
+		final RandomAccessible< BitType > randomAccessible = new ArrayImgFactory< BitType >().create( new long[] { imgWidth, imgHeight }, new BitType() );
+		final IterableInterval< BitType > interval = roi.getIterableIntervalOverROI( randomAccessible );
+		final Cursor< BitType > cursor = interval.localizingCursor();
+
+		/*
+		 * This iteration can cause an ArrayIndexOutOfBoundsException if {@link
+		 * GeneralPathRegionOfInterest#ensureStripes()} allocates less space
+		 * than needed for saving states.
+		 */
+		while ( cursor.hasNext() )
+		{
+			cursor.fwd();
+		}
+	}
+
@@ -172,0 +197,20 @@
+	/**
+	 * Generate a one pixel wide GeneralPathRegionOfInterest.
+	 */
+	private GeneralPathRegionOfInterest makeOnePixelWideRoi( final double x0,
+			final double y0, final double height )
+	{
+		final GeneralPath path = new GeneralPath();
+
+		path.moveTo( x0, y0 );
+		path.lineTo( x0 + 1d, y0 );
+		path.lineTo( x0 + 1d, y0 + height );
+		path.lineTo( x0, y0 + height );
+		path.closePath();
+
+		final GeneralPathRegionOfInterest roi = new GeneralPathRegionOfInterest();
+		roi.setGeneralPath( path );
+
+		return roi;
+	}
+

