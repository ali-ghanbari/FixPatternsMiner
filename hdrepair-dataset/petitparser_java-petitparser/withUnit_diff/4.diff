diff --git a/src/org/petitparser/parser/RepeatingParser.java b/src/org/petitparser/parser/RepeatingParser.java
index d2868a4..5ba7651 100644
--- a/src/org/petitparser/parser/RepeatingParser.java
+++ b/src/org/petitparser/parser/RepeatingParser.java
@@ -39 +39 @@
-        return result.success(elements);
+        return current.success(elements);
diff --git a/test/org/petitparser/ParserTest.java b/test/org/petitparser/ParserTest.java
index d71f15d..de06f52 100644
--- a/test/org/petitparser/ParserTest.java
+++ b/test/org/petitparser/ParserTest.java
@@ -226 +226 @@
-    assertSuccess(parser, "ab", Arrays.asList('a'), 2);
+    assertSuccess(parser, "ab", Arrays.asList('a'), 1);
@@ -228 +228 @@
-    assertSuccess(parser, "abab", Arrays.asList('a', 'b', 'a'), 4);
+    assertSuccess(parser, "abab", Arrays.asList('a', 'b', 'a'), 3);
@@ -230 +230 @@
-    assertSuccess(parser, "ababab", Arrays.asList('a', 'b', 'a', 'b', 'a'), 6);
+    assertSuccess(parser, "ababab", Arrays.asList('a', 'b', 'a', 'b', 'a'), 5);
diff --git a/test/org/petitparser/examples/json/JsonParserTest.java b/test/org/petitparser/examples/json/JsonParserTest.java
index 6f95f2e..b785710 100644
--- a/test/org/petitparser/examples/json/JsonParserTest.java
+++ b/test/org/petitparser/examples/json/JsonParserTest.java
@@ -29 +29 @@
-    List<String> result = parse("[]").get();
+    List<String> result = assertValid("[]").get();
@@ -35 +35 @@
-    List<String> result = parse("[\"a\"]").get();
+    List<String> result = assertValid("[\"a\"]").get();
@@ -42 +42 @@
-    List<String> result = parse(" [ \"a\" , \"b\" ] ").get();
+    List<String> result = assertValid(" [ \"a\" , \"b\" ] ").get();
@@ -50 +50 @@
-    List<List<String>> result = parse("[[\"a\"]]").get();
+    List<List<String>> result = assertValid("[[\"a\"]]").get();
@@ -60 +60 @@
-    Map<String, Double> result = parse("{}").get();
+    Map<String, Double> result = assertValid("{}").get();
@@ -66 +66 @@
-    Map<String, Double> result = parse("{\"a\":1}").get();
+    Map<String, Double> result = assertValid("{\"a\":1}").get();
@@ -73 +73 @@
-    Map<String, Double> result = parse(" { \"a\" : 1 , \"b\" : 2 } ").get();
+    Map<String, Double> result = assertValid(" { \"a\" : 1 , \"b\" : 2 } ").get();
@@ -81 +81 @@
-    Map<String, Map<String, Double>> result = parse("{\"object\":{\"1\": 2}}").get();
+    Map<String, Map<String, Double>> result = assertValid("{\"object\":{\"1\": 2}}").get();
@@ -91 +91 @@
-    Boolean result = parse("true").get();
+    Boolean result = assertValid("true").get();
@@ -97 +97 @@
-    Boolean result = parse("false").get();
+    Boolean result = assertValid("false").get();
@@ -103 +103 @@
-    Object result = parse("null").get();
+    Object result = assertValid("null").get();
@@ -109,8 +109,8 @@
-    assertEquals(0.0, parse("0.0").get());
-    assertEquals(0.12, parse("0.12").get());
-    assertEquals(-0.12, parse("-0.12").get());
-    assertEquals(12.34, parse("12.34").get());
-    assertEquals(-12.34, parse("-12.34").get());
-    assertEquals(1.2, parse("1.2e0").get());
-    assertEquals(1.2e-1, parse("1.2e-1").get());
-    assertEquals(1.2e-1, parse("1.2E-1").get());
+    assertEquals(0.0, assertValid("0.0").get());
+    assertEquals(0.12, assertValid("0.12").get());
+    assertEquals(-0.12, assertValid("-0.12").get());
+    assertEquals(12.34, assertValid("12.34").get());
+    assertEquals(-12.34, assertValid("-12.34").get());
+    assertEquals(1.2, assertValid("1.2e0").get());
+    assertEquals(1.2e-1, assertValid("1.2e-1").get());
+    assertEquals(1.2e-1, assertValid("1.2E-1").get());
@@ -121,7 +121,7 @@
-    assertEquals(0L, parse("0").get());
-    assertEquals(1L, parse("1").get());
-    assertEquals(-1L, parse("-1").get());
-    assertEquals(12L, parse("12").get());
-    assertEquals(-12L, parse("-12").get());
-    assertEquals(100L, parse("1e2").get());
-    assertEquals(100L, parse("1e+2").get());
+    assertEquals(0L, assertValid("0").get());
+    assertEquals(1L, assertValid("1").get());
+    assertEquals(-1L, assertValid("-1").get());
+    assertEquals(12L, assertValid("12").get());
+    assertEquals(-12L, assertValid("-12").get());
+    assertEquals(100L, assertValid("1e2").get());
+    assertEquals(100L, assertValid("1e+2").get());
@@ -132,3 +132,3 @@
-    assertEquals("", parse("\"\"").get());
-    assertEquals("foo", parse("\"foo\"").get());
-    assertEquals("foo bar", parse("\"foo bar\"").get());
+    assertEquals("", assertValid("\"\"").get());
+    assertEquals("foo", assertValid("\"foo\"").get());
+    assertEquals("foo bar", assertValid("\"foo bar\"").get());
@@ -139,9 +139,9 @@
-    assertEquals("\"", parse("\"\\\"\"").get());
-    assertEquals("\\", parse("\"\\\\\"").get());
-    assertEquals("/", parse("\"\\/\"").get());
-    assertEquals("\b", parse("\"\\b\"").get());
-    assertEquals("\f", parse("\"\\f\"").get());
-    assertEquals("\n", parse("\"\\n\"").get());
-    assertEquals("\r", parse("\"\\r\"").get());
-    assertEquals("\t", parse("\"\\t\"").get());
-    assertEquals("\u20Ac", parse("\"\\u20Ac\"").get());
+    assertEquals("\"", assertValid("\"\\\"\"").get());
+    assertEquals("\\", assertValid("\"\\\\\"").get());
+    assertEquals("/", assertValid("\"\\/\"").get());
+    assertEquals("\b", assertValid("\"\\b\"").get());
+    assertEquals("\f", assertValid("\"\\f\"").get());
+    assertEquals("\n", assertValid("\"\\n\"").get());
+    assertEquals("\r", assertValid("\"\\r\"").get());
+    assertEquals("\t", assertValid("\"\\t\"").get());
+    assertEquals("\u20Ac", assertValid("\"\\u20Ac\"").get());
@@ -152 +152 @@
-    Result result = parse("{\"recordset\": null, \"type\": \"change\", \"fromElement\": null, \"toElement\": null, \"altLeft\": false, \"keyCode\": 0, \"repeat\": false, \"reason\": 0, \"behaviorCookie\": 0, \"contentOverflow\": false, \"behaviorPart\": 0, \"dataTransfer\": null, \"ctrlKey\": false, \"shiftLeft\": false, \"dataFld\": \"\", \"qualifier\": \"\", \"wheelDelta\": 0, \"bookmarks\": null, \"button\": 0, \"srcFilter\": null, \"nextPage\": \"\", \"cancelBubble\": false, \"x\": 89, \"y\": 502, \"screenX\": 231, \"screenY\": 1694, \"srcUrn\": \"\", \"boundElements\": {\"length\": 0}, \"clientX\": 89, \"clientY\": 502, \"propertyName\": \"\", \"shiftKey\": false, \"ctrlLeft\": false, \"offsetX\": 25, \"offsetY\": 2, \"altKey\": false}");
+    Result result = assertValid("{\"recordset\": null, \"type\": \"change\", \"fromElement\": null, \"toElement\": null, \"altLeft\": false, \"keyCode\": 0, \"repeat\": false, \"reason\": 0, \"behaviorCookie\": 0, \"contentOverflow\": false, \"behaviorPart\": 0, \"dataTransfer\": null, \"ctrlKey\": false, \"shiftLeft\": false, \"dataFld\": \"\", \"qualifier\": \"\", \"wheelDelta\": 0, \"bookmarks\": null, \"button\": 0, \"srcFilter\": null, \"nextPage\": \"\", \"cancelBubble\": false, \"x\": 89, \"y\": 502, \"screenX\": 231, \"screenY\": 1694, \"srcUrn\": \"\", \"boundElements\": {\"length\": 0}, \"clientX\": 89, \"clientY\": 502, \"propertyName\": \"\", \"shiftKey\": false, \"ctrlLeft\": false, \"offsetX\": 25, \"offsetY\": 2, \"altKey\": false}");
@@ -158 +158 @@
-    Result result = parse("{\"type\": \"change\", \"eventPhase\": 2, \"bubbles\": true, \"cancelable\": true, \"timeStamp\": 0, \"CAPTURING_PHASE\": 1, \"AT_TARGET\": 2, \"BUBBLING_PHASE\": 3, \"isTrusted\": true, \"MOUSEDOWN\": 1, \"MOUSEUP\": 2, \"MOUSEOVER\": 4, \"MOUSEOUT\": 8, \"MOUSEMOVE\": 16, \"MOUSEDRAG\": 32, \"CLICK\": 64, \"DBLCLICK\": 128, \"KEYDOWN\": 256, \"KEYUP\": 512, \"KEYPRESS\": 1024, \"DRAGDROP\": 2048, \"FOCUS\": 4096, \"BLUR\": 8192, \"SELECT\": 16384, \"CHANGE\": 32768, \"RESET\": 65536, \"SUBMIT\": 131072, \"SCROLL\": 262144, \"LOAD\": 524288, \"UNLOAD\": 1048576, \"XFER_DONE\": 2097152, \"ABORT\": 4194304, \"ERROR\": 8388608, \"LOCATE\": 16777216, \"MOVE\": 33554432, \"RESIZE\": 67108864, \"FORWARD\": 134217728, \"HELP\": 268435456, \"BACK\": 536870912, \"TEXT\": 1073741824, \"ALT_MASK\": 1, \"CONTROL_MASK\": 2, \"SHIFT_MASK\": 4, \"META_MASK\": 8}");
+    Result result = assertValid("{\"type\": \"change\", \"eventPhase\": 2, \"bubbles\": true, \"cancelable\": true, \"timeStamp\": 0, \"CAPTURING_PHASE\": 1, \"AT_TARGET\": 2, \"BUBBLING_PHASE\": 3, \"isTrusted\": true, \"MOUSEDOWN\": 1, \"MOUSEUP\": 2, \"MOUSEOVER\": 4, \"MOUSEOUT\": 8, \"MOUSEMOVE\": 16, \"MOUSEDRAG\": 32, \"CLICK\": 64, \"DBLCLICK\": 128, \"KEYDOWN\": 256, \"KEYUP\": 512, \"KEYPRESS\": 1024, \"DRAGDROP\": 2048, \"FOCUS\": 4096, \"BLUR\": 8192, \"SELECT\": 16384, \"CHANGE\": 32768, \"RESET\": 65536, \"SUBMIT\": 131072, \"SCROLL\": 262144, \"LOAD\": 524288, \"UNLOAD\": 1048576, \"XFER_DONE\": 2097152, \"ABORT\": 4194304, \"ERROR\": 8388608, \"LOCATE\": 16777216, \"MOVE\": 33554432, \"RESIZE\": 67108864, \"FORWARD\": 134217728, \"HELP\": 268435456, \"BACK\": 536870912, \"TEXT\": 1073741824, \"ALT_MASK\": 1, \"CONTROL_MASK\": 2, \"SHIFT_MASK\": 4, \"META_MASK\": 8}");
@@ -164 +164 @@
-    Result result = parse("{\"returnValue\": true, \"timeStamp\": 1226697417289, \"eventPhase\": 2, \"type\": \"change\", \"cancelable\": false, \"bubbles\": true, \"cancelBubble\": false, \"MOUSEOUT\": 8, \"FOCUS\": 4096, \"CHANGE\": 32768, \"MOUSEMOVE\": 16, \"AT_TARGET\": 2, \"SELECT\": 16384, \"BLUR\": 8192, \"KEYUP\": 512, \"MOUSEDOWN\": 1, \"MOUSEDRAG\": 32, \"BUBBLING_PHASE\": 3, \"MOUSEUP\": 2, \"CAPTURING_PHASE\": 1, \"MOUSEOVER\": 4, \"CLICK\": 64, \"DBLCLICK\": 128, \"KEYDOWN\": 256, \"KEYPRESS\": 1024, \"DRAGDROP\": 2048}");
+    Result result = assertValid("{\"returnValue\": true, \"timeStamp\": 1226697417289, \"eventPhase\": 2, \"type\": \"change\", \"cancelable\": false, \"bubbles\": true, \"cancelBubble\": false, \"MOUSEOUT\": 8, \"FOCUS\": 4096, \"CHANGE\": 32768, \"MOUSEMOVE\": 16, \"AT_TARGET\": 2, \"SELECT\": 16384, \"BLUR\": 8192, \"KEYUP\": 512, \"MOUSEDOWN\": 1, \"MOUSEDRAG\": 32, \"BUBBLING_PHASE\": 3, \"MOUSEUP\": 2, \"CAPTURING_PHASE\": 1, \"MOUSEOVER\": 4, \"CLICK\": 64, \"DBLCLICK\": 128, \"KEYDOWN\": 256, \"KEYPRESS\": 1024, \"DRAGDROP\": 2048}");
@@ -167,0 +168,9 @@
+  @Test
+  public void testInvalidArray() {
+    assertInvalid("[");
+    assertInvalid("[1");
+    assertInvalid("[1,");
+    assertInvalid("[1,]");
+    assertInvalid("[1 2]");
+    assertInvalid("[]]");
+  }
@@ -169,2 +178,64 @@
-  private Result parse(String aString) {
-    return parser.parse(new Context(aString));
+  @Test
+  public void testInvalidObject() {
+    assertInvalid("{");
+    assertInvalid("{\"a\"");
+    assertInvalid("{\"a\":");
+    assertInvalid("{\"a\":\"b\"");
+    assertInvalid("{\"a\":\"b\",");
+    assertInvalid("{\"a\"}");
+    assertInvalid("{\"a\":}");
+    assertInvalid("{\"a\":\"b\",}");
+    assertInvalid("{}}");
+  }
+
+  @Test
+  public void testInvalidString() {
+    assertInvalid("\"");
+    assertInvalid("\"a");
+    assertInvalid("\"\\\"");
+    assertInvalid("\"\\a\"");
+    assertInvalid("\"\\u\"");
+    assertInvalid("\"\\u1\"");
+    assertInvalid("\"\\u12\"");
+    assertInvalid("\"\\u123\"");
+    assertInvalid("\"\\u123x\"");
+  }
+
+  @Test
+  public void testInvalidNumber() {
+    assertInvalid("00");
+    assertInvalid("01");
+    assertInvalid("00.1");
+  }
+
+  @Test
+  public void testInvalidTrue() {
+    assertInvalid("tr");
+    assertInvalid("trace");
+    assertInvalid("truest");
+  }
+
+  @Test
+  public void testInvalidFalse() {
+    assertInvalid("fa");
+    assertInvalid("falsely");
+    assertInvalid("fabulous");
+  }
+
+  @Test
+  public void testInvalidNull() {
+    assertInvalid("nu");
+    assertInvalid("nuclear");
+    assertInvalid("nullified");
+  }
+
+  private Result assertValid(String input) {
+    Result result = parser.parse(new Context(input));
+    assertTrue(result.isSuccess());
+    return result;
+  }
+
+  private Result assertInvalid(String input) {
+    Result result = parser.parse(new Context(input));
+    assertTrue(result.isFailure());
+    return result;

