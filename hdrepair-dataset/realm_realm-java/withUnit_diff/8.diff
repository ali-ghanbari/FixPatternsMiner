diff --git a/changelog.txt b/changelog.txt
index 94139cd..f02da88 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -2,0 +3 @@
+  * Fixed bug so Realm no longer throws an Exception when removing the last object
diff --git a/realm-jni/src/io_realm_internal_table.cpp b/realm-jni/src/io_realm_internal_table.cpp
index f8c3d4b..1b62914 100644
--- a/realm-jni/src/io_realm_internal_table.cpp
+++ b/realm-jni/src/io_realm_internal_table.cpp
@@ -298 +298 @@
-    if (!TBL_AND_ROW_INDEX_VALID_OFFSET(env, TBL(nativeTablePtr), rowIndex, true))
+    if (!TBL_AND_ROW_INDEX_VALID_OFFSET(env, TBL(nativeTablePtr), rowIndex, false))
diff --git a/realm-jni/src/util.hpp b/realm-jni/src/util.hpp
index 750d51d..3ab6f68 100644
--- a/realm-jni/src/util.hpp
+++ b/realm-jni/src/util.hpp
@@ -270 +270 @@
-    if(rowIndex < 0) {
+    if (rowIndex < 0) {
diff --git a/realm/src/androidTest/java/io/realm/RealmObjectTest.java b/realm/src/androidTest/java/io/realm/RealmObjectTest.java
index ed66882..3ddfef6 100644
--- a/realm/src/androidTest/java/io/realm/RealmObjectTest.java
+++ b/realm/src/androidTest/java/io/realm/RealmObjectTest.java
@@ -20,0 +21,2 @@
+import java.util.HashSet;
+import java.util.Set;
@@ -34,0 +37,2 @@
+
+    private int TEST_SIZE = 5;
@@ -79,0 +84 @@
+    // removing original object and see if has been removed
@@ -113,0 +119,80 @@
+    // query for an object, remove it and see it has been removed from realm
+    public void testRemoveResultFromRealm() {
+        Realm realm = Realm.getInstance(getContext());
+        realm.beginTransaction();
+        realm.clear(Dog.class);
+        Dog dogToAdd = realm.createObject(Dog.class);
+        dogToAdd.setName("Rex");
+        realm.commitTransaction();
+
+        assertEquals(1, realm.allObjects(Dog.class).size());
+
+        Dog dogToRemove = realm.where(Dog.class).findFirst();
+        assertNotNull(dogToRemove);
+        realm.beginTransaction();
+        dogToRemove.removeFromRealm();
+        realm.commitTransaction();
+
+        assertEquals(0, realm.allObjects(Dog.class).size());
+        try {
+            dogToAdd.getName();
+            fail();
+        }
+        catch (IllegalStateException ignored) {}
+        try {
+            dogToRemove.getName();
+            fail();
+        }
+        catch (IllegalStateException ignored) {}
+    }
+
+    public void removeOneByOne(boolean atFirst) {
+        Set<Long> ages = new HashSet<Long>();
+        testRealm.beginTransaction();
+        testRealm.clear(Dog.class);
+        for (int i = 0; i < TEST_SIZE; i++) {
+            Dog dog = testRealm.createObject(Dog.class);
+            dog.setAge(i);
+            ages.add(new Long(i));
+        }
+        testRealm.commitTransaction();
+
+        assertEquals(TEST_SIZE, testRealm.allObjects(Dog.class).size());
+
+        RealmResults<Dog> dogs = testRealm.allObjects(Dog.class);
+        for (int i = 0; i < TEST_SIZE; i++) {
+            testRealm.beginTransaction();
+            Dog dogToRemove;
+            if (atFirst) {
+                dogToRemove = dogs.first();
+            } else {
+                dogToRemove = dogs.last();
+            }
+            ages.remove(new Long(dogToRemove.getAge()));
+            dogToRemove.removeFromRealm();
+
+            // object is no longer valid
+            try {
+                dogToRemove.getAge();
+                fail();
+            }
+            catch (IllegalStateException ignored) {}
+
+            testRealm.commitTransaction();
+
+            // and removed from realm and remaining objects are place correctly
+            RealmResults<Dog> remainingDogs = testRealm.allObjects(Dog.class);
+            assertEquals(TEST_SIZE - i - 1, remainingDogs.size());
+            for (Dog dog : remainingDogs) {
+                assertTrue(ages.contains(new Long(dog.getAge())));
+            }
+        }
+    }
+
+    public void testRemoveFromRealmAtPosition() {
+        boolean REMOVE_FIRST = true;
+        boolean REMOVE_LAST = false;
+        removeOneByOne(REMOVE_FIRST);
+        removeOneByOne(REMOVE_LAST);
+    }
+
diff --git a/realm/src/main/java/io/realm/internal/Table.java b/realm/src/main/java/io/realm/internal/Table.java
index a3b523f..0b12652 100644
--- a/realm/src/main/java/io/realm/internal/Table.java
+++ b/realm/src/main/java/io/realm/internal/Table.java
@@ -372,3 +371,0 @@
-    /**
-     *  EXPERIMENTAL function
-     */

