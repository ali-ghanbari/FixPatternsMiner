diff --git a/realm/src/androidTest/java/io/realm/RealmObjectTest.java b/realm/src/androidTest/java/io/realm/RealmObjectTest.java
index 99cd5e5..4bfbe71 100644
--- a/realm/src/androidTest/java/io/realm/RealmObjectTest.java
+++ b/realm/src/androidTest/java/io/realm/RealmObjectTest.java
@@ -41 +41 @@
-        RealmObject realmObject = testRealm.createObject( AllTypes.class);
+        RealmObject realmObject = testRealm.createObject(AllTypes.class);
@@ -47 +47 @@
-        assertEquals("RealmObject.realmGetRow seems to return wrong row type: ",7 , row.getColumnCount());
+        assertEquals("RealmObject.realmGetRow seems to return wrong row type: ", 8, row.getColumnCount());
diff --git a/realm/src/androidTest/java/io/realm/RealmResultsTest.java b/realm/src/androidTest/java/io/realm/RealmResultsTest.java
index c8e7f72..599535b 100644
--- a/realm/src/androidTest/java/io/realm/RealmResultsTest.java
+++ b/realm/src/androidTest/java/io/realm/RealmResultsTest.java
@@ -35 +34,0 @@
-
@@ -61 +59,0 @@
-
@@ -74 +71,0 @@
-
@@ -92 +88,0 @@
-
@@ -101 +96,0 @@
-
@@ -110 +104,0 @@
-
@@ -113 +107 @@
-        Number minimum = resultList.min("columnlong");
+        Number minimum = resultList.min("columnLong");
@@ -118 +111,0 @@
-
@@ -121 +114 @@
-        Number maximum = resultList.max("columnlong");
+        Number maximum = resultList.max("columnLong");
@@ -126 +118,0 @@
-
@@ -129 +121 @@
-        Number sum = resultList.sum("columnlong");
+        Number sum = resultList.sum("columnLong");
@@ -139 +130,0 @@
-
@@ -142 +133 @@
-        Double avg = Math.round(resultList.average("columndouble")*10000.0)/10000.0;
+        Double avg = Math.round(resultList.average("columnDouble")*10000.0)/10000.0;
@@ -150 +140,0 @@
-
@@ -166,2 +155,0 @@
-
-
@@ -187 +174,0 @@
-
@@ -189 +176 @@
-        RealmResults<AllTypes> sortedList = resultList.sort("columnString", RealmResults.SORT_ORDER_DECENDING);
+        RealmResults<AllTypes> sortedList = resultList.sort("columnLong", RealmResults.SORT_ORDER_DECENDING);
@@ -193 +179,0 @@
-
diff --git a/realm/src/androidTest/java/io/realm/RealmTest.java b/realm/src/androidTest/java/io/realm/RealmTest.java
index 739b9d7..7f03d9a 100644
--- a/realm/src/androidTest/java/io/realm/RealmTest.java
+++ b/realm/src/androidTest/java/io/realm/RealmTest.java
@@ -31 +30,0 @@
-
@@ -42,3 +41 @@
-
-        testRealm.allObjects(AllTypes.class).clear();
-
+        testRealm.clear(AllTypes.class);
@@ -60,0 +58 @@
+    /*
@@ -63,0 +62 @@
+
@@ -76,0 +76 @@
+    */
@@ -78 +78 @@
-
+    /*
@@ -92,0 +93 @@
+    */
@@ -104 +105 @@
-        Context c = null;
+        Context c = null;  // throws when c.getDirectory() is called; has nothing to do with Realm
@@ -106,2 +107,6 @@
-        Realm realm = Realm.getInstance(c);
-        assertNull("Realm has been created with null Context", realm);
+        try {
+            Realm realm = Realm.getInstance(c);
+            fail("Should throw an exception");
+        }
+        catch (NullPointerException e) {}
+
@@ -114 +119 @@
-        assertEquals("Unexpected query result after getTable", TEST_DATA_SIZE, table.count(table.getColumnIndex("columndouble"), 3.1415));
+        assertEquals("Unexpected query result after getTable", TEST_DATA_SIZE, table.count(table.getColumnIndex("columnDouble"), 3.1415));
@@ -139 +143,0 @@
-
@@ -141 +145 @@
-        Dog allTypes = testRealm.createObject(Dog.class);
+        Dog dog = testRealm.createObject(Dog.class);
@@ -162 +166 @@
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).equalTo("columnlong", 33).findAll();
+        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).equalTo("columnLong", 33).findAll();
@@ -165 +169 @@
-        resultList = testRealm.where(AllTypes.class).equalTo("columnlong", 3333).findAll();
+        resultList = testRealm.where(AllTypes.class).equalTo("columnLong", 3333).findAll();
@@ -176 +180 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnstring", 3333).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnString", 3333).findAll();
@@ -181 +185 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnstring", true).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnString", true).findAll();
@@ -186 +190 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnstring", 3.1415f).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnString", 3.1415f).findAll();
@@ -191 +195 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnstring", 3.1415d).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnString", 3.1415d).findAll();
@@ -197 +201 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnfloat", 12).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnFloat", 12).findAll();
@@ -202 +206 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnfloat", true).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnFloat", true).findAll();
@@ -207 +211 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnfloat", "string").findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnFloat", "string").findAll();
@@ -212 +216 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnfloat", 3.1415d).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnFloat", 3.1415d).findAll();
@@ -218 +222 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnlong", true).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnLong", true).findAll();
@@ -223 +227 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnlong", "string").findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnLong", "string").findAll();
@@ -228 +232 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnlong", 3.1415f).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnLong", 3.1415f).findAll();
@@ -233 +237 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnlong", 3.1415d).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnLong", 3.1415d).findAll();
@@ -239 +243 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnboolean", "test").findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnBoolean", "test").findAll();
@@ -244 +248 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnboolean", 7).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnBoolean", 7).findAll();
@@ -249 +253 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnboolean", 3.1415f).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnBoolean", 3.1415f).findAll();
@@ -254 +258 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnboolean", 3.1415d).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnBoolean", 3.1415d).findAll();
@@ -260 +264 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnbinary", "test").findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnBinary", "test").findAll();
@@ -265 +269 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnbinary", 7).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnBinary", 7).findAll();
@@ -270 +274 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnbinary", 3.1415f).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnBinary", 3.1415f).findAll();
@@ -275 +279 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnbinary", 3.1415d).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnBinary", 3.1415d).findAll();
@@ -284,3 +288,5 @@
-        resultList = testRealm.where(AllTypes.class).equalTo("invalidcolumnname", 33).findAll();
-        assertNotNull("ResultList.where.equalTo returns null when column name is non-existing", resultList);
-        assertEquals("ResultList.where.equalTo returns wrong result", 0, resultList.size());
+        try {
+            resultList = testRealm.where(AllTypes.class).equalTo("invalidcolumnname", 33).findAll();
+            fail("Invalid field name");
+        }
+        catch (Exception e) {}
@@ -288,3 +294,5 @@
-        resultList = testRealm.where(AllTypes.class).equalTo("invalidcolumnname", "test").findAll();
-        assertNotNull("ResultList.where.equalTo returns null when column name is non-existing", resultList);
-        assertEquals("ResultList.where.equalTo returns wrong result", 0, resultList.size());
+        try {
+            resultList = testRealm.where(AllTypes.class).equalTo("invalidcolumnname", "test").findAll();
+            fail("Invalid field name");
+        }
+        catch (Exception e) {}
@@ -292,3 +300,5 @@
-        resultList = testRealm.where(AllTypes.class).equalTo("invalidcolumnname", true).findAll();
-        assertNotNull("ResultList.where.equalTo returns null when column name is non-existing", resultList);
-        assertEquals("ResultList.where.equalTo returns wrong result", 0, resultList.size());
+        try {
+            resultList = testRealm.where(AllTypes.class).equalTo("invalidcolumnname", true).findAll();
+            fail("Invalid field name");
+        }
+        catch (Exception e) {}
@@ -296,3 +306,5 @@
-        resultList = testRealm.where(AllTypes.class).equalTo("invalidcolumnname", 3.1415d).findAll();
-        assertNotNull("ResultList.where.equalTo returns null when column name is non-existing", resultList);
-        assertEquals("ResultList.where.equalTo returns wrong result", 0, resultList.size());
+        try {
+            resultList = testRealm.where(AllTypes.class).equalTo("invalidcolumnname", 3.1415d).findAll();
+            fail("Invalid field name");
+        }
+        catch (Exception e) {}
@@ -300,3 +312,5 @@
-        resultList = testRealm.where(AllTypes.class).equalTo("invalidcolumnname", 3.1415f).findAll();
-        assertNotNull("ResultList.where.equalTo returns null when column name is non-existing", resultList);
-        assertEquals("ResultList.where.equalTo returns wrong result", 0, resultList.size());
+        try {
+            resultList = testRealm.where(AllTypes.class).equalTo("invalidcolumnname", 3.1415f).findAll();
+            fail("Invalid field name");
+        }
+        catch (Exception e) {}
@@ -314 +328 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnstring", nullString).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnString", nullString).findAll();
@@ -316,2 +330,2 @@
-        } catch (IllegalArgumentException e) {
-        }
+        } catch (IllegalArgumentException e) {}
+
@@ -319 +333 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnlong", nullLong).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnLong", nullLong).findAll();
@@ -321 +335 @@
-        } catch (IllegalArgumentException e) {
+
@@ -322,0 +337,3 @@
+        catch (IllegalArgumentException e) {}
+        catch (NullPointerException e) {}
+
@@ -324 +341 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnboolean", nullBoolean).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnBoolean", nullBoolean).findAll();
@@ -326 +342,0 @@
-        } catch (IllegalArgumentException e) {
@@ -327,0 +344,3 @@
+        catch (IllegalArgumentException e) {}
+        catch (NullPointerException e) {}
+
@@ -329 +348 @@
-            resultList = testRealm.where(AllTypes.class).equalTo("columnfloat", nullFloat).findAll();
+            resultList = testRealm.where(AllTypes.class).equalTo("columnFloat", nullFloat).findAll();
@@ -331 +349,0 @@
-        } catch (IllegalArgumentException e) {
@@ -332,0 +351,2 @@
+        catch (IllegalArgumentException e) {}
+        catch (NullPointerException e) {}
@@ -341,3 +361 @@
-    // addChangeListener(RealmChangeListener listener)
-    static int testCount = 0;
-
+    /*
@@ -345,2 +363 @@
-        fail("Change listeners are not presently working");
-
+        final int[] testCount = {0};
@@ -350 +367 @@
-                testCount++;
+                testCount[0]++;
@@ -356 +372,0 @@
-
@@ -360 +375,0 @@
-
@@ -370 +385 @@
-        assertTrue("Have not received the expected number of events in ChangeListener", 0 < testCount);
+        assertTrue("Have not received the expected number of events in ChangeListener", 0 < testCount[0]);
@@ -372,0 +388 @@
+    */
@@ -374 +390 @@
-
+    /*
@@ -377,3 +393 @@
-        fail("Change listeners are not presently working");
-
-        testCount = 0;
+        final int[] testCount = {0};
@@ -384 +398 @@
-                testCount++;
+                testCount[0]++;
@@ -392 +405,0 @@
-
@@ -406 +419 @@
-        assertTrue("Have not received the expected number of events in ChangeListener", 0 < testCount);
+        assertTrue("Have not received the expected number of events in ChangeListener", 0 < testCount[0]);
@@ -408 +421 @@
-        testCount = 0;
+        testCount[0] = 0;
@@ -420 +433 @@
-        assertEquals("Should not receive change notifications after removeChangeListener", 0, testCount);
+        assertEquals("Should not receive change notifications after removeChangeListener", 0, testCount[0]);
@@ -421,0 +435 @@
+    */
@@ -422,0 +437 @@
+    /*
@@ -425 +440 @@
-        fail("Change listeners are not presently working");
+        final int[] testCount = {0};
@@ -433 +448 @@
-                testCount++;
+                testCount[0]++;
@@ -444 +459 @@
-        testCount = 0;
+        testCount[0] = 0;
@@ -461 +476 @@
-        assertTrue("Should receive change notifications after adding addChangeListener", 0 < testCount);
+        assertTrue("Should receive change notifications after adding addChangeListener", 0 < testCount[0]);
@@ -462,0 +478 @@
+    */
@@ -463,0 +480 @@
+    /*
@@ -466,2 +483 @@
-        fail("Change listeners are not presently working");
-
+        final int[] testCount = new int[1];
@@ -471 +487 @@
-                testCount++;
+                testCount[0]++;
@@ -480 +496 @@
-        testCount = 0;
+        testCount[0] = 0;
@@ -493 +509 @@
-        assertEquals("Should not receive change notifications after removeAllChangeListeners", 0, testCount);
+        assertEquals("Should not receive change notifications after removeAllChangeListeners", 0, testCount[0]);
@@ -495,0 +512 @@
+    */
@@ -496,0 +514 @@
+    /*
@@ -499,3 +517 @@
-
-        fail("Change listeners are not presently working");
-
+        final int[] testCount = {0};
@@ -510 +526 @@
-                testCount++;
+                testCount[0]++;
@@ -516 +532 @@
-        testCount = 0;
+        testCount[0] = 0;
@@ -534 +550 @@
-        assertTrue("Should not receive change notifications after removeAllChangeListeners", 0 < testCount);
+        assertTrue("Should not receive change notifications after removeAllChangeListeners", 0 < testCount[0]);
@@ -535,0 +552 @@
+    */
@@ -537 +554 @@
-
+    /*
@@ -539,4 +556 @@
-
-        fail("testChangeUpdateFromOtherThread has been disabled because it currently causes a native crash in the next test");
-
-        testCount = 0;
+        final int[] testCount = {0};
@@ -547 +561 @@
-                testCount++;
+                testCount[0]++;
@@ -582 +596 @@
-            assertTrue("Should receive change notifications when modifying table in another thread ", BACKGROUND_COMMIT_TEST_DATA_SET_SIZE <= testCount);
+            assertTrue("Should receive change notifications when modifying table in another thread ", BACKGROUND_COMMIT_TEST_DATA_SET_SIZE <= testCount[0]);
@@ -587 +601 @@
-
+    */
@@ -602 +616 @@
-        resultList = testRealm.where(AllTypes.class).equalTo("columnstring", "a unique string").findAll();
+        resultList = testRealm.where(AllTypes.class).equalTo("columnString", "a unique string").findAll();
@@ -604 +618 @@
-        resultList = testRealm.where(AllTypes.class).equalTo("columnfloat", 3.1415f).findAll();
+        resultList = testRealm.where(AllTypes.class).equalTo("columnFloat", 3.1415f).findAll();
@@ -624 +638 @@
-        //testRealm.beginTransaction();
+        testRealm.beginTransaction();
@@ -626 +640 @@
-        //testRealm.commitTransaction();
+        testRealm.commitTransaction();
@@ -645 +659 @@
-        //testRealm.beginTransaction();
+        testRealm.beginTransaction();
@@ -647 +661 @@
-        //testRealm.commitTransaction();
+        testRealm.commitTransaction();
@@ -656 +670 @@
-        //testRealm.beginTransaction();
+        testRealm.beginTransaction();
@@ -658 +672 @@
-        //testRealm.commitTransaction();
+        testRealm.commitTransaction();
@@ -669 +683 @@
-        assertTrue("Realm.version returns invalid version number", version > 0);
+        assertTrue("Realm.version returns invalid version number", version >= 0);
@@ -675,0 +690 @@
+        testRealm.beginTransaction();
@@ -676,0 +692 @@
+        testRealm.commitTransaction();
@@ -697 +713 @@
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).between("columnlong", 0, 9).findAll();
+        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).between("columnLong", 0, 9).findAll();
@@ -700 +716 @@
-        resultList = testRealm.where(AllTypes.class).beginsWith("columnstring", "test data ").findAll();
+        resultList = testRealm.where(AllTypes.class).beginsWith("columnString", "test data ").findAll();
@@ -703 +719 @@
-        resultList = testRealm.where(AllTypes.class).beginsWith("columnstring", "test data 1").between("columnlong", 2, 20).findAll();
+        resultList = testRealm.where(AllTypes.class).beginsWith("columnString", "test data 1").between("columnLong", 2, 20).findAll();
@@ -706 +722 @@
-        resultList = testRealm.where(AllTypes.class).between("columnlong", 2, 20).beginsWith("columnstring", "test data 1").findAll();
+        resultList = testRealm.where(AllTypes.class).between("columnLong", 2, 20).beginsWith("columnString", "test data 1").findAll();
@@ -712 +728 @@
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).greaterThan("columnfloat", 10.234567f).findAll();
+        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).greaterThan("columnFloat", 10.234567f).findAll();
@@ -715 +731 @@
-        resultList = testRealm.where(AllTypes.class).beginsWith("columnstring", "test data 1").greaterThan("columnfloat", 50.234567f).findAll();
+        resultList = testRealm.where(AllTypes.class).beginsWith("columnString", "test data 1").greaterThan("columnFloat", 50.234567f).findAll();
@@ -718,2 +734,2 @@
-        RealmQuery<AllTypes> query = testRealm.where(AllTypes.class).greaterThan("columnfloat", 11.234567f);
-        resultList = query.between("columnlong", 1, 20).findAll();
+        RealmQuery<AllTypes> query = testRealm.where(AllTypes.class).greaterThan("columnFloat", 11.234567f);
+        resultList = query.between("columnLong", 1, 20).findAll();
@@ -725 +741 @@
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).greaterThanOrEqualTo("columnfloat", 10.234567f).findAll();
+        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).greaterThanOrEqualTo("columnFloat", 10.234567f).findAll();
@@ -728 +744 @@
-        resultList = testRealm.where(AllTypes.class).beginsWith("columnstring", "test data 1").greaterThanOrEqualTo("columnfloat", 50.234567f).findAll();
+        resultList = testRealm.where(AllTypes.class).beginsWith("columnString", "test data 1").greaterThanOrEqualTo("columnFloat", 50.234567f).findAll();
@@ -731,2 +747,2 @@
-        RealmQuery<AllTypes> query = testRealm.where(AllTypes.class).greaterThanOrEqualTo("columnfloat", 11.234567f);
-        query =  query.between("columnlong", 1, 20);
+        RealmQuery<AllTypes> query = testRealm.where(AllTypes.class).greaterThanOrEqualTo("columnFloat", 11.234567f);
+        query =  query.between("columnLong", 1, 20);
@@ -734 +750 @@
-        resultList = query.beginsWith("columnstring", "test data 15").findAll();
+        resultList = query.beginsWith("columnString", "test data 15").findAll();
@@ -739,2 +755,2 @@
-        RealmQuery<AllTypes> query = testRealm.where(AllTypes.class).equalTo("columnfloat", 31.234567f);
-        RealmResults<AllTypes> resultList = query.or().between("columnlong", 1, 20).findAll();
+        RealmQuery<AllTypes> query = testRealm.where(AllTypes.class).equalTo("columnFloat", 31.234567f);
+        RealmResults<AllTypes> resultList = query.or().between("columnLong", 1, 20).findAll();
@@ -743 +759 @@
-        resultList = query.or().equalTo("columnstring", "test data 15").findAll();
+        resultList = query.or().equalTo("columnString", "test data 15").findAll();
@@ -746 +762 @@
-        resultList = query.or().equalTo("columnstring", "test data 117").findAll();
+        resultList = query.or().equalTo("columnString", "test data 117").findAll();
@@ -751,2 +767,2 @@
-        RealmQuery<AllTypes> query = testRealm.where(AllTypes.class).equalTo("columnfloat", 31.234567f);
-        RealmResults<AllTypes> resultList = query.between("columnlong", 1, 10).findAll();
+        RealmQuery<AllTypes> query = testRealm.where(AllTypes.class).equalTo("columnFloat", 31.234567f);
+        RealmResults<AllTypes> resultList = query.between("columnLong", 1, 10).findAll();
@@ -755,2 +771,2 @@
-        query = testRealm.where(AllTypes.class).equalTo("columnfloat", 81.234567f);
-        resultList = query.between("columnlong", 1, 100).findAll();
+        query = testRealm.where(AllTypes.class).equalTo("columnFloat", 81.234567f);
+        resultList = query.between("columnLong", 1, 100).findAll();
@@ -761 +777 @@
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).lessThan("columnfloat", 31.234567f).findAll();
+        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).lessThan("columnFloat", 31.234567f).findAll();
@@ -763,2 +779,2 @@
-        RealmQuery<AllTypes> query = testRealm.where(AllTypes.class).lessThan("columnfloat", 31.234567f);
-        resultList = query.between("columnlong", 1, 10).findAll();
+        RealmQuery<AllTypes> query = testRealm.where(AllTypes.class).lessThan("columnFloat", 31.234567f);
+        resultList = query.between("columnLong", 1, 10).findAll();
@@ -769 +785 @@
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).lessThanOrEqualTo("columnfloat", 31.234567f).findAll();
+        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).lessThanOrEqualTo("columnFloat", 31.234567f).findAll();
@@ -771 +787 @@
-        resultList = testRealm.where(AllTypes.class).lessThanOrEqualTo("columnfloat", 31.234567f).between("columnlong", 11, 20).findAll();
+        resultList = testRealm.where(AllTypes.class).lessThanOrEqualTo("columnFloat", 31.234567f).between("columnLong", 11, 20).findAll();
@@ -776 +792 @@
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).equalTo("columnfloat", 31.234567f).findAll();
+        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).equalTo("columnFloat", 31.234567f).findAll();
@@ -778 +794 @@
-        resultList = testRealm.where(AllTypes.class).greaterThan("columnfloat", 11.0f).equalTo("columnlong", 10).findAll();
+        resultList = testRealm.where(AllTypes.class).greaterThan("columnFloat", 11.0f).equalTo("columnLong", 10).findAll();
@@ -780 +796 @@
-        resultList = testRealm.where(AllTypes.class).greaterThan("columnfloat", 11.0f).equalTo("columnlong", 1).findAll();
+        resultList = testRealm.where(AllTypes.class).greaterThan("columnFloat", 11.0f).equalTo("columnLong", 1).findAll();
@@ -785 +801 @@
-        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).notEqualTo("columnlong", 31).findAll();
+        RealmResults<AllTypes> resultList = testRealm.where(AllTypes.class).notEqualTo("columnLong", 31).findAll();
@@ -787 +803 @@
-        resultList = testRealm.where(AllTypes.class).notEqualTo("columnfloat", 11.234567f).equalTo("columnlong", 10).findAll();
+        resultList = testRealm.where(AllTypes.class).notEqualTo("columnFloat", 11.234567f).equalTo("columnLong", 10).findAll();
@@ -789 +805 @@
-        resultList = testRealm.where(AllTypes.class).notEqualTo("columnfloat", 11.234567f).equalTo("columnlong", 1).findAll();
+        resultList = testRealm.where(AllTypes.class).notEqualTo("columnFloat", 11.234567f).equalTo("columnLong", 1).findAll();
diff --git a/realm/src/androidTest/java/io/realm/internal/JNIMixedSubtableTest.java b/realm/src/androidTest/java/io/realm/internal/JNIMixedSubtableTest.java
index 002a928..056cd31 100644
--- a/realm/src/androidTest/java/io/realm/internal/JNIMixedSubtableTest.java
+++ b/realm/src/androidTest/java/io/realm/internal/JNIMixedSubtableTest.java
@@ -57,0 +58 @@
+        /* FIXME: Subtable in Mixed is currently not supported
@@ -61,0 +63 @@
+        */
@@ -87,0 +90 @@
+        /* FIXME: Subtable in Mixed is currently not supported
@@ -107,0 +111 @@
+        */
@@ -109,0 +114 @@
+    /* FIXME: Subtable in Mixed is currently not supported
@@ -123 +128 @@
-
+    */
diff --git a/realm/src/main/java/io/realm/Realm.java b/realm/src/main/java/io/realm/Realm.java
index 7d96462..b02ba2e 100644
--- a/realm/src/main/java/io/realm/Realm.java
+++ b/realm/src/main/java/io/realm/Realm.java
@@ -456 +456 @@
-        return transaction.hasTable(simpleClassName);
+        return transaction.hasTable(TABLE_PREFIX+simpleClassName);

