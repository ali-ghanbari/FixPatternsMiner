diff --git a/modules/citrus-core/src/main/java/com/consol/citrus/testng/AbstractBaseTest.java b/modules/citrus-core/src/main/java/com/consol/citrus/testng/AbstractBaseTest.java
index 2152c04..e2bbedc 100644
--- a/modules/citrus-core/src/main/java/com/consol/citrus/testng/AbstractBaseTest.java
+++ b/modules/citrus-core/src/main/java/com/consol/citrus/testng/AbstractBaseTest.java
@@ -25,2 +25,2 @@
-import com.consol.citrus.functions.FunctionRegistry;
-import com.consol.citrus.variable.GlobalVariables;
+import com.consol.citrus.context.TestContextFactoryBean;
+import com.consol.citrus.exceptions.CitrusRuntimeException;
@@ -41 +41 @@
-    /** Function registry */
+    /** Factory bean for test context */
@@ -43,5 +43 @@
-    protected FunctionRegistry functionRegistry;
-
-    /** Global variables */
-    @Autowired
-    protected GlobalVariables globalVariables;
+    protected TestContextFactoryBean testContextFactoryBean;
@@ -62,6 +58,5 @@
-        TestContext newContext = new TestContext();
-
-        newContext.setFunctionRegistry(functionRegistry);
-        newContext.setGlobalVariables(globalVariables);
-
-        return newContext;
+        try {
+            return (TestContext)testContextFactoryBean.getObject();
+        } catch (Exception e) {
+            throw new CitrusRuntimeException("Failed to create test context", e);
+        }
diff --git a/modules/citrus-core/src/main/java/com/consol/citrus/validation/script/GroovyScriptMessageValidator.java b/modules/citrus-core/src/main/java/com/consol/citrus/validation/script/GroovyScriptMessageValidator.java
index e755bc5..b08ad1c 100644
--- a/modules/citrus-core/src/main/java/com/consol/citrus/validation/script/GroovyScriptMessageValidator.java
+++ b/modules/citrus-core/src/main/java/com/consol/citrus/validation/script/GroovyScriptMessageValidator.java
@@ -106,0 +107,2 @@
+        } catch (AssertionError e) {
+            throw new CitrusRuntimeException("Groovy script validation failed with assertion error:\n" + e.getMessage(), e);
diff --git a/modules/citrus-core/src/main/resources/com/consol/citrus/validation/xml-slurper-template.groovy b/modules/citrus-core/src/main/resources/com/consol/citrus/validation/xml-slurper-template.groovy
index 6e75098..a909171 100644
--- a/modules/citrus-core/src/main/resources/com/consol/citrus/validation/xml-slurper-template.groovy
+++ b/modules/citrus-core/src/main/resources/com/consol/citrus/validation/xml-slurper-template.groovy
@@ -4 +4 @@
-import com.consol.citrus.validation.GroovyScriptValidator.ValidationScriptExecutor
+import com.consol.citrus.validation.script.GroovyScriptMessageValidator.ValidationScriptExecutor
diff --git a/modules/citrus-core/src/test/java/com/consol/citrus/actions/ReceiveMessageActionTest.java b/modules/citrus-core/src/test/java/com/consol/citrus/actions/ReceiveMessageActionTest.java
index 7a99e17..523496a 100644
--- a/modules/citrus-core/src/test/java/com/consol/citrus/actions/ReceiveMessageActionTest.java
+++ b/modules/citrus-core/src/test/java/com/consol/citrus/actions/ReceiveMessageActionTest.java
@@ -24,2 +24 @@
-import java.util.HashMap;
-import java.util.Map;
+import java.util.*;
@@ -33,0 +33 @@
+import com.consol.citrus.context.TestContext;
@@ -36,0 +37,3 @@
+import com.consol.citrus.validation.MessageValidator;
+import com.consol.citrus.validation.context.ValidationContext;
+import com.consol.citrus.validation.script.GroovyScriptMessageValidator;
@@ -1107,0 +1111,32 @@
+    
+    @Test
+    @SuppressWarnings("unchecked")
+    public void testInjectedMessageValidators() {
+        ReceiveMessageAction receiveAction = new ReceiveMessageAction();
+        receiveAction.setMessageReceiver(messageReceiver);
+        
+        receiveAction.setMessageData("<TestRequest><Message>Hello World!</Message></TestRequest>");
+        
+        Map<String, Object> headers = new HashMap<String, Object>();
+        Message controlMessage = MessageBuilder.withPayload("<TestRequest><Message>Hello World!</Message></TestRequest>")
+                                    .copyHeaders(headers)
+                                    .build();
+        
+        reset(messageReceiver);
+        expect(messageReceiver.receive()).andReturn(controlMessage).times(2);
+        replay(messageReceiver);
+        
+        receiveAction.execute(context);
+        
+        // now inject multiple validators
+        List<MessageValidator<? extends ValidationContext>> validators = new ArrayList<MessageValidator<? extends ValidationContext>>();
+        validators.add(new DomXmlMessageValidator());
+        validators.add(new GroovyScriptMessageValidator());
+        
+        TestContext newContext = createTestContext();
+        newContext.setMessageValidators(validators);
+        
+        receiveAction.execute(newContext);
+        
+        verify(messageReceiver);
+    }
diff --git a/modules/citrus-core/src/test/java/com/consol/citrus/channel/MessageChannelSenderTest.java b/modules/citrus-core/src/test/java/com/consol/citrus/channel/MessageChannelSenderTest.java
index 2484cbf..2252c3f 100644
--- a/modules/citrus-core/src/test/java/com/consol/citrus/channel/MessageChannelSenderTest.java
+++ b/modules/citrus-core/src/test/java/com/consol/citrus/channel/MessageChannelSenderTest.java
@@ -28 +27,0 @@
-import org.springframework.integration.channel.ChannelResolver;
diff --git a/modules/citrus-core/src/test/java/com/consol/citrus/channel/SyncMessageChannelSenderTest.java b/modules/citrus-core/src/test/java/com/consol/citrus/channel/SyncMessageChannelSenderTest.java
index 4e320a3..fee789e 100644
--- a/modules/citrus-core/src/test/java/com/consol/citrus/channel/SyncMessageChannelSenderTest.java
+++ b/modules/citrus-core/src/test/java/com/consol/citrus/channel/SyncMessageChannelSenderTest.java
@@ -28 +27,0 @@
-import org.springframework.integration.channel.ChannelResolver;
diff --git a/modules/citrus-core/src/test/java/com/consol/citrus/validation/DomXmlMessageValidatorTest.java b/modules/citrus-core/src/test/java/com/consol/citrus/validation/DomXmlMessageValidatorTest.java
deleted file mode 100644
index b8a56d5..0000000
--- a/modules/citrus-core/src/test/java/com/consol/citrus/validation/DomXmlMessageValidatorTest.java
+++ /dev/null
@@ -1,298 +0,0 @@
-/*
- * Copyright 2006-2010 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.consol.citrus.validation;
-
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.xml.parsers.ParserConfigurationException;
-
-import org.springframework.core.io.ClassPathResource;
-import org.springframework.core.io.Resource;
-import org.springframework.integration.core.Message;
-import org.springframework.integration.message.MessageBuilder;
-import org.springframework.xml.xsd.SimpleXsdSchema;
-import org.testng.annotations.Test;
-import org.xml.sax.SAXException;
-
-import com.consol.citrus.exceptions.ValidationException;
-import com.consol.citrus.testng.AbstractBaseTest;
-import com.consol.citrus.validation.xml.DomXmlMessageValidator;
-import com.consol.citrus.xml.XsdSchemaRepository;
-
-/**
- * @author Christoph Deppisch
- */
-public class DomXmlMessageValidatorTest extends AbstractBaseTest {
-    @Test
-    public void validateXMLSchema() throws SAXException, IOException, ParserConfigurationException {
-        Message<?> message = MessageBuilder.withPayload("<message xmlns='http://testsuite'>"
-                        + "<correlationId>Kx1R123456789</correlationId>"
-                        + "<bookingId>Bx1G987654321</bookingId>"
-                        + "<test>Hello TestFramework</test>"
-                    + "</message>").build();
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        
-        XsdSchemaRepository schemaRepository = new XsdSchemaRepository();
-        Resource schemaResource = new ClassPathResource("com/consol/citrus/validation/test.xsd");
-        SimpleXsdSchema schema = new SimpleXsdSchema(schemaResource);
-        schema.afterPropertiesSet();
-        
-        schemaRepository.getSchemas().add(schema);
-        
-        validator.setSchemaRepository(schemaRepository);
-        
-        validator.validateXMLSchema(message);
-    }
-    
-    @Test(expectedExceptions = {ValidationException.class})
-    public void validateXMLSchemaError() throws SAXException, IOException, ParserConfigurationException {
-        Message<?> message = MessageBuilder.withPayload("<message xmlns='http://testsuite'>"
-                        + "<correlationId>Kx1R123456789</correlationId>"
-                        + "<bookingId>Bx1G987654321</bookingId>"
-                        + "<test>Hello TestFramework</test>"
-                        + "<wrongElement>totally wrong</wrongElement>"
-                    + "</message>").build();
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        
-        XsdSchemaRepository schemaRepository = new XsdSchemaRepository();
-        Resource schemaResource = new ClassPathResource("com/consol/citrus/validation/test.xsd");
-        SimpleXsdSchema schema = new SimpleXsdSchema(schemaResource);
-        schema.afterPropertiesSet();
-        
-        schemaRepository.getSchemas().add(schema);
-        
-        validator.setSchemaRepository(schemaRepository);
-        
-        validator.validateXMLSchema(message);
-    }
-    
-    @Test
-    public void testExpectDefaultNamespace() {
-        Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite'>"
-                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<sub-element attribute='A'>text-value</sub-element>"
-                        + "</element>" 
-                    + "</root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("", "http://testsuite");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test
-    public void testExpectNamespace() {
-    	Message<?> message = MessageBuilder.withPayload("<ns1:root xmlns:ns1='http://testsuite/ns1'>"
-                        + "<ns1:element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<ns1:sub-element attribute='A'>text-value</ns1:sub-element>"
-                        + "</ns1:element>" 
-                    + "</ns1:root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("ns1", "http://testsuite/ns1");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test
-    public void testExpectMixedNamespaces() {
-    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1'>"
-                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<sub-element attribute='A'>text-value</sub-element>"
-                        + "</element>" 
-                    + "</root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("", "http://testsuite/default");
-        expectedNamespaces.put("ns1", "http://testsuite/ns1");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test
-    public void testExpectMultipleNamespaces() {
-    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
-                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<sub-element attribute='A'>text-value</sub-element>"
-                        + "</element>" 
-                    + "</root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("", "http://testsuite/default");
-        expectedNamespaces.put("ns1", "http://testsuite/ns1");
-        expectedNamespaces.put("ns2", "http://testsuite/ns2");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test(expectedExceptions = {ValidationException.class})
-    public void testExpectDefaultNamespaceError() {
-    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite'>"
-                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<sub-element attribute='A'>text-value</sub-element>"
-                        + "</element>" 
-                    + "</root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("", "http://testsuite/wrong");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test(expectedExceptions = {ValidationException.class})
-    public void testExpectNamespaceError() {
-    	Message<?> message = MessageBuilder.withPayload("<ns1:root xmlns:ns1='http://testsuite/ns1'>"
-                        + "<ns1:element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<ns1:sub-element attribute='A'>text-value</ns1:sub-element>"
-                        + "</ns1:element>" 
-                    + "</ns1:root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("ns1", "http://testsuite/ns1/wrong");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test(expectedExceptions = {ValidationException.class})
-    public void testExpectMixedNamespacesError() {
-    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1'>"
-                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<sub-element attribute='A'>text-value</sub-element>"
-                        + "</element>" 
-                    + "</root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("", "http://testsuite/default/wrong");
-        expectedNamespaces.put("ns1", "http://testsuite/ns1");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test(expectedExceptions = {ValidationException.class})
-    public void testExpectMultipleNamespacesError() {
-    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
-                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<sub-element attribute='A'>text-value</sub-element>"
-                        + "</element>" 
-                    + "</root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("", "http://testsuite/default");
-        expectedNamespaces.put("ns1", "http://testsuite/ns1/wrong");
-        expectedNamespaces.put("ns2", "http://testsuite/ns2");
-     
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test(expectedExceptions = {ValidationException.class})
-    public void testExpectWrongNamespacePrefix() {
-    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
-                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<sub-element attribute='A'>text-value</sub-element>"
-                        + "</element>" 
-                    + "</root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("", "http://testsuite/default");
-        expectedNamespaces.put("nswrong", "http://testsuite/ns1");
-        expectedNamespaces.put("ns2", "http://testsuite/ns2");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test(expectedExceptions = {ValidationException.class})
-    public void testExpectDefaultNamespaceButNamespace() {
-    	Message<?> message = MessageBuilder.withPayload("<ns0:root xmlns:ns0='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
-                        + "<ns0:element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<ns0:sub-element attribute='A'>text-value</ns0:sub-element>"
-                        + "</ns0:element>" 
-                    + "</ns0:root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("", "http://testsuite/default");
-        expectedNamespaces.put("ns1", "http://testsuite/ns1");
-        expectedNamespaces.put("ns2", "http://testsuite/ns2");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test(expectedExceptions = {ValidationException.class})
-    public void testExpectNamespaceButDefaultNamespace() {
-    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
-                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<sub-element attribute='A'>text-value</sub-element>"
-                        + "</element>" 
-                    + "</root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("ns0", "http://testsuite/default");
-        expectedNamespaces.put("ns1", "http://testsuite/ns1");
-        expectedNamespaces.put("ns2", "http://testsuite/ns2");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test(expectedExceptions = {ValidationException.class})
-    public void testExpectAdditionalNamespace() {
-    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
-                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<sub-element attribute='A'>text-value</sub-element>"
-                        + "</element>" 
-                    + "</root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("", "http://testsuite/default");
-        expectedNamespaces.put("ns1", "http://testsuite/ns1");
-        expectedNamespaces.put("ns2", "http://testsuite/ns2");
-        expectedNamespaces.put("ns4", "http://testsuite/ns4");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-    
-    @Test(expectedExceptions = {ValidationException.class})
-    public void testExpectNamespaceButNamespaceMissing() {
-    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2' xmlns:ns4='http://testsuite/ns4'>"
-                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
-                        + "<sub-element attribute='A'>text-value</sub-element>"
-                        + "</element>" 
-                    + "</root>").build();
-        
-        Map<String, String> expectedNamespaces = new HashMap<String, String>();
-        expectedNamespaces.put("", "http://testsuite/default");
-        expectedNamespaces.put("ns1", "http://testsuite/ns1");
-        expectedNamespaces.put("ns2", "http://testsuite/ns2");
-        
-        DomXmlMessageValidator validator = new DomXmlMessageValidator();
-        validator.validateNamespaces(expectedNamespaces, message);
-    }
-}
diff --git a/modules/citrus-core/src/test/java/com/consol/citrus/validation/script/GroovyScriptMessageValidatorTest.java b/modules/citrus-core/src/test/java/com/consol/citrus/validation/script/GroovyScriptMessageValidatorTest.java
new file mode 100644
index 0000000..b559dc7
--- /dev/null
+++ b/modules/citrus-core/src/test/java/com/consol/citrus/validation/script/GroovyScriptMessageValidatorTest.java
@@ -0,0 +1,101 @@
+/*
+ * Copyright 2006-2010 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.consol.citrus.validation.script;
+
+import org.springframework.integration.core.Message;
+import org.springframework.integration.message.MessageBuilder;
+import org.testng.Assert;
+import org.testng.annotations.BeforeMethod;
+import org.testng.annotations.Test;
+
+import com.consol.citrus.exceptions.CitrusRuntimeException;
+import com.consol.citrus.testng.AbstractBaseTest;
+
+/**
+ * @author Christoph Deppisch
+ */
+public class GroovyScriptMessageValidatorTest extends AbstractBaseTest {
+
+    private GroovyScriptMessageValidator validator = new GroovyScriptMessageValidator();
+    
+    private Message<?> message;
+
+    @BeforeMethod
+    public void prepareTestData() {
+        message = MessageBuilder.withPayload("<RequestMessage Id=\"123456789\" xmlns=\"http://citrus/test\">"
+                + "<CorrelationId>Kx1R123456789</CorrelationId>"
+                + "<BookingId>Bx1G987654321</BookingId>"
+                + "<Text>Hello TestFramework</Text>"
+            + "</RequestMessage>").build();
+    }
+    
+    @Test
+    public void testGroovyScriptValidation() {
+        String validationScript = "assert root.children().size() == 3 \n" +
+                        "assert root.CorrelationId.text() == 'Kx1R123456789' \n" +
+                        "assert root.BookingId.text() == 'Bx1G987654321' \n" +
+                        "assert root.Text.text() == 'Hello TestFramework'";
+                        
+        ScriptValidationContext validationContext = new ScriptValidationContext(validationScript, context);
+        
+        validator.validateMessage(message, context, validationContext);
+    }
+    
+    @Test
+    public void testGroovyScriptValidationVariableSupport() {
+        context.setVariable("user", "TestFramework");
+        context.setVariable("correlationId", "Kx1R123456789");
+        
+        String validationScript = "assert root.children().size() == 3 \n" +
+                        "assert root.CorrelationId.text() == '${correlationId}' \n" +
+                        "assert root.BookingId.text() == 'Bx1G987654321' \n" +
+                        "assert root.Text.text() == 'Hello ' + context.getVariable(\"user\")";
+                        
+        ScriptValidationContext validationContext = new ScriptValidationContext(validationScript, context);
+        
+        validator.validateMessage(message, context, validationContext);
+    }
+    
+    @Test
+    public void testGroovyScriptValidationFailed() {
+        String validationScript = "assert root.children().size() == 3 \n" +
+                        "assert root.CorrelationId.text() == 'Kx1R123456789' \n" +
+                        "assert root.BookingId.text() == 'Bx1G987654321' \n" +
+                        "assert root.Text == 'Hello Citrus'"; //should fail
+                        
+        ScriptValidationContext validationContext = new ScriptValidationContext(validationScript, context);
+        
+        try {
+            validator.validateMessage(message, context, validationContext);
+        } catch (CitrusRuntimeException e) {
+            Assert.assertTrue(e.getMessage().startsWith("Groovy script validation failed"));
+            Assert.assertTrue(e.getMessage().contains("Hello Citrus"));
+            Assert.assertTrue(e.getMessage().contains("Hello TestFramework"));
+            return;
+        }
+        
+        Assert.fail("Missing script validation exception caused by wrong control value");
+    }
+    
+    @Test
+    public void testEmptyValidationScript() {
+        String validationScript = "";
+        ScriptValidationContext validationContext = new ScriptValidationContext(validationScript, context);
+        
+        validator.validateMessage(message, context, validationContext);
+    }
+}
diff --git a/modules/citrus-core/src/test/java/com/consol/citrus/validation/xml/DomXmlMessageValidatorTest.java b/modules/citrus-core/src/test/java/com/consol/citrus/validation/xml/DomXmlMessageValidatorTest.java
new file mode 100644
index 0000000..9aa762d
--- /dev/null
+++ b/modules/citrus-core/src/test/java/com/consol/citrus/validation/xml/DomXmlMessageValidatorTest.java
@@ -0,0 +1,298 @@
+/*
+ * Copyright 2006-2010 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.consol.citrus.validation.xml;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.springframework.core.io.ClassPathResource;
+import org.springframework.core.io.Resource;
+import org.springframework.integration.core.Message;
+import org.springframework.integration.message.MessageBuilder;
+import org.springframework.xml.xsd.SimpleXsdSchema;
+import org.testng.annotations.Test;
+import org.xml.sax.SAXException;
+
+import com.consol.citrus.exceptions.ValidationException;
+import com.consol.citrus.testng.AbstractBaseTest;
+import com.consol.citrus.validation.xml.DomXmlMessageValidator;
+import com.consol.citrus.xml.XsdSchemaRepository;
+
+/**
+ * @author Christoph Deppisch
+ */
+public class DomXmlMessageValidatorTest extends AbstractBaseTest {
+    @Test
+    public void validateXMLSchema() throws SAXException, IOException, ParserConfigurationException {
+        Message<?> message = MessageBuilder.withPayload("<message xmlns='http://testsuite'>"
+                        + "<correlationId>Kx1R123456789</correlationId>"
+                        + "<bookingId>Bx1G987654321</bookingId>"
+                        + "<test>Hello TestFramework</test>"
+                    + "</message>").build();
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        
+        XsdSchemaRepository schemaRepository = new XsdSchemaRepository();
+        Resource schemaResource = new ClassPathResource("com/consol/citrus/validation/test.xsd");
+        SimpleXsdSchema schema = new SimpleXsdSchema(schemaResource);
+        schema.afterPropertiesSet();
+        
+        schemaRepository.getSchemas().add(schema);
+        
+        validator.setSchemaRepository(schemaRepository);
+        
+        validator.validateXMLSchema(message);
+    }
+    
+    @Test(expectedExceptions = {ValidationException.class})
+    public void validateXMLSchemaError() throws SAXException, IOException, ParserConfigurationException {
+        Message<?> message = MessageBuilder.withPayload("<message xmlns='http://testsuite'>"
+                        + "<correlationId>Kx1R123456789</correlationId>"
+                        + "<bookingId>Bx1G987654321</bookingId>"
+                        + "<test>Hello TestFramework</test>"
+                        + "<wrongElement>totally wrong</wrongElement>"
+                    + "</message>").build();
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        
+        XsdSchemaRepository schemaRepository = new XsdSchemaRepository();
+        Resource schemaResource = new ClassPathResource("com/consol/citrus/validation/test.xsd");
+        SimpleXsdSchema schema = new SimpleXsdSchema(schemaResource);
+        schema.afterPropertiesSet();
+        
+        schemaRepository.getSchemas().add(schema);
+        
+        validator.setSchemaRepository(schemaRepository);
+        
+        validator.validateXMLSchema(message);
+    }
+    
+    @Test
+    public void testExpectDefaultNamespace() {
+        Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite'>"
+                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<sub-element attribute='A'>text-value</sub-element>"
+                        + "</element>" 
+                    + "</root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("", "http://testsuite");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test
+    public void testExpectNamespace() {
+    	Message<?> message = MessageBuilder.withPayload("<ns1:root xmlns:ns1='http://testsuite/ns1'>"
+                        + "<ns1:element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<ns1:sub-element attribute='A'>text-value</ns1:sub-element>"
+                        + "</ns1:element>" 
+                    + "</ns1:root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("ns1", "http://testsuite/ns1");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test
+    public void testExpectMixedNamespaces() {
+    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1'>"
+                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<sub-element attribute='A'>text-value</sub-element>"
+                        + "</element>" 
+                    + "</root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("", "http://testsuite/default");
+        expectedNamespaces.put("ns1", "http://testsuite/ns1");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test
+    public void testExpectMultipleNamespaces() {
+    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
+                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<sub-element attribute='A'>text-value</sub-element>"
+                        + "</element>" 
+                    + "</root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("", "http://testsuite/default");
+        expectedNamespaces.put("ns1", "http://testsuite/ns1");
+        expectedNamespaces.put("ns2", "http://testsuite/ns2");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test(expectedExceptions = {ValidationException.class})
+    public void testExpectDefaultNamespaceError() {
+    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite'>"
+                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<sub-element attribute='A'>text-value</sub-element>"
+                        + "</element>" 
+                    + "</root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("", "http://testsuite/wrong");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test(expectedExceptions = {ValidationException.class})
+    public void testExpectNamespaceError() {
+    	Message<?> message = MessageBuilder.withPayload("<ns1:root xmlns:ns1='http://testsuite/ns1'>"
+                        + "<ns1:element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<ns1:sub-element attribute='A'>text-value</ns1:sub-element>"
+                        + "</ns1:element>" 
+                    + "</ns1:root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("ns1", "http://testsuite/ns1/wrong");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test(expectedExceptions = {ValidationException.class})
+    public void testExpectMixedNamespacesError() {
+    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1'>"
+                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<sub-element attribute='A'>text-value</sub-element>"
+                        + "</element>" 
+                    + "</root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("", "http://testsuite/default/wrong");
+        expectedNamespaces.put("ns1", "http://testsuite/ns1");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test(expectedExceptions = {ValidationException.class})
+    public void testExpectMultipleNamespacesError() {
+    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
+                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<sub-element attribute='A'>text-value</sub-element>"
+                        + "</element>" 
+                    + "</root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("", "http://testsuite/default");
+        expectedNamespaces.put("ns1", "http://testsuite/ns1/wrong");
+        expectedNamespaces.put("ns2", "http://testsuite/ns2");
+     
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test(expectedExceptions = {ValidationException.class})
+    public void testExpectWrongNamespacePrefix() {
+    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
+                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<sub-element attribute='A'>text-value</sub-element>"
+                        + "</element>" 
+                    + "</root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("", "http://testsuite/default");
+        expectedNamespaces.put("nswrong", "http://testsuite/ns1");
+        expectedNamespaces.put("ns2", "http://testsuite/ns2");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test(expectedExceptions = {ValidationException.class})
+    public void testExpectDefaultNamespaceButNamespace() {
+    	Message<?> message = MessageBuilder.withPayload("<ns0:root xmlns:ns0='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
+                        + "<ns0:element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<ns0:sub-element attribute='A'>text-value</ns0:sub-element>"
+                        + "</ns0:element>" 
+                    + "</ns0:root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("", "http://testsuite/default");
+        expectedNamespaces.put("ns1", "http://testsuite/ns1");
+        expectedNamespaces.put("ns2", "http://testsuite/ns2");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test(expectedExceptions = {ValidationException.class})
+    public void testExpectNamespaceButDefaultNamespace() {
+    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
+                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<sub-element attribute='A'>text-value</sub-element>"
+                        + "</element>" 
+                    + "</root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("ns0", "http://testsuite/default");
+        expectedNamespaces.put("ns1", "http://testsuite/ns1");
+        expectedNamespaces.put("ns2", "http://testsuite/ns2");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test(expectedExceptions = {ValidationException.class})
+    public void testExpectAdditionalNamespace() {
+    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2'>"
+                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<sub-element attribute='A'>text-value</sub-element>"
+                        + "</element>" 
+                    + "</root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("", "http://testsuite/default");
+        expectedNamespaces.put("ns1", "http://testsuite/ns1");
+        expectedNamespaces.put("ns2", "http://testsuite/ns2");
+        expectedNamespaces.put("ns4", "http://testsuite/ns4");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+    
+    @Test(expectedExceptions = {ValidationException.class})
+    public void testExpectNamespaceButNamespaceMissing() {
+    	Message<?> message = MessageBuilder.withPayload("<root xmlns='http://testsuite/default' xmlns:ns1='http://testsuite/ns1' xmlns:ns2='http://testsuite/ns2' xmlns:ns4='http://testsuite/ns4'>"
+                        + "<element attributeA='attribute-value' attributeB='attribute-value'>"
+                        + "<sub-element attribute='A'>text-value</sub-element>"
+                        + "</element>" 
+                    + "</root>").build();
+        
+        Map<String, String> expectedNamespaces = new HashMap<String, String>();
+        expectedNamespaces.put("", "http://testsuite/default");
+        expectedNamespaces.put("ns1", "http://testsuite/ns1");
+        expectedNamespaces.put("ns2", "http://testsuite/ns2");
+        
+        DomXmlMessageValidator validator = new DomXmlMessageValidator();
+        validator.validateNamespaces(expectedNamespaces, message);
+    }
+}
diff --git a/modules/citrus-core/src/test/java/com/consol/citrus/variable/LoadPropertiesAsGlobalVariablesTest.java b/modules/citrus-core/src/test/java/com/consol/citrus/variable/LoadPropertiesAsGlobalVariablesTest.java
index 0f1a235..892444c 100644
--- a/modules/citrus-core/src/test/java/com/consol/citrus/variable/LoadPropertiesAsGlobalVariablesTest.java
+++ b/modules/citrus-core/src/test/java/com/consol/citrus/variable/LoadPropertiesAsGlobalVariablesTest.java
@@ -22,0 +23 @@
+import org.springframework.beans.factory.annotation.Autowired;
@@ -26,0 +28 @@
+import com.consol.citrus.functions.FunctionRegistry;
@@ -32,0 +35,7 @@
+    
+    @Autowired
+    private FunctionRegistry functionRegistry;
+    
+    @Autowired
+    private GlobalVariables globalVariables;
+    
diff --git a/modules/citrus-core/src/test/resources/citrus-context.xml b/modules/citrus-core/src/test/resources/citrus-context.xml
index ce85e0b..6fa25a3 100644
--- a/modules/citrus-core/src/test/resources/citrus-context.xml
+++ b/modules/citrus-core/src/test/resources/citrus-context.xml
@@ -41,0 +42 @@
+    <!-- Message validators -->
diff --git a/modules/citrus-integration/src/citrus/resources/citrus-context.xml b/modules/citrus-integration/src/citrus/resources/citrus-context.xml
index cebb4aa..4c95ec2 100644
--- a/modules/citrus-integration/src/citrus/resources/citrus-context.xml
+++ b/modules/citrus-integration/src/citrus/resources/citrus-context.xml
@@ -62,0 +63 @@
+    <bean id="groovyScriptMessageValidator" class="com.consol.citrus.validation.script.GroovyScriptMessageValidator"/>

