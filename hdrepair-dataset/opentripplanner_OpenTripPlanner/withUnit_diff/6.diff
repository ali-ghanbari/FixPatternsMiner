diff --git a/opentripplanner-routing/src/main/java/org/opentripplanner/routing/impl/CandidateEdge.java b/opentripplanner-routing/src/main/java/org/opentripplanner/routing/impl/CandidateEdge.java
index c6fb2a3..d74ce9b 100644
--- a/opentripplanner-routing/src/main/java/org/opentripplanner/routing/impl/CandidateEdge.java
+++ b/opentripplanner-routing/src/main/java/org/opentripplanner/routing/impl/CandidateEdge.java
@@ -164,2 +163,0 @@
-	 * Deprecated.
-	 * 
diff --git a/opentripplanner-routing/src/test/java/org/opentripplanner/routing/ClosestEdgesTest.java b/opentripplanner-routing/src/test/java/org/opentripplanner/routing/ClosestEdgesTest.java
index 8f39909..d31127a 100644
--- a/opentripplanner-routing/src/test/java/org/opentripplanner/routing/ClosestEdgesTest.java
+++ b/opentripplanner-routing/src/test/java/org/opentripplanner/routing/ClosestEdgesTest.java
@@ -41,3 +41 @@
-    private Graph graph;
-    
-    private StreetVertexIndexService finder;
+	private Graph graph;
@@ -45 +43 @@
-    private PlainStreetEdge top, bottom, left, right;
+	private StreetVertexIndexService finder;
@@ -47 +45 @@
-    private IntersectionVertex br, tr, bl, tl;
+	private PlainStreetEdge top, bottom, left, right;
@@ -49,7 +47,9 @@
-    public LineString createGeometry(Vertex a, Vertex b) {
-        GeometryFactory factory = new GeometryFactory();
-        Coordinate[] cs = new Coordinate[2];
-        cs[0] = a.getCoordinate();
-        cs[1] = b.getCoordinate();
-        return factory.createLineString(cs);
-    }
+	private IntersectionVertex br, tr, bl, tl;
+
+	public LineString createGeometry(Vertex a, Vertex b) {
+		GeometryFactory factory = new GeometryFactory();
+		Coordinate[] cs = new Coordinate[2];
+		cs[0] = a.getCoordinate();
+		cs[1] = b.getCoordinate();
+		return factory.createLineString(cs);
+	}
@@ -92,3 +92,4 @@
-		StreetVertexIndexServiceImpl myFinder = new StreetVertexIndexServiceImpl(graph);
-        myFinder.setup();
-        finder = myFinder;
+		StreetVertexIndexServiceImpl myFinder = new StreetVertexIndexServiceImpl(
+				graph);
+		myFinder.setup();
+		finder = myFinder;
@@ -108,48 +109,48 @@
-    @Test
-    public void testModeRestriction() {
-    	// Lies along the top right edge
-        Coordinate c = new Coordinate(-74.005000001, 40.01);
-        LocationObservation loc = new LocationObservation(c);
-        TraversalRequirements reqs = new TraversalRequirements();
-        
-        // Default traversal requirements allow any traversal mode.
-        checkClosestEdgeModes(loc, reqs, 1);
-        
-        // Only allow walking
-        TraverseModeSet modes = new TraverseModeSet();
-        modes.setWalk(true);
-        reqs.setModes(modes);
-        
-        // There's only one walkable edge.        
-        checkClosestEdgeModes(loc, reqs, 1);
-        
-        // Only allow biking: there are 5 bikeable edges.
-        modes = new TraverseModeSet();
-        modes.setBicycle(true);
-        reqs.setModes(modes);
-        checkClosestEdgeModes(loc, reqs, 2);
-        
-        // Only allow driving: there are 7 driveable edges.
-        modes = new TraverseModeSet();
-        modes.setCar(true);
-        reqs.setModes(modes);
-        checkClosestEdgeModes(loc, reqs, 2);
-        
-        // Allow driving and biking: all 8 edges can be traversed.
-        modes = new TraverseModeSet();
-        modes.setCar(true);
-        modes.setBicycle(true);
-        reqs.setModes(modes);
-        checkClosestEdgeModes(loc, reqs, 2);
-    }
-    
-    @Test
-    public void testInteriorEdgeCase() {
-    	// Lies smack in the middle of the box
-        Coordinate c = new Coordinate(-74.005, 40.005);
-        LocationObservation loc = new LocationObservation(c);
-        TraversalRequirements reqs = new TraversalRequirements();
-        
-        // Should only return 2 edges even though all edges are equidistant.
-        // TODO(flamholz): this doesn't feel like the right behavior to me.
-        // Consider fixing it.
+	@Test
+	public void testModeRestriction() {
+		// Lies along the top right edge
+		Coordinate c = new Coordinate(-74.005000001, 40.01);
+		LocationObservation loc = new LocationObservation(c);
+		TraversalRequirements reqs = new TraversalRequirements();
+
+		// Default traversal requirements allow any traversal mode.
+		checkClosestEdgeModes(loc, reqs, 1);
+
+		// Only allow walking
+		TraverseModeSet modes = new TraverseModeSet();
+		modes.setWalk(true);
+		reqs.setModes(modes);
+
+		// There's only one walkable edge.
+		checkClosestEdgeModes(loc, reqs, 1);
+
+		// Only allow biking: there are 5 bikeable edges.
+		modes = new TraverseModeSet();
+		modes.setBicycle(true);
+		reqs.setModes(modes);
+		checkClosestEdgeModes(loc, reqs, 2);
+
+		// Only allow driving: there are 7 driveable edges.
+		modes = new TraverseModeSet();
+		modes.setCar(true);
+		reqs.setModes(modes);
+		checkClosestEdgeModes(loc, reqs, 2);
+
+		// Allow driving and biking: all 8 edges can be traversed.
+		modes = new TraverseModeSet();
+		modes.setCar(true);
+		modes.setBicycle(true);
+		reqs.setModes(modes);
+		checkClosestEdgeModes(loc, reqs, 2);
+	}
+
+	@Test
+	public void testInteriorEdgeCase() {
+		// Lies smack in the middle of the box
+		Coordinate c = new Coordinate(-74.005, 40.005);
+		LocationObservation loc = new LocationObservation(c);
+		TraversalRequirements reqs = new TraversalRequirements();
+
+		// Should only return 2 edges even though all edges are equidistant.
+		// TODO(flamholz): this doesn't feel like the right behavior to me.
+		// Consider fixing it.
@@ -158,14 +159,15 @@
-    }
-    
-    /**
-     * Checks that the best edge found is this one and that the number of edges found matches.
-     * 
-     * @param reqs
-     * @param loc
-     * @param expectedBest
-     * @param expectedCandidates
-     */
-    private void checkBest(TraversalRequirements reqs, LocationObservation loc,
-    		StreetEdge expectedBest, int expectedCandidates) {        
-        // Should give me the top edge as the best edge.
-        // topBack is worse because of the heading.
+	}
+
+	/**
+	 * Checks that the best edge found is this one and that the number of edges
+	 * found matches.
+	 * 
+	 * @param reqs
+	 * @param loc
+	 * @param expectedBest
+	 * @param expectedCandidates
+	 */
+	private void checkBest(TraversalRequirements reqs, LocationObservation loc,
+			StreetEdge expectedBest, int expectedCandidates) {
+		// Should give me the top edge as the best edge.
+		// topBack is worse because of the heading.
@@ -175,6 +177,6 @@
-    }
-    
-    @Test
-    public void testHeading() {
-    	// Lies along the top edge
-    	Coordinate c = new Coordinate(-74.005000001, 40.01);
+	}
+
+	@Test
+	public void testHeading() {
+		// Lies along the top edge
+		Coordinate c = new Coordinate(-74.005000001, 40.01);
@@ -184,6 +186,8 @@
-        modes.setCar(true);
-        reqs.setModes(modes);
-    	
-    	for (double degreeOff = 0.0; degreeOff < 30.0; degreeOff += 3.0) {
-	    	// Location along the top edge, traveling with the forward edge exactly.
-    		LocationObservation.Builder builder = new LocationObservation.Builder().setCoordinate(c);
+		modes.setCar(true);
+		reqs.setModes(modes);
+
+		for (double degreeOff = 0.0; degreeOff < 30.0; degreeOff += 3.0) {
+			// Location along the top edge, traveling with the forward edge
+			// exactly.
+			LocationObservation.Builder builder = new LocationObservation.Builder()
+					.setCoordinate(c);
@@ -191 +195 @@
-						
+
@@ -194 +198 @@
-			
+
@@ -198,2 +202,2 @@
-    	}
-    }
+		}
+	}

