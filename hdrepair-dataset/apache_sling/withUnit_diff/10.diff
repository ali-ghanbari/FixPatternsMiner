diff --git a/testing/resourceresolver-mock/pom.xml b/testing/resourceresolver-mock/pom.xml
index a38f9d1..9cccf1c 100644
--- a/testing/resourceresolver-mock/pom.xml
+++ b/testing/resourceresolver-mock/pom.xml
@@ -89,0 +90,6 @@
+        <dependency>
+            <groupId>com.google.guava</groupId>
+            <artifactId>guava</artifactId>
+            <version>15.0</version>
+            <scope>test</scope>
+        </dependency>
diff --git a/testing/resourceresolver-mock/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolver.java b/testing/resourceresolver-mock/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolver.java
index b5c4682..c79839c 100644
--- a/testing/resourceresolver-mock/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolver.java
+++ b/testing/resourceresolver-mock/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolver.java
@@ -268 +268 @@
-            if ( this.resources.containsKey(path) ) {
+            if ( this.resources.containsKey(path) && !this.deletedResources.contains(path) ) {
diff --git a/testing/resourceresolver-mock/src/test/java/org/apache/sling/testing/resourceresolver/CreateDeleteResourceResolverTest.java b/testing/resourceresolver-mock/src/test/java/org/apache/sling/testing/resourceresolver/CreateDeleteResourceResolverTest.java
new file mode 100644
index 0000000..dba669c
--- /dev/null
+++ b/testing/resourceresolver-mock/src/test/java/org/apache/sling/testing/resourceresolver/CreateDeleteResourceResolverTest.java
@@ -0,0 +1,136 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.sling.testing.resourceresolver;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+import java.io.IOException;
+import java.util.Map;
+
+import org.apache.sling.api.resource.LoginException;
+import org.apache.sling.api.resource.PersistenceException;
+import org.apache.sling.api.resource.Resource;
+import org.apache.sling.api.resource.ResourceResolver;
+import org.apache.sling.api.resource.ValueMap;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.google.common.collect.ImmutableMap;
+
+/**
+ * Tests combinations of create and deletion of resources and conflict detection.
+ */
+public class CreateDeleteResourceResolverTest {
+        
+    private static final Map<String,Object> PROPS1 = ImmutableMap.<String, Object>builder()
+            .put("prop1", "value1").build();
+    private static final Map<String,Object> PROPS2 = ImmutableMap.<String, Object>builder()
+            .put("prop2", "value2").build();
+
+    private ResourceResolver resourceResolver;
+    private Resource testRoot;
+
+    @Before
+    public final void setUp() throws IOException, LoginException {
+        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
+        Resource root = resourceResolver.getResource("/");
+        testRoot = resourceResolver.create(root, "test", ValueMap.EMPTY);
+    }
+
+    @Test
+    public void testCreateDeleteCreate() throws PersistenceException {
+        // create new node without commit
+        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
+        assertEquals(PROPS1, resource.getValueMap());
+        
+        // delete node without commit
+        resourceResolver.delete(resource);
+        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
+
+        // create node again with different properties without commit
+        resource = resourceResolver.create(testRoot, "node", PROPS2);
+        assertEquals(PROPS2, resource.getValueMap());
+    }
+
+    @Test
+    public void testCreateDeleteCreateCommit() throws PersistenceException {
+        // create new node without commit
+        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
+        assertEquals(PROPS1, resource.getValueMap());
+        
+        // delete node without commit
+        resourceResolver.delete(resource);
+        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
+
+        // create node again with different properties with commit
+        resource = resourceResolver.create(testRoot, "node", PROPS2);
+        assertEquals(PROPS2, resource.getValueMap());
+        resourceResolver.commit();
+    }
+
+    @Test
+    public void testCreateCommitDeleteCreateCommit() throws PersistenceException {
+        // create new node with commit
+        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
+        assertEquals(PROPS1, resource.getValueMap());
+        resourceResolver.commit();
+        
+        // delete node without commit
+        resourceResolver.delete(resource);
+        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
+
+        // create node again with different properties with commit
+        resource = resourceResolver.create(testRoot, "node", PROPS2);
+        assertEquals(PROPS2, resource.getValueMap());
+        resourceResolver.commit();
+    }
+
+    @Test
+    public void testCreateCommitDeleteCommitCreateCommit() throws PersistenceException {
+        // create new node with commit
+        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
+        assertEquals(PROPS1, resource.getValueMap());
+        resourceResolver.commit();
+        
+        // delete node with commit
+        resourceResolver.delete(resource);
+        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
+        resourceResolver.commit();
+
+        // create node again with different properties with commit
+        resource = resourceResolver.create(testRoot, "node", PROPS2);
+        assertEquals(PROPS2, resource.getValueMap());
+        resourceResolver.commit();
+    }
+
+    @Test(expected=PersistenceException.class)
+    public void testCreatePathAlreadyExists() throws PersistenceException {
+        resourceResolver.create(testRoot, "node", PROPS1);
+        resourceResolver.create(testRoot, "node", PROPS2);
+    }
+
+    @Test(expected=PersistenceException.class)
+    public void testCreateCommitPathAlreadyExists() throws PersistenceException {
+        resourceResolver.create(testRoot, "node", PROPS1);
+        resourceResolver.commit();
+        resourceResolver.create(testRoot, "node", PROPS2);
+    }
+
+}
diff --git a/testing/resourceresolver-mock/src/test/java/org/apache/sling/testing/resourceresolver/SlingCrudResourceResolverTest.java b/testing/resourceresolver-mock/src/test/java/org/apache/sling/testing/resourceresolver/SlingCrudResourceResolverTest.java
index 617773f..33021dd 100644
--- a/testing/resourceresolver-mock/src/test/java/org/apache/sling/testing/resourceresolver/SlingCrudResourceResolverTest.java
+++ b/testing/resourceresolver-mock/src/test/java/org/apache/sling/testing/resourceresolver/SlingCrudResourceResolverTest.java
@@ -23 +22,0 @@
-import static org.junit.Assert.assertFalse;
@@ -31,3 +30 @@
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
+import java.util.List;
@@ -41 +37,0 @@
-import org.junit.After;
@@ -44,0 +41,3 @@
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
+
@@ -46 +45 @@
- * Implements simple write and read resource and values test
+ * Implements simple write and read resource and values test.
@@ -63 +62 @@
-    protected Resource testRoot;
+    private Resource testRoot;
@@ -67 +66 @@
-        this.resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
+        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
@@ -69,2 +68,2 @@
-        // prepare some test data using Sling CRUD API
-        Resource rootNode = getTestRootResource();
+        Resource root = resourceResolver.getResource("/");
+        testRoot = resourceResolver.create(root, "test", ValueMap.EMPTY);
@@ -72,11 +71,12 @@
-        Map<String, Object> props = new HashMap<String, Object>();
-        props.put(MockResource.JCR_PRIMARYTYPE, NT_UNSTRUCTURED);
-        props.put("stringProp", STRING_VALUE);
-        props.put("stringArrayProp", STRING_ARRAY_VALUE);
-        props.put("integerProp", INTEGER_VALUE);
-        props.put("doubleProp", DOUBLE_VALUE);
-        props.put("booleanProp", BOOLEAN_VALUE);
-        props.put("dateProp", DATE_VALUE);
-        props.put("calendarProp", CALENDAR_VALUE);
-        props.put("binaryProp", new ByteArrayInputStream(BINARY_VALUE));
-        Resource node1 = this.resourceResolver.create(rootNode, "node1", props);
+        Resource node1 = resourceResolver.create(testRoot, "node1",
+            ImmutableMap.<String, Object>builder()
+                .put(MockResource.JCR_PRIMARYTYPE, NT_UNSTRUCTURED)
+                .put("stringProp", STRING_VALUE)
+                .put("stringArrayProp", STRING_ARRAY_VALUE)
+                .put("integerProp", INTEGER_VALUE)
+                .put("doubleProp", DOUBLE_VALUE)
+                .put("booleanProp", BOOLEAN_VALUE)
+                .put("dateProp", DATE_VALUE)
+                .put("calendarProp", CALENDAR_VALUE)
+                .put("binaryProp", new ByteArrayInputStream(BINARY_VALUE))
+                .build());
@@ -84,2 +84,2 @@
-        this.resourceResolver.create(node1, "node11", ValueMap.EMPTY);
-        this.resourceResolver.create(node1, "node12", ValueMap.EMPTY);
+        resourceResolver.create(node1, "node11", ValueMap.EMPTY);
+        resourceResolver.create(node1, "node12", ValueMap.EMPTY);
@@ -87,18 +87 @@
-        this.resourceResolver.commit();
-    }
-
-    @After
-    public final void tearDown() {
-        this.testRoot = null;
-    }
-
-    /**
-     * Return a test root resource, created on demand, with a unique path
-     * @throws PersistenceException
-     */
-    private Resource getTestRootResource() throws PersistenceException {
-        if (this.testRoot == null) {
-            final Resource root = this.resourceResolver.getResource("/");
-            this.testRoot = this.resourceResolver.create(root, "test", ValueMap.EMPTY);
-        }
-        return this.testRoot;
+        resourceResolver.commit();
@@ -109 +92 @@
-        Resource resource1 = this.resourceResolver.getResource(getTestRootResource().getPath() + "/node1");
+        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
@@ -123 +106 @@
-        Resource resource1 = this.resourceResolver.getResource(getTestRootResource().getPath() + "/node1");
+        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
@@ -130 +113 @@
-        Resource resource1 = this.resourceResolver.getResource(getTestRootResource().getPath() + "/node1");
+        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
@@ -139 +122 @@
-        Resource resource1 = this.resourceResolver.getResource(getTestRootResource().getPath() + "/node1");
+        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
@@ -146 +129 @@
-        Resource resource1 = this.resourceResolver.getResource(getTestRootResource().getPath() + "/node1");
+        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
@@ -155 +138 @@
-        Resource resource1 = this.resourceResolver.getResource(getTestRootResource().getPath() + "/node1");
+        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
@@ -157,4 +140,4 @@
-        Iterator<Resource> children = resource1.listChildren();
-        assertEquals("node11", children.next().getName());
-        assertEquals("node12", children.next().getName());
-        assertFalse(children.hasNext());
+        List<Resource> children = Lists.newArrayList(resource1.listChildren());
+        assertEquals(2, children.size());
+        assertEquals("node11", children.get(0).getName());
+        assertEquals("node12", children.get(1).getName());
@@ -165 +148 @@
-        Resource resource1 = this.resourceResolver.getResource(getTestRootResource().getPath() + "/node1");
+        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
@@ -183 +166 @@
-        Resource resource1 = this.resourceResolver.getResource(getTestRootResource().getPath() + "/node1");
+        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");

