diff --git a/contrib/extensions/validation/core/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java b/contrib/extensions/validation/core/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java
index 8fe3e0a..ab2e253 100644
--- a/contrib/extensions/validation/core/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java
+++ b/contrib/extensions/validation/core/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java
@@ -420 +420 @@
-            if (typedValue == null || typedValue[0] == null) {
+            if (typedValue == null || (typedValue.length > 0 && typedValue[0] == null)) {
diff --git a/contrib/extensions/validation/core/src/test/java/org/apache/sling/validation/impl/ValidationServiceImplTest.java b/contrib/extensions/validation/core/src/test/java/org/apache/sling/validation/impl/ValidationServiceImplTest.java
index bf7d338..e5a75ba 100644
--- a/contrib/extensions/validation/core/src/test/java/org/apache/sling/validation/impl/ValidationServiceImplTest.java
+++ b/contrib/extensions/validation/core/src/test/java/org/apache/sling/validation/impl/ValidationServiceImplTest.java
@@ -280,0 +281,42 @@
+    public void testValueMapWithMissingField() throws Exception {
+        validationService.validators.put("org.apache.sling.validation.impl.validators.RegexValidator", new RegexValidator());
+
+        TestProperty property = new TestProperty("field1");
+        property.addValidator("org.apache.sling.validation.impl.validators.RegexValidator", "regex=.*");
+        TestProperty property2 = new TestProperty("field2");
+        property2.addValidator("org.apache.sling.validation.impl.validators.RegexValidator", "regex=.*");
+        TestProperty property3 = new TestProperty("field3");
+        property3.addValidator("org.apache.sling.validation.impl.validators.RegexValidator", "regex=.*");
+        TestProperty property4 = new TestProperty("field4");
+        property3.addValidator("org.apache.sling.validation.impl.validators.RegexValidator", "regex=.*");
+        ResourceResolver rr = rrf.getAdministrativeResourceResolver(null);
+        Resource model1 = null;
+        try {
+            if (rr != null) {
+                model1 = createValidationModelResource(rr, libsValidatorsRoot.getPath(), "testValidationModel1", "sling/validation/test",
+                        new String[]{"/apps/validation"}, property, property2, property3, property4);
+            }
+            ValidationModel vm = validationService.getValidationModel("sling/validation/test", "/apps/validation/1/resource");
+            // this should not be detected as missing property
+            HashMap<String, Object> hashMap = new HashMap<String, Object>() {{
+                put("field1", new String[]{});
+                put("field2", new String[]{"null"});
+                put("field3", "");
+            }};
+            ValueMap map = new ValueMapDecorator(hashMap);
+            ValidationResult vr = validationService.validate(map, vm);
+            Map<String, List<String>> expectedFailureMessages = new HashMap<String, List<String>>();
+            expectedFailureMessages.put("field4", Arrays.asList("Missing required property."));
+            Assert.assertThat(vr.getFailureMessages().entrySet(), Matchers.equalTo(expectedFailureMessages.entrySet()));
+        } finally {
+            if (model1 != null) {
+                rr.delete(model1);
+            }
+            if (rr != null) {
+                rr.commit();
+                rr.close();
+            }
+        }
+    }
+    
+    @Test()

