diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
index de32eb2..fba68d8 100644
--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
@@ -948,0 +949,3 @@
+                        // We must allow 401 handling again.
+                        future.getAndSetAuth(false);
+
diff --git a/src/test/java/com/ning/http/client/async/BasicAuthTest.java b/src/test/java/com/ning/http/client/async/BasicAuthTest.java
index ef42b3d..fe41db0 100644
--- a/src/test/java/com/ning/http/client/async/BasicAuthTest.java
+++ b/src/test/java/com/ning/http/client/async/BasicAuthTest.java
@@ -18 +17,0 @@
-import com.ning.http.client.AsyncCompletionHandlerBase;
@@ -41 +39,0 @@
-import org.eclipse.jetty.server.handler.HandlerList;
@@ -53 +50,0 @@
-import java.util.Enumeration;
@@ -59,0 +57 @@
+import java.util.concurrent.atomic.AtomicBoolean;
@@ -125 +123,35 @@
-        server2.setHandler(new RedirectHandler());
+
+        LoginService loginService = new HashLoginService("MyRealm", "src/test/resources/realm.properties");
+        server2.addBean(loginService);
+
+        Constraint constraint = new Constraint();
+        constraint.setName(Constraint.__BASIC_AUTH);
+        constraint.setRoles(new String[]{user, admin});
+        constraint.setAuthenticate(true);
+
+        ConstraintMapping mapping = new ConstraintMapping();
+        mapping.setConstraint(constraint);
+        mapping.setPathSpec("/*");
+
+        Set<String> knownRoles = new HashSet<String>();
+        knownRoles.add(user);
+        knownRoles.add(admin);
+
+        ConstraintSecurityHandler security = new ConstraintSecurityHandler() {
+
+            @Override
+            public void handle(String arg0, Request arg1, HttpServletRequest arg2, HttpServletResponse arg3)
+                    throws IOException, ServletException {
+                System.err.println("request in security handler");
+                System.err.println("Authorization: " + arg2.getHeader("Authorization"));
+                System.err.println("RequestUri: " + arg2.getRequestURI());
+                super.handle(arg0, arg1, arg2, arg3);
+            }
+        };
+        security.setConstraintMappings(new ConstraintMapping[]{mapping}, knownRoles);
+        security.setAuthenticator(new BasicAuthenticator());
+        security.setLoginService(loginService);
+        security.setStrict(true);
+        security.setHandler(new RedirectHandler());
+
+        server2.setHandler(security);
@@ -129 +161 @@
-    private void stopSecondServer() throws Exception{
+    private void stopSecondServer() throws Exception {
@@ -133,0 +166,3 @@
+
+        private AtomicBoolean redirectOnce = new AtomicBoolean(false);
+
@@ -139,3 +174,17 @@
-            if (request.getHeader("X-302") != null) {
-                response.setStatus(302);
-                response.setHeader("Location", request.getHeader("X-302"));
+            System.err.println(request.getRequestURI());
+            if (!redirectOnce.getAndSet(true) && !"/bla".equals(request.getRequestURI())) {
+                System.err.println("redirecting to " + request.getHeader("X-302"));
+                if (request.getHeader("X-302") != null) {
+                    response.setStatus(302);
+                    response.setHeader("Location", request.getHeader("X-302"));
+                    response.getOutputStream().flush();
+                    response.getOutputStream().close();
+
+                    return;
+                }
+            } else {
+                System.err.println("got redirected" + request.getRequestURI());
+                response.addHeader("X-Auth", request.getHeader("Authorization"));
+                response.addHeader("X-Content-Lenght", String.valueOf(request.getContentLength()));
+                response.setStatus(200);
+                response.getOutputStream().write("content".getBytes("UTF-8"));
@@ -144,2 +192,0 @@
-
-                return;
@@ -168 +215 @@
-            
+
@@ -191 +238 @@
-                    .setHeader("X-302", getTargetUrl())
+                    .setHeader("X-302", "/bla")
@@ -195,0 +243 @@
+            assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
@@ -198 +245,0 @@
-         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
@@ -204 +251,2 @@
-    protected String getTargetUrl(){
+    @Override
+    protected String getTargetUrl() {
@@ -208 +256 @@
-    protected String getTargetUrl2(){
+    protected String getTargetUrl2() {
@@ -218 +266 @@
-        Future<Integer> f = r.execute(new AsyncHandler<Integer>(){
+        Future<Integer> f = r.execute(new AsyncHandler<Integer>() {
@@ -237 +285 @@
-                return STATE.CONTINUE;                
+                return STATE.CONTINUE;

