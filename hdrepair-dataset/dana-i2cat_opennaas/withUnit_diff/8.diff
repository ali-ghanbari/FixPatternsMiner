diff --git a/extensions/bundles/vnmapper/src/main/java/org/opennaas/extensions/vnmapper/capability/vnmapping/VNMappingCapability.java b/extensions/bundles/vnmapper/src/main/java/org/opennaas/extensions/vnmapper/capability/vnmapping/VNMappingCapability.java
index d13632b..a4044ca 100644
--- a/extensions/bundles/vnmapper/src/main/java/org/opennaas/extensions/vnmapper/capability/vnmapping/VNMappingCapability.java
+++ b/extensions/bundles/vnmapper/src/main/java/org/opennaas/extensions/vnmapper/capability/vnmapping/VNMappingCapability.java
@@ -96,0 +97 @@
+			Global.PNodeChoice = 1;
diff --git a/extensions/bundles/vnmapper/src/test/java/org/opennaas/extensions/vnmapper/test/VNMapperTest.java b/extensions/bundles/vnmapper/src/test/java/org/opennaas/extensions/vnmapper/test/VNMapperTest.java
index 740feea..c3205a7 100644
--- a/extensions/bundles/vnmapper/src/test/java/org/opennaas/extensions/vnmapper/test/VNMapperTest.java
+++ b/extensions/bundles/vnmapper/src/test/java/org/opennaas/extensions/vnmapper/test/VNMapperTest.java
@@ -5,0 +6,2 @@
+import java.util.ArrayList;
+import java.util.Random;
@@ -26,0 +29,2 @@
+import org.opennaas.extensions.vnmapper.VLink;
+import org.opennaas.extensions.vnmapper.VNState;
@@ -27,0 +32 @@
+import org.opennaas.extensions.vnmapper.VNode;
@@ -67,0 +73 @@
+		Global.PNodeChoice = 1;
@@ -240,0 +247,83 @@
+	@Test
+	public void overloadVnodeCapacityWithNodesNumTest() throws Exception {
+
+		IModel networkModel = loadNetworkTopologyFromFile(SAMPLE_1_URL + TOPOLOGY_FILE);
+		InPNetwork net = capab.getInPNetworkFromNetworkTopology(networkModel);
+
+		int totalVnodeCapacity = 0;
+		for (PNode node : net.getNodes()) {
+			totalVnodeCapacity += node.getCapacity();
+		}
+
+		VNTRequest request1 = new VNTRequest();
+		// put totalVnodeCapacity+1 nodes in request
+		ArrayList<VNode> vnodes = new ArrayList<VNode>(totalVnodeCapacity + 1);
+		for (int i = 0; i <= totalVnodeCapacity; i++) {
+			VNode n = new VNode();
+			n.setId(i);
+			n.setPnodeID("-");
+			n.setCapacity(1);
+			vnodes.add(n);
+		}
+		request1.setVnodes(vnodes);
+		request1.setVnodeNum(vnodes.size());
+
+		// initialize connections (required for the algorithm)
+		// TODO this should be part of algorithm initialization
+		for (int i = 0; i < request1.getVnodeNum(); i++) {
+			request1.getConnections().add(new ArrayList<VLink>());
+			for (int j = 0; j < request1.getVnodeNum(); j++) {
+				request1.getConnections().get(i).add(new VLink());
+			}
+		}
+
+		MappingResult result = capab.executeAlgorithm(request1, net);
+
+		Assert.assertEquals(VNState.SUCCESSFUL, result.getMatchingState());
+		Assert.assertEquals(VNState.ERROR, result.getMappingState());
+	}
+
+	@Test
+	public void overloadVnodeCapacityWithNodesCapacityTest() throws Exception {
+
+		TestInput testInput = loadTestInput(SAMPLE_1_URL);
+
+		int maxPNodeCapacity = 0;
+		for (PNode node : testInput.net.getNodes()) {
+			if (node.getCapacity() > maxPNodeCapacity)
+				maxPNodeCapacity = node.getCapacity();
+		}
+
+		// get random index [0, size())
+		int randomIndex = new Random(System.nanoTime()).nextInt(testInput.vnt.getVnodes().size());
+
+		testInput.vnt.getVnodes().get(randomIndex).setCapacity(maxPNodeCapacity + 1);
+
+		MappingResult result = capab.executeAlgorithm(testInput.vnt, testInput.net);
+
+		Assert.assertEquals(VNState.ERROR, result.getMatchingState());
+		Assert.assertEquals(VNState.SKIPPED, result.getMappingState());
+	}
+
+	@Test
+	public void overloadLinkCapacityTest() throws Exception {
+
+		TestInput testInput = loadTestInput(SAMPLE_1_URL);
+
+		int maxPLinkCapacity = 0;
+		for (PLink link : testInput.net.getLinks()) {
+			if (link.getCapacity() > maxPLinkCapacity)
+				maxPLinkCapacity = link.getCapacity();
+		}
+
+		// get random index [0, size())
+		int randomIndex = new Random(System.nanoTime()).nextInt(testInput.vnt.getVlinks().size());
+
+		testInput.vnt.getVlinks().get(randomIndex).setCapacity(maxPLinkCapacity + 10);
+
+		MappingResult result = capab.executeAlgorithm(testInput.vnt, testInput.net);
+
+		Assert.assertEquals(VNState.SUCCESSFUL, result.getMatchingState());
+		Assert.assertEquals(VNState.ERROR, result.getMappingState());
+	}
+
diff --git a/extensions/bundles/vnmapper/src/test/resources/samples/sample8/output.karaf b/extensions/bundles/vnmapper/src/test/resources/samples/sample8/output.karaf
index 9dbdd02..4dcadf1 100644
--- a/extensions/bundles/vnmapper/src/test/resources/samples/sample8/output.karaf
+++ b/extensions/bundles/vnmapper/src/test/resources/samples/sample8/output.karaf
@@ -32 +32 @@
-0--1:0--4
+0--1:0--4--

