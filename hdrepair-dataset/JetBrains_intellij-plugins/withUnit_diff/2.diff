diff --git a/AngularJS/src/org/angularjs/index/AngularJSIndexingHandler.java b/AngularJS/src/org/angularjs/index/AngularJSIndexingHandler.java
index b50874d..caa5444 100644
--- a/AngularJS/src/org/angularjs/index/AngularJSIndexingHandler.java
+++ b/AngularJS/src/org/angularjs/index/AngularJSIndexingHandler.java
@@ -70 +70 @@
-    Collections.addAll(INJECTABLE_METHODS, CONTROLLER, DIRECTIVE, MODULE);
+    Collections.addAll(INJECTABLE_METHODS, CONTROLLER, DIRECTIVE, MODULE, "config", "run");
diff --git a/AngularJS/test/org/angularjs/codeInsight/DependencyInjectionTest.java b/AngularJS/test/org/angularjs/codeInsight/DependencyInjectionTest.java
index ca0d3e2..7ff3b68 100644
--- a/AngularJS/test/org/angularjs/codeInsight/DependencyInjectionTest.java
+++ b/AngularJS/test/org/angularjs/codeInsight/DependencyInjectionTest.java
@@ -39,0 +40,14 @@
+  public void testInjectedConstantCompletion() {
+    myFixture.testCompletionTyping("constant.js", "\n", "constant.after.js", "angular.js");
+  }
+
+  public void testInjectedConstantResolve() {
+    myFixture.configureByFiles("constant.resolve.js", "angular.js");
+    int offsetBySignature = AngularTestUtil.findOffsetBySignature("myService.fo<caret>o();", myFixture.getFile());
+    PsiReference ref = myFixture.getFile().findReferenceAt(offsetBySignature);
+    assertNotNull(ref);
+    PsiElement resolve = ref.resolve();
+    assertNotNull(resolve);
+    assertInstanceOf(resolve, JSProperty.class);
+  }
+
diff --git a/AngularJS/test/org/angularjs/codeInsight/data/di/constant.after.js b/AngularJS/test/org/angularjs/codeInsight/data/di/constant.after.js
new file mode 100644
index 0000000..d77e00b
--- /dev/null
+++ b/AngularJS/test/org/angularjs/codeInsight/data/di/constant.after.js
@@ -0,0 +1,11 @@
+angular
+    .module("acme")
+    .factory('myService', {
+                 foo: function (num) {
+                 },
+                 bar: function (text) {
+                 }
+             })
+    .run('myDiController', function (myService) {
+                  myService.bar();
+                });
\ No newline at end of file
diff --git a/AngularJS/test/org/angularjs/codeInsight/data/di/constant.js b/AngularJS/test/org/angularjs/codeInsight/data/di/constant.js
new file mode 100644
index 0000000..cff10b8
--- /dev/null
+++ b/AngularJS/test/org/angularjs/codeInsight/data/di/constant.js
@@ -0,0 +1,11 @@
+angular
+    .module("acme")
+    .factory('myService', {
+                 foo: function (num) {
+                 },
+                 bar: function (text) {
+                 }
+             })
+    .run('myDiController', function (myService) {
+                  myService.<caret>;
+                });
\ No newline at end of file
diff --git a/AngularJS/test/org/angularjs/codeInsight/data/di/constant.resolve.js b/AngularJS/test/org/angularjs/codeInsight/data/di/constant.resolve.js
new file mode 100644
index 0000000..9b67d59
--- /dev/null
+++ b/AngularJS/test/org/angularjs/codeInsight/data/di/constant.resolve.js
@@ -0,0 +1,15 @@
+function foo() {
+
+}
+
+angular
+    .module("acme")
+    .factory('myService', {
+      foo: function (num) {
+      },
+      bar: function (text) {
+      }
+    })
+    .run('myDiController', function (myService) {
+           myService.foo();
+         });
\ No newline at end of file

