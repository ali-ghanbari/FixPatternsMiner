diff --git a/modules/display/geotk-render2d/src/main/java/org/geotoolkit/display2d/primitive/ProjectedGeometry.java b/modules/display/geotk-render2d/src/main/java/org/geotoolkit/display2d/primitive/ProjectedGeometry.java
index 6318115..46421cb 100644
--- a/modules/display/geotk-render2d/src/main/java/org/geotoolkit/display2d/primitive/ProjectedGeometry.java
+++ b/modules/display/geotk-render2d/src/main/java/org/geotoolkit/display2d/primitive/ProjectedGeometry.java
@@ -188 +188 @@
-                com.vividsolutions.jts.geom.Geometry objBounds = objBase.getBoundary();
+                com.vividsolutions.jts.geom.Geometry objBounds = JTS.toGeometry(objBase.getEnvelopeInternal());
diff --git a/modules/display/geotk-render2d/src/test/java/org/geotoolkit/display2d/service/MeridianTest.java b/modules/display/geotk-render2d/src/test/java/org/geotoolkit/display2d/service/MeridianTest.java
index 576f7ad..3103705 100644
--- a/modules/display/geotk-render2d/src/test/java/org/geotoolkit/display2d/service/MeridianTest.java
+++ b/modules/display/geotk-render2d/src/test/java/org/geotoolkit/display2d/service/MeridianTest.java
@@ -20,0 +21 @@
+import com.vividsolutions.jts.geom.MultiPoint;
@@ -28,0 +30,2 @@
+import java.util.ArrayList;
+import java.util.List;
@@ -36,0 +40 @@
+import org.geotoolkit.filter.DefaultFilterFactory2;
@@ -44,0 +49 @@
+import org.geotoolkit.style.StyleConstants;
@@ -48,0 +54 @@
+import org.opengis.filter.FilterFactory2;
@@ -50,0 +57,3 @@
+import org.opengis.style.Graphic;
+import org.opengis.style.GraphicalSymbol;
+import org.opengis.style.PointSymbolizer;
@@ -62,0 +72 @@
+    private static final FilterFactory2 FF = new DefaultFilterFactory2();
@@ -292,0 +303,60 @@
+    @Test
+    public void testMultiPointCrossP170toP190() throws Exception{
+        
+        final MultiPoint points = GF.createMultiPoint(new Coordinate[]{
+            new Coordinate(+170, +10),
+            new Coordinate(+190, +10),
+            new Coordinate(+190, -10),
+            new Coordinate(+170, -10)
+        });
+        
+        final MapContext context = createFeatureLayer(points);
+        final SceneDef sceneDef = new SceneDef(context);
+        
+        final GeneralEnvelope env = new GeneralEnvelope(DefaultGeographicCRS.WGS84);
+        env.setRange(0, -180, +180);
+        env.setRange(1, -90, +90);
+        final ViewDef viewDef = new ViewDef(env);
+        final CanvasDef canvasDef = new CanvasDef(new Dimension(360, 180), Color.WHITE);
+        
+        final BufferedImage image = DefaultPortrayalService.portray(canvasDef, sceneDef, viewDef);
+        
+        ImageIO.write(image, "PNG", new File("/home/husky/test.png"));
+        
+        checkImage(image, new Rectangle(349, 79, 2, 2), 
+                          new Rectangle(349, 99, 2, 2),
+                          new Rectangle(  9, 79, 2, 2),
+                          new Rectangle(  9, 99, 2, 2));
+        
+    }
+    
+    @Test
+    public void testMultiPointWideSpan() throws Exception{
+        
+        final MultiPoint points = GF.createMultiPoint(new Coordinate[]{
+            new Coordinate(+170, +10),
+            new Coordinate(-170, +10),
+            new Coordinate(-170, -10),
+            new Coordinate(+170, -10)
+        });
+        
+        final MapContext context = createFeatureLayer(points);
+        final SceneDef sceneDef = new SceneDef(context);
+        
+        final GeneralEnvelope env = new GeneralEnvelope(DefaultGeographicCRS.WGS84);
+        env.setRange(0, -180, +180);
+        env.setRange(1, -90, +90);
+        final ViewDef viewDef = new ViewDef(env);
+        final CanvasDef canvasDef = new CanvasDef(new Dimension(360, 180), Color.WHITE);
+        
+        final BufferedImage image = DefaultPortrayalService.portray(canvasDef, sceneDef, viewDef);
+        
+        ImageIO.write(image, "PNG", new File("/home/husky/test.png"));
+        
+        checkImage(image, new Rectangle(349, 79, 2, 2), 
+                          new Rectangle(349, 99, 2, 2),
+                          new Rectangle(  9, 79, 2, 2),
+                          new Rectangle(  9, 99, 2, 2));
+        
+    }
+    
@@ -396,0 +467,25 @@
+    private static MapContext createFeatureLayer(MultiPoint geometry){
+        
+        final FeatureTypeBuilder ftb = new FeatureTypeBuilder();
+        ftb.setName("test");
+        ftb.add("geom", MultiPoint.class, DefaultGeographicCRS.WGS84);
+        final FeatureType type = ftb.buildFeatureType();
+        
+        final Feature feature = FeatureUtilities.defaultFeature(type, "0");
+        JTS.setCRS(geometry, DefaultGeographicCRS.WGS84);
+        feature.getProperty("geom").setValue(geometry);
+        final FeatureCollection col = FeatureStoreUtilities.collection(feature);
+        
+        final List<GraphicalSymbol> symbols = new ArrayList<GraphicalSymbol>();
+        symbols.add(SF.mark(StyleConstants.MARK_SQUARE, SF.fill(Color.BLACK), SF.stroke(Color.BLACK, 0)));
+        final Graphic graphic = SF.graphic(symbols, StyleConstants.LITERAL_ONE_FLOAT, FF.literal(2), StyleConstants.LITERAL_ZERO_FLOAT, null, null);
+        final PointSymbolizer ps = SF.pointSymbolizer(graphic, null);
+        
+        final MutableStyle style = SF.style(ps);
+        final MapLayer layer = MapBuilder.createFeatureLayer(col, style);
+        
+        final MapContext context = MapBuilder.createContext();
+        context.layers().add(layer);
+        return context;
+    }
+    

