diff --git a/pax-url-mvn/src/main/java/org/ops4j/pax/url/mvn/internal/Parser.java b/pax-url-mvn/src/main/java/org/ops4j/pax/url/mvn/internal/Parser.java
index f270315..1f2345f 100644
--- a/pax-url-mvn/src/main/java/org/ops4j/pax/url/mvn/internal/Parser.java
+++ b/pax-url-mvn/src/main/java/org/ops4j/pax/url/mvn/internal/Parser.java
@@ -140 +140 @@
-            m_repositoryURL = new RepositoryURL( path.substring( 0, pos ) );
+            m_repositoryURL = new RepositoryURL( path.substring( 0, pos ) + "@snapshots" );
diff --git a/pax-url-mvn/src/test/java/org/ops4j/pax/url/mvn/internal/ConfigurationImplTest.java b/pax-url-mvn/src/test/java/org/ops4j/pax/url/mvn/internal/ConfigurationImplTest.java
index 088ba93..addab4b 100644
--- a/pax-url-mvn/src/test/java/org/ops4j/pax/url/mvn/internal/ConfigurationImplTest.java
+++ b/pax-url-mvn/src/test/java/org/ops4j/pax/url/mvn/internal/ConfigurationImplTest.java
@@ -182,0 +183,51 @@
+    public void getRepositoriesWithAtSnapshotsAndAtNoReleases() 
+    	throws MalformedURLException
+    {    	
+        PropertyResolver propertyResolver = createMock( PropertyResolver.class );
+        expect( propertyResolver.get( "org.ops4j.pax.url.mvn.repositories" ) ).andReturn(
+            "http:repository1@snapshots@noreleases"
+        );
+        expect( propertyResolver.get( "org.ops4j.pax.url.mvn.localRepository" ) ).andReturn( null );
+        replay( propertyResolver );
+        Configuration config = new ConfigurationImpl( propertyResolver );
+        List<RepositoryURL> repositories = config.getRepositories();
+        assertTrue( "Repository as snapshot enabled:", repositories.get( 0 ).isSnapshotsEnabled() );
+        assertFalse( "Repository as release enabled:", repositories.get( 0 ).isReleasesEnabled() );
+        verify( propertyResolver );
+    }    
+    
+    @Test
+    public void getRepositoriesWithAtSnapshots() 
+    	throws MalformedURLException
+    {
+        PropertyResolver propertyResolver = createMock( PropertyResolver.class );
+        expect( propertyResolver.get( "org.ops4j.pax.url.mvn.repositories" ) ).andReturn(
+            "http:repository1@snapshots"
+        );
+        expect( propertyResolver.get( "org.ops4j.pax.url.mvn.localRepository" ) ).andReturn( null );
+        replay( propertyResolver );
+        Configuration config = new ConfigurationImpl( propertyResolver );
+        List<RepositoryURL> repositories = config.getRepositories();
+        assertTrue( "Repository as snapshot enabled:", repositories.get( 0 ).isSnapshotsEnabled() );
+        assertTrue( "Repository as release enabled:", repositories.get( 0 ).isReleasesEnabled() );
+        verify( propertyResolver );
+    }
+
+    @Test
+    public void getRepositoriesWithAtNoReleases()
+    	throws MalformedURLException
+    {
+        PropertyResolver propertyResolver = createMock( PropertyResolver.class );
+        expect( propertyResolver.get( "org.ops4j.pax.url.mvn.repositories" ) ).andReturn(
+            "http:repository1@noreleases"
+        );
+        expect( propertyResolver.get( "org.ops4j.pax.url.mvn.localRepository" ) ).andReturn( null );
+        replay( propertyResolver );
+        Configuration config = new ConfigurationImpl( propertyResolver );
+        List<RepositoryURL> repositories = config.getRepositories();
+        assertFalse( "Repository as snapshot not enabled:", repositories.get( 0 ).isSnapshotsEnabled() );
+        assertFalse( "Repository as release not enabled:", repositories.get( 0 ).isReleasesEnabled() );
+        verify( propertyResolver );
+    }        
+    
+    @Test
diff --git a/pax-url-mvn/src/test/java/org/ops4j/pax/url/mvn/internal/ParserTest.java b/pax-url-mvn/src/test/java/org/ops4j/pax/url/mvn/internal/ParserTest.java
index 44a4cc1..0a2a2d2 100644
--- a/pax-url-mvn/src/test/java/org/ops4j/pax/url/mvn/internal/ParserTest.java
+++ b/pax-url-mvn/src/test/java/org/ops4j/pax/url/mvn/internal/ParserTest.java
@@ -77,0 +78,10 @@
+    public void behaviorSnapshotEnbled()
+        throws MalformedURLException
+    {
+        Parser parser;
+        parser = new Parser( "http://repository!group/artifact" );
+        assertTrue(parser.getRepositoryURL().isSnapshotsEnabled());
+        assertTrue(parser.getRepositoryURL().isReleasesEnabled());
+    }
+    
+    @Test

