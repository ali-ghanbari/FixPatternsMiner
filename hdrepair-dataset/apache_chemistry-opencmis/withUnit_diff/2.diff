diff --git a/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/repository/ObjectFactoryImpl.java b/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/repository/ObjectFactoryImpl.java
index 3a9e4d3..f1fbe0d 100644
--- a/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/repository/ObjectFactoryImpl.java
+++ b/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/repository/ObjectFactoryImpl.java
@@ -352 +352 @@
-                                    + secondaryType.getId());
+                                    + secondaryTypeId);
diff --git a/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/impl/AbstractSessionTest.java b/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/impl/AbstractSessionTest.java
index e06baf5..0842be0 100644
--- a/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/impl/AbstractSessionTest.java
+++ b/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/impl/AbstractSessionTest.java
@@ -2043,0 +2044,9 @@
+
+            f = createResult(FAILURE, "Query name contains invalid character: '\\t'");
+            addResult(results, assertIsTrue(queryName.indexOf('\t') < 0, null, f));
+
+            f = createResult(FAILURE, "Query name contains invalid character: '\\n'");
+            addResult(results, assertIsTrue(queryName.indexOf('\n') < 0, null, f));
+            
+            f = createResult(FAILURE, "Query name contains invalid character: '\\r'");
+            addResult(results, assertIsTrue(queryName.indexOf('\r') < 0, null, f));
diff --git a/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/types/SecondaryTypesTest.java b/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/types/SecondaryTypesTest.java
index 5095e41..389341d 100644
--- a/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/types/SecondaryTypesTest.java
+++ b/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/types/SecondaryTypesTest.java
@@ -38,0 +39 @@
+import org.apache.chemistry.opencmis.commons.definitions.DocumentTypeDefinition;
@@ -39,0 +41 @@
+import org.apache.chemistry.opencmis.commons.enums.Action;
@@ -95,0 +98 @@
+        Document workDoc = doc;
@@ -97,0 +101,7 @@
+            // test if check out is required
+            boolean checkedout = false;
+            if (needsCheckOut(doc)) {
+                workDoc = (Document) session.getObject(doc.checkOut(), SELECT_ALL_NO_CACHE_OC);
+                checkedout = true;
+            }
+
@@ -102,2 +112,2 @@
-            if (doc.getSecondaryTypes() != null) {
-                for (SecondaryType secType : doc.getSecondaryTypes()) {
+            if (workDoc.getSecondaryTypes() != null) {
+                for (SecondaryType secType : workDoc.getSecondaryTypes()) {
@@ -115 +125 @@
-            ObjectId newId = doc.updateProperties(properties);
+            ObjectId newId = workDoc.updateProperties(properties);
@@ -125,0 +136,4 @@
+            // cancel a possible check out
+            if (checkedout) {
+                workDoc.cancelCheckOut();
+            }
@@ -140 +154 @@
-            if (found) {
+            if (found && !needsCheckOut(doc)) {
@@ -147,0 +162,10 @@
+    private boolean needsCheckOut(Document doc) {
+        DocumentTypeDefinition type = (DocumentTypeDefinition) doc.getType();
+        PropertyDefinition<?> secTypeIdsPropDef = type.getPropertyDefinitions().get(
+                PropertyIds.SECONDARY_OBJECT_TYPE_IDS);
+
+        return secTypeIdsPropDef.getUpdatability() == Updatability.WHENCHECKEDOUT
+                || (!doc.getAllowableActions().getAllowableActions().contains(Action.CAN_UPDATE_PROPERTIES) && Boolean.TRUE
+                        .equals(type.isVersionable()));
+    }
+
diff --git a/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/versioning/CheckedOutTest.java b/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/versioning/CheckedOutTest.java
index f2f4432..65afc4a 100644
--- a/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/versioning/CheckedOutTest.java
+++ b/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/versioning/CheckedOutTest.java
@@ -31,0 +32 @@
+import org.apache.chemistry.opencmis.commons.enums.CmisVersion;
@@ -114,5 +115,14 @@
-                f = createResult(WARNING, "PWC is not the latest version! Id: " + pwc.getId()
-                        + " (Note: The words of the CMIS specification define that the PWC is the latest version."
-                        + " But that is not the intention of the spec and will be changed in CMIS 1.1."
-                        + " Thus this a warning, not an error.)");
-                addResult(assertIsTrue(pwc.isLatestVersion(), null, f));
+                if (session.getRepositoryInfo().getCmisVersion() == CmisVersion.CMIS_1_0) {
+                    f = createResult(WARNING, "PWC is not the latest version! Id: " + pwc.getId()
+                            + " (Note: The words of the CMIS specification define that the PWC is the latest version."
+                            + " But that is not the intention of the spec and will be changed in CMIS 1.1."
+                            + " Thus this a warning, not an error.)");
+                    addResult(assertIsTrue(pwc.isLatestVersion(), null, f));
+                } else {
+                    f = createResult(FAILURE, "The property value of 'cmis:isLatestVersion' is TRUE for a PWC! Id: "
+                            + pwc.getId());
+                    addResult(assertIsFalse(pwc.isLatestVersion(), null, f));
+                    f = createResult(FAILURE,
+                            "The property value of 'cmis:isLatestMajorVersion' is TRUE for a PWC! Id: " + pwc.getId());
+                    addResult(assertIsFalse(pwc.isLatestMajorVersion(), null, f));
+                }
diff --git a/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/versioning/VersioningSmokeTest.java b/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/versioning/VersioningSmokeTest.java
index 94af386..649e98a 100644
--- a/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/versioning/VersioningSmokeTest.java
+++ b/chemistry-opencmis-test/chemistry-opencmis-test-tck/src/main/java/org/apache/chemistry/opencmis/tck/tests/versioning/VersioningSmokeTest.java
@@ -176,0 +177 @@
+        CmisTestResult f;
@@ -177,0 +179,2 @@
+        // make sure there is only one latest version
+        // and zero or one latest major version
@@ -178,0 +182,2 @@
+        int countLatestMajor = 0;
+        String latestId = null;
@@ -183,0 +189,5 @@
+                latestId = version.getId();
+            }
+
+            if (Boolean.TRUE.equals(version.isLatestMajorVersion())) {
+                countLatestMajor++;
@@ -187,2 +197,2 @@
-        CmisTestResult f = createResult(FAILURE, "A version series should have one latest version, but it has "
-                + countLatest + "!");
+        f = createResult(FAILURE, "The version series must have exactly one latest version, but it has " + countLatest
+                + "!");
@@ -190,0 +201,17 @@
+        f = createResult(FAILURE, "The version series must have zero or one latest major version, but it has "
+                + countLatestMajor + "!");
+        addResult(results, assertIsTrue(countLatestMajor < 2, null, f));
+
+        // check getObjectOfLatestVersion()
+        if (countLatest == 1) {
+            Document latestVersion = versions.get(0).getObjectOfLatestVersion(false);
+            addResult(
+                    results,
+                    checkObject(session, latestVersion, properties,
+                            "Latest version object check: " + latestVersion.getId()));
+
+            f = createResult(FAILURE,
+                    "The version that is flagged as latest version is not returned by getObjectOfLatestVersion()!");
+            addResult(results, assertEquals(latestId, latestVersion.getId(), null, f));
+        }
+

