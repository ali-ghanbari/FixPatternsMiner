diff --git a/app/models/User.java b/app/models/User.java
index 95ca3b5..7d3967a 100644
--- a/app/models/User.java
+++ b/app/models/User.java
@@ -47 +47 @@
-    @Pattern(value = "^[a-zA-Z0-9_]*$", message = "user.wrongloginId.alert") @Required
+    @Pattern(value = "^[a-zA-Z0-9-]+([_.][a-zA-Z0-9-]+)*$", message = "user.wrongloginId.alert") @Required
diff --git a/app/views/user/signup.scala.html b/app/views/user/signup.scala.html
index 5fdccfc..3ed5dd8 100644
--- a/app/views/user/signup.scala.html
+++ b/app/views/user/signup.scala.html
@@ -64,11 +64 @@
-    		var htErrorMessage = {
-   				"required"  : {"title": "@Messages("validation.required")"},
-   				"duplicated": {"title": "@Messages("validation.duplicated")"},
-   				"passwordMismatch": {"title": "@Messages("validation.passwordMismatch")"},
-   				"tooShortPassword": {"title": "@Messages("validation.tooShortPassword")"},
-   				"invalidEmail": {"title": "@Messages("validation.invalidEmail")"}
-   			};
-
-    		$hive.loadModule("user.SignUp", {
-    			"htErrorMessage": htErrorMessage
-    		});
+		$hive.loadModule("user.SignUp");
diff --git a/conf/messages.en b/conf/messages.en
index 4ed75db..2655ba3 100644
--- a/conf/messages.en
+++ b/conf/messages.en
@@ -357,0 +358 @@
+validation.allowedCharsForLoginId = Login id may only contain alphanumeric characters, dash, underscore or dot and cannot begin or end with underscore or dot.
diff --git a/conf/messages.ko b/conf/messages.ko
index 783d01e..72a81b7 100644
--- a/conf/messages.ko
+++ b/conf/messages.ko
@@ -357,0 +358 @@
+validation.allowedCharsForLoginId = 아이디는 알파벳 숫자 - _ . 를 포함할 수 있으나 _ . 로 시작하거나 끝날 수 없습니다.
diff --git a/public/javascripts/service/hive.user.SignUp.js b/public/javascripts/service/hive.user.SignUp.js
index a1a5753..0b5a094 100644
--- a/public/javascripts/service/hive.user.SignUp.js
+++ b/public/javascripts/service/hive.user.SignUp.js
@@ -13 +13 @@
-	oNS.container[oNS.name] = function(htOptions){
+	oNS.container[oNS.name] = function(){
@@ -21,3 +21,3 @@
-		function _init(htOptions){
-			_initElement(htOptions);
-			_initVar(htOptions);
+		function _init(){
+			_initElement();
+			_initVar();
@@ -31 +31 @@
-		function _initElement(htOptions){
+		function _initElement(){
@@ -40 +40 @@
-		function _initVar(htOptions){
+		function _initVar(){
@@ -42 +41,0 @@
-			htVar.htErrorMessage = htOptions.htErrorMessage || {}; 
@@ -47,2 +46 @@
-		    		"elTarget": htElement.welInputPassword,
-		    		"sMessage": htVar.htErrorMessage.passwordMismatch
+				"elTarget": htElement.welInputPassword
@@ -51,2 +49 @@
-		    		"elTarget": htElement.welInputPassword,
-		    		"sMessage": htVar.htErrorMessage.tooShortPassword	    		
+				"elTarget": htElement.welInputPassword
@@ -55,2 +52 @@
-		    		"elTarget": htElement.welInputEmail,
-		    		"sMessage": htVar.htErrorMessage.invalidEmail	    		
+				"elTarget": htElement.welInputEmail
@@ -59,2 +55 @@
-		    		"elTarget": htElement.welInputLoginId,
-		    		"sMessage": htVar.htErrorMessage.required	    		
+				"elTarget": htElement.welInputLoginId
@@ -98 +93 @@
-		            showErrorMessage(welCheckId, htVar.htErrorMessage.duplicated);
+		            showErrorMessage(welCheckId, Messages("validation.duplicated"));
@@ -139 +134 @@
-	  			{"name": 'loginId',			"rules": 'required|alpha_numeric'},
+				{"name": 'loginId',			"rules": 'required|callback_check_loginId'},
@@ -145,0 +141,7 @@
+            htVar.oValidator.registerCallback('check_loginId', function(value) {
+                return /^[a-zA-Z0-9-]+([_.][a-zA-Z0-9-]+)*$/.test(value);
+            }).setMessage('check_loginId', Messages("validation.allowedCharsForLoginId"))
+            .setMessage('required', Messages("validation.required"))
+            .setMessage('min_length', Messages("validation.tooShortPassword"))
+            .setMessage('matches', Messages("validation.passwordMismatch"))
+            .setMessage('valid_email', Messages("validation.invalidEmail"));
@@ -153,4 +155,6 @@
-				var htError = htVar.htErrors[aErrors[0].id];
-				if (htError) {
-					showErrorMessage(htError.elTarget, htError.sMessage);
-				}
+                for(var i = 0; i < aErrors.length; i++) {
+                    var htError = htVar.htErrors[aErrors[i].id];
+                    if (htError) {
+                        showErrorMessage(htError.elTarget, {title: aErrors[i].message});
+                    }
+                }
@@ -170 +174 @@
-		_init(htOptions);
+		_init();
diff --git a/test/models/UserTest.java b/test/models/UserTest.java
index fb99f95..4d42359 100644
--- a/test/models/UserTest.java
+++ b/test/models/UserTest.java
@@ -11,0 +12 @@
+import play.data.validation.Validation;
@@ -14,0 +16,32 @@
+    @Test
+    public void save() throws Exception {
+        User user = new User();
+
+        user.loginId="foo";
+        assertThat(Validation.getValidator().validate(user).size()).describedAs("'foo' should be accepted.").isEqualTo(0);
+
+        user.loginId=".foo";
+        assertThat(Validation.getValidator().validate(user).size()).describedAs("'.foo' should NOT be accepted.").isGreaterThan(0);
+
+        user.loginId="foo.bar";
+        assertThat(Validation.getValidator().validate(user).size()).describedAs("'foo.bar' should be accepted.").isEqualTo(0);
+
+        user.loginId="foo.";
+        assertThat(Validation.getValidator().validate(user).size()).describedAs("'foo.' should NOT be accepted.").isGreaterThan(0);
+
+        user.loginId="_foo";
+        assertThat(Validation.getValidator().validate(user).size()).describedAs("'_foo' should NOT be accepted.").isGreaterThan(0);
+
+        user.loginId="foo_bar";
+        assertThat(Validation.getValidator().validate(user).size()).describedAs("'foo_bar' should be accepted.").isEqualTo(0);
+
+        user.loginId="foo_";
+        assertThat(Validation.getValidator().validate(user).size()).describedAs("'foo_' should NOT be accepted.").isGreaterThan(0);
+
+        user.loginId="-foo";
+        assertThat(Validation.getValidator().validate(user).size()).describedAs("'-foo' should be accepted.").isEqualTo(0);
+
+        user.loginId="foo-";
+        assertThat(Validation.getValidator().validate(user).size()).describedAs("'foo-' should be accepted.").isEqualTo(0);
+    }
+

