diff --git a/native/dispatch.c b/native/dispatch.c
index a79d688..755c231 100644
--- a/native/dispatch.c
+++ b/native/dispatch.c
@@ -1152,0 +1153,3 @@
+      else {
+        *(jobject*)result = obj;
+      }
diff --git a/native/testlib.c b/native/testlib.c
index e407898..24df5a7 100644
--- a/native/testlib.c
+++ b/native/testlib.c
@@ -160,0 +161,8 @@
+EXPORT int*
+returnPoint(int x, int y) {
+  int *p = malloc(2 * sizeof(int));
+  p[0] = x;
+  p[1] = y;
+  return p;
+}
+
diff --git a/src/com/sun/jna/DefaultTypeMapper.java b/src/com/sun/jna/DefaultTypeMapper.java
index 70999bb..b46311e 100644
--- a/src/com/sun/jna/DefaultTypeMapper.java
+++ b/src/com/sun/jna/DefaultTypeMapper.java
@@ -120 +120 @@
-    protected void addTypeConverter(Class cls, TypeConverter converter) {
+    public void addTypeConverter(Class cls, TypeConverter converter) {
diff --git a/test/com/sun/jna/DirectTypeMapperTest.java b/test/com/sun/jna/DirectTypeMapperTest.java
index 034b572..704bcdb 100644
--- a/test/com/sun/jna/DirectTypeMapperTest.java
+++ b/test/com/sun/jna/DirectTypeMapperTest.java
@@ -15,0 +16 @@
+import java.awt.Point;
@@ -19,0 +21 @@
+import java.lang.reflect.Field;
@@ -158,0 +161,42 @@
+    public static class DirectTypeMappedResultTypeTestLibrary {
+        public native Point returnPoint(int x, int y);
+        static {
+            Map options = new HashMap();
+            DefaultTypeMapper mapper = new DefaultTypeMapper();
+            mapper.addTypeConverter(Point.class, new TypeConverter() {
+                public Object fromNative(Object value, FromNativeContext context) {
+                    Pointer p = (Pointer) value;
+                    int x = p.getInt(0), y = p.getInt(4);
+                    Native.free(Pointer.nativeValue(p));
+                    return new Point(x, y);
+                }
+                public Object toNative(Object value, ToNativeContext context) {
+                    return Pointer.NULL; // dummy implementation (not called)
+                }
+                public Class nativeType() { 
+                    return Pointer.class;
+                }
+            });
+            options.put(Library.OPTION_TYPE_MAPPER, mapper);
+
+            // Can't extend java.awt.Point; can't add:
+            // public final static TypeMapper TYPE_MAPPER = mapper;
+            // -> Extend Native.options via reflection:
+            try {
+                Field f = Native.class.getDeclaredField("options");
+                f.setAccessible(true);
+                ((Map) f.get(null)).put(Point.class, options);
+            }
+            catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+
+            Native.register(NativeLibrary.getInstance("testlib", options));
+        }
+    }
+    public void testTypeMapperResultTypeConversion() throws Exception {
+        DirectTypeMappedResultTypeTestLibrary lib = new DirectTypeMappedResultTypeTestLibrary();
+        Point p = lib.returnPoint(1234, 5678);
+        assertEquals("Failed to convert int* return to java.awt.Point", 1234, p.x);
+        assertEquals("Failed to convert int* return to java.awt.Point", 5678, p.y);
+    }

