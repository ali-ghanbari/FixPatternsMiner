diff --git a/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALChangesTree.java b/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALChangesTree.java
index 4046373..ecfc8b0 100755
--- a/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALChangesTree.java
+++ b/core/src/main/java/com/orientechnologies/orient/core/storage/impl/local/paginated/wal/OWALChangesTree.java
@@ -120 +120 @@
-    return OLongSerializer.INSTANCE.deserializeNative(value, offset);
+    return OLongSerializer.INSTANCE.deserializeNative(value, 0);
diff --git a/core/src/test/java/com/orientechnologies/orient/core/storage/impl/local/paginated/ClusterPageTest.java b/core/src/test/java/com/orientechnologies/orient/core/storage/impl/local/paginated/ClusterPageTest.java
index 79b43cc..239622b 100755
--- a/core/src/test/java/com/orientechnologies/orient/core/storage/impl/local/paginated/ClusterPageTest.java
+++ b/core/src/test/java/com/orientechnologies/orient/core/storage/impl/local/paginated/ClusterPageTest.java
@@ -148 +148 @@
-      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, new OWALChangesTree());
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -155,0 +156 @@
+      directCachePointer.decrementReferrer();
@@ -195,0 +197,7 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
+
@@ -197,0 +206 @@
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -199,3 +208,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
-      recordVersion.increment();
+      deleteAddLowerVersion(localPage);
+      deleteAddLowerVersion(directLocalPage);
@@ -203,17 +211 @@
-      int position = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
-
-      Assert.assertTrue(localPage.deleteRecord(position));
-
-      ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
-
-      Assert
-          .assertEquals(localPage.appendRecord(newRecordVersion, new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 }, false), position);
-
-      int recordSize = localPage.getRecordSize(position);
-      Assert.assertEquals(recordSize, 11);
-
-      recordVersion.increment();
-      Assert.assertEquals(localPage.getRecordVersion(position), recordVersion);
-      Assert.assertEquals(localPage.getRecordBinaryValue(position, 0, recordSize), new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 });
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -221,0 +214 @@
+      directCachePointer.decrementReferrer();
@@ -222,0 +216,21 @@
+  }
+
+  private void deleteAddLowerVersion(OClusterPage localPage) throws IOException {
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+    recordVersion.increment();
+
+    int position = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
+
+    Assert.assertTrue(localPage.deleteRecord(position));
+
+    ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
+
+    Assert.assertEquals(localPage.appendRecord(newRecordVersion, new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 }, false), position);
+
+    int recordSize = localPage.getRecordSize(position);
+    Assert.assertEquals(recordSize, 11);
+
+    recordVersion.increment();
+    Assert.assertEquals(localPage.getRecordVersion(position), recordVersion);
+    Assert.assertEquals(localPage.getRecordBinaryValue(position, 0, recordSize), new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 });
@@ -230,0 +245,7 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
+
@@ -232,0 +254 @@
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -234,3 +256,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
-      recordVersion.increment();
+      deleterAddLowerVersionKeepTombstoneVersion(localPage);
+      deleterAddLowerVersionKeepTombstoneVersion(directLocalPage);
@@ -238,15 +259 @@
-      int position = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
-
-      Assert.assertTrue(localPage.deleteRecord(position));
-
-      ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
-
-      Assert.assertEquals(localPage.appendRecord(newRecordVersion, new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 }, true), position);
-
-      int recordSize = localPage.getRecordSize(position);
-      Assert.assertEquals(recordSize, 11);
-
-      Assert.assertEquals(localPage.getRecordVersion(position), recordVersion);
-      Assert.assertEquals(localPage.getRecordBinaryValue(position, 0, recordSize), new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 });
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -254,0 +262 @@
+      directCachePointer.decrementReferrer();
@@ -255,0 +264,20 @@
+  }
+
+  private void deleterAddLowerVersionKeepTombstoneVersion(OClusterPage localPage) throws IOException {
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+    recordVersion.increment();
+
+    int position = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
+
+    Assert.assertTrue(localPage.deleteRecord(position));
+
+    ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
+
+    Assert.assertEquals(localPage.appendRecord(newRecordVersion, new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 }, true), position);
+
+    int recordSize = localPage.getRecordSize(position);
+    Assert.assertEquals(recordSize, 11);
+
+    Assert.assertEquals(localPage.getRecordVersion(position), recordVersion);
+    Assert.assertEquals(localPage.getRecordBinaryValue(position, 0, recordSize), new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 });
@@ -263,0 +292,6 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
@@ -265,0 +300 @@
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -267,3 +302,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
-      recordVersion.increment();
+      deleteAddBiggerVersion(localPage);
+      deleteAddBiggerVersion(directLocalPage);
@@ -271,20 +305 @@
-      int position = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
-
-      Assert.assertTrue(localPage.deleteRecord(position));
-
-      ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
-      newRecordVersion.increment();
-      newRecordVersion.increment();
-      newRecordVersion.increment();
-      newRecordVersion.increment();
-
-      Assert
-          .assertEquals(localPage.appendRecord(newRecordVersion, new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 }, false), position);
-
-      int recordSize = localPage.getRecordSize(position);
-      Assert.assertEquals(recordSize, 11);
-
-      Assert.assertEquals(localPage.getRecordVersion(position), newRecordVersion);
-      Assert.assertEquals(localPage.getRecordBinaryValue(position, 0, recordSize), new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 });
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -292,0 +308 @@
+      directCachePointer.decrementReferrer();
@@ -293,0 +310,24 @@
+  }
+
+  private void deleteAddBiggerVersion(OClusterPage localPage) throws IOException {
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+    recordVersion.increment();
+
+    int position = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
+
+    Assert.assertTrue(localPage.deleteRecord(position));
+
+    ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
+    newRecordVersion.increment();
+    newRecordVersion.increment();
+    newRecordVersion.increment();
+    newRecordVersion.increment();
+
+    Assert.assertEquals(localPage.appendRecord(newRecordVersion, new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 }, false), position);
+
+    int recordSize = localPage.getRecordSize(position);
+    Assert.assertEquals(recordSize, 11);
+
+    Assert.assertEquals(localPage.getRecordVersion(position), newRecordVersion);
+    Assert.assertEquals(localPage.getRecordBinaryValue(position, 0, recordSize), new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 });
@@ -301,0 +342,7 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
+
@@ -303,0 +351 @@
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -305,3 +353,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
-      recordVersion.increment();
+      deleteAddEqualVersion(localPage);
+      deleteAddEqualVersion(directLocalPage);
@@ -309,14 +356 @@
-      int position = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
-
-      Assert.assertTrue(localPage.deleteRecord(position));
-
-      Assert.assertEquals(localPage.appendRecord(recordVersion, new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 }, false), position);
-
-      int recordSize = localPage.getRecordSize(position);
-      Assert.assertEquals(recordSize, 11);
-
-      recordVersion.increment();
-      Assert.assertEquals(localPage.getRecordVersion(position), recordVersion);
-      Assert.assertEquals(localPage.getRecordBinaryValue(position, 0, recordSize), new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 });
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -324,0 +359 @@
+      directCachePointer.decrementReferrer();
@@ -325,0 +361,19 @@
+  }
+
+  private void deleteAddEqualVersion(OClusterPage localPage) throws IOException {
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+    recordVersion.increment();
+
+    int position = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
+
+    Assert.assertTrue(localPage.deleteRecord(position));
+
+    Assert.assertEquals(localPage.appendRecord(recordVersion, new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 }, false), position);
+
+    int recordSize = localPage.getRecordSize(position);
+    Assert.assertEquals(recordSize, 11);
+
+    recordVersion.increment();
+    Assert.assertEquals(localPage.getRecordVersion(position), recordVersion);
+    Assert.assertEquals(localPage.getRecordBinaryValue(position, 0, recordSize), new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 });
@@ -333,0 +388,6 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
@@ -335,0 +396 @@
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -337,3 +398,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
-      recordVersion.increment();
+      deleteAddEqualVersionKeepTombstoneVersion(localPage);
+      deleteAddEqualVersionKeepTombstoneVersion(directLocalPage);
@@ -341,13 +401 @@
-      int position = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
-
-      Assert.assertTrue(localPage.deleteRecord(position));
-
-      Assert.assertEquals(localPage.appendRecord(recordVersion, new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 }, true), position);
-
-      int recordSize = localPage.getRecordSize(position);
-      Assert.assertEquals(recordSize, 11);
-
-      Assert.assertEquals(localPage.getRecordVersion(position), recordVersion);
-      Assert.assertEquals(localPage.getRecordBinaryValue(position, 0, recordSize), new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 });
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -355,0 +404 @@
+      directCachePointer.decrementReferrer();
@@ -356,0 +406,18 @@
+  }
+
+  private void deleteAddEqualVersionKeepTombstoneVersion(OClusterPage localPage) throws IOException {
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+    recordVersion.increment();
+
+    int position = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
+
+    Assert.assertTrue(localPage.deleteRecord(position));
+
+    Assert.assertEquals(localPage.appendRecord(recordVersion, new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 }, true), position);
+
+    int recordSize = localPage.getRecordSize(position);
+    Assert.assertEquals(recordSize, 11);
+
+    Assert.assertEquals(localPage.getRecordVersion(position), recordVersion);
+    Assert.assertEquals(localPage.getRecordBinaryValue(position, 0, recordSize), new byte[] { 2, 2, 2, 4, 5, 6, 5, 4, 2, 2, 2 });
@@ -364,0 +432,6 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
@@ -366,0 +440 @@
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -368,2 +442,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
+      deleteTwoOutOfFour(localPage);
+      deleteTwoOutOfFour(directLocalPage);
@@ -371,48 +445 @@
-      int positionOne = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
-      int positionTwo = localPage.appendRecord(recordVersion, new byte[] { 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 2 }, false);
-      int positionThree = localPage.appendRecord(recordVersion, new byte[] { 3, 2, 3, 4, 5, 6, 5, 4, 3, 2, 3 }, false);
-      int positionFour = localPage.appendRecord(recordVersion, new byte[] { 4, 2, 3, 4, 5, 6, 5, 4, 3, 2, 4 }, false);
-
-      Assert.assertEquals(localPage.getRecordsCount(), 4);
-      Assert.assertEquals(positionOne, 0);
-      Assert.assertEquals(positionTwo, 1);
-      Assert.assertEquals(positionThree, 2);
-      Assert.assertEquals(positionFour, 3);
-
-      Assert.assertFalse(localPage.isDeleted(0));
-      Assert.assertFalse(localPage.isDeleted(1));
-      Assert.assertFalse(localPage.isDeleted(2));
-      Assert.assertFalse(localPage.isDeleted(3));
-
-      int freeSpace = localPage.getFreeSpace();
-
-      Assert.assertTrue(localPage.deleteRecord(0));
-      Assert.assertTrue(localPage.deleteRecord(2));
-
-      Assert.assertFalse(localPage.deleteRecord(0));
-      Assert.assertFalse(localPage.deleteRecord(7));
-
-      Assert.assertEquals(localPage.findFirstDeletedRecord(0), 0);
-      Assert.assertEquals(localPage.findFirstDeletedRecord(1), 2);
-      Assert.assertEquals(localPage.findFirstDeletedRecord(3), -1);
-
-      Assert.assertTrue(localPage.isDeleted(0));
-      Assert.assertEquals(localPage.getRecordSize(0), -1);
-      Assert.assertEquals(localPage.getRecordVersion(0), recordVersion);
-
-      Assert.assertEquals(localPage.getRecordBinaryValue(1, 0, 11), new byte[] { 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 2 });
-      Assert.assertEquals(localPage.getRecordSize(1), 11);
-      Assert.assertEquals(localPage.getRecordVersion(1), recordVersion);
-
-      Assert.assertTrue(localPage.isDeleted(2));
-      Assert.assertEquals(localPage.getRecordSize(2), -1);
-      Assert.assertEquals(localPage.getRecordVersion(2), recordVersion);
-
-      Assert.assertEquals(localPage.getRecordBinaryValue(3, 0, 11), new byte[] { 4, 2, 3, 4, 5, 6, 5, 4, 3, 2, 4 });
-      Assert.assertEquals(localPage.getRecordSize(3), 11);
-      Assert.assertEquals(localPage.getRecordVersion(3), recordVersion);
-
-      Assert.assertEquals(localPage.getRecordsCount(), 2);
-      Assert.assertEquals(localPage.getFreeSpace(), freeSpace + 23 * 2);
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -420,0 +448 @@
+      directCachePointer.decrementReferrer();
@@ -421,0 +450,52 @@
+  }
+
+  private void deleteTwoOutOfFour(OClusterPage localPage) throws IOException {
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+
+    int positionOne = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
+    int positionTwo = localPage.appendRecord(recordVersion, new byte[] { 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 2 }, false);
+    int positionThree = localPage.appendRecord(recordVersion, new byte[] { 3, 2, 3, 4, 5, 6, 5, 4, 3, 2, 3 }, false);
+    int positionFour = localPage.appendRecord(recordVersion, new byte[] { 4, 2, 3, 4, 5, 6, 5, 4, 3, 2, 4 }, false);
+
+    Assert.assertEquals(localPage.getRecordsCount(), 4);
+    Assert.assertEquals(positionOne, 0);
+    Assert.assertEquals(positionTwo, 1);
+    Assert.assertEquals(positionThree, 2);
+    Assert.assertEquals(positionFour, 3);
+
+    Assert.assertFalse(localPage.isDeleted(0));
+    Assert.assertFalse(localPage.isDeleted(1));
+    Assert.assertFalse(localPage.isDeleted(2));
+    Assert.assertFalse(localPage.isDeleted(3));
+
+    int freeSpace = localPage.getFreeSpace();
+
+    Assert.assertTrue(localPage.deleteRecord(0));
+    Assert.assertTrue(localPage.deleteRecord(2));
+
+    Assert.assertFalse(localPage.deleteRecord(0));
+    Assert.assertFalse(localPage.deleteRecord(7));
+
+    Assert.assertEquals(localPage.findFirstDeletedRecord(0), 0);
+    Assert.assertEquals(localPage.findFirstDeletedRecord(1), 2);
+    Assert.assertEquals(localPage.findFirstDeletedRecord(3), -1);
+
+    Assert.assertTrue(localPage.isDeleted(0));
+    Assert.assertEquals(localPage.getRecordSize(0), -1);
+    Assert.assertEquals(localPage.getRecordVersion(0), recordVersion);
+
+    Assert.assertEquals(localPage.getRecordBinaryValue(1, 0, 11), new byte[] { 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 2 });
+    Assert.assertEquals(localPage.getRecordSize(1), 11);
+    Assert.assertEquals(localPage.getRecordVersion(1), recordVersion);
+
+    Assert.assertTrue(localPage.isDeleted(2));
+    Assert.assertEquals(localPage.getRecordSize(2), -1);
+    Assert.assertEquals(localPage.getRecordVersion(2), recordVersion);
+
+    Assert.assertEquals(localPage.getRecordBinaryValue(3, 0, 11), new byte[] { 4, 2, 3, 4, 5, 6, 5, 4, 3, 2, 4 });
+    Assert.assertEquals(localPage.getRecordSize(3), 11);
+    Assert.assertEquals(localPage.getRecordVersion(3), recordVersion);
+
+    Assert.assertEquals(localPage.getRecordsCount(), 2);
+    Assert.assertEquals(localPage.getFreeSpace(), freeSpace + 23 * 2);
@@ -429,0 +510,6 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
@@ -431,0 +518 @@
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -433,2 +520,2 @@
-      Map<Integer, Byte> positionCounter = new HashMap<Integer, Byte>();
-      Set<Integer> deletedPositions = new HashSet<Integer>();
+      addFullPageDeleteAndAddAgain(localPage);
+      addFullPageDeleteAndAddAgain(directLocalPage);
@@ -436,58 +523 @@
-      int lastPosition;
-      byte counter = 0;
-      int freeSpace = localPage.getFreeSpace();
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
-
-      do {
-        lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
-        if (lastPosition >= 0) {
-          Assert.assertEquals(lastPosition, positionCounter.size());
-          positionCounter.put(lastPosition, counter);
-          counter++;
-
-          Assert.assertEquals(localPage.getFreeSpace(), freeSpace - (19 + OVersionFactory.instance().getVersionSize()));
-          freeSpace = localPage.getFreeSpace();
-        }
-      } while (lastPosition >= 0);
-
-      int filledRecordsCount = positionCounter.size();
-      Assert.assertEquals(localPage.getRecordsCount(), filledRecordsCount);
-
-      for (int i = 0; i < filledRecordsCount; i += 2) {
-        localPage.deleteRecord(i);
-        deletedPositions.add(i);
-        positionCounter.remove(i);
-      }
-
-      freeSpace = localPage.getFreeSpace();
-      do {
-        lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
-        if (lastPosition >= 0) {
-          positionCounter.put(lastPosition, counter);
-          counter++;
-
-          Assert.assertEquals(localPage.getFreeSpace(), freeSpace - 15);
-          freeSpace = localPage.getFreeSpace();
-        }
-      } while (lastPosition >= 0);
-
-      ORecordVersion deletedVersion = OVersionFactory.instance().createVersion();
-      deletedVersion.copyFrom(recordVersion);
-
-      deletedVersion.increment();
-
-      Assert.assertEquals(localPage.getRecordsCount(), filledRecordsCount);
-      for (Map.Entry<Integer, Byte> entry : positionCounter.entrySet()) {
-        Assert.assertEquals(localPage.getRecordBinaryValue(entry.getKey(), 0, 3), new byte[] { entry.getValue(), entry.getValue(),
-            entry.getValue() });
-        Assert.assertEquals(localPage.getRecordSize(entry.getKey()), 3);
-
-        if (deletedPositions.contains(entry.getKey()))
-          Assert.assertEquals(localPage.getRecordVersion(entry.getKey()), deletedVersion);
-        else
-          Assert.assertEquals(localPage.getRecordVersion(entry.getKey()), recordVersion);
-
-      }
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -495,0 +526 @@
+      directCachePointer.decrementReferrer();
@@ -499,4 +530,3 @@
-  public void testAddFullPageDeleteAndAddAgainWithoutDefragmentation() throws Exception {
-    ODirectMemoryPointer pagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
-    OCachePointer cachePointer = new OCachePointer(pagePointer, new OLogSequenceNumber(0, 0));
-    cachePointer.incrementReferrer();
+  private void addFullPageDeleteAndAddAgain(OClusterPage localPage) throws IOException {
+    Map<Integer, Byte> positionCounter = new HashMap<Integer, Byte>();
+    Set<Integer> deletedPositions = new HashSet<Integer>();
@@ -504,3 +534,5 @@
-    OCacheEntry cacheEntry = new OCacheEntry(0, 0, cachePointer, false);
-    try {
-      OClusterPage localPage = new OClusterPage(cacheEntry, true, new OWALChangesTree());
+    int lastPosition;
+    byte counter = 0;
+    int freeSpace = localPage.getFreeSpace();
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
@@ -508,2 +540,6 @@
-      Map<Integer, Byte> positionCounter = new HashMap<Integer, Byte>();
-      Set<Integer> deletedPositions = new HashSet<Integer>();
+    do {
+      lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
+      if (lastPosition >= 0) {
+        Assert.assertEquals(lastPosition, positionCounter.size());
+        positionCounter.put(lastPosition, counter);
+        counter++;
@@ -511,25 +547,2 @@
-      int lastPosition;
-      byte counter = 0;
-      int freeSpace = localPage.getFreeSpace();
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
-
-      do {
-        lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
-        if (lastPosition >= 0) {
-          Assert.assertEquals(lastPosition, positionCounter.size());
-          positionCounter.put(lastPosition, counter);
-          counter++;
-
-          Assert.assertEquals(localPage.getFreeSpace(), freeSpace - (19 + OVersionFactory.instance().getVersionSize()));
-          freeSpace = localPage.getFreeSpace();
-        }
-      } while (lastPosition >= 0);
-
-      int filledRecordsCount = positionCounter.size();
-      Assert.assertEquals(localPage.getRecordsCount(), filledRecordsCount);
-
-      for (int i = 0; i < filledRecordsCount; i += 2) {
-        localPage.deleteRecord(i);
-        deletedPositions.add(i);
-        positionCounter.remove(i);
+        Assert.assertEquals(localPage.getFreeSpace(), freeSpace - (19 + OVersionFactory.instance().getVersionSize()));
+        freeSpace = localPage.getFreeSpace();
@@ -536,0 +550 @@
+    } while (lastPosition >= 0);
@@ -538,6 +552,2 @@
-      freeSpace = localPage.getFreeSpace();
-      do {
-        lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
-        if (lastPosition >= 0) {
-          positionCounter.put(lastPosition, counter);
-          counter++;
+    int filledRecordsCount = positionCounter.size();
+    Assert.assertEquals(localPage.getRecordsCount(), filledRecordsCount);
@@ -545,4 +555,5 @@
-          Assert.assertEquals(localPage.getFreeSpace(), freeSpace - 15);
-          freeSpace = localPage.getFreeSpace();
-        }
-      } while (lastPosition >= 0);
+    for (int i = 0; i < filledRecordsCount; i += 2) {
+      localPage.deleteRecord(i);
+      deletedPositions.add(i);
+      positionCounter.remove(i);
+    }
@@ -550,2 +561,6 @@
-      ORecordVersion deletedVersion = OVersionFactory.instance().createVersion();
-      deletedVersion.copyFrom(recordVersion);
+    freeSpace = localPage.getFreeSpace();
+    do {
+      lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
+      if (lastPosition >= 0) {
+        positionCounter.put(lastPosition, counter);
+        counter++;
@@ -553,13 +568,2 @@
-      deletedVersion.increment();
-
-      Assert.assertEquals(localPage.getRecordsCount(), filledRecordsCount);
-      for (Map.Entry<Integer, Byte> entry : positionCounter.entrySet()) {
-        Assert.assertEquals(localPage.getRecordBinaryValue(entry.getKey(), 0, 3), new byte[] { entry.getValue(), entry.getValue(),
-            entry.getValue() });
-        Assert.assertEquals(localPage.getRecordSize(entry.getKey()), 3);
-
-        if (deletedPositions.contains(entry.getKey()))
-          Assert.assertEquals(localPage.getRecordVersion(entry.getKey()), deletedVersion);
-        else
-          Assert.assertEquals(localPage.getRecordVersion(entry.getKey()), recordVersion);
-
+        Assert.assertEquals(localPage.getFreeSpace(), freeSpace - 15);
+        freeSpace = localPage.getFreeSpace();
@@ -566,0 +571 @@
+    } while (lastPosition >= 0);
@@ -568,3 +573,16 @@
-      assertChangesTracking(localPage, pagePointer);
-    } finally {
-      cachePointer.decrementReferrer();
+    ORecordVersion deletedVersion = OVersionFactory.instance().createVersion();
+    deletedVersion.copyFrom(recordVersion);
+
+    deletedVersion.increment();
+
+    Assert.assertEquals(localPage.getRecordsCount(), filledRecordsCount);
+    for (Map.Entry<Integer, Byte> entry : positionCounter.entrySet()) {
+      Assert.assertEquals(localPage.getRecordBinaryValue(entry.getKey(), 0, 3), new byte[] { entry.getValue(), entry.getValue(),
+          entry.getValue() });
+      Assert.assertEquals(localPage.getRecordSize(entry.getKey()), 3);
+
+      if (deletedPositions.contains(entry.getKey()))
+        Assert.assertEquals(localPage.getRecordVersion(entry.getKey()), deletedVersion);
+      else
+        Assert.assertEquals(localPage.getRecordVersion(entry.getKey()), recordVersion);
+
@@ -579,0 +598,7 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
+
@@ -580,0 +606,2 @@
+      final long seed = System.currentTimeMillis();
+
@@ -581,0 +609 @@
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -583,3 +611,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
-      recordVersion.increment();
+      addBigRecordDeleteAndAddSmallRecords(seed, localPage);
+      addBigRecordDeleteAndAddSmallRecords(seed, directLocalPage);
@@ -587,40 +614 @@
-      final byte[] bigChunk = new byte[OClusterPage.MAX_ENTRY_SIZE / 2];
-      final MersenneTwisterFast mersenneTwisterFast = new MersenneTwisterFast();
-      mersenneTwisterFast.nextBytes(bigChunk);
-
-      int position = localPage.appendRecord(recordVersion, bigChunk, false);
-      Assert.assertEquals(position, 0);
-      Assert.assertEquals(localPage.getRecordVersion(0), recordVersion);
-
-      Assert.assertTrue(localPage.deleteRecord(0));
-
-      recordVersion.increment();
-      int freeSpace = localPage.getFreeSpace();
-      Map<Integer, Byte> positionCounter = new HashMap<Integer, Byte>();
-      int lastPosition;
-      byte counter = 0;
-      do {
-        lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
-        if (lastPosition >= 0) {
-          Assert.assertEquals(lastPosition, positionCounter.size());
-          positionCounter.put(lastPosition, counter);
-          counter++;
-
-          if (lastPosition == 0)
-            Assert.assertEquals(localPage.getFreeSpace(), freeSpace - 15);
-          else
-            Assert.assertEquals(localPage.getFreeSpace(), freeSpace - (19 + OVersionFactory.instance().getVersionSize()));
-
-          freeSpace = localPage.getFreeSpace();
-        }
-      } while (lastPosition >= 0);
-
-      Assert.assertEquals(localPage.getRecordsCount(), positionCounter.size());
-      for (Map.Entry<Integer, Byte> entry : positionCounter.entrySet()) {
-        Assert.assertEquals(localPage.getRecordBinaryValue(entry.getKey(), 0, 3), new byte[] { entry.getValue(), entry.getValue(),
-            entry.getValue() });
-        Assert.assertEquals(localPage.getRecordSize(entry.getKey()), 3);
-        Assert.assertEquals(localPage.getRecordVersion(entry.getKey()), recordVersion);
-      }
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -628,0 +617,48 @@
+      directCachePointer.decrementReferrer();
+    }
+  }
+
+  private void addBigRecordDeleteAndAddSmallRecords(long seed, OClusterPage localPage) throws IOException {
+    final MersenneTwisterFast mersenneTwisterFast = new MersenneTwisterFast(seed);
+
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+    recordVersion.increment();
+
+    final byte[] bigChunk = new byte[OClusterPage.MAX_ENTRY_SIZE / 2];
+
+    mersenneTwisterFast.nextBytes(bigChunk);
+
+    int position = localPage.appendRecord(recordVersion, bigChunk, false);
+    Assert.assertEquals(position, 0);
+    Assert.assertEquals(localPage.getRecordVersion(0), recordVersion);
+
+    Assert.assertTrue(localPage.deleteRecord(0));
+
+    recordVersion.increment();
+    int freeSpace = localPage.getFreeSpace();
+    Map<Integer, Byte> positionCounter = new HashMap<Integer, Byte>();
+    int lastPosition;
+    byte counter = 0;
+    do {
+      lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
+      if (lastPosition >= 0) {
+        Assert.assertEquals(lastPosition, positionCounter.size());
+        positionCounter.put(lastPosition, counter);
+        counter++;
+
+        if (lastPosition == 0)
+          Assert.assertEquals(localPage.getFreeSpace(), freeSpace - 15);
+        else
+          Assert.assertEquals(localPage.getFreeSpace(), freeSpace - (19 + OVersionFactory.instance().getVersionSize()));
+
+        freeSpace = localPage.getFreeSpace();
+      }
+    } while (lastPosition >= 0);
+
+    Assert.assertEquals(localPage.getRecordsCount(), positionCounter.size());
+    for (Map.Entry<Integer, Byte> entry : positionCounter.entrySet()) {
+      Assert.assertEquals(localPage.getRecordBinaryValue(entry.getKey(), 0, 3), new byte[] { entry.getValue(), entry.getValue(),
+          entry.getValue() });
+      Assert.assertEquals(localPage.getRecordSize(entry.getKey()), 3);
+      Assert.assertEquals(localPage.getRecordVersion(entry.getKey()), recordVersion);
@@ -638 +674,7 @@
-    final MersenneTwisterFast mersenneTwister = new MersenneTwisterFast();
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
+    final long seed = System.currentTimeMillis();
@@ -640,0 +683 @@
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -642 +685,2 @@
-      Set<Integer> positions = new HashSet<Integer>();
+      findFirstRecord(seed, localPage);
+      findFirstRecord(seed, directLocalPage);
@@ -644,50 +688 @@
-      int lastPosition;
-      byte counter = 0;
-      int freeSpace = localPage.getFreeSpace();
-
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
-
-      do {
-        lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
-        if (lastPosition >= 0) {
-          Assert.assertEquals(lastPosition, positions.size());
-          positions.add(lastPosition);
-          counter++;
-
-          Assert.assertEquals(localPage.getFreeSpace(), freeSpace - (19 + OVersionFactory.instance().getVersionSize()));
-          freeSpace = localPage.getFreeSpace();
-        }
-      } while (lastPosition >= 0);
-
-      int filledRecordsCount = positions.size();
-      Assert.assertEquals(localPage.getRecordsCount(), filledRecordsCount);
-
-      for (int i = 0; i < filledRecordsCount; i++) {
-        if (mersenneTwister.nextBoolean()) {
-          localPage.deleteRecord(i);
-          positions.remove(i);
-        }
-      }
-
-      int recordsIterated = 0;
-      int recordPosition = 0;
-      int lastRecordPosition = -1;
-
-      do {
-        recordPosition = localPage.findFirstRecord(recordPosition);
-        if (recordPosition < 0)
-          break;
-
-        Assert.assertTrue(positions.contains(recordPosition));
-        Assert.assertTrue(recordPosition > lastRecordPosition);
-
-        lastRecordPosition = recordPosition;
-
-        recordPosition++;
-        recordsIterated++;
-      } while (recordPosition >= 0);
-
-      Assert.assertEquals(recordsIterated, positions.size());
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -695,0 +691 @@
+      directCachePointer.decrementReferrer();
@@ -696,0 +693,54 @@
+  }
+
+  private void findFirstRecord(long seed, OClusterPage localPage) throws IOException {
+    final MersenneTwisterFast mersenneTwister = new MersenneTwisterFast(seed);
+    Set<Integer> positions = new HashSet<Integer>();
+
+    int lastPosition;
+    byte counter = 0;
+    int freeSpace = localPage.getFreeSpace();
+
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+
+    do {
+      lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
+      if (lastPosition >= 0) {
+        Assert.assertEquals(lastPosition, positions.size());
+        positions.add(lastPosition);
+        counter++;
+
+        Assert.assertEquals(localPage.getFreeSpace(), freeSpace - (19 + OVersionFactory.instance().getVersionSize()));
+        freeSpace = localPage.getFreeSpace();
+      }
+    } while (lastPosition >= 0);
+
+    int filledRecordsCount = positions.size();
+    Assert.assertEquals(localPage.getRecordsCount(), filledRecordsCount);
+
+    for (int i = 0; i < filledRecordsCount; i++) {
+      if (mersenneTwister.nextBoolean()) {
+        localPage.deleteRecord(i);
+        positions.remove(i);
+      }
+    }
+
+    int recordsIterated = 0;
+    int recordPosition = 0;
+    int lastRecordPosition = -1;
+
+    do {
+      recordPosition = localPage.findFirstRecord(recordPosition);
+      if (recordPosition < 0)
+        break;
+
+      Assert.assertTrue(positions.contains(recordPosition));
+      Assert.assertTrue(recordPosition > lastRecordPosition);
+
+      lastRecordPosition = recordPosition;
+
+      recordPosition++;
+      recordsIterated++;
+    } while (recordPosition >= 0);
+
+    Assert.assertEquals(recordsIterated, positions.size());
@@ -705 +755,8 @@
-    final MersenneTwisterFast mersenneTwister = new MersenneTwisterFast();
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
+
+    final long seed = System.currentTimeMillis();
@@ -707,0 +765 @@
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -709 +767,2 @@
-      Set<Integer> positions = new HashSet<Integer>();
+      findLastRecord(seed, localPage);
+      findLastRecord(seed, directLocalPage);
@@ -711,47 +770 @@
-      int lastPosition;
-      byte counter = 0;
-      int freeSpace = localPage.getFreeSpace();
-
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
-
-      do {
-        lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
-        if (lastPosition >= 0) {
-          Assert.assertEquals(lastPosition, positions.size());
-          positions.add(lastPosition);
-          counter++;
-
-          Assert.assertEquals(localPage.getFreeSpace(), freeSpace - (19 + OVersionFactory.instance().getVersionSize()));
-          freeSpace = localPage.getFreeSpace();
-        }
-      } while (lastPosition >= 0);
-
-      int filledRecordsCount = positions.size();
-      Assert.assertEquals(localPage.getRecordsCount(), filledRecordsCount);
-
-      for (int i = 0; i < filledRecordsCount; i++) {
-        if (mersenneTwister.nextBoolean()) {
-          localPage.deleteRecord(i);
-          positions.remove(i);
-        }
-      }
-
-      int recordsIterated = 0;
-      int recordPosition = Integer.MAX_VALUE;
-      int lastRecordPosition = Integer.MAX_VALUE;
-      do {
-        recordPosition = localPage.findLastRecord(recordPosition);
-        if (recordPosition < 0)
-          break;
-
-        Assert.assertTrue(positions.contains(recordPosition));
-        Assert.assertTrue(recordPosition < lastRecordPosition);
-
-        recordPosition--;
-        recordsIterated++;
-      } while (recordPosition >= 0);
-
-      Assert.assertEquals(recordsIterated, positions.size());
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -759,0 +773 @@
+      directCachePointer.decrementReferrer();
@@ -760,0 +775,51 @@
+  }
+
+  private void findLastRecord(long seed, OClusterPage localPage) throws IOException {
+    final MersenneTwisterFast mersenneTwister = new MersenneTwisterFast(seed);
+    Set<Integer> positions = new HashSet<Integer>();
+
+    int lastPosition;
+    byte counter = 0;
+    int freeSpace = localPage.getFreeSpace();
+
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+
+    do {
+      lastPosition = localPage.appendRecord(recordVersion, new byte[] { counter, counter, counter }, false);
+      if (lastPosition >= 0) {
+        Assert.assertEquals(lastPosition, positions.size());
+        positions.add(lastPosition);
+        counter++;
+
+        Assert.assertEquals(localPage.getFreeSpace(), freeSpace - (19 + OVersionFactory.instance().getVersionSize()));
+        freeSpace = localPage.getFreeSpace();
+      }
+    } while (lastPosition >= 0);
+
+    int filledRecordsCount = positions.size();
+    Assert.assertEquals(localPage.getRecordsCount(), filledRecordsCount);
+
+    for (int i = 0; i < filledRecordsCount; i++) {
+      if (mersenneTwister.nextBoolean()) {
+        localPage.deleteRecord(i);
+        positions.remove(i);
+      }
+    }
+
+    int recordsIterated = 0;
+    int recordPosition = Integer.MAX_VALUE;
+    int lastRecordPosition = Integer.MAX_VALUE;
+    do {
+      recordPosition = localPage.findLastRecord(recordPosition);
+      if (recordPosition < 0)
+        break;
+
+      Assert.assertTrue(positions.contains(recordPosition));
+      Assert.assertTrue(recordPosition < lastRecordPosition);
+
+      recordPosition--;
+      recordsIterated++;
+    } while (recordPosition >= 0);
+
+    Assert.assertEquals(recordsIterated, positions.size());
@@ -768,0 +834,6 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
@@ -771,2 +842 @@
-      localPage.setNextPage(1034);
-      Assert.assertEquals(localPage.getNextPage(), 1034);
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -774 +844,4 @@
-      assertChangesTracking(localPage, pagePointer);
+      setGetNextPage(localPage);
+      setGetNextPage(directLocalPage);
+
+      assertChangesTracking(localPage, directPagePointer);
@@ -776,0 +850 @@
+      directCachePointer.decrementReferrer();
@@ -777,0 +852,5 @@
+  }
+
+  private void setGetNextPage(OClusterPage localPage) throws IOException {
+    localPage.setNextPage(1034);
+    Assert.assertEquals(localPage.getNextPage(), 1034);
@@ -785,0 +865,6 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
@@ -788,2 +873 @@
-      localPage.setPrevPage(1034);
-      Assert.assertEquals(localPage.getPrevPage(), 1034);
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -791 +875,4 @@
-      assertChangesTracking(localPage, pagePointer);
+      setGetPrevPage(localPage);
+      setGetPrevPage(directLocalPage);
+
+      assertChangesTracking(localPage, directPagePointer);
@@ -793,0 +881 @@
+      directCachePointer.decrementReferrer();
@@ -794,0 +883,5 @@
+  }
+
+  private void setGetPrevPage(OClusterPage localPage) throws IOException {
+    localPage.setPrevPage(1034);
+    Assert.assertEquals(localPage.getPrevPage(), 1034);
@@ -802,0 +896,6 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
@@ -805 +904 @@
-      Assert.assertEquals(localPage.getRecordsCount(), 0);
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -807,2 +906,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
+      replaceOneRecordWithBiggerSize(localPage);
+      replaceOneRecordWithBiggerSize(directLocalPage);
@@ -810,18 +909 @@
-      int index = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
-      int freeSpace = localPage.getFreeSpace();
-
-      ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
-      newRecordVersion.copyFrom(recordVersion);
-      newRecordVersion.increment();
-
-      int written = localPage.replaceRecord(index, new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1, 3 }, newRecordVersion);
-      Assert.assertEquals(localPage.getFreeSpace(), freeSpace);
-      Assert.assertEquals(written, 11);
-
-      Assert.assertEquals(localPage.getRecordSize(index), 11);
-
-      Assert.assertEquals(localPage.getRecordBinaryValue(index, 0, 11), new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1 });
-
-      Assert.assertEquals(localPage.getRecordVersion(index), newRecordVersion);
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -829,0 +912 @@
+      directCachePointer.decrementReferrer();
@@ -830,0 +914,24 @@
+  }
+
+  private void replaceOneRecordWithBiggerSize(OClusterPage localPage) throws IOException {
+    Assert.assertEquals(localPage.getRecordsCount(), 0);
+
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+
+    int index = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
+    int freeSpace = localPage.getFreeSpace();
+
+    ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
+    newRecordVersion.copyFrom(recordVersion);
+    newRecordVersion.increment();
+
+    int written = localPage.replaceRecord(index, new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1, 3 }, newRecordVersion);
+    Assert.assertEquals(localPage.getFreeSpace(), freeSpace);
+    Assert.assertEquals(written, 11);
+
+    Assert.assertEquals(localPage.getRecordSize(index), 11);
+
+    Assert.assertEquals(localPage.getRecordBinaryValue(index, 0, 11), new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1 });
+
+    Assert.assertEquals(localPage.getRecordVersion(index), newRecordVersion);
@@ -838,0 +946,6 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
@@ -841 +954 @@
-      Assert.assertEquals(localPage.getRecordsCount(), 0);
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -843,2 +956,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
+      replaceOneRecordWithEqualSize(localPage);
+      replaceOneRecordWithEqualSize(directLocalPage);
@@ -846,18 +959 @@
-      int index = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
-      int freeSpace = localPage.getFreeSpace();
-
-      ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
-      newRecordVersion.copyFrom(recordVersion);
-      newRecordVersion.increment();
-
-      int written = localPage.replaceRecord(index, new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1 }, newRecordVersion);
-      Assert.assertEquals(localPage.getFreeSpace(), freeSpace);
-      Assert.assertEquals(written, 11);
-
-      Assert.assertEquals(localPage.getRecordSize(index), 11);
-
-      Assert.assertEquals(localPage.getRecordBinaryValue(index, 0, 11), new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1 });
-
-      Assert.assertEquals(localPage.getRecordVersion(index), newRecordVersion);
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -865,0 +962 @@
+      directCachePointer.decrementReferrer();
@@ -866,0 +964,24 @@
+  }
+
+  private void replaceOneRecordWithEqualSize(OClusterPage localPage) throws IOException {
+    Assert.assertEquals(localPage.getRecordsCount(), 0);
+
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+
+    int index = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
+    int freeSpace = localPage.getFreeSpace();
+
+    ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
+    newRecordVersion.copyFrom(recordVersion);
+    newRecordVersion.increment();
+
+    int written = localPage.replaceRecord(index, new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1 }, newRecordVersion);
+    Assert.assertEquals(localPage.getFreeSpace(), freeSpace);
+    Assert.assertEquals(written, 11);
+
+    Assert.assertEquals(localPage.getRecordSize(index), 11);
+
+    Assert.assertEquals(localPage.getRecordBinaryValue(index, 0, 11), new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1 });
+
+    Assert.assertEquals(localPage.getRecordVersion(index), newRecordVersion);
@@ -874,0 +996,7 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
+
@@ -877 +1005 @@
-      Assert.assertEquals(localPage.getRecordsCount(), 0);
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -879,2 +1007,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
+      replaceOneRecordWithSmallerSize(localPage);
+      replaceOneRecordWithSmallerSize(directLocalPage);
@@ -882,18 +1010 @@
-      int index = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
-      int freeSpace = localPage.getFreeSpace();
-
-      ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
-      newRecordVersion.copyFrom(recordVersion);
-      newRecordVersion.increment();
-
-      int written = localPage.replaceRecord(index, new byte[] { 5, 2, 3, 4, 5, 11, }, newRecordVersion);
-      Assert.assertEquals(localPage.getFreeSpace(), freeSpace);
-      Assert.assertEquals(written, 6);
-
-      Assert.assertEquals(localPage.getRecordSize(index), 6);
-
-      Assert.assertEquals(localPage.getRecordBinaryValue(index, 0, 6), new byte[] { 5, 2, 3, 4, 5, 11 });
-
-      Assert.assertEquals(localPage.getRecordVersion(index), newRecordVersion);
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -901,0 +1013 @@
+      directCachePointer.decrementReferrer();
@@ -902,0 +1015,24 @@
+  }
+
+  private void replaceOneRecordWithSmallerSize(OClusterPage localPage) throws IOException {
+    Assert.assertEquals(localPage.getRecordsCount(), 0);
+
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+
+    int index = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
+    int freeSpace = localPage.getFreeSpace();
+
+    ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
+    newRecordVersion.copyFrom(recordVersion);
+    newRecordVersion.increment();
+
+    int written = localPage.replaceRecord(index, new byte[] { 5, 2, 3, 4, 5, 11, }, newRecordVersion);
+    Assert.assertEquals(localPage.getFreeSpace(), freeSpace);
+    Assert.assertEquals(written, 6);
+
+    Assert.assertEquals(localPage.getRecordSize(index), 6);
+
+    Assert.assertEquals(localPage.getRecordBinaryValue(index, 0, 6), new byte[] { 5, 2, 3, 4, 5, 11 });
+
+    Assert.assertEquals(localPage.getRecordVersion(index), newRecordVersion);
@@ -910,0 +1047,6 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
@@ -913 +1055 @@
-      Assert.assertEquals(localPage.getRecordsCount(), 0);
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -915,2 +1057,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
+      replaceOneRecordNoVersionUpdate(localPage);
+      replaceOneRecordNoVersionUpdate(directLocalPage);
@@ -918,18 +1060 @@
-      int index = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
-      int freeSpace = localPage.getFreeSpace();
-
-      ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
-      newRecordVersion.copyFrom(recordVersion);
-      newRecordVersion.increment();
-
-      int written = localPage.replaceRecord(index, new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1, 3 }, null);
-      Assert.assertEquals(localPage.getFreeSpace(), freeSpace);
-      Assert.assertEquals(written, 11);
-
-      Assert.assertEquals(localPage.getRecordSize(index), 11);
-
-      Assert.assertEquals(localPage.getRecordBinaryValue(index, 0, 11), new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1 });
-
-      Assert.assertEquals(localPage.getRecordVersion(index), recordVersion);
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -937,0 +1063 @@
+      directCachePointer.decrementReferrer();
@@ -938,0 +1065,24 @@
+  }
+
+  private void replaceOneRecordNoVersionUpdate(OClusterPage localPage) throws IOException {
+    Assert.assertEquals(localPage.getRecordsCount(), 0);
+
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+
+    int index = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
+    int freeSpace = localPage.getFreeSpace();
+
+    ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
+    newRecordVersion.copyFrom(recordVersion);
+    newRecordVersion.increment();
+
+    int written = localPage.replaceRecord(index, new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1, 3 }, null);
+    Assert.assertEquals(localPage.getFreeSpace(), freeSpace);
+    Assert.assertEquals(written, 11);
+
+    Assert.assertEquals(localPage.getRecordSize(index), 11);
+
+    Assert.assertEquals(localPage.getRecordBinaryValue(index, 0, 11), new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1 });
+
+    Assert.assertEquals(localPage.getRecordVersion(index), recordVersion);
@@ -946,0 +1097,6 @@
+
+    ODirectMemoryPointer directPagePointer = new ODirectMemoryPointer(new byte[OClusterPage.PAGE_SIZE + ODurablePage.PAGE_PADDING]);
+    OCachePointer directCachePointer = new OCachePointer(directPagePointer, new OLogSequenceNumber(0, 0));
+    directCachePointer.incrementReferrer();
+
+    OCacheEntry directCacheEntry = new OCacheEntry(0, 0, directCachePointer, false);
@@ -949 +1105 @@
-      Assert.assertEquals(localPage.getRecordsCount(), 0);
+      OClusterPage directLocalPage = new OClusterPage(directCacheEntry, true, null);
@@ -951,2 +1107,2 @@
-      ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
-      recordVersion.increment();
+      replaceOneRecordLowerVersion(localPage);
+      replaceOneRecordLowerVersion(directLocalPage);
@@ -954,16 +1110 @@
-      int index = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
-      int freeSpace = localPage.getFreeSpace();
-
-      ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
-      newRecordVersion.copyFrom(recordVersion);
-
-      int written = localPage.replaceRecord(index, new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1, 3 }, newRecordVersion);
-      Assert.assertEquals(localPage.getFreeSpace(), freeSpace);
-      Assert.assertEquals(written, 11);
-
-      Assert.assertEquals(localPage.getRecordSize(index), 11);
-      Assert.assertEquals(localPage.getRecordBinaryValue(index, 0, 11), new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1 });
-
-      Assert.assertEquals(localPage.getRecordVersion(index), recordVersion);
-
-      assertChangesTracking(localPage, pagePointer);
+      assertChangesTracking(localPage, directPagePointer);
@@ -971,0 +1113 @@
+      directCachePointer.decrementReferrer();
@@ -974,0 +1117,22 @@
+  private void replaceOneRecordLowerVersion(OClusterPage localPage) throws IOException {
+    Assert.assertEquals(localPage.getRecordsCount(), 0);
+
+    ORecordVersion recordVersion = OVersionFactory.instance().createVersion();
+    recordVersion.increment();
+
+    int index = localPage.appendRecord(recordVersion, new byte[] { 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 }, false);
+    int freeSpace = localPage.getFreeSpace();
+
+    ORecordVersion newRecordVersion = OVersionFactory.instance().createVersion();
+    newRecordVersion.copyFrom(recordVersion);
+
+    int written = localPage.replaceRecord(index, new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1, 3 }, newRecordVersion);
+    Assert.assertEquals(localPage.getFreeSpace(), freeSpace);
+    Assert.assertEquals(written, 11);
+
+    Assert.assertEquals(localPage.getRecordSize(index), 11);
+    Assert.assertEquals(localPage.getRecordBinaryValue(index, 0, 11), new byte[] { 5, 2, 3, 4, 5, 11, 5, 4, 3, 2, 1 });
+
+    Assert.assertEquals(localPage.getRecordVersion(index), recordVersion);
+  }
+

