diff --git a/src/main/java/de/congrace/exp4j/Tokenizer.java b/src/main/java/de/congrace/exp4j/Tokenizer.java
index 07d27e2..f82ea07 100644
--- a/src/main/java/de/congrace/exp4j/Tokenizer.java
+++ b/src/main/java/de/congrace/exp4j/Tokenizer.java
@@ -205,3 +205,2 @@
-			    // keep pushing numbertokens as function arguments onto
-			    // the stack until a right paranthesis is encountered.
-			    continue;
+			    // a function separator, hopefully
+			    lastToken=new FunctionSeparatorToken();
diff --git a/src/test/java/de/congrace/exp4j/ExpressionBuilderTest.java b/src/test/java/de/congrace/exp4j/ExpressionBuilderTest.java
index 1d9b490..22b6047 100644
--- a/src/test/java/de/congrace/exp4j/ExpressionBuilderTest.java
+++ b/src/test/java/de/congrace/exp4j/ExpressionBuilderTest.java
@@ -210,3 +209,0 @@
-        System.out.println("expected: "+ expected);
-        System.out.println("exp4j: " + calc.calculate());
-        System.out.println(calc.getExpression());
@@ -229 +226 @@
-
+    
@@ -231,0 +229,14 @@
+        CustomFunction custom1 = new CustomFunction("multiply",3) {
+            @Override
+            public double applyFunction(double ... values) {
+                return values[0] * values[1];
+            }
+        };
+        double varX=1;
+        Calculable calc = new ExpressionBuilder("multiply(sin(x),x+1^(-2),log(x))").withVariable("x", varX).withCustomFunction(custom1).build();
+        double expected=Math.sin(varX) * Math.pow((varX +1),-2) * Math.log(varX);
+        assertTrue(expected == calc.calculate());
+    }
+
+    @Test
+    public void testCustomFunction17() throws Exception {

