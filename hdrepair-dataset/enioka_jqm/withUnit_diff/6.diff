diff --git a/jqm-all/jqm-engine/src/main/java/com/enioka/jqm/tools/JqmEngine.java b/jqm-all/jqm-engine/src/main/java/com/enioka/jqm/tools/JqmEngine.java
index 2c0081c..f83b243 100644
--- a/jqm-all/jqm-engine/src/main/java/com/enioka/jqm/tools/JqmEngine.java
+++ b/jqm-all/jqm-engine/src/main/java/com/enioka/jqm/tools/JqmEngine.java
@@ -355 +355 @@
-                .createQuery("SELECT ji FROM JobInstance ji WHERE ji.node = :node AND (ji.state = 'SUBMITTED' OR ji.state = 'RUNNING')",
+                .createQuery("SELECT ji FROM JobInstance ji WHERE ji.node = :node AND (ji.state = 'ATTRIBUTED' OR ji.state = 'RUNNING')",
diff --git a/jqm-all/jqm-engine/src/test/java/com/enioka/jqm/tools/MiscTest.java b/jqm-all/jqm-engine/src/test/java/com/enioka/jqm/tools/MiscTest.java
index cf7e1d3..fc381ae 100644
--- a/jqm-all/jqm-engine/src/test/java/com/enioka/jqm/tools/MiscTest.java
+++ b/jqm-all/jqm-engine/src/test/java/com/enioka/jqm/tools/MiscTest.java
@@ -191 +191 @@
-    public void testStartupCleanup() throws Exception
+    public void testStartupCleanupRunning() throws Exception
@@ -218,0 +219,28 @@
+    public void testStartupCleanupAttr() throws Exception
+    {
+        JobDef jd = CreationTools.createJobDef(null, true, "App", null, "jqm-tests/jqm-test-em/target/test.jar", TestHelpers.qVip, 42,
+                "jqm-test-em", null, "Franquin", "ModuleMachin", "other", "other", false, em);
+
+        // Create a running job that should be cleaned at startup
+        em.getTransaction().begin();
+        JobInstance ji = new JobInstance();
+        ji.setApplication("marsu");
+        ji.setAttributionDate(Calendar.getInstance());
+        ji.setCreationDate(Calendar.getInstance());
+        ji.setExecutionDate(Calendar.getInstance());
+        ji.setInternalPosition(0);
+        ji.setJd(jd);
+        ji.setNode(TestHelpers.node);
+        ji.setQueue(TestHelpers.qVip);
+        ji.setState(State.ATTRIBUTED);
+        em.persist(ji);
+        em.getTransaction().commit();
+
+        addAndStartEngine();
+
+        Assert.assertEquals(0, em.createQuery("SELECT ji FROM JobInstance ji", JobInstance.class).getResultList().size());
+        Assert.assertEquals(1, em.createQuery("SELECT ji FROM History ji", History.class).getResultList().size());
+        Assert.assertEquals(State.CRASHED, em.createQuery("SELECT ji FROM History ji", History.class).getResultList().get(0).getState());
+    }
+
+    @Test

