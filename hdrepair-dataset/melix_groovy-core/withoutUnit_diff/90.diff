diff --git a/src/main/groovy/time/DatumDependentDuration.java b/src/main/groovy/time/DatumDependentDuration.java
index b4e53aa..a3ea5e8 100644
--- a/src/main/groovy/time/DatumDependentDuration.java
+++ b/src/main/groovy/time/DatumDependentDuration.java
@@ -87,6 +87,7 @@
-    /* (non-Javadoc)
-    * @see groovy.time.BaseDuration#toMilliseconds()
-    *
-    * Do our best to change the duration into milliseconds
-    * We calculate the duration relative to now
-    */
+    /**
+     * @see groovy.time.BaseDuration#toMilliseconds()
+     *
+     * Change the duration into milliseconds, relative to 'now.'  Therefore
+     * things like timezone and time of year will affect how this conversion 
+     * occurs.
+     */
diff --git a/src/test/groovy/time/DurationTest.groovy b/src/test/groovy/time/DurationTest.groovy
index 524cffb..d718590 100644
--- a/src/test/groovy/time/DurationTest.groovy
+++ b/src/test/groovy/time/DurationTest.groovy
@@ -29,2 +29,3 @@
-            //def nowOffset = (new Date()).daylightSavingsOffset
-            def nowOffset = 0.months.from.now.daylightSavingsOffset
+			def date = new Date(0)
+			def cal = Calendar.getInstance()
+			cal.timeInMillis = 0
@@ -32,4 +33,3 @@
-            // add two durations
-            def twoMonthsA = 1.month + 1.month
-            // two months from an absolute day
-			def twoMonthsB = new Date(0) + 2.months + 2.days // for Feb.
+			// add two durations
+            def twoMonths = 1.month + 1.month
+            cal.add MONTH, 2
@@ -37,2 +37,2 @@
-            assertEquals "Two months absolute duration should be the same as the difference between two dates two months apart\n",
-                twoMonthsA.toMilliseconds(), twoMonthsB.time
+            assertEquals "Two months absolute duration",
+            	cal.timeInMillis, ( date + twoMonths ).time
@@ -41,6 +41,18 @@
-            def monthAndWeekA = 1.month + 1.week
-            // add absolute date and a duration
-			def monthAndWeekB = new Date(0) + 1.week + 1.month
-
-            assertEquals "A week and a month absolute duration should be the same as the difference between two dates that far apart\n",
-                monthAndWeekA.toMilliseconds(), monthAndWeekB.time
+            def monthAndWeek = 1.month + 1.week
+			cal.timeInMillis = 0
+			cal.add MONTH, 1
+			cal.add DAY_OF_YEAR, 7
+            assertEquals "A week and a month absolute duration",
+                cal.timeInMillis, ( date + monthAndWeek ).time
+				
+			def twoAndaHalfWeeks = 3.weeks - 4.days + 12.hours
+			cal.timeInMillis = 0
+			cal.add DAY_OF_YEAR, 17
+			cal.add HOUR, 12
+			assertEquals "two and a half weeks\n",
+				cal.timeInMillis, ( date + twoAndaHalfWeeks ).time
+				
+			assertEquals "two weeks", 2.weeks.toMilliseconds(), 
+				14.days.toMilliseconds()
+			assertEquals "One year and 365 days", 
+				1.year.toMilliseconds(), 12.months.toMilliseconds()
@@ -95,0 +108,21 @@
+				
+			
+			start = Calendar.getInstance() // our reference
+			def date = new Date( start.time.time ) // our test date
+            
+			date += 2.months
+			start.add MONTH, 2 
+			assertEquals "after adding two months", start.time, date
+			
+			date += 5.weeks
+			start.add WEEK_OF_YEAR, 5
+			assertEquals "after adding 5 weeks", start.time, date
+			
+			date -= ( 52.days + 123.minutes )
+			start.add DAY_OF_YEAR, -52
+			start.add MINUTE, -123
+			assertEquals "after subtracting 52 days and 123 minutes", start.time, date
+			
+			date -= 12345678.seconds
+			start.add SECOND, -12345678
+			assertEquals "after subtracting 12345678 seconds", start.time, date

