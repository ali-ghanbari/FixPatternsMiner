diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
index b004d49..ca83cd7 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
@@ -56 +56 @@
-//		TESTS_NAMES = new String[] { "test_nullable_field" };
+//		TESTS_NAMES = new String[] { "test_nonnull_field_10" };
@@ -3688,0 +3689,21 @@
+public void test_nonnull_field_10() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_INCLUDE_FIELDS_IN_NULL_ANALYSIS, JavaCore.ENABLED);
+	runNegativeTestWithLibs(
+		new String[] {
+			"X.java",
+			"import org.eclipse.jdt.annotation.*;\n" +
+			"public class X  {\n" + 
+			"     static final Object a = null;\n" + 
+			"     @NonNull Object o = a;\n" + 
+			"}\n"
+		},
+		options,
+		"----------\n" + 
+		"1. ERROR in X.java (at line 4)\n" + 
+		"	@NonNull Object o = a;\n" + 
+		"	                    ^\n" + 
+		"Type mismatch: required \'@NonNull Object\' but the provided value is null\n" + 
+		"----------\n");
+}
+
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java
index e2ea573..ae28b4a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java
@@ -665,0 +666,3 @@
+				} else {
+					// make null info from static field visible for non-static @NonNull fields, too.
+					nonStaticFieldInfo.addNullInfoFrom(staticFieldInfo);

