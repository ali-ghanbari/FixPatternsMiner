diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssertionTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssertionTest.java
index 1788884..2b601e0 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssertionTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssertionTest.java
@@ -2 +2 @@
- * Copyright (c) 2000, 2009 IBM Corporation and others.
+ * Copyright (c) 2000, 2010 IBM Corporation and others.
@@ -510 +510,110 @@
-	
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=328361
+	public void test018() {
+		this.runNegativeTest(new String[] {
+			"X.java",
+			"public class X {\n" + 
+			"    static final int i;\n" + 
+			"    static {\n" + 
+			"        assert (i = 0) == 0;\n" + 
+			"        System.out.println(i);\n" + 
+			"    }\n" + 
+			"}"
+		},
+		"----------\n" + 
+		"1. ERROR in X.java (at line 2)\n" + 
+		"	static final int i;\n" + 
+		"	                 ^\n" + 
+		"The blank final field i may not have been initialized\n" + 
+		"----------\n" + 
+		"2. ERROR in X.java (at line 5)\n" + 
+		"	System.out.println(i);\n" + 
+		"	                   ^\n" + 
+		"The blank final field i may not have been initialized\n" + 
+		"----------\n");
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=328361
+	public void test019() {
+		this.runConformTest(new String[] {
+			"X.java",
+			"public class X {\n" + 
+			"    static final int i;\n" + 
+			"    static {\n" +
+			"        i = 0;\n" + 
+			"        assert i == 0;\n" + 
+			"        System.out.println(i);\n" + 
+			"    }\n" + 
+			"}"
+		},
+		"");
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=328361
+	public void test020() throws Exception {
+		this.runNegativeTest(
+			new String[] {
+					"X.java",
+					"public class X {\n" +
+						"    void method1() {\n" +
+						"		 int i;" +	
+						"        assert (i = 0) == 0;\n" +	
+						"        System.out.println(i);\n" +	
+						"    }\n" +	
+						"}\n"	
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 4)\n" + 
+			"	System.out.println(i);\n" + 
+			"	                   ^\n" + 
+			"The local variable i may not have been initialized\n" + 
+			"----------\n");
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=328361
+	public void test021() throws Exception {
+		this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"public class X {\n" +
+					"	public int bar() {\n" +
+					"		return 1;\n" +
+					"	}\n" +
+					"    void method1() {\n" +
+						"		 int i;" +	
+						"        assert (i = this.bar()) == 0;\n" +	
+						"        System.out.println(i);\n" +	
+						"    }\n" +	
+						"}\n"	
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 7)\n" + 
+			"	System.out.println(i);\n" + 
+			"	                   ^\n" + 
+			"The local variable i may not have been initialized\n" + 
+			"----------\n");
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=328361
+	public void test022() throws Exception {
+		this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"public class X {\n" +
+					"	public int bar() {\n" +
+					"		return 1;\n" +
+					"	}\n" +
+					"    void method1() {\n" +
+						"		 int i;\n" +	
+						"        assert i++ == 0;\n" +	
+						"        System.out.println(i);\n" +	
+						"    }\n" +	
+						"}\n"	
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 7)\n" + 
+			"	assert i++ == 0;\n" + 
+			"	       ^\n" + 
+			"The local variable i may not have been initialized\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 8)\n" + 
+			"	System.out.println(i);\n" + 
+			"	                   ^\n" + 
+			"The local variable i may not have been initialized\n" + 
+			"----------\n");
+	}
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 79212e8..dfa5b44 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -53 +53,3 @@
-<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=328247">328247</a>
+<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=328361">328361</a>
+[1.4][compiler] variable initialized within an assert expression are no longer reported as potential non initialized
+<br><a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=328247">328247</a>
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java
index 826bb1e..cfdaf90 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java
@@ -89 +89 @@
-			return flowInfo.addInitializationsFrom(assertInfo.nullInfoLessUnconditionalCopy());
+			return flowInfo.mergedWith(assertInfo.nullInfoLessUnconditionalCopy());

