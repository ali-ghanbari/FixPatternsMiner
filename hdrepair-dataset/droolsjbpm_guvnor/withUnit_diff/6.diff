diff --git a/guvnor-webapp/src/test/java/org/drools/guvnor/server/GuvnorTestBase.java b/guvnor-webapp/src/test/java/org/drools/guvnor/server/GuvnorTestBase.java
index 7e27ce3..1b0b22b 100644
--- a/guvnor-webapp/src/test/java/org/drools/guvnor/server/GuvnorTestBase.java
+++ b/guvnor-webapp/src/test/java/org/drools/guvnor/server/GuvnorTestBase.java
@@ -116,14 +115,0 @@
-//    protected void setUpMockIdentity() {
-//        MockIdentity mockIdentity = new MockIdentity();
-//        mockIdentity.setIsLoggedIn( true );
-//        RoleBasedPermissionResolver resolver = new RoleBasedPermissionResolver();
-//        resolver.setEnableRoleBasedAuthorization( false );
-//        mockIdentity.addPermissionResolver( new RoleBasedPermissionResolver() );
-//        setUpMockIdentity( mockIdentity );
-//    }
-//
-//    public void setUpMockIdentity(MockIdentity mockIdentity) {
-//        mockIdentity.inject();
-//        mockIdentity.create();
-//    }
-
diff --git a/guvnor-webapp/src/test/java/org/drools/guvnor/server/security/SecurityServiceImplTest.java b/guvnor-webapp/src/test/java/org/drools/guvnor/server/security/SecurityServiceImplTest.java
index 0bb4dca..89ee10d 100644
--- a/guvnor-webapp/src/test/java/org/drools/guvnor/server/security/SecurityServiceImplTest.java
+++ b/guvnor-webapp/src/test/java/org/drools/guvnor/server/security/SecurityServiceImplTest.java
@@ -29,0 +30,2 @@
+import javax.inject.Inject;
+
@@ -30,0 +33 @@
+import org.drools.guvnor.server.GuvnorTestBase;
@@ -32,0 +36,2 @@
+import org.junit.After;
+import org.junit.Before;
@@ -33,0 +39 @@
+import org.picketlink.idm.impl.api.PasswordCredential;
@@ -35 +41,32 @@
-public class SecurityServiceImplTest {
+public class SecurityServiceImplTest extends GuvnorTestBase {
+
+    private static final String USER_NAME = "securityServiceImplUser";
+
+    @Inject
+    private SecurityServiceImpl securityService;
+
+    @Inject
+    private RoleBasedPermissionStore roleBasedPermissionStore;
+
+    @Inject
+    private RoleBasedPermissionManager roleBasedPermissionManager;
+
+    @Inject
+    private RoleBasedPermissionResolver roleBasedPermissionResolver;
+
+    public SecurityServiceImplTest() {
+        autoLoginAsAdmin = false;
+    }
+
+    @Before
+    public void loginAsSpecificUser() {
+        credentials.setUsername(USER_NAME);
+        credentials.setCredential(new PasswordCredential(USER_NAME));
+        identity.login();
+    }
+
+    @After
+    public void logoutAsSpecificUser() {
+        identity.logout();
+        credentials.clear();
+    }
@@ -39,3 +76,7 @@
-        SecurityServiceImpl impl = new SecurityServiceImpl();
-        assertTrue( impl.login( "XXX",
-                                null ) );
+        logoutAsSpecificUser();
+        try {
+            assertTrue( securityService.login( USER_NAME,
+                                    USER_NAME ) );
+        } finally {
+            loginAsSpecificUser();
+        }
@@ -46,2 +87 @@
-        SecurityServiceImpl impl = new SecurityServiceImpl();
-        assertNotNull( impl.getCurrentUser() );
+        assertNotNull( securityService.getCurrentUser() );
@@ -52,3 +92 @@
-        SecurityServiceImpl impl = new SecurityServiceImpl();
-
-        List<Capability> userCapabilities = impl.getUserCapabilities();
+        List<Capability> userCapabilities = securityService.getUserCapabilities();
@@ -67,17 +105,2 @@
-        SecurityServiceImpl impl = new SecurityServiceImpl();
-
-        // TODO seam3upgrade
-//        MockIdentity midentity = new MockIdentity();
-        RoleBasedPermissionResolver resolver = new RoleBasedPermissionResolver();
-//        resolver.setEnableRoleBasedAuthorization( true );
-//        midentity.addPermissionResolver( resolver );
-//
-//        Contexts.getSessionContext().set( "org.jboss.seam.security.roleBasedPermissionResolver",
-//                                          resolver );
-//        Contexts.getSessionContext().set( "org.jboss.seam.security.identity",
-//                                          midentity );
-//        Contexts.getSessionContext().set( "org.drools.guvnor.client.rpc.RepositoryService",
-//                                          impl );
-
-        List<RoleBasedPermission> pbps = new ArrayList<RoleBasedPermission>();
-        pbps.add( new RoleBasedPermission( "jervis",
+        roleBasedPermissionResolver.setEnableRoleBasedAuthorization(true);
+        roleBasedPermissionStore.addRoleBasedPermissionForTesting(USER_NAME, new RoleBasedPermission( USER_NAME,
@@ -87,4 +110 @@
-        MockRoleBasedPermissionStore store = new MockRoleBasedPermissionStore( pbps );
-        // TODO seam3upgrade
-//        Contexts.getSessionContext().set( "org.drools.guvnor.server.security.RoleBasedPermissionStore",
-//                                          store );
+        roleBasedPermissionManager.create(); // HACK flushes the permission cache
@@ -92,12 +111,0 @@
-        // Put permission list in session.
-        RoleBasedPermissionManager testManager = new RoleBasedPermissionManager();
-        testManager.create();
-        // TODO seam3upgrade
-//        Contexts.getSessionContext().set( "roleBasedPermissionManager",
-//                                          testManager );
-
-        List<Capability> c = impl.getUserCapabilities();
-        assertTrue(c.contains(Capability.SHOW_KNOWLEDGE_BASES_VIEW));
-
-        //now lets give them no permissions
-        pbps.clear();
@@ -105,6 +113,15 @@
-            impl.getUserCapabilities();
-            fail( "should not be allowed as there are no permissions" );
-        } catch ( AuthorizationException e ) {
-            assertNotNull( e.getMessage() );
-            // TODO seam3upgrade
-//            assertTrue( midentity.loggoutCalled );
+            List<Capability> c = securityService.getUserCapabilities();
+            assertTrue(c.contains(Capability.SHOW_KNOWLEDGE_BASES_VIEW));
+
+            //now lets give them no permissions
+            roleBasedPermissionStore.clearAllRoleBasedPermissionsForTesting(USER_NAME);
+            roleBasedPermissionManager.create(); // HACK flushes the permission cache
+            try {
+                securityService.getUserCapabilities();
+                fail( "should not be allowed as there are no permissions" );
+            } catch ( AuthorizationException e ) {
+                assertNotNull( e.getMessage() );
+            }
+        } finally {
+            roleBasedPermissionResolver.setEnableRoleBasedAuthorization(false);
+            roleBasedPermissionStore.clearAllRoleBasedPermissionsForTesting(USER_NAME);
@@ -112,26 +129 @@
-
-        //now lets turn off the role based stuff
-        resolver.setEnableRoleBasedAuthorization( false );
-        impl.getUserCapabilities(); // should not blow up !
-    }
-
-    @Test
-    public void testCapabilitiesContext() throws Exception {
-        SecurityServiceImpl impl = new SecurityServiceImpl();
-
-        // TODO seam3upgrade
-        // Mock up SEAM contexts
-//        MockIdentity midentity = new MockIdentity();
-//        midentity.addRole( RoleType.ADMIN.getName() );
-//        Contexts.getSessionContext().set( "org.jboss.seam.security.identity",
-//                                          midentity );
-
-        List<Capability> userCapabilities = impl.getUserCapabilities();
-
-        assertTrue(userCapabilities.contains(Capability.SHOW_ADMIN));
-        assertTrue(userCapabilities.contains(Capability.SHOW_CREATE_NEW_ASSET));
-        assertTrue(userCapabilities.contains(Capability.SHOW_CREATE_NEW_PACKAGE));
-        assertTrue(userCapabilities.contains(Capability.SHOW_DEPLOYMENT));
-        assertTrue(userCapabilities.contains(Capability.SHOW_DEPLOYMENT_NEW));
-        assertTrue(userCapabilities.contains(Capability.SHOW_KNOWLEDGE_BASES_VIEW));
-        assertTrue(userCapabilities.contains(Capability.SHOW_QA));
+        securityService.getUserCapabilities(); // should not blow up !

