diff --git a/modules/webcontainer/src/main/java/com/sun/grizzly/http/server/io/InputBuffer.java b/modules/webcontainer/src/main/java/com/sun/grizzly/http/server/io/InputBuffer.java
index bed1c65..1d058f8 100644
--- a/modules/webcontainer/src/main/java/com/sun/grizzly/http/server/io/InputBuffer.java
+++ b/modules/webcontainer/src/main/java/com/sun/grizzly/http/server/io/InputBuffer.java
@@ -175 +175 @@
-            if (content.getContent().position() > 0) {
+            if (content.getContent().hasRemaining()) {
diff --git a/modules/webcontainer/src/test/java/com/sun/grizzly/web/ArpSSLTest.java b/modules/webcontainer/src/test/java/com/sun/grizzly/web/ArpSSLTest.java
deleted file mode 100644
index c61453a..0000000
--- a/modules/webcontainer/src/test/java/com/sun/grizzly/web/ArpSSLTest.java
+++ /dev/null
@@ -1,244 +0,0 @@
-/*
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
- * 
- * Copyright 2007-2008 Sun Microsystems, Inc. All rights reserved.
- * 
- * The contents of this file are subject to the terms of either the GNU
- * General Public License Version 2 only ("GPL") or the Common Development
- * and Distribution License("CDDL") (collectively, the "License").  You
- * may not use this file except in compliance with the License. You can obtain
- * a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
- * or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
- * language governing permissions and limitations under the License.
- * 
- * When distributing the software, include this License Header Notice in each
- * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
- * Sun designates this particular file as subject to the "Classpath" exception
- * as provided by Sun in the GPL Version 2 section of the License file that
- * accompanied this code.  If applicable, add the following below the License
- * Header, with the fields enclosed by brackets [] replaced by your own
- * identifying information: "Portions Copyrighted [year]
- * [name of copyright owner]"
- * 
- * Contributor(s):
- * 
- * If you wish your version of this file to be governed by only the CDDL or
- * only the GPL Version 2, indicate your decision by adding "[Contributor]
- * elects to include this software in this distribution under the [CDDL or GPL
- * Version 2] license."  If you don't indicate a single choice of license, a
- * recipient has the option to distribute your version of this file under
- * either the CDDL, the GPL Version 2 or to extend the choice of license to
- * its licensees as provided above.  However, if you add GPL Version 2 code
- * and therefore, elected the GPL Version 2 license, then the option applies
- * only if the new code is made subject to such option by the copyright
- * holder.
- *
- */
-package com.sun.grizzly.http;
-
-import java.io.DataInputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.File;
-import java.net.URL;
-import java.net.URISyntaxException;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.HttpsURLConnection;
-import javax.net.ssl.SSLSession;
-import junit.framework.TestCase;
-import com.sun.grizzly.TransportFactory;
-import com.sun.grizzly.filterchain.TransportFilter;
-import com.sun.grizzly.nio.transport.TCPNIOTransport;
-import com.sun.grizzly.ssl.SSLContextConfigurator;
-import com.sun.grizzly.ssl.SSLEngineConfigurator;
-import com.sun.grizzly.ssl.SSLFilter;
-import com.sun.grizzly.arp.AsyncExecutor;
-import com.sun.grizzly.arp.AsyncFilter;
-import com.sun.grizzly.arp.AsyncHandler;
-import com.sun.grizzly.arp.AsyncWebFilter;
-import com.sun.grizzly.arp.AsyncWebFilterConfig;
-import com.sun.grizzly.arp.DefaultAsyncHandler;
-import com.sun.grizzly.tcp.Adapter;
-import com.sun.grizzly.tcp.OutputBuffer;
-import com.sun.grizzly.tcp.Request;
-import com.sun.grizzly.tcp.Response;
-import com.sun.grizzly.util.buf.ByteChunk;
-
-/**
- *
- * @author Danijel Bjelajac
- * @author Jeanfrancois Arcand
- */
-public class ArpSSLTest extends TestCase {
-
-    public static final int PORT = 18890;
-    private static Logger logger = Logger.getLogger("grizzly.test");
-    private AsyncWebFilter webFilter;
-
-    public void testSimplePacket() throws Exception {
-        TCPNIOTransport transport = TransportFactory.getInstance().createTCPTransport();
-
-        AsyncWebFilterConfig webConfig = new AsyncWebFilterConfig();
-        webConfig.setAdapter(new MyAdapter());
-
-        FileCache fileCache = new FileCache(webConfig);
-        fileCache.setLargeFileCacheEnabled(false);
-        webConfig.setFileCache(fileCache);
-
-        webConfig.setDisplayConfiguration(true);
-        webConfig.setBufferResponse(false);
-        webConfig.setKeepAliveTimeoutInSeconds(2000);
-
-        webConfig.setRequestBufferSize(32768);
-        webConfig.setMaxKeepAliveRequests(8196);
-
-        webConfig.setWebAppRootPath("/dev/null");
-
-        AsyncHandler handler = new DefaultAsyncHandler();
-        handler.addAsyncFilter(new MyAsyncFilter());
-        webConfig.setAsyncHandler(handler);
-
-        webFilter = new AsyncWebFilter("async-filter", webConfig);
-
-        transport.getFilterChain().add(new TransportFilter());
-        transport.getFilterChain().add(new SSLFilter(new SSLEngineConfigurator(
-                createSSLConfig().createSSLContext(), false, false, false)));
-
-        transport.getFilterChain().add(webFilter);
-
-        try {
-            webFilter.enableMonitoring();
-            webFilter.initialize();
-            transport.bind(PORT);
-            transport.start();
-        } catch (Exception ex) {
-            ex.printStackTrace();
-        }
-
-        try {
-            HostnameVerifier hv = new HostnameVerifier() {
-                public boolean verify(String urlHostName, SSLSession session) {
-                    return true;
-                }
-            };
-            HttpsURLConnection.setDefaultHostnameVerifier(hv);
-        
-            String testString = "Hello. Client#";
-            OutputStream os = null;
-            DataInputStream is = null;
-            HttpsURLConnection connection = null;
-
-            try {
-                URL url = new URL("https://localhost:" + PORT);
-                connection = (HttpsURLConnection) url.openConnection();
-                connection.setRequestMethod("POST");
-                connection.setDoOutput(true);
-                os = connection.getOutputStream();
-                os.write(testString.getBytes());
-                os.flush();
-                assertEquals(200, connection.getResponseCode());
-            } finally {
-                if (os != null) {
-                    os.close();
-                }
-
-                if (is != null) {
-                    is.close();
-                }
-
-                if (connection != null) {
-                    connection.disconnect();
-                }
-            }
-        } finally {
-            transport.stop();
-            TransportFactory.getInstance().close();
-        }
-    }
-    
-    private class MyAsyncFilter implements AsyncFilter {
-        public boolean doFilter(AsyncExecutor executor) {
-            ProcessorTask processorTask = (ProcessorTask) executor.getProcessorTask();
-            int contentLenght = processorTask.getRequest().getContentLength();
-            ByteChunk byteChunk = new ByteChunk();
-            byteChunk.setLimit(contentLenght);
-            try {
-                processorTask.getRequest().doRead(byteChunk);
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-            processorTask.invokeAdapter();
-            return false;
-        }
-    }
-
-    class MyAdapter implements Adapter {
-        // Just in case this code is cut&pasted
-        public synchronized void service(Request request, Response response) throws Exception {
-            KeepAliveStats kas = webFilter.getKeepAliveStats();
-            String s;
-            if (kas == null) {
-                s = "KAS: missing\n";
-            } else {
-                s = "KAS:  conns=" + kas.getCountConnections() + ", flushes=" + kas.getCountFlushes() + ", hits=" + kas.getCountHits() + ", refusals=" + kas.getCountRefusals() + ", timeouts=" + kas.getCountTimeouts() + ", maxConns=" + "\n";
-            }
-            byte[] b = s.getBytes("iso-8859-1");
-            sendPlainText(response, b);
-        }
-
-        private void sendPlainText(Response response, byte[] b) throws IOException {
-            response.setContentType("text/plain");
-            response.setContentLength(b.length);
-            ByteChunk chunk = new ByteChunk();
-            chunk.append(b, 0, b.length);
-            OutputBuffer buffer = response.getOutputBuffer();
-            buffer.doWrite(chunk, response);
-            response.finish();
-        }
-
-        public void afterService(Request request, Response response) throws Exception {
-            request.recycle();
-            response.recycle();
-        }
-
-        public void fireAdapterEvent(String string, Object object) {
-        }
-    }
-
-    private SSLContextConfigurator createSSLConfig() throws URISyntaxException {
-        SSLContextConfigurator sslConfig = new SSLContextConfigurator();
-        ClassLoader cl = getClass().getClassLoader();
-        // override system properties
-        URL cacertsUrl = cl.getResource("ssltest-cacerts.jks");
-        String trustStoreFile = new File(cacertsUrl.toURI()).getAbsolutePath();
-        if (cacertsUrl != null) {
-            sslConfig.setTrustStoreFile(trustStoreFile);
-            sslConfig.setTrustStorePass("changeit");
-        }
-
-        logger.log(Level.INFO, "SSL certs path: " + trustStoreFile);
-
-        // override system properties
-        URL keystoreUrl = cl.getResource("ssltest-keystore.jks");
-        String keyStoreFile = new File(keystoreUrl.toURI()).getAbsolutePath();
-        if (keystoreUrl != null) {
-            sslConfig.setKeyStoreFile(keyStoreFile);
-            sslConfig.setKeyStorePass("changeit");
-        }
-
-        logger.log(Level.INFO, "SSL keystore path: " + keyStoreFile);
-
-
-        // public SSL configuration for HttpsURLConnection
-        System.setProperty("javax.net.ssl.trustStore", trustStoreFile);
-        System.setProperty("javax.net.ssl.trustStorePassword", "changeit");
-        System.setProperty("javax.net.ssl.keyStore", keyStoreFile);
-        System.setProperty("javax.net.ssl.keyStorePassword", "changeit");
-
-
-        return sslConfig;
-    }
-}
diff --git a/modules/webcontainer/src/test/java/com/sun/grizzly/web/BasicWebFilterTest.java b/modules/webcontainer/src/test/java/com/sun/grizzly/web/BasicWebFilterTest.java
deleted file mode 100644
index ff8ed86..0000000
--- a/modules/webcontainer/src/test/java/com/sun/grizzly/web/BasicWebFilterTest.java
+++ /dev/null
@@ -1,150 +0,0 @@
-/*
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
- * 
- * Copyright 2007-2008 Sun Microsystems, Inc. All rights reserved.
- * 
- * The contents of this file are subject to the terms of either the GNU
- * General Public License Version 2 only ("GPL") or the Common Development
- * and Distribution License("CDDL") (collectively, the "License").  You
- * may not use this file except in compliance with the License. You can obtain
- * a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
- * or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
- * language governing permissions and limitations under the License.
- * 
- * When distributing the software, include this License Header Notice in each
- * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
- * Sun designates this particular file as subject to the "Classpath" exception
- * as provided by Sun in the GPL Version 2 section of the License file that
- * accompanied this code.  If applicable, add the following below the License
- * Header, with the fields enclosed by brackets [] replaced by your own
- * identifying information: "Portions Copyrighted [year]
- * [name of copyright owner]"
- * 
- * Contributor(s):
- * 
- * If you wish your version of this file to be governed by only the CDDL or
- * only the GPL Version 2, indicate your decision by adding "[Contributor]
- * elects to include this software in this distribution under the [CDDL or GPL
- * Version 2] license."  If you don't indicate a single choice of license, a
- * recipient has the option to distribute your version of this file under
- * either the CDDL, the GPL Version 2 or to extend the choice of license to
- * its licensees as provided above.  However, if you add GPL Version 2 code
- * and therefore, elected the GPL Version 2 license, then the option applies
- * only if the new code is made subject to such option by the copyright
- * holder.
- *
- */
-package com.sun.grizzly.http;
-
-import com.sun.grizzly.tcp.http11.GrizzlyAdapter;
-import com.sun.grizzly.tcp.http11.GrizzlyRequest;
-import com.sun.grizzly.tcp.http11.GrizzlyResponse;
-import java.io.DataInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.ProtocolException;
-import java.net.URL;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.logging.Logger;
-import junit.framework.TestCase;
-import com.sun.grizzly.TransportFactory;
-import com.sun.grizzly.filterchain.TransportFilter;
-import com.sun.grizzly.nio.transport.TCPNIOTransport;
-
-/**
- * Basic {@link WebFilter} test.
- * 
- * @author Jeanfrancois Arcand
- */
-public class BasicWebFilterTest extends TestCase {
-
-    public static final int PORT = 18890;
-    private static Logger logger = Logger.getLogger("grizzly.test");
-    private TCPNIOTransport transport;
-    private WebFilter webFilter;
-
-    public void initTransport() throws IOException {
-        transport = TransportFactory.getInstance().createTCPTransport();
-        webFilter = new WebFilter(Integer.toString(PORT));
-        webFilter.getConfig().setDisplayConfiguration(true);
-        transport.getFilterChain().add(new TransportFilter());
-        transport.getFilterChain().add(webFilter);
-    }
-
-
-    public void testHelloWorldGrizzlyAdapter() throws IOException {
-        System.out.println("Test: testHelloWorldGrizzlyAdapter");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "HelloWorld";
-        final byte[] testData = testString.getBytes();
-        try {
-            initTransport();
-            webFilter.getConfig().setAdapter(new HelloWorldAdapter());
-
-            try {
-                webFilter.initialize();
-                webFilter.enableMonitoring();
-                transport.bind(PORT);
-                transport.start();
-            } catch (Exception ex) {
-                ex.printStackTrace();
-            }
-
-            sendRequest(testData, testString);
-
-
-        } finally {
-            transport.stop();
-            TransportFactory.getInstance().close();
-        }
-    }
-
-    public class HelloWorldAdapter extends GrizzlyAdapter{
-
-        @Override
-        public void service(GrizzlyRequest request, GrizzlyResponse response) {
-            try {
-                response.getWriter().println("HelloWorld");
-            } catch (IOException ex) {
-                ex.printStackTrace();
-            }
-        } 
-    }
-
-    private String sendRequest(byte[] testData, String testString)
-            throws MalformedURLException, ProtocolException, IOException {
-
-        return sendRequest(testData, testString, true);
-    }
-
-    private String sendRequest(byte[] testData, String testString, boolean assertTrue)
-            throws MalformedURLException, ProtocolException, IOException {
-        byte[] response = new byte[testData.length];
-
-        URL url = new URL("http://localhost:" + PORT);
-        HttpURLConnection connection =
-                (HttpURLConnection) url.openConnection();
-        connection.setRequestMethod("POST");
-        connection.setDoOutput(true);
-        OutputStream os = connection.getOutputStream();
-        os.write("Hello".getBytes());
-        os.flush();
-
-        InputStream is = new DataInputStream(connection.getInputStream());
-        response = new byte[testData.length];
-        is.read(response);
-
-
-        String r = new String(response);
-        if (assertTrue) {
-            System.out.println("Response: " + r);
-            assertEquals(testString, r);
-        }
-        connection.disconnect();
-        return r;
-    }
-}
diff --git a/modules/webcontainer/src/test/java/com/sun/grizzly/web/HttpInputStreamsTest.java b/modules/webcontainer/src/test/java/com/sun/grizzly/web/HttpInputStreamsTest.java
index 95b6572..b5dbf0a 100644
--- a/modules/webcontainer/src/test/java/com/sun/grizzly/web/HttpInputStreamsTest.java
+++ b/modules/webcontainer/src/test/java/com/sun/grizzly/web/HttpInputStreamsTest.java
@@ -46 +46 @@
-    private final FutureImpl<Throwable> exception = SafeFutureImpl.create();
+//    private final FutureImpl<Throwable> exception = SafeFutureImpl.create();
@@ -56 +56 @@
-                  throws IOException {
+                    throws IOException {
@@ -59,13 +59,8 @@
-                try {
-                    InputStream in = request.getInputStream();
-                    assertNotNull(in);
-                    assertEquals(0, in.available());
-                    assertEquals(-1, in.read());
-                    assertEquals(-1, in.read(new byte[10]));
-                    assertEquals(-1, in.read(new byte[10], 0, 10));
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
-                }
+                InputStream in = request.getInputStream();
+                assertNotNull(in);
+                assertEquals(0, in.available());
+                assertEquals(-1, in.read());
+                assertEquals(-1, in.read(new byte[10]));
+                assertEquals(-1, in.read(new byte[10], 0, 10));
+                in.close();
+                return true;
@@ -85 +80,2 @@
-            throws IOException {
+                    throws IOException {
+                InputStream in = request.getInputStream();
@@ -87,11 +83,4 @@
-                    InputStream in = request.getInputStream();
-                    try {
-                        in.reset();
-                        fail();
-                    } catch (IOException ioe) {
-                        // expected
-                    }
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+                    in.reset();
+                    fail();
+                } catch (IOException ioe) {
+                    // expected
@@ -98,0 +88 @@
+                return true;
@@ -113,3 +103,2 @@
-                try {
-                    StringBuilder sb = new StringBuilder(expected.length());
-                    InputStream in = request.getInputStream();
+                StringBuilder sb = new StringBuilder(expected.length());
+                InputStream in = request.getInputStream();
@@ -117,25 +106,2 @@
-                    for (int j = 0; j < 5; j++) {
-                        sb.append((char) in.read());
-                    }
-                    assertEquals(expected.substring(0, 5), sb.toString());
-                    in.mark(30);
-
-                    for (int j = 0; j < 5; j++) {
-                        sb.append((char) in.read());
-                    }
-                    in.reset();
-                    assertEquals(expected.substring(0, 10), sb.toString());
-
-                    for (int i = in.read(); i != -1; i = in.read()) {
-                        sb.append((char) i);
-                    }
-
-                    in.close();
-                    assertEquals(0, in.available());
-                    StringBuilder exp = new StringBuilder(expected);
-                    exp.insert(5, expected.substring(5, 10));
-                    assertEquals(exp.toString(), sb.toString());
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+                for (int j = 0; j < 5; j++) {
+                    sb.append((char) in.read());
@@ -142,0 +109,19 @@
+                assertEquals(expected.substring(0, 5), sb.toString());
+                in.mark(30);
+
+                for (int j = 0; j < 5; j++) {
+                    sb.append((char) in.read());
+                }
+                in.reset();
+                assertEquals(expected.substring(0, 10), sb.toString());
+
+                for (int i = in.read(); i != -1; i = in.read()) {
+                    sb.append((char) i);
+                }
+
+                in.close();
+                assertEquals(0, in.available());
+                StringBuilder exp = new StringBuilder(expected);
+                exp.insert(5, expected.substring(5, 10));
+                assertEquals(exp.toString(), sb.toString());
+                return true;
@@ -156,4 +141,3 @@
-            throws IOException {
-                try {
-                    StringBuilder sb = new StringBuilder(5);
-                    InputStream in = request.getInputStream();
+                    throws IOException {
+                StringBuilder sb = new StringBuilder(5);
+                InputStream in = request.getInputStream();
@@ -161,21 +145,2 @@
-                    for (int j = 0; j < 5; j++) {
-                        sb.append((char) in.read());
-                    }
-                    assertEquals(expected.substring(0, 5), sb.toString());
-                    in.mark(2);
-
-                    for (int j = 0; j < 5; j++) {
-                        sb.append((char) in.read());
-                    }
-                    try {
-                        in.reset();
-                        fail();
-                    } catch (IOException ioe) {
-                        // expected
-                    }
-                    in.close();
-                    assertEquals(0, in.available());
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+                for (int j = 0; j < 5; j++) {
+                    sb.append((char) in.read());
@@ -182,0 +148,15 @@
+                assertEquals(expected.substring(0, 5), sb.toString());
+                in.mark(2);
+
+                for (int j = 0; j < 5; j++) {
+                    sb.append((char) in.read());
+                }
+                try {
+                    in.reset();
+                    fail();
+                } catch (IOException ioe) {
+                    // expected
+                }
+                in.close();
+                assertEquals(0, in.available());
+                return true;
@@ -195,5 +175,5 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    StringBuilder sb = new StringBuilder(5);
-                    InputStream in = request.getInputStream();
+            @Override 
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                StringBuilder sb = new StringBuilder(5);
+                InputStream in = request.getInputStream();
@@ -201,35 +181,2 @@
-                    for (int j = 0; j < 5; j++) {
-                        sb.append((char) in.read());
-                    }
-                    assertEquals(expected.substring(0, 5), sb.toString());
-                    in.mark(2);
-
-                    for (int j = 0; j < 2; j++) {
-                        sb.append((char) in.read());
-                    }
-                    in.reset();
-                    assertEquals(expected.substring(0, 7), sb.toString());
-
-                    for (int j = 0; j < 2; j++) {
-                        sb.append((char) in.read());
-                    }
-                    in.reset();
-                    StringBuilder sb2 = new StringBuilder(expected);
-                    sb2.insert(5, expected.substring(5, 7));
-                    assertEquals(sb2.toString().substring(0, 9), sb.toString());
-
-                    for (int j = 0; j < 3; j++) {
-                        sb.append((char) in.read());
-                    }
-                    try {
-                        in.reset();
-                        fail();
-                    } catch (IOException ioe) {
-                        // expected
-                    }
-                    in.close();
-                    assertEquals(0, in.available());
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+                for (int j = 0; j < 5; j++) {
+                    sb.append((char) in.read());
@@ -236,0 +184,29 @@
+                assertEquals(expected.substring(0, 5), sb.toString());
+                in.mark(2);
+
+                for (int j = 0; j < 2; j++) {
+                    sb.append((char) in.read());
+                }
+                in.reset();
+                assertEquals(expected.substring(0, 7), sb.toString());
+
+                for (int j = 0; j < 2; j++) {
+                    sb.append((char) in.read());
+                }
+                in.reset();
+                StringBuilder sb2 = new StringBuilder(expected);
+                sb2.insert(5, expected.substring(5, 7));
+                assertEquals(sb2.toString().substring(0, 9), sb.toString());
+
+                for (int j = 0; j < 3; j++) {
+                    sb.append((char) in.read());
+                }
+                try {
+                    in.reset();
+                    fail();
+                } catch (IOException ioe) {
+                    // expected
+                }
+                in.close();
+                assertEquals(0, in.available());
+                return true;
@@ -249,23 +225,13 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    StringBuilder sb = new StringBuilder(16);
-                    InputStream in = request.getInputStream();
-                    long skipped = in.skip(0);
-                    assertEquals(0, skipped);
-                    skipped = in.skip(-1000);
-                    assertEquals(0, skipped);
-                    skipped = in.skip(10);
-                    assertEquals(10, skipped);
-                    for (int i = in.read(); i != -1; i = in.read()) {
-                        sb.append((char) i);
-                    }
-                    assertEquals(0, in.available());
-                    assertEquals(-1, in.read());
-                    assertEquals(-1, in.skip(10));
-                    in.close();
-                    assertEquals(expected.substring(10), sb.toString());
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                StringBuilder sb = new StringBuilder(16);
+                InputStream in = request.getInputStream();
+                long skipped = in.skip(0);
+                assertEquals(0, skipped);
+                skipped = in.skip(-1000);
+                assertEquals(0, skipped);
+                skipped = in.skip(10);
+                assertEquals(10, skipped);
+                for (int i = in.read(); i != -1; i = in.read()) {
+                    sb.append((char) i);
@@ -272,0 +239,6 @@
+                assertEquals(0, in.available());
+                assertEquals(-1, in.read());
+                assertEquals(-1, in.skip(10));
+                in.close();
+                assertEquals(expected.substring(10), sb.toString());
+                return true;
@@ -285,15 +257,11 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    InputStream in = request.getInputStream();
-                    long skipped = in.skip(100);
-                    assertEquals(26, skipped);
-                    assertEquals(0, in.available());
-                    assertEquals(-1, in.read());
-                    assertEquals(-1, in.skip(10));
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
-                }
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                InputStream in = request.getInputStream();
+                long skipped = in.skip(100);
+                assertEquals(26, skipped);
+                assertEquals(0, in.available());
+                assertEquals(-1, in.read());
+                assertEquals(-1, in.skip(10));
+                in.close();
+                return true;
@@ -312,15 +280,11 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    InputStream in = request.getInputStream();
-                    byte[] b = new byte[expected.length()];
-                    assertEquals(26, in.read(b));
-                    assertEquals(expected, new String(b));
-                    assertEquals(0, in.available());
-                    assertEquals(-1, in.read(b));
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
-                }
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                InputStream in = request.getInputStream();
+                byte[] b = new byte[expected.length()];
+                assertEquals(26, in.read(b));
+                assertEquals(expected, new String(b));
+                assertEquals(0, in.available());
+                assertEquals(-1, in.read(b));
+                in.close();
+                return true;
@@ -338,14 +302,10 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    InputStream in = request.getInputStream();
-                    byte[] b = new byte[14];
-                    assertEquals(5, in.read(b, 2, 5));
-                    assertTrue(in.available() > 0);
-                    in.close();
-                    assertEquals("abcde", new String(b, 2, 5));
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
-                }
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                InputStream in = request.getInputStream();
+                byte[] b = new byte[14];
+                assertEquals(5, in.read(b, 2, 5));
+                assertTrue(in.available() > 0);
+                in.close();
+                assertEquals("abcde", new String(b, 2, 5));
+                return true;
@@ -364,17 +324,13 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    InputStream in = request.getInputStream();
-                    byte[] b = new byte[expected.length() - 2];
-                    assertEquals(24, in.read(b));
-                    assertEquals(expected.substring(0, 24), new String(b));
-                    assertEquals(2, in.read(b));
-                    assertEquals(expected.substring(24), new String(b, 0, 2));
-                    assertEquals(-1, in.read(b));
-                    assertEquals(0, in.available());
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
-                }
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                InputStream in = request.getInputStream();
+                byte[] b = new byte[expected.length() - 2];
+                assertEquals(24, in.read(b));
+                assertEquals(expected.substring(0, 24), new String(b));
+                assertEquals(2, in.read(b));
+                assertEquals(expected.substring(24), new String(b, 0, 2));
+                assertEquals(-1, in.read(b));
+                assertEquals(0, in.available());
+                in.close();
+                return true;
@@ -402,15 +358,6 @@
-            throws IOException {
-                try {
-                    InputStream in = request.getInputStream();
-                    StringBuilder sb = new StringBuilder();
-                    byte[] buf = new byte[512];
-                    for (int i = in.read(buf); i != -1; i = in.read(buf)) {
-                        sb.append(new String(buf, 0, i));
-                    }
-                    assertEquals(b.toString(), sb.toString());
-                    assertEquals(0, in.available());
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+                    throws IOException {
+                InputStream in = request.getInputStream();
+                StringBuilder sb = new StringBuilder();
+                byte[] buf = new byte[512];
+                for (int i = in.read(buf); i != -1; i = in.read(buf)) {
+                    sb.append(new String(buf, 0, i));
@@ -417,0 +365,4 @@
+                assertEquals(b.toString(), sb.toString());
+                assertEquals(0, in.available());
+                in.close();
+                return true;
@@ -440,15 +391,6 @@
-            throws IOException {
-                try {
-                    InputStream in = request.getInputStream();
-                    StringBuilder sb = new StringBuilder();
-                    byte[] buf = new byte[512];
-                    for (int i = in.read(buf); i != -1; i = in.read(buf)) {
-                        sb.append(new String(buf, 0, i));
-                    }
-                    assertEquals(b.toString(), sb.toString());
-                    assertEquals(0, in.available());
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+                    throws IOException {
+                InputStream in = request.getInputStream();
+                StringBuilder sb = new StringBuilder();
+                byte[] buf = new byte[512];
+                for (int i = in.read(buf); i != -1; i = in.read(buf)) {
+                    sb.append(new String(buf, 0, i));
@@ -455,0 +398,4 @@
+                assertEquals(b.toString(), sb.toString());
+                assertEquals(0, in.available());
+                in.close();
+                return true;
@@ -472,15 +418,5 @@
-            throws IOException {
-                try {
-                    StringBuilder sb = new StringBuilder(26);
-                    Reader in = request.getReader();
-                    for (int i = in.read(); i != -1; i = in.read()) {
-                        sb.append((char) i);
-                    }
-                    assertEquals(-1, in.read());
-                    in.close();
-                    assertEquals(expected.length(), sb.length());
-                    assertEquals(expected, sb.toString());
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+                    throws IOException {
+                StringBuilder sb = new StringBuilder(26);
+                Reader in = request.getReader();
+                for (int i = in.read(); i != -1; i = in.read()) {
+                    sb.append((char) i);
@@ -487,0 +424,5 @@
+                assertEquals(-1, in.read());
+                in.close();
+                assertEquals(expected.length(), sb.length());
+                assertEquals(expected, sb.toString());
+                return true;
@@ -500,14 +441,10 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    Reader in = request.getReader();
-                    char[] b = new char[expected.length()];
-                    assertEquals(26, in.read(b));
-                    assertEquals(expected, new String(b));
-                    assertEquals(-1, in.read(b));
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
-                }
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                Reader in = request.getReader();
+                char[] b = new char[expected.length()];
+                assertEquals(26, in.read(b));
+                assertEquals(expected, new String(b));
+                assertEquals(-1, in.read(b));
+                in.close();
+                return true;
@@ -526,13 +463,9 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    Reader in = request.getReader();
-                    char[] b = new char[14];
-                    assertEquals(5, in.read(b, 2, 5));
-                    in.close();
-                    assertEquals("abcde", new String(b, 2, 5));
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
-                }
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                Reader in = request.getReader();
+                char[] b = new char[14];
+                assertEquals(5, in.read(b, 2, 5));
+                in.close();
+                assertEquals("abcde", new String(b, 2, 5));
+                return true;
@@ -551,16 +484,12 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    Reader in = request.getReader();
-                    char[] b = new char[expected.length() - 2];
-                    assertEquals(24, in.read(b));
-                    assertEquals(expected.substring(0, 24), new String(b));
-                    assertEquals(2, in.read(b));
-                    assertEquals(expected.substring(24), new String(b, 0, 2));
-                    assertEquals(-1, in.read(b));
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
-                }
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                Reader in = request.getReader();
+                char[] b = new char[expected.length() - 2];
+                assertEquals(24, in.read(b));
+                assertEquals(expected.substring(0, 24), new String(b));
+                assertEquals(2, in.read(b));
+                assertEquals(expected.substring(24), new String(b, 0, 2));
+                assertEquals(-1, in.read(b));
+                in.close();
+                return true;
@@ -587,16 +516,8 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    Reader in = request.getReader();
-                    StringBuilder sb = new StringBuilder();
-                    char[] buf = new char[512];
-                    for (int i = in.read(buf); i != -1; i = in.read(buf)) {
-                        sb.append(new String(buf, 0, i));
-                    }
-                    assertEquals(b.length(), sb.length());
-                    assertEquals(b.toString(), sb.toString());
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                Reader in = request.getReader();
+                StringBuilder sb = new StringBuilder();
+                char[] buf = new char[512];
+                for (int i = in.read(buf); i != -1; i = in.read(buf)) {
+                    sb.append(new String(buf, 0, i));
@@ -603,0 +525,4 @@
+                assertEquals(b.length(), sb.length());
+                assertEquals(b.toString(), sb.toString());
+                in.close();
+                return true;
@@ -625,15 +550,8 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    Reader in = request.getReader();
-                    StringBuilder sb = new StringBuilder();
-                    char[] buf = new char[512];
-                    for (int i = in.read(buf); i != -1; i = in.read(buf)) {
-                        sb.append(new String(buf, 0, i));
-                    }
-                    assertEquals(sb.toString(), b.toString());
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                Reader in = request.getReader();
+                StringBuilder sb = new StringBuilder();
+                char[] buf = new char[512];
+                for (int i = in.read(buf); i != -1; i = in.read(buf)) {
+                    sb.append(new String(buf, 0, i));
@@ -640,0 +559,3 @@
+                assertEquals(sb.toString(), b.toString());
+                in.close();
+                return true;
@@ -662,15 +583,8 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    Reader in = request.getReader();
-                    StringBuilder sb = new StringBuilder();
-                    char[] buf = new char[1024 * 9];
-                    for (int i = in.read(buf); i != -1; i = in.read(buf)) {
-                        sb.append(new String(buf, 0, i));
-                    }
-                    assertEquals(sb.toString(), b.toString());
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                Reader in = request.getReader();
+                StringBuilder sb = new StringBuilder();
+                char[] buf = new char[1024 * 9];
+                for (int i = in.read(buf); i != -1; i = in.read(buf)) {
+                    sb.append(new String(buf, 0, i));
@@ -677,0 +592,3 @@
+                assertEquals(sb.toString(), b.toString());
+                in.close();
+                return true;
@@ -690,17 +607,13 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    CharBuffer cbuf = CharBuffer.allocate(52);
-                    Reader in = request.getReader();
-                    int read = in.read(cbuf);
-                    assertEquals(expected.length(), read);
-                    assertEquals(-1, in.read());
-                    in.close();
-                    cbuf.flip();
-                    assertEquals(expected.length(), cbuf.remaining());
-                    assertEquals(expected, cbuf.toString());
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
-                }
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                CharBuffer cbuf = CharBuffer.allocate(52);
+                Reader in = request.getReader();
+                int read = in.read(cbuf);
+                assertEquals(expected.length(), read);
+                assertEquals(-1, in.read());
+                in.close();
+                cbuf.flip();
+                assertEquals(expected.length(), cbuf.remaining());
+                assertEquals(expected, cbuf.toString());
+                return true;
@@ -719,16 +632,8 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    Reader in = request.getReader();
-                    CharBuffer cbuf = CharBuffer.allocate(expected.length() / 2);
-                    StringBuilder sb = new StringBuilder(expected.length());
-                    for (int i = in.read(cbuf); i != -1; i = in.read(cbuf)) {
-                        sb.append(cbuf.flip().toString());
-                    }
-                    assertEquals(-1, in.read());
-                    assertEquals(expected.length(), sb.length());
-                    assertEquals(expected, sb.toString());
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                Reader in = request.getReader();
+                CharBuffer cbuf = CharBuffer.allocate(expected.length() / 2);
+                StringBuilder sb = new StringBuilder(expected.length());
+                for (int i = in.read(cbuf); i != -1; i = in.read(cbuf)) {
+                    sb.append(cbuf.flip().toString());
@@ -735,0 +641,4 @@
+                assertEquals(-1, in.read());
+                assertEquals(expected.length(), sb.length());
+                assertEquals(expected, sb.toString());
+                return true;
@@ -756,16 +665,8 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    Reader in = request.getReader();
-                    CharBuffer cbuf = CharBuffer.allocate(1024 / 2);
-                    StringBuilder sb = new StringBuilder(len);
-                    for (int i = in.read(cbuf); i != -1; i = in.read(cbuf)) {
-                        sb.append(cbuf.flip().toString());
-                    }
-                    assertEquals(-1, in.read());
-                    assertEquals(b.length(), sb.length());
-                    assertEquals(b.toString(), sb.toString());
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                Reader in = request.getReader();
+                CharBuffer cbuf = CharBuffer.allocate(1024 / 2);
+                StringBuilder sb = new StringBuilder(len);
+                for (int i = in.read(cbuf); i != -1; i = in.read(cbuf)) {
+                    sb.append(cbuf.flip().toString());
@@ -772,0 +674,4 @@
+                assertEquals(-1, in.read());
+                assertEquals(b.length(), sb.length());
+                assertEquals(b.toString(), sb.toString());
+                return true;
@@ -785,18 +690,8 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    StringBuilder sb = new StringBuilder(26);
-                    Reader in = request.getReader();
-                    assertTrue(in.ready());
-                    for (int i = in.read(); i != -1; i = in.read()) {
-                        sb.append((char) i);
-                    }
-                    assertEquals(-1, in.read());
-                    assertFalse(in.ready());
-                    in.close();
-                    assertEquals(expected.length(), sb.length());
-                    assertEquals(expected, sb.toString());
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                StringBuilder sb = new StringBuilder(26);
+                Reader in = request.getReader();
+                assertTrue(in.ready());
+                for (int i = in.read(); i != -1; i = in.read()) {
+                    sb.append((char) i);
@@ -803,0 +699,6 @@
+                assertEquals(-1, in.read());
+                assertFalse(in.ready());
+                in.close();
+                assertEquals(expected.length(), sb.length());
+                assertEquals(expected, sb.toString());
+                return true;
@@ -816 +717 @@
-           
+
@@ -865,2 +766,8 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
+
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                StringBuilder sb = new StringBuilder(16);
+                Reader in = request.getReader();
+                long skipped = in.skip(0);
+                assertEquals(0, skipped);
@@ -868,23 +775,4 @@
-                    StringBuilder sb = new StringBuilder(16);
-                    Reader in = request.getReader();
-                    long skipped = in.skip(0);
-                    assertEquals(0, skipped);
-                    try {
-                        in.skip(-1000);
-                        fail();
-                    } catch (IllegalArgumentException iae) {
-                        // expected
-                    }
-                    skipped = in.skip(10);
-                    assertEquals(10, skipped);
-                    for (int i = in.read(); i != -1; i = in.read()) {
-                        sb.append((char) i);
-                    }
-                    assertEquals(-1, in.read());
-                    assertEquals(0, in.skip(10));
-                    in.close();
-                    assertEquals(expected.substring(10), sb.toString());
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+                    in.skip(-1000);
+                    fail();
+                } catch (IllegalArgumentException iae) {
+                    // expected
@@ -891,0 +780,10 @@
+                skipped = in.skip(10);
+                assertEquals(10, skipped);
+                for (int i = in.read(); i != -1; i = in.read()) {
+                    sb.append((char) i);
+                }
+                assertEquals(-1, in.read());
+                assertEquals(0, in.skip(10));
+                in.close();
+                assertEquals(expected.substring(10), sb.toString());
+                return true;
@@ -904,14 +802,10 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    Reader in = request.getReader();
-                    long skipped = in.skip(100);
-                    assertEquals(26, skipped);
-                    assertEquals(-1, in.read());
-                    assertEquals(0, in.skip(10));
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
-                }
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                Reader in = request.getReader();
+                long skipped = in.skip(100);
+                assertEquals(26, skipped);
+                assertEquals(-1, in.read());
+                assertEquals(0, in.skip(10));
+                in.close();
+                return true;
@@ -938,22 +832,8 @@
-            @Override public boolean doRead(GrizzlyRequest request)
-            throws IOException {
-                try {
-                    int skipLen = 9000;
-                    Reader in = request.getReader();
-                    long skipped = in.skip(skipLen);
-                    while (skipped != skipLen) {
-                        skipped += in.skip(skipLen - skipped);
-                    }
-                    char[] buf = new char[1024];
-                    StringBuilder sb = new StringBuilder(1024);
-                    for (int i = in.read(buf); i != -1; i = in.read(buf)) {
-                        sb.append(buf, 0, i);
-                    }
-                    assertEquals(b.toString().substring(skipLen), sb.toString());
-                    assertEquals(-1, in.read());
-                    assertEquals(0, in.skip(10));
-                    in.close();
-                    return true;
-                } catch (Throwable t) {
-                    exception.result(t);
-                    return false;
+            @Override
+            public boolean doRead(GrizzlyRequest request)
+                    throws IOException {
+                int skipLen = 9000;
+                Reader in = request.getReader();
+                long skipped = in.skip(skipLen);
+                while (skipped != skipLen) {
+                    skipped += in.skip(skipLen - skipped);
@@ -960,0 +841,10 @@
+                char[] buf = new char[1024];
+                StringBuilder sb = new StringBuilder(1024);
+                for (int i = in.read(buf); i != -1; i = in.read(buf)) {
+                    sb.append(buf, 0, i);
+                }
+                assertEquals(b.toString().substring(skipLen), sb.toString());
+                assertEquals(-1, in.read());
+                assertEquals(0, in.skip(10));
+                in.close();
+                return true;
@@ -971,9 +860,0 @@
-
-    private void reportThreadErrors() throws Throwable {
-        Throwable t = exception.getResult();
-        if (t != null) {
-            throw t;
-        }
-    }
-
-
@@ -981 +862,5 @@
-    private HttpPacket createRequest(String method, String content) {
+    private HttpPacket createRequest(final String method, final String content) {
+        final Buffer contentBuffer = content != null ?
+            MemoryUtils.wrap(TransportFactory.getInstance().getDefaultMemoryManager(), content) :
+            null;
+        
@@ -983,0 +869,4 @@
+        if (content != null) {
+            b.contentLength(contentBuffer.remaining());
+        }
+
@@ -988 +877 @@
-            cb.content(MemoryUtils.wrap(TransportFactory.getInstance().getDefaultMemoryManager(), content));
+            cb.content(contentBuffer);
@@ -1003 +892 @@
-        sconfig.addGrizzlyAdapter(new SimpleResponseAdapter(strategy), new String[] { "/*" });
+        sconfig.addGrizzlyAdapter(new SimpleResponseAdapter(strategy, testResult), new String[] { "/*" });
@@ -1023 +912 @@
-                testResult.get(10, TimeUnit.SECONDS);
+                testResult.get(1000, TimeUnit.SECONDS);
@@ -1034 +922,0 @@
-            reportThreadErrors();
@@ -1050,2 +938,2 @@
-
-        private ReadStrategy strategy;
+        private final FutureImpl<Boolean> testResult;
+        private final ReadStrategy strategy;
@@ -1057 +945 @@
-        public SimpleResponseAdapter(ReadStrategy strategy) {
+        public SimpleResponseAdapter(ReadStrategy strategy, FutureImpl<Boolean> testResult) {
@@ -1058,0 +947 @@
+            this.testResult = testResult;
@@ -1066,0 +956,2 @@
+            Throwable t = null;
+
@@ -1069,4 +960,7 @@
-            if (strategy.doRead(req)) {
-                res.addHeader("Status", "OK");
-            } else {
-                res.addHeader("Status", "Failed");
+            try {
+                if (strategy.doRead(req)) {
+                    res.addHeader("Status", "OK");
+                    return;
+                }
+            } catch (Throwable e) {
+                t = e;
@@ -1073,0 +968,3 @@
+
+            testResult.failure(t != null ? t : new IllegalStateException("Strategy returned false"));
+            res.addHeader("Status", "Failed");
@@ -1083,2 +980,2 @@
-        private HttpPacket request;
-        private FutureImpl<Boolean> testResult;
+        private final HttpPacket request;
+        private final FutureImpl<Boolean> testResult;
diff --git a/modules/webcontainer/src/test/java/com/sun/grizzly/web/HttpResponseStreamsTest.java b/modules/webcontainer/src/test/java/com/sun/grizzly/web/HttpResponseStreamsTest.java
index 46bab1f..29ebffd 100644
--- a/modules/webcontainer/src/test/java/com/sun/grizzly/web/HttpResponseStreamsTest.java
+++ b/modules/webcontainer/src/test/java/com/sun/grizzly/web/HttpResponseStreamsTest.java
@@ -15 +15 @@
-import com.sun.grizzly.http.server.apapter.GrizzlyAdapter;
+import com.sun.grizzly.http.server.adapter.GrizzlyAdapter;
diff --git a/modules/webcontainer/src/test/java/com/sun/grizzly/web/RedirectTest.java b/modules/webcontainer/src/test/java/com/sun/grizzly/web/RedirectTest.java
deleted file mode 100644
index bb4c6b1..0000000
--- a/modules/webcontainer/src/test/java/com/sun/grizzly/web/RedirectTest.java
+++ /dev/null
@@ -1,185 +0,0 @@
-/*
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
- * 
- * Copyright 2007-2008 Sun Microsystems, Inc. All rights reserved.
- * 
- * The contents of this file are subject to the terms of either the GNU
- * General Public License Version 2 only ("GPL") or the Common Development
- * and Distribution License("CDDL") (collectively, the "License").  You
- * may not use this file except in compliance with the License. You can obtain
- * a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
- * or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
- * language governing permissions and limitations under the License.
- * 
- * When distributing the software, include this License Header Notice in each
- * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
- * Sun designates this particular file as subject to the "Classpath" exception
- * as provided by Sun in the GPL Version 2 section of the License file that
- * accompanied this code.  If applicable, add the following below the License
- * Header, with the fields enclosed by brackets [] replaced by your own
- * identifying information: "Portions Copyrighted [year]
- * [name of copyright owner]"
- * 
- * Contributor(s):
- * 
- * If you wish your version of this file to be governed by only the CDDL or
- * only the GPL Version 2, indicate your decision by adding "[Contributor]
- * elects to include this software in this distribution under the [CDDL or GPL
- * Version 2] license."  If you don't indicate a single choice of license, a
- * recipient has the option to distribute your version of this file under
- * either the CDDL, the GPL Version 2 or to extend the choice of license to
- * its licensees as provided above.  However, if you add GPL Version 2 code
- * and therefore, elected the GPL Version 2 license, then the option applies
- * only if the new code is made subject to such option by the copyright
- * holder.
- *
- */
-package com.sun.grizzly.http;
-
-import java.io.BufferedReader;
-import java.io.DataInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.net.HttpURLConnection;
-import java.net.Socket;
-import java.net.URL;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.logging.Logger;
-import junit.framework.TestCase;
-import com.sun.grizzly.TransportFactory;
-import com.sun.grizzly.filterchain.TransportFilter;
-import com.sun.grizzly.nio.transport.TCPNIOTransport;
-import com.sun.grizzly.tcp.http11.GrizzlyAdapter;
-import com.sun.grizzly.tcp.http11.GrizzlyRequest;
-import com.sun.grizzly.tcp.http11.GrizzlyResponse;
-
-/**
- * Units test for RFE 401
- * 
- * @author Jeanfrancois Arcand
- */
-public class RedirectTest extends TestCase {
-
-    public static final int PORT = 18890;
-    private static Logger logger = Logger.getLogger("grizzly.test");
-    private TCPNIOTransport transport;
-    private WebFilter webFilter;
-
-    public void initTransport(GrizzlyAdapter adapter) {
-        transport = TransportFactory.getInstance().createTCPTransport();
-        
-        WebFilterConfig webConfig = new WebFilterConfig();
-        webConfig.setAdapter(adapter);
-        webConfig.setDisplayConfiguration(true);
-
-        webFilter = new WebFilter("redirect-test", webConfig);
-        webFilter.enableMonitoring();
-
-        transport.getFilterChain().add(new TransportFilter());
-        transport.getFilterChain().add(webFilter);
-        try {
-            webFilter.initialize();
-            transport.bind(PORT);
-            transport.start();
-        } catch (Exception ex) {
-            ex.printStackTrace();
-        }
-    }
-    
-    public void stopTransport() throws IOException {
-        transport.stop();
-        TransportFactory.getInstance().close();
-    }
-
-    public void testRedirectWithHyperlink() throws IOException {
-        System.out.println("Test: testRedirectWithHyperlink");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-
-        try {
-            initTransport(new GrizzlyAdapter() {
-
-                @Override
-                public void service(final GrizzlyRequest req, final GrizzlyResponse res) {
-                    try{
-                        res.sendRedirect("/foo/password.txt");
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-            });
-            
-            Socket s = new Socket("localhost", PORT);
-            s.setSoTimeout(5000);
-            OutputStream os = s.getOutputStream();
-
-            System.out.println(("GET /foo/password.txt HTTP/1.1\n"));
-            os.write(("GET /foo/password.txt HTTP/1.1\n").getBytes());
-            os.write(("Host: localhost:" + PORT + "\n").getBytes());
-            os.write("\n".getBytes());
-
-            try{
-                InputStream is = new DataInputStream(s.getInputStream());
-                BufferedReader br = new BufferedReader(new InputStreamReader(is));
-                String line = null;
-                while( (line = br.readLine()) != null){
-                    System.out.println("-> " + line);
-                    if (line.contains("http://localhost:" + PORT + "/foo/password.txt"))   {
-                        assertTrue(true);
-                        return;
-                    }
-                }
-            } catch (IOException ex){
-                ex.printStackTrace();
-                assertFalse(false);
-            }
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-         
-         
-    public void testRedirectWithInvalidHyperlink() throws IOException {
-        System.out.println("Test: testRedirectWithHyperlink");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        try {
-            initTransport(new GrizzlyAdapter() {
-
-                @Override
-                public void service(final GrizzlyRequest req, final GrizzlyResponse res) {
-                    try{
-                        res.sendRedirect("/foo/../../password.txt");
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-            });
-
-            URL url = new URL("http://localhost:" + PORT);
-            HttpURLConnection connection =
-                    (HttpURLConnection) url.openConnection();
-            connection.setRequestMethod("POST");
-            connection.setDoOutput(true);
-            OutputStream os = connection.getOutputStream();
-            os.write("Hello".getBytes());
-            os.flush();
-
-            try{
-                InputStream is = new DataInputStream(connection.getInputStream());
-            } catch (IOException ex){
-                if (connection.getResponseCode() == 400){
-                    assertTrue(true);
-                } else {
-                    assertFalse(false);
-                }
-            }
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-}
diff --git a/modules/webcontainer/src/test/java/com/sun/grizzly/web/ResponseFilterTest.java b/modules/webcontainer/src/test/java/com/sun/grizzly/web/ResponseFilterTest.java
deleted file mode 100644
index 004e642..0000000
--- a/modules/webcontainer/src/test/java/com/sun/grizzly/web/ResponseFilterTest.java
+++ /dev/null
@@ -1,293 +0,0 @@
-/*
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
- * 
- * Copyright 2007-2008 Sun Microsystems, Inc. All rights reserved.
- * 
- * The contents of this file are subject to the terms of either the GNU
- * General Public License Version 2 only ("GPL") or the Common Development
- * and Distribution License("CDDL") (collectively, the "License").  You
- * may not use this file except in compliance with the License. You can obtain
- * a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
- * or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
- * language governing permissions and limitations under the License.
- * 
- * When distributing the software, include this License Header Notice in each
- * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
- * Sun designates this particular file as subject to the "Classpath" exception
- * as provided by Sun in the GPL Version 2 section of the License file that
- * accompanied this code.  If applicable, add the following below the License
- * Header, with the fields enclosed by brackets [] replaced by your own
- * identifying information: "Portions Copyrighted [year]
- * [name of copyright owner]"
- * 
- * Contributor(s):
- * 
- * If you wish your version of this file to be governed by only the CDDL or
- * only the GPL Version 2, indicate your decision by adding "[Contributor]
- * elects to include this software in this distribution under the [CDDL or GPL
- * Version 2] license."  If you don't indicate a single choice of license, a
- * recipient has the option to distribute your version of this file under
- * either the CDDL, the GPL Version 2 or to extend the choice of license to
- * its licensees as provided above.  However, if you add GPL Version 2 code
- * and therefore, elected the GPL Version 2 license, then the option applies
- * only if the new code is made subject to such option by the copyright
- * holder.
- *
- */
-package com.sun.grizzly.http;
-
-import java.io.BufferedReader;
-import java.io.DataInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.net.Socket;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.logging.Logger;
-import junit.framework.TestCase;
-import com.sun.grizzly.TransportFactory;
-import com.sun.grizzly.filterchain.TransportFilter;
-import com.sun.grizzly.nio.transport.TCPNIOTransport;
-import com.sun.grizzly.tcp.Adapter;
-import com.sun.grizzly.tcp.Request;
-import com.sun.grizzly.tcp.Response;
-import com.sun.grizzly.tcp.ResponseFilter;
-import com.sun.grizzly.tcp.StaticResourcesAdapter;
-import com.sun.grizzly.util.buf.ByteChunk;
-
-/**
- * Units test that exercise the {@link Response#addResponseFilter}
- * @author Jeanfrancois Arcand
- */
-public class ResponseFilterTest extends TestCase {
-
-    public static final int PORT = 18890;
-    private static Logger logger = Logger.getLogger("grizzly.test");
-    private WebFilter webFilter;
-    private TCPNIOTransport transport;
-
-    public void initTransport(Adapter adapter) {
-        transport = TransportFactory.getInstance().createTCPTransport();
-
-        WebFilterConfig webConfig = new WebFilterConfig();
-        webConfig.setAdapter(adapter);
-        webConfig.setDisplayConfiguration(true);
-
-        webFilter = new WebFilter("response-filter-test", webConfig);
-        webFilter.enableMonitoring();
-
-        transport.getFilterChain().add(new TransportFilter());
-        transport.getFilterChain().add(webFilter);
-        try {
-            webFilter.initialize();
-            transport.bind(PORT);
-            transport.start();
-        } catch (Exception ex) {
-            ex.printStackTrace();
-        }
-    }
-
-    public void stopTransport() throws IOException {
-        transport.stop();
-        TransportFactory.getInstance().close();
-    }
-
-    public void testResponseFilter() throws IOException {
-        System.out.println("Test: testResponseFilter");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Added after invoking Adapter";
-        final byte[] testData = testString.getBytes();
-
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) throws IOException {
-                    //res.flushHeaders();
-                    res.addResponseFilter(new ResponseFilter() {
-
-                        public void filter(ByteChunk bc) {
-                            try {
-                                bc.append(testData, 0, testData.length);
-                            } catch (IOException ex) {
-                                ex.printStackTrace();
-                            }
-                        }
-                    });
-                    ByteChunk bc = new ByteChunk();
-                    bc.append("7777777\n".getBytes(), 0, "7777777\n".length());
-                    res.doWrite(bc);
-                    res.flush();
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    try {
-                        super.afterService(req, res);
-                        return;
-                    } catch (Exception ex) {
-                        ex.printStackTrace();
-                    }
-                }
-            });
-
-            Socket s = new Socket("localhost", PORT);
-            s.setSoTimeout(500000);
-            OutputStream os = s.getOutputStream();
-
-            System.out.println(("GET / HTTP/1.1\n"));
-            os.write(("GET / HTTP/1.1\n").getBytes());
-            os.write(("Host: localhost:" + PORT + "\n").getBytes());
-            os.write("\n".getBytes());
-
-            try {
-                InputStream is = new DataInputStream(s.getInputStream());
-                BufferedReader br = new BufferedReader(new InputStreamReader(is));
-                String line = null;
-                while ((line = br.readLine()) != null) {
-                    System.out.println("-> " + line);
-                    if (line.contains(testString)) {
-                        assertTrue(true);
-                        return;
-                    }
-                }
-            } catch (IOException ex) {
-                ex.printStackTrace();
-                assertFalse(false);
-            }
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-    public void testCompleteNewBCResponseFilter() throws IOException {
-        System.out.println("Test: testCompleteNewBCResponseFilter");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) throws IOException {
-                    //res.flushHeaders();
-                    res.addResponseFilter(new ResponseFilter() {
-
-                        public void filter(ByteChunk bc) {
-                            bc.setBytes("AppendingNewBytes".getBytes(), 0,
-                                    "AppendingNewBytes".getBytes().length);
-                        }
-                    });
-                    ByteChunk bc = new ByteChunk();
-                    bc.append("7777777\n".getBytes(), 0, "7777777\n".length());
-                    res.doWrite(bc);
-                    res.flush();
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    try {
-                        super.afterService(req, res);
-                        return;
-                    } catch (Exception ex) {
-                        ex.printStackTrace();
-                    }
-                }
-            });
-
-            Socket s = new Socket("localhost", PORT);
-            s.setSoTimeout(500000);
-            OutputStream os = s.getOutputStream();
-
-            System.out.println(("GET / HTTP/1.1\n"));
-            os.write(("GET / HTTP/1.1\n").getBytes());
-            os.write(("Host: localhost:" + PORT + "\n").getBytes());
-            os.write("\n".getBytes());
-
-            try {
-                InputStream is = new DataInputStream(s.getInputStream());
-                BufferedReader br = new BufferedReader(new InputStreamReader(is));
-                String line = null;
-                while ((line = br.readLine()) != null) {
-                    System.out.println("-> " + line);
-                    if (line.contains("AppendingNewBytes")) {
-                        assertTrue(true);
-                        return;
-                    }
-                }
-            } catch (IOException ex) {
-                ex.printStackTrace();
-                assertFalse(false);
-            }
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-    public void testComplexByteChunkManipulation() throws IOException {
-        System.out.println("Test: testComplexByteChunkManipulation");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) throws IOException {
-                    //res.flushHeaders();
-                    res.addResponseFilter(new ResponseFilter() {
-
-                        public void filter(ByteChunk bc) {
-                            bc.recycle();
-                            bc.setBytes("AppendingNewBytes".getBytes(), 0,
-                                    "AppendingNewBytes".getBytes().length);
-                        }
-                    });
-                    ByteChunk bc = new ByteChunk();
-                    bc.append("7777777\n".getBytes(), 0, "7777777\n".length());
-                    res.doWrite(bc);
-                    res.flush();
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    try {
-                        super.afterService(req, res);
-                        return;
-                    } catch (Exception ex) {
-                        ex.printStackTrace();
-                    }
-                }
-            });
-
-            Socket s = new Socket("localhost", PORT);
-            s.setSoTimeout(500000);
-            OutputStream os = s.getOutputStream();
-
-            System.out.println(("GET / HTTP/1.1\n"));
-            os.write(("GET / HTTP/1.1\n").getBytes());
-            os.write(("Host: localhost:" + PORT + "\n").getBytes());
-            os.write("\n".getBytes());
-
-            try {
-                InputStream is = new DataInputStream(s.getInputStream());
-                BufferedReader br = new BufferedReader(new InputStreamReader(is));
-                String line = null;
-                System.out.println("READING LINES");
-                while ((line = br.readLine()) != null) {
-                    System.out.println("-> " + line);
-                    if (line.contains("AppendingNewBytes")) {
-                        assertTrue(true);
-                        return;
-                    }
-                }
-            } catch (IOException ex) {
-                ex.printStackTrace();
-                assertFalse(false);
-            }
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-}
diff --git a/modules/webcontainer/src/test/java/com/sun/grizzly/web/SuspendTest.java b/modules/webcontainer/src/test/java/com/sun/grizzly/web/SuspendTest.java
deleted file mode 100644
index 8e2fb2d..0000000
--- a/modules/webcontainer/src/test/java/com/sun/grizzly/web/SuspendTest.java
+++ /dev/null
@@ -1,1055 +0,0 @@
-/*
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
- * 
- * Copyright 2007-2008 Sun Microsystems, Inc. All rights reserved.
- * 
- * The contents of this file are subject to the terms of either the GNU
- * General Public License Version 2 only ("GPL") or the Common Development
- * and Distribution License("CDDL") (collectively, the "License").  You
- * may not use this file except in compliance with the License. You can obtain
- * a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
- * or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
- * language governing permissions and limitations under the License.
- * 
- * When distributing the software, include this License Header Notice in each
- * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
- * Sun designates this particular file as subject to the "Classpath" exception
- * as provided by Sun in the GPL Version 2 section of the License file that
- * accompanied this code.  If applicable, add the following below the License
- * Header, with the fields enclosed by brackets [] replaced by your own
- * identifying information: "Portions Copyrighted [year]
- * [name of copyright owner]"
- * 
- * Contributor(s):
- * 
- * If you wish your version of this file to be governed by only the CDDL or
- * only the GPL Version 2, indicate your decision by adding "[Contributor]
- * elects to include this software in this distribution under the [CDDL or GPL
- * Version 2] license."  If you don't indicate a single choice of license, a
- * recipient has the option to distribute your version of this file under
- * either the CDDL, the GPL Version 2 or to extend the choice of license to
- * its licensees as provided above.  However, if you add GPL Version 2 code
- * and therefore, elected the GPL Version 2 license, then the option applies
- * only if the new code is made subject to such option by the copyright
- * holder.
- *
- */
-package com.sun.grizzly.http;
-
-import java.io.DataInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.ProtocolException;
-import java.net.URL;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import junit.framework.TestCase;
-import com.sun.grizzly.TransportFactory;
-import com.sun.grizzly.filterchain.TransportFilter;
-import com.sun.grizzly.nio.transport.TCPNIOTransport;
-import com.sun.grizzly.tcp.Adapter;
-import com.sun.grizzly.tcp.CompletionHandler;
-import com.sun.grizzly.tcp.Request;
-import com.sun.grizzly.tcp.Response;
-import com.sun.grizzly.tcp.StaticResourcesAdapter;
-import com.sun.grizzly.tcp.http11.GrizzlyAdapter;
-import com.sun.grizzly.tcp.http11.GrizzlyRequest;
-import com.sun.grizzly.tcp.http11.GrizzlyResponse;
-
-/**
- * Units test that exercise the {@link Response#suspend}, {@link Response#resume}
- * and {@link Response.cancel} API.
- * 
- * @author Jeanfrancois Arcand
- */
-public class SuspendTest extends TestCase {
-
-    public static final int PORT = 18890;
-    private static Logger logger = Logger.getLogger("grizzly.test");
-    private WebFilter webFilter;
-    private TCPNIOTransport transport;
-
-    public void initTransport(Adapter adapter) {
-        transport = TransportFactory.getInstance().createTCPTransport();
-
-        WebFilterConfig webConfig = new WebFilterConfig();
-        webConfig.setAdapter(adapter);
-        webConfig.setDisplayConfiguration(true);
-
-        webFilter = new WebFilter("response-filter-test", webConfig);
-        webFilter.enableMonitoring();
-
-        transport.getFilterChain().add(new TransportFilter());
-        transport.getFilterChain().add(webFilter);
-        try {
-            webFilter.initialize();
-            transport.bind(PORT);
-            transport.start();
-        } catch (Exception ex) {
-            ex.printStackTrace();
-        }
-    }
-
-    public void stopTransport() throws IOException {
-        transport.stop();
-        TransportFactory.getInstance().close();
-    }
-
-    public void testSuspendDoubleCancelInvokation() throws IOException {
-        System.out.println("Test: testSuspendDoubleCancelInvokation");          
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        final CountDownLatch latch = new CountDownLatch(1);
-        final CountDownLatch latch2 = new CountDownLatch(1);
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) {
-                    try {
-                        if (res.isSuspended()) {
-                            super.service(req, res);
-                            return;
-                        }
-
-                        res.suspend(60 * 1000, this, new CompletionHandler<StaticResourcesAdapter>() {
-
-                            public void resumed(StaticResourcesAdapter attachment) {
-                                System.out.println("Not supposed to be here");
-
-                            }
-
-                            public void cancelled(StaticResourcesAdapter attachment) {
-                                try {
-                                    System.out.println("cancelled");
-                                } catch (Exception ex) {
-                                    ex.printStackTrace();
-                                } finally {
-                                    latch.countDown();
-                                }
-                            }
-                        });
-
-
-                        pe.schedule(new Runnable() {
-
-                            public void run() {
-                                try {
-                                    if (res.isSuspended()) {
-                                        res.cancel();
-                                    }
-                                } catch (Throwable ex) {
-                                    ex.printStackTrace();
-                                }
-                            }
-                        }, 2, TimeUnit.SECONDS);
-
-
-                        try {
-                            latch.await(5, TimeUnit.SECONDS);
-
-                            res.cancel();
-                        } catch (Throwable t) {
-                            t.printStackTrace();
-                            res.getStreamWriter().writeByteArray(testData);
-                            res.getStreamWriter().flush();
-                        }
-
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    if (res.isSuspended()) {
-                        try {
-                            super.afterService(req, res);
-                            return;
-                        } catch (Exception ex) {
-                            ex.printStackTrace();
-                        }
-                    }
-                }
-            });
-
-            String r = sendRequest(testData, testString, false);
-            System.out.println("Response: " + r);
-            assertEquals(testString, r);
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-    
-    public void testSuspendNoArgs() throws IOException {
-        System.out.println("Test: testSuspendNoArgs");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        final CountDownLatch latch = new CountDownLatch(1);
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) {
-                    res.suspend();
-
-                    pe.schedule(new Runnable() {
-
-                        public void run() {
-                            try {
-                                System.out.println("Resuming");
-                                if (res.isSuspended()) {
-                                    res.getStreamWriter().writeByteArray(testData);
-                                    res.getStreamWriter().flush();
-                                    res.resume();
-                                }
-                                latch.countDown();
-                            } catch (Throwable ex) {
-                                ex.printStackTrace();
-                            }
-                        }
-                    }, 2, TimeUnit.SECONDS);
-
-                    try {
-                        latch.await(5, TimeUnit.SECONDS);
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    } finally {
-
-                    }
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    if (res.isSuspended()) {
-                        try {
-                            super.afterService(req, res);
-                            return;
-                        } catch (Exception ex) {
-                            ex.printStackTrace();
-                        }
-                    }
-                }
-            });
-
-            sendRequest(testData, testString);
-
-
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-    public void testSuspendResumedCompletionHandler() throws IOException {
-        System.out.println("Test: testSuspendResumedCompletionHandler");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        final CountDownLatch latch = new CountDownLatch(1);
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) {
-                    try {
-                        if (res.isSuspended()) {
-                            super.service(req, res);
-                            return;
-                        }
-
-                        res.suspend(60 * 1000, this, new CompletionHandler<StaticResourcesAdapter>() {
-
-                            public void resumed(StaticResourcesAdapter attachment) {
-                                try {
-                                    System.out.println("Resuming");
-                                    if (res.isSuspended()) {
-                                        res.getStreamWriter().writeByteArray(testData);
-                                        res.getStreamWriter().flush();
-                                    }
-                                } catch (Exception ex) {
-                                    ex.printStackTrace();
-                                } finally {
-                                    latch.countDown();
-                                }
-                            }
-
-                            public void cancelled(StaticResourcesAdapter attachment) {
-                                System.out.println("Not supposed to be here");
-                            }
-                        });
-
-
-                        pe.schedule(new Runnable() {
-
-                            public void run() {
-                                try {
-                                    System.out.println("Resuming");
-                                    if (res.isSuspended()) {
-                                        res.resume();
-                                    }
-                                } catch (Throwable ex) {
-                                    ex.printStackTrace();
-                                }
-                            }
-                        }, 2, TimeUnit.SECONDS);
-
-
-                        try {
-                            latch.await(5, TimeUnit.SECONDS);
-                        } catch (Throwable t) {
-                            t.printStackTrace();
-                        } finally {
-
-                        }
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    if (res.isSuspended()) {
-                        try {
-                            super.afterService(req, res);
-                            return;
-                        } catch (Exception ex) {
-                            ex.printStackTrace();
-                        }
-                    }
-                }
-            });
-
-            sendRequest(testData, testString);
-
-
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-    public void testSuspendCancelledCompletionHandler() throws IOException {
-        System.out.println("Test: testSuspendCancelledCompletionHandler");        
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        final CountDownLatch latch = new CountDownLatch(1);
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) {
-                    try {
-                        if (res.isSuspended()) {
-                            super.service(req, res);
-                            return;
-                        }
-
-                        res.suspend(60 * 1000, this, new CompletionHandler<StaticResourcesAdapter>() {
-
-                            public void resumed(StaticResourcesAdapter attachment) {
-                                System.out.println("Not supposed to be here");
-
-                            }
-
-                            public void cancelled(StaticResourcesAdapter attachment) {
-                                try {
-                                    System.out.println("cancelled");
-                                    if (res.isSuspended()) {
-                                        res.getStreamWriter().writeByteArray(testData);
-                                        res.getStreamWriter().flush();
-                                    }
-                                } catch (Exception ex) {
-                                    ex.printStackTrace();
-                                } finally {
-                                    latch.countDown();
-                                }
-                            }
-                        });
-
-
-                        pe.schedule(new Runnable() {
-
-                            public void run() {
-                                try {
-                                    System.out.println("Cancelling");
-                                    if (res.isSuspended()) {
-                                        res.cancel();
-                                    }
-                                } catch (Throwable ex) {
-                                    ex.printStackTrace();
-                                }
-                            }
-                        }, 2, TimeUnit.SECONDS);
-
-
-                        try {
-                            latch.await(5, TimeUnit.SECONDS);
-                        } catch (Throwable t) {
-                            t.printStackTrace();
-                        } finally {
-
-                        }
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    if (res.isSuspended()) {
-                        try {
-                            super.afterService(req, res);
-                            return;
-                        } catch (Exception ex) {
-                            ex.printStackTrace();
-                        }
-                    }
-                }
-            });
-
-            sendRequest(testData, testString);
-
-
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-    public void testSuspendSuspendedExceptionCompletionHandler() throws IOException {
-        System.out.println("Test: testSuspendSuspendedExceptionCompletionHandler");         
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        final CountDownLatch latch = new CountDownLatch(1);
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) {
-                    try {
-                        if (res.isSuspended()) {
-                            super.service(req, res);
-                            return;
-                        }
-
-                        res.suspend(60 * 1000, this, new CompletionHandler<StaticResourcesAdapter>() {
-
-                            public void resumed(StaticResourcesAdapter attachment) {
-                                try {
-                                    System.out.println("Resuming");
-                                    res.getStreamWriter().writeByteArray(testData);
-                                    res.getStreamWriter().flush();
-                                    res.resume();
-                                } catch (Exception ex) {
-                                    ex.printStackTrace();
-                                } finally {
-                                    latch.countDown();
-                                }
-                            }
-
-                            public void cancelled(StaticResourcesAdapter attachment) {
-                                System.out.println("Not supposed to be here");
-                            }
-                        });
-
-
-                        pe.schedule(new Runnable() {
-
-                            public void run() {
-                                try {
-                                    System.out.println("Resuming");
-                                    if (res.isSuspended()) {
-                                        res.resume();
-                                    }
-                                } catch (Throwable ex) {
-                                    ex.printStackTrace();
-                                }
-                            }
-                        }, 2, TimeUnit.SECONDS);
-
-
-                        try {
-                            latch.await(5, TimeUnit.SECONDS);
-                        } catch (Throwable t) {
-                            t.printStackTrace();
-                        } finally {
-
-                        }
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    if (res.isSuspended()) {
-                        try {
-                            super.afterService(req, res);
-                            return;
-                        } catch (Exception ex) {
-                            ex.printStackTrace();
-                        }
-                    }
-                }
-            });
-
-            sendRequest(testData, testString);
-
-
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-    public void testSuspendTimeoutCompletionHandler() throws IOException {
-        System.out.println("Test: testSuspendTimeoutCompletionHandler");        
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        final CountDownLatch latch = new CountDownLatch(1);
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) {
-                    try {
-                        if (res.isSuspended()) {
-                            super.service(req, res);
-                            return;
-                        }
-
-
-                        res.suspend(5 * 1000, this, new CompletionHandler<StaticResourcesAdapter>() {
-
-                            public void resumed(StaticResourcesAdapter attachment) {
-                                System.out.println("Not supposed to be here");
-                            }
-
-                            public void cancelled(StaticResourcesAdapter attachment) {
-                                try {
-                                    System.out.println("Time out");
-                                    res.getStreamWriter().writeByteArray(testData);
-                                    res.getStreamWriter().flush();
-                                } catch (Exception ex) {
-                                    ex.printStackTrace();
-                                } finally {
-                                    latch.countDown();
-                                }
-                            }
-                        });
-
-                        try {
-                            latch.await(5, TimeUnit.SECONDS);
-                        } catch (Throwable t) {
-                            t.printStackTrace();
-                        } finally {
-                        }
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    if (res.isSuspended()) {
-                        try {
-                            super.afterService(req, res);
-                            return;
-                        } catch (Exception ex) {
-                            ex.printStackTrace();
-                        }
-                    }
-                }
-            });
-
-            sendRequest(testData, testString);
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-    public void testSuspendDoubleSuspendInvokation() throws IOException {
-        System.out.println("Test: testSuspendDoubleSuspendInvokation");         
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        final CountDownLatch latch = new CountDownLatch(1);
-        final CountDownLatch latch2 = new CountDownLatch(1);
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) {
-                    try {
-                        if (res.isSuspended()) {
-                            super.service(req, res);
-                            return;
-                        }
-
-                        res.suspend(60 * 1000, this, new CompletionHandler<StaticResourcesAdapter>() {
-
-                            public void resumed(StaticResourcesAdapter attachment) {
-                                try {
-                                    System.out.println("Suspended");
-                                } catch (Exception ex) {
-                                    ex.printStackTrace();
-                                } finally {
-                                    latch.countDown();
-                                }
-                            }
-
-                            public void cancelled(StaticResourcesAdapter attachment) {
-                                System.out.println("Not supposed to be here");
-                            }
-                        });
-
-
-                        pe.schedule(new Runnable() {
-
-                            public void run() {
-                                try {
-                                    if (!res.isSuspended()) {
-                                        res.suspend();
-                                    }
-                                } catch (Throwable ex) {
-                                    ex.printStackTrace();
-                                }
-                            }
-                        }, 2, TimeUnit.SECONDS);
-
-
-                        try {
-                            latch.await(5, TimeUnit.SECONDS);
-
-                            res.suspend();
-                        } catch (Throwable t) {
-                            t.printStackTrace();
-                            res.getStreamWriter().writeByteArray(testData);
-                            res.getStreamWriter().flush();
-                        }
-
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    if (res.isSuspended()) {
-                        try {
-                            super.afterService(req, res);
-                            return;
-                        } catch (Exception ex) {
-                            ex.printStackTrace();
-                        }
-                    }
-                }
-            });
-
-            String r = sendRequest(testData, testString, false);
-            assertEquals(testString, r);
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-    public void testSuspendDoubleResumeInvokation() throws IOException {
-        System.out.println("Test: testSuspendDoubleSuspendInvokation");        
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        final CountDownLatch latch = new CountDownLatch(1);
-        final CountDownLatch latch2 = new CountDownLatch(1);
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) {
-                    try {
-                        if (res.isSuspended()) {
-                            super.service(req, res);
-                            return;
-                        }
-
-                        res.suspend(60 * 1000, this, new CompletionHandler<StaticResourcesAdapter>() {
-
-                            public void resumed(StaticResourcesAdapter attachment) {
-                                try {
-                                    System.out.println("trying to resume");
-                                    res.resume();
-                                    System.out.println("Oups should have failed");
-                                } catch (Exception ex) {
-                                    ex.printStackTrace();
-                                    try {
-                                        res.getStreamWriter().writeByteArray(testData);
-                                        res.getStreamWriter().flush();
-                                    } catch (IOException ex2) {
-                                    }
-                                } finally {
-                                    latch.countDown();
-                                }
-                            }
-
-                            public void cancelled(StaticResourcesAdapter attachment) {
-                                System.out.println("Not supposed to be here");
-                            }
-                        });
-
-
-                        pe.schedule(new Runnable() {
-
-                            public void run() {
-                                try {
-                                    System.out.println("About to resume");
-                                    res.resume();
-                                    System.out.println("Done");
-                                } catch (Throwable ex) {
-                                    ex.printStackTrace();
-                                }
-                            }
-                        }, 2, TimeUnit.SECONDS);
-
-
-                        try {
-                            latch.await(5, TimeUnit.SECONDS);
-                        } catch (Throwable t) {
-                            t.printStackTrace();
-                        }
-
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    if (res.isSuspended()) {
-                        try {
-                            super.afterService(req, res);
-                            return;
-                        } catch (Exception ex) {
-                            ex.printStackTrace();
-                        }
-                    }
-                }
-            });
-
-            sendRequest(testData, testString, true);
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-    
-    public void testSuspendResumedCompletionHandlerGrizzlyAdapter() throws IOException {
-        System.out.println("Test: testSuspendResumedCompletionHandlerGrizzlyAdapter");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        final CountDownLatch latch = new CountDownLatch(1);
-        try {
-            initTransport(new GrizzlyAdapter() {
-
-                @Override
-                public void service(final GrizzlyRequest req, final GrizzlyResponse res) {
-                    try {
-
-                        res.suspend(60 * 1000, this, new CompletionHandler<GrizzlyAdapter>() {
-
-                            public void resumed(GrizzlyAdapter attachment) {
-                                try {
-                                    System.out.println("Resuming");
-                                    if (res.isSuspended()) {
-                                        res.getWriter().write(testString);
-                                    }
-                                } catch (Exception ex) {
-                                    ex.printStackTrace();
-                                } finally {
-                                    latch.countDown();
-                                }
-                            }
-
-                            public void cancelled(GrizzlyAdapter attachment) {
-                                System.out.println("Not supposed to be here");
-                            }
-                        });
-
-
-                        pe.schedule(new Runnable() {
-
-                            public void run() {
-                                try {
-                                    System.out.println("Now Resuming");
-                                    if (res.isSuspended()) {
-                                        res.resume();
-                                    }
-                                } catch (Throwable ex) {
-                                    ex.printStackTrace();
-                                }
-                            }
-                        }, 2, TimeUnit.SECONDS);
-
-
-                        try {
-                            latch.await(5, TimeUnit.SECONDS);
-                        } catch (Throwable t) {
-                            t.printStackTrace();
-                        } finally {
-
-                        }
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-            });
-
-            sendRequest(testData, testString);
-
-
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-    
-    
-    public void testSuspendTimeoutCompletionHandlerGrizzlyAdapter() throws IOException {
-        System.out.println("Test: testSuspendTimeoutCompletionHandlerGrizzlyAdapter");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        final CountDownLatch latch = new CountDownLatch(1);
-        try {
-            initTransport(new GrizzlyAdapter() {
-
-                @Override
-                public void service(final GrizzlyRequest req, final GrizzlyResponse res) {
-                    try {
-                        final long t1 = System.currentTimeMillis();
-                        res.suspend(10 * 1000, "foo", new CompletionHandler<String>() {
-
-                            public void cancelled(String attachment) {
-                                try {
-                                    System.out.println("TOOK: " + (System.currentTimeMillis() - t1));
-                                    System.out.println("Cancelling");
-                                    res.getWriter().write(testString);
-                                } catch (Exception ex) {
-                                    ex.printStackTrace();
-                                } finally {
-                                    latch.countDown();
-                                }
-                            }
-
-                            public void resumed(String attachment) {
-                                System.out.println("Not supposed to be here");
-                            }
-                        });
-
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-                }
-            });
-
-            sendRequest(testData, testString);
-
-
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-    
-    public void testFastSuspendResumeGrizzlyAdapter() throws IOException {
-        System.out.println("Test: testFastSuspendResumeGrizzlyAdapter");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        final CountDownLatch latch = new CountDownLatch(1);
-        try {
-            initTransport(new GrizzlyAdapter() {
-
-                @Override
-                public void service(final GrizzlyRequest req, final GrizzlyResponse res) {
-                    try {
-                        final long t1 = System.currentTimeMillis();
-                        res.suspend(5 * 1000, "foo", new CompletionHandler<String>() {
-
-                            public void resumed(String attachment) {
-                                try {
-                                    System.out.println("TOOK: " + (System.currentTimeMillis() - t1));
-                                    System.out.println("Resumed");
-                                    res.getWriter().write(testString);
-                                } catch (Exception ex) {
-                                    ex.printStackTrace();
-                                } finally {
-                                    latch.countDown();
-                                }
-                            }
-
-                            public void cancelled(String attachment) {
-                                System.out.println("Not supposed to be here");
-                            }
-                        });
-
-                    } catch (Throwable t) {
-                        t.printStackTrace();
-                    }
-
-                    new Thread() {
-
-                        @Override
-                        public void run() {
-                            try {
-
-                                Thread.sleep(1000);
-
-                            } catch (InterruptedException ex) {
-                                Logger.getLogger(SuspendTest.class.getName()).log(Level.SEVERE, null, ex);
-                            }
-
-                            if (!res.isCommitted()) {
-                                System.out.println("Resuming");
-                                res.resume();
-                            }
-                        }
-                    }.start();
-                }
-            });
-
-            sendRequest(testData, testString);
-
-
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-    public void testSuspendResumeNoArgs() throws IOException {
-        System.out.println("Test: testSuspendNoArgs");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) throws IOException {
-                    res.suspend();
-                    res.getStreamWriter().writeByteArray(testData);
-                    res.getStreamWriter().flush();
-                    res.resume();
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    if (res.isSuspended()) {
-                        try {
-                            super.afterService(req, res);
-                            return;
-                        } catch (Exception ex) {
-                            ex.printStackTrace();
-                        }
-                    }
-                }
-            });
-
-            sendRequest(testData, testString);
-
-
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-    
-     public void testSuspendResumeOneTransaction() throws IOException {
-        System.out.println("Test: testSuspendResumeOneTransaction");
-        final ScheduledThreadPoolExecutor pe = new ScheduledThreadPoolExecutor(1);
-        final String testString = "Resuming the response";
-        final byte[] testData = testString.getBytes();
-        try {
-            initTransport(new StaticResourcesAdapter() {
-
-                @Override
-                public void service(final Request req, final Response res) throws IOException {
-                    res.suspend();
-                    res.getStreamWriter().writeByteArray(testData);
-                    res.getStreamWriter().flush();
-                    res.resume();
-                }
-
-                @Override
-                public void afterService(final Request req, final Response res) {
-                    if (res.isSuspended()) {
-                        try {
-                            super.afterService(req, res);
-                            return;
-                        } catch (Exception ex) {
-                            ex.printStackTrace();
-                        }
-                    }
-                }
-            });
-
-            sendRequest(testData, testString);
-
-
-        } finally {
-            stopTransport();
-            pe.shutdown();
-        }
-    }
-
-    
-    private String sendRequest(byte[] testData, String testString)
-            throws MalformedURLException, ProtocolException, IOException {
-
-        return sendRequest(testData, testString, true);
-    }
-
-    private String sendRequest(byte[] testData, String testString, boolean assertTrue)
-            throws MalformedURLException, ProtocolException, IOException {
-        byte[] response = new byte[testData.length];
-
-        URL url = new URL("http://localhost:" + PORT);
-        HttpURLConnection connection =
-                (HttpURLConnection) url.openConnection();
-        connection.setRequestMethod("POST");
-        connection.setDoOutput(true);
-        OutputStream os = connection.getOutputStream();
-        os.write("Hello".getBytes());
-        os.flush();
-
-        InputStream is = new DataInputStream(connection.getInputStream());
-        response = new byte[testData.length];
-        is.read(response);
-
-
-        String r = new String(response);
-        if (assertTrue) {
-            System.out.println("Response: " + r);
-            assertEquals(testString, r);
-        }
-        connection.disconnect();
-        return r;
-    }
-}
diff --git a/modules/webcontainer/src/test/java/com/sun/grizzly/web/WebFilterStatsTest.java b/modules/webcontainer/src/test/java/com/sun/grizzly/web/WebFilterStatsTest.java
deleted file mode 100644
index 19ac540..0000000
--- a/modules/webcontainer/src/test/java/com/sun/grizzly/web/WebFilterStatsTest.java
+++ /dev/null
@@ -1,240 +0,0 @@
-/*
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
- * 
- * Copyright 2007-2008 Sun Microsystems, Inc. All rights reserved.
- * 
- * The contents of this file are subject to the terms of either the GNU
- * General Public License Version 2 only ("GPL") or the Common Development
- * and Distribution License("CDDL") (collectively, the "License").  You
- * may not use this file except in compliance with the License. You can obtain
- * a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
- * or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
- * language governing permissions and limitations under the License.
- * 
- * When distributing the software, include this License Header Notice in each
- * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
- * Sun designates this particular file as subject to the "Classpath" exception
- * as provided by Sun in the GPL Version 2 section of the License file that
- * accompanied this code.  If applicable, add the following below the License
- * Header, with the fields enclosed by brackets [] replaced by your own
- * identifying information: "Portions Copyrighted [year]
- * [name of copyright owner]"
- * 
- * Contributor(s):
- * 
- * If you wish your version of this file to be governed by only the CDDL or
- * only the GPL Version 2, indicate your decision by adding "[Contributor]
- * elects to include this software in this distribution under the [CDDL or GPL
- * Version 2] license."  If you don't indicate a single choice of license, a
- * recipient has the option to distribute your version of this file under
- * either the CDDL, the GPL Version 2 or to extend the choice of license to
- * its licensees as provided above.  However, if you add GPL Version 2 code
- * and therefore, elected the GPL Version 2 license, then the option applies
- * only if the new code is made subject to such option by the copyright
- * holder.
- *
- */
-package com.sun.grizzly.http;
-
-import java.io.BufferedReader;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.net.HttpURLConnection;
-import java.net.Socket;
-import java.net.URL;
-import java.util.logging.Logger;
-import junit.framework.TestCase;
-import com.sun.grizzly.TransportFactory;
-import com.sun.grizzly.filterchain.TransportFilter;
-import com.sun.grizzly.nio.transport.TCPNIOTransport;
-import com.sun.grizzly.threadpool.ExtendedThreadPool;
-import com.sun.grizzly.tcp.Adapter;
-import com.sun.grizzly.tcp.OutputBuffer;
-import com.sun.grizzly.tcp.Request;
-import com.sun.grizzly.tcp.Response;
-import com.sun.grizzly.util.buf.ByteChunk;
-
-/**
- *
- * @author Peter Speck
- * @author Jeanfrancois Arcand
- */
-public class WebFilterStatsTest extends TestCase {
-
-    public static final int PORT = 18890;
-    private static Logger logger = Logger.getLogger("grizzly.test");
-
-    private TCPNIOTransport transport;
-    private WebFilter webFilter;
-
-    public void initTransport() {
-        transport = TransportFactory.getInstance().createTCPTransport();
-        ((ExtendedThreadPool) transport.getWorkerThreadPool()).setMaximumPoolSize(50);
-
-        WebFilterConfig webConfig = new WebFilterConfig();
-        webConfig.setAdapter(new MyAdapter());
-        webConfig.setCompression("off"); // don't let proxy compress stuff that's already compressed.
-        webConfig.setDisplayConfiguration(true);
-
-        FileCache fileCache = new FileCache(webConfig);
-        fileCache.setLargeFileCacheEnabled(false);
-        webConfig.setFileCache(fileCache);
-
-        webConfig.setBufferResponse(false);
-        webConfig.setKeepAliveTimeoutInSeconds(30000);
-
-
-        webConfig.setRequestBufferSize(32768);
-        webConfig.setMaxKeepAliveRequests(8196);
-
-        webFilter = new WebFilter("stats-test", webConfig);
-        
-        webFilter.enableMonitoring();
-        
-        //st.setKeepAliveThreadCount(500);
-
-        transport.getFilterChain().add(new TransportFilter());
-        transport.getFilterChain().add(webFilter);
-        try {
-            webFilter.initialize();
-            transport.bind(PORT);
-            transport.start();
-        } catch (Exception ex) {
-            ex.printStackTrace();
-        }
-    }
-
-    public void stopTransport() throws IOException {
-        transport.stop();
-        TransportFactory.getInstance().close();
-    }
-
-    public void testKeepAliveConnection() throws IOException {
-        try {
-            initTransport();
-            String testString = "KAS:  conns=1, flushes=0, hits=1, refusals=0, timeouts=0";
-
-            byte[] testData = testString.getBytes();
-            byte[] response = new byte[testData.length];
-
-            URL url = new URL("http://localhost:" + PORT);
-            HttpURLConnection connection =
-                    (HttpURLConnection) url.openConnection();
-            connection.setRequestMethod("POST");
-            connection.setDoOutput(true);
-            OutputStream os = connection.getOutputStream();
-            os.write(testString.getBytes());
-            os.flush();
-            InputStream is = new DataInputStream(connection.getInputStream());
-            response = new byte[testData.length];
-            is.read(response);
-            System.out.println("Response: " + new String(response));
-            assertEquals(testString, new String(response));
-            connection.disconnect();
-        } finally {
-            stopTransport();
-        }
-    }
-
-    public void testGetHits() throws IOException {
-
-        try {
-            initTransport();
-            String testString = "KAS:  conns=1, flushes=0, hits=2, refusals=0, timeouts=0";
-
-            byte[] testData = testString.getBytes();
-            String response = "";
-
-            
-            Socket socket = new Socket("localhost", PORT);
-            socket.setSoTimeout(30 * 1000);
-            DataOutputStream os = new DataOutputStream(socket.getOutputStream());
-
-            os.write("POST / HTTP/1.1\r\n".getBytes());
-            os.write("Content-type: text/plain\r\n".getBytes());
-            os.write("Host: localhost\r\n".getBytes());
-            os.write(("Content-Length: " + testData.length +"\r\n\r\n").getBytes());
-            os.write(testData);
-            os.flush();
-
-            InputStream is = socket.getInputStream();
-            BufferedReader bis = new BufferedReader(new InputStreamReader(is));
-            String line = null;
-
-            boolean flip = true;
-            boolean first = true;
-            while ((line = bis.readLine()) != null) {
-                System.out.println("-> " + line);
-                if (line.startsWith("HTTP/1.1 200") && flip){
-                    System.out.println("Post second request");
-                    os.write("POST / HTTP/1.1\r\n".getBytes());
-                    os.write("Content-type: text/plain\r\n".getBytes());
-                    os.write("Host: localhost\r\n".getBytes());
-                    os.write(("Content-Length: " + testData.length +"\r\n\r\n").getBytes());
-                    os.write(testData);
-                    os.flush();        
-                    flip = false;
-                } else if (line.startsWith("KAS: ")){
-                    if (first) {
-                        first = false;
-                        continue;
-                    } else {
-                        response = line;
-                        break;
-                    }         
-                }
-            }  
-
-            System.out.println("Response: " + response);
-             
-            assertEquals(testString, response);
-        } finally {
-            stopTransport();
-        }
-    }
-
-    class MyAdapter implements Adapter {
-        // Just in case this code is cut&pasted
-        public synchronized void service(Request request, Response response) throws Exception {
-            
-            System.out.println("Request: " + request);
-            
-            KeepAliveStats kas = webFilter.getKeepAliveStats();
-            String s;
-            if (kas == null) {
-                s = "KAS: missing\n";
-            } else {
-                s = "KAS:  conns=" + kas.getCountConnections() + ", flushes="
-                        + kas.getCountFlushes() + ", hits=" + kas.getCountHits()
-                        + ", refusals=" + kas.getCountRefusals() + ", timeouts=" 
-                        + kas.getCountTimeouts() + "\n";
-            }
-            System.out.println("----->" + s);
-            byte[] b = s.getBytes("iso-8859-1");
-            sendPlainText(response, b);
-        }
-
-        private void sendPlainText(Response response, byte[] b) throws IOException {
-            response.setContentType("text/plain");
-            response.setContentLength(b.length);
-            ByteChunk chunk = new ByteChunk();
-            chunk.append(b, 0, b.length);
-            OutputBuffer buffer = response.getOutputBuffer();
-            buffer.doWrite(chunk, response);
-            response.finish();
-        }
-
-        public void afterService(Request request, Response response) throws Exception {
-            request.recycle();
-            response.recycle();
-        }
-
-        public void fireAdapterEvent(String string, Object object) {
-        }
-    }
-}

