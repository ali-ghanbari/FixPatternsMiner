diff --git a/modules/grizzly/src/main/java/org/glassfish/grizzly/nio/AbstractNIOAsyncQueueWriter.java b/modules/grizzly/src/main/java/org/glassfish/grizzly/nio/AbstractNIOAsyncQueueWriter.java
index 9d481a5..a7ec208 100644
--- a/modules/grizzly/src/main/java/org/glassfish/grizzly/nio/AbstractNIOAsyncQueueWriter.java
+++ b/modules/grizzly/src/main/java/org/glassfish/grizzly/nio/AbstractNIOAsyncQueueWriter.java
@@ -293 +293 @@
-            if (reentrants.incAndGet() >= maxWriteReentrants) {
+            if (reentrants.incAndGet() > maxWriteReentrants) {
diff --git a/modules/grizzly/src/test/java/org/glassfish/grizzly/AsyncWriteQueueTest.java b/modules/grizzly/src/test/java/org/glassfish/grizzly/AsyncWriteQueueTest.java
index f862931..d20122c 100644
--- a/modules/grizzly/src/test/java/org/glassfish/grizzly/AsyncWriteQueueTest.java
+++ b/modules/grizzly/src/test/java/org/glassfish/grizzly/AsyncWriteQueueTest.java
@@ -510 +510 @@
-            Buffer buffer = Buffers.wrap(mm, "" + ((char) ('A' + packetCounter.getAndIncrement())));
+            Buffer buffer = Buffers.EMPTY_BUFFER;
@@ -536 +536 @@
-            assertTrue(resultFuture.get(10, TimeUnit.SECONDS));
+            assertTrue(resultFuture.get(1000, TimeUnit.SECONDS));
diff --git a/modules/http-server/src/test/java/org/glassfish/grizzly/http/server/NIOOutputSinksTest.java b/modules/http-server/src/test/java/org/glassfish/grizzly/http/server/NIOOutputSinksTest.java
index a3ed68c..03fe8c5 100644
--- a/modules/http-server/src/test/java/org/glassfish/grizzly/http/server/NIOOutputSinksTest.java
+++ b/modules/http-server/src/test/java/org/glassfish/grizzly/http/server/NIOOutputSinksTest.java
@@ -692 +692 @@
-        final Queue<Thread> threadsHistory = new ConcurrentLinkedQueue<Thread>();
+        final Queue<Integer> reentrantsHistory = new ConcurrentLinkedQueue<Integer>();
@@ -698,0 +699,7 @@
+            final ThreadLocal<Integer> reentrantsCounter = new ThreadLocal<Integer>() {
+
+                @Override
+                protected Integer initialValue() {
+                    return 0;
+                }
+            };
@@ -711 +718,4 @@
-                            threadsHistory.offer(Thread.currentThread());
+                            final Integer reentrantNum = reentrantsCounter.get();
+                            reentrantsHistory.offer(reentrantNum);
+                            reentrantsCounter.set(reentrantNum + 1);
+                            
@@ -744,7 +754,5 @@
-                Thread t = null;
-                for (int i = 0; i < maxAllowedReentrants; i++) {
-                    if (t == null) {
-                        t = threadsHistory.poll();
-                    } else {
-                        assertEquals("(Unexpected): Different threads were used", threadsHistory.poll(), t);
-                    }
+                int expectedCounter = 0;
+                
+                for (int i = 0; i < maxAllowedReentrants; i++, expectedCounter++) {
+                    assertEquals("(Unexpected): Reentrant counter mismatch",
+                            (Integer) expectedCounter, reentrantsHistory.poll());
@@ -753,2 +761 @@
-                assertNotNull(t);
-                assertNotSame("The last thread has to be different", t, threadsHistory.poll());
+                assertEquals("The last thread has to have 0 counter", (Integer) 0, reentrantsHistory.poll());

