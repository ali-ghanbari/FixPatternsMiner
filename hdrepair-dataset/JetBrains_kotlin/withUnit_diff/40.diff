diff --git a/compiler/frontend/src/org/jetbrains/jet/lang/diagnostics/Errors.java b/compiler/frontend/src/org/jetbrains/jet/lang/diagnostics/Errors.java
index 4f4cfb1..ede2158 100644
--- a/compiler/frontend/src/org/jetbrains/jet/lang/diagnostics/Errors.java
+++ b/compiler/frontend/src/org/jetbrains/jet/lang/diagnostics/Errors.java
@@ -145 +145 @@
-    PsiElementOnlyDiagnosticFactory1<JetSimpleNameExpression, DeclarationDescriptor> UNINITIALIZED_VARIABLE = PsiElementOnlyDiagnosticFactory1.create(ERROR, "Variable ''{0}'' must be uninitialized", NAME);
+    PsiElementOnlyDiagnosticFactory1<JetSimpleNameExpression, DeclarationDescriptor> UNINITIALIZED_VARIABLE = PsiElementOnlyDiagnosticFactory1.create(ERROR, "Variable ''{0}'' must be initialized", NAME);
diff --git a/compiler/testData/checker/regression/AssignmentsUnderOperators.jet b/compiler/testData/checker/regression/AssignmentsUnderOperators.jet
index 5a7c24b..2acdbfd 100644
--- a/compiler/testData/checker/regression/AssignmentsUnderOperators.jet
+++ b/compiler/testData/checker/regression/AssignmentsUnderOperators.jet
@@ -2 +2 @@
-  val a : Any? = null
+  var a : Any? = null
diff --git a/compiler/testData/checkerWithErrorTypes/full/regression/AssignmentsUnderOperators.jet b/compiler/testData/checkerWithErrorTypes/full/regression/AssignmentsUnderOperators.jet
index 5a7c24b..2acdbfd 100644
--- a/compiler/testData/checkerWithErrorTypes/full/regression/AssignmentsUnderOperators.jet
+++ b/compiler/testData/checkerWithErrorTypes/full/regression/AssignmentsUnderOperators.jet
@@ -2 +2 @@
-  val a : Any? = null
+  var a : Any? = null
diff --git a/compiler/tests/org/jetbrains/jet/cfg/JetControlFlowTest.java b/compiler/tests/org/jetbrains/jet/cfg/JetControlFlowTest.java
index 4fa45ef..5d82577 100644
--- a/compiler/tests/org/jetbrains/jet/cfg/JetControlFlowTest.java
+++ b/compiler/tests/org/jetbrains/jet/cfg/JetControlFlowTest.java
@@ -110,5 +110,9 @@
-                for (Instruction nextInstruction : instruction.getNextInstructions()) {
-                    assertTrue("instruction: " + instruction + " next: " + nextInstruction, nextInstruction.getPreviousInstructions().contains(instruction));
-                }
-                for (Instruction prevInstruction : instruction.getPreviousInstructions()) {
-                    assertTrue("instruction: " + instruction + " prev: " + prevInstruction, prevInstruction.getNextInstructions().contains(instruction));
+                if (!((InstructionImpl) instruction).isDead()) {
+                    for (Instruction nextInstruction : instruction.getNextInstructions()) {
+                        assertTrue("instruction '" + instruction + "' has '" + nextInstruction + "' among next instructions list, but not vice versa",
+                                   nextInstruction.getPreviousInstructions().contains(instruction));
+                    }
+                    for (Instruction prevInstruction : instruction.getPreviousInstructions()) {
+                        assertTrue("instruction '" + instruction + "' has '" + prevInstruction + "' among previous instructions list, but not vice versa",
+                                   prevInstruction.getNextInstructions().contains(instruction));
+                    }

