diff --git a/idea/src/org/jetbrains/kotlin/idea/KotlinQuickDocumentationProvider.kt b/idea/src/org/jetbrains/kotlin/idea/KotlinQuickDocumentationProvider.kt
index d026f0f..1b03631 100644
--- a/idea/src/org/jetbrains/kotlin/idea/KotlinQuickDocumentationProvider.kt
+++ b/idea/src/org/jetbrains/kotlin/idea/KotlinQuickDocumentationProvider.kt
@@ -24,0 +25 @@
+import org.jetbrains.kotlin.asJava.KotlinLightElement
@@ -36 +36,0 @@
-import org.jetbrains.kotlin.psi.JetPsiUtil
@@ -53 +53 @@
-    override fun generateDoc(element: PsiElement, originalElement: PsiElement): String? {
+    override fun generateDoc(element: PsiElement, originalElement: PsiElement?): String? {
@@ -94 +94 @@
-        private fun getText(element: PsiElement, originalElement: PsiElement, quickNavigation: Boolean): String? {
+        private fun getText(element: PsiElement, originalElement: PsiElement?, quickNavigation: Boolean): String? {
@@ -98,3 +98,2 @@
-            else if (element is KotlinLightMethod) {
-                val origin = element.getOrigin()
-                if (origin == null) return null
+            else if (element is KotlinLightElement<*, *>) {
+                val origin = element.getOrigin() ?: return null
@@ -105 +104 @@
-                val referenceExpression = originalElement.getNonStrictParentOfType<JetReferenceExpression>()
+                val referenceExpression = originalElement?.getNonStrictParentOfType<JetReferenceExpression>()
@@ -142 +141 @@
-        private fun mixKotlinToJava(declarationDescriptor: DeclarationDescriptor, element: PsiElement, originalElement: PsiElement): String? {
+        private fun mixKotlinToJava(declarationDescriptor: DeclarationDescriptor, element: PsiElement, originalElement: PsiElement?): String? {
diff --git a/idea/testData/editor/quickDoc/KotlinClassUsedFromJava.java b/idea/testData/editor/quickDoc/KotlinClassUsedFromJava.java
index 3b24eae..0316a3c 100644
--- a/idea/testData/editor/quickDoc/KotlinClassUsedFromJava.java
+++ b/idea/testData/editor/quickDoc/KotlinClassUsedFromJava.java
@@ -9 +9,2 @@
-//INFO: [light_idea_test_case] testing...
\ No newline at end of file
+//INFO: <b>internal</b> <b>final</b> <b>class</b> Test <i>defined in</i> testing<br/><p>Some comment
+//INFO: </p>
diff --git a/idea/testData/kdoc/inTypeHierarchy/simple.kt b/idea/testData/kdoc/inTypeHierarchy/simple.kt
new file mode 100644
index 0000000..2943ec8
--- /dev/null
+++ b/idea/testData/kdoc/inTypeHierarchy/simple.kt
@@ -0,0 +1,8 @@
+package a.b.c
+
+/**
+ * Very special class
+ */
+class <caret>A {
+
+}
\ No newline at end of file
diff --git a/idea/tests/org/jetbrains/kotlin/idea/editor/quickDoc/QuickDocInHierarchyTest.kt b/idea/tests/org/jetbrains/kotlin/idea/editor/quickDoc/QuickDocInHierarchyTest.kt
new file mode 100644
index 0000000..a41fdd0
--- /dev/null
+++ b/idea/tests/org/jetbrains/kotlin/idea/editor/quickDoc/QuickDocInHierarchyTest.kt
@@ -0,0 +1,57 @@
+/*
+ * Copyright 2010-2015 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.jetbrains.kotlin.idea.editor.quickDoc
+
+import com.intellij.codeInsight.CodeInsightTestCase
+import com.intellij.ide.hierarchy.HierarchyBrowserBaseEx
+import com.intellij.ide.hierarchy.LanguageTypeHierarchy
+import com.intellij.ide.hierarchy.type.TypeHierarchyNodeDescriptor
+import com.intellij.ide.hierarchy.type.TypeHierarchyTreeStructure
+import com.intellij.openapi.actionSystem.CommonDataKeys
+import com.intellij.openapi.editor.Editor
+import com.intellij.openapi.project.Project
+import com.intellij.psi.PsiClass
+import com.intellij.psi.PsiElement
+import com.intellij.testFramework.MapDataContext
+import junit.framework.TestCase
+import org.jetbrains.kotlin.idea.JetLanguage
+import org.jetbrains.kotlin.idea.KotlinQuickDocumentationProvider
+import org.jetbrains.kotlin.idea.test.PluginTestCaseBase
+
+public class QuickDocInHierarchyTest() : CodeInsightTestCase() {
+    override fun getTestDataPath(): String {
+        return PluginTestCaseBase.getTestDataPathBase() + "/kdoc/inTypeHierarchy/"
+    }
+
+    public fun testSimple() {
+        configureByFile(getTestName(true) + ".kt")
+
+        val context = MapDataContext()
+        context.put<Project>(CommonDataKeys.PROJECT, getProject())
+        context.put<Editor>(CommonDataKeys.EDITOR, getEditor())
+
+        val hierarchyTreeStructure = TypeHierarchyTreeStructure(
+                getProject(),
+                LanguageTypeHierarchy.INSTANCE.forLanguage(JetLanguage.INSTANCE).getTarget(context) as PsiClass?,
+                HierarchyBrowserBaseEx.SCOPE_PROJECT
+        )
+        val hierarchyNodeDescriptor = hierarchyTreeStructure.getBaseDescriptor() as TypeHierarchyNodeDescriptor
+        val doc = KotlinQuickDocumentationProvider().generateDoc(hierarchyNodeDescriptor.getPsiClass() as PsiElement, null)!!
+
+        TestCase.assertTrue("Invalid doc\n: $doc", doc.contains("Very special class"))
+    }
+}
\ No newline at end of file

