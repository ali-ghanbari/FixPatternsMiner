diff --git a/compiler/testData/cfg/controlStructures/whenConditions.values b/compiler/testData/cfg/controlStructures/whenConditions.values
index 9dc6720..6673e68 100644
--- a/compiler/testData/cfg/controlStructures/whenConditions.values
+++ b/compiler/testData/cfg/controlStructures/whenConditions.values
@@ -13,21 +13,21 @@
-                                                                                                                                                     <v0>: {<: Number}                                       NEW: magic[FAKE_INITIALIZER](a: Number) -> <v0>                                                                                                                                                               
-a                                                                                                                                                    <v1>: *                                                 NEW: r(a) -> <v1>                                                                                                                                                                                             
-1                                                                                                                                                    <v2>: *                                                 NEW: r(1) -> <v2>                                                                                                                                                                                             
-1                                                                                                                                                    <v3>: *                                                 NEW: magic[EQUALS_IN_WHEN_CONDITION](1|<v1>, <v2>) -> <v3>                                                                                                                                                    
-"1"                                                                                                                                                  <v4>: {<: String?}                                      NEW: r("1") -> <v4>                                                                                                                                                                                           
-2                                                                                                                                                    <v5>: {<: Int?}                                         NEW: r(2) -> <v5>                                                                                                                                                                                             
-singleton(2)                                                                                                                                         <v6>: OR{{<: Collection<Int>}, {<: Collection<Int>}}    NEW: call(singleton(2), singleton|<v5>) -> <v6>                                                                                                                                                               
-Collections.singleton(2)                                                                                                                             <v6>: OR{{<: Collection<Int>}, {<: Collection<Int>}}    COPY                                                                                                                                                                                                          
-in Collections.singleton(2)                                                                                                                          <v7>: *                                                 NEW: call(in Collections.singleton(2), contains|<v6>, <v1>) -> <v7>                                                                                                                                           
-"2"                                                                                                                                                  <v8>: {<: String?}                                      NEW: r("2") -> <v8>                                                                                                                                                                                           
-is Int                                                                                                                                               <v9>: *                                                 NEW: magic[IS](is Int|<v1>) -> <v9>                                                                                                                                                                           
-"Int"                                                                                                                                                <v10>: {<: String?}                                     NEW: r("Int") -> <v10>                                                                                                                                                                                        
-3                                                                                                                                                    <v11>: {<: Int?}                                        NEW: r(3) -> <v11>                                                                                                                                                                                            
-singleton(3)                                                                                                                                         <v12>: OR{{<: Collection<Int>}, {<: Collection<Int>}}   NEW: call(singleton(3), singleton|<v11>) -> <v12>                                                                                                                                                             
-Collections.singleton(3)                                                                                                                             <v12>: OR{{<: Collection<Int>}, {<: Collection<Int>}}   COPY                                                                                                                                                                                                          
-!in Collections.singleton(3)                                                                                                                         <v13>: *                                                NEW: call(!in Collections.singleton(3), contains|<v12>, <v1>) -> <v13>                                                                                                                                        
-"!3"                                                                                                                                                 <v14>: {<: String?}                                     NEW: r("!3") -> <v14>                                                                                                                                                                                         
-!is Number                                                                                                                                           <v15>: *                                                NEW: magic[IS](!is Number|<v1>) -> <v15>                                                                                                                                                                      
-"!Number"                                                                                                                                            <v16>: {<: String?}                                     NEW: r("!Number") -> <v16>                                                                                                                                                                                    
-null                                                                                                                                                 <v17>: {<: String?}                                     NEW: r(null) -> <v17>                                                                                                                                                                                         
-when (a) { 1 -> "1" in Collections.singleton(2) -> "2" is Int -> "Int" !in Collections.singleton(3) -> "!3" !is Number -> "!Number" else -> null }   <v18>: {<: String?}                                     NEW: merge(when (a) { 1 -> "1" in Collections.singleton(2) -> "2" is Int -> "Int" !in Collections.singleton(3) -> "!3" !is Number -> "!Number" else -> null }|<v4>, <v8>, <v10>, <v14>, <v16>, <v17>) -> <v18>
+                                                                                                                                                     <v0>: {<: Number}                                         NEW: magic[FAKE_INITIALIZER](a: Number) -> <v0>
+a                                                                                                                                                    <v1>: *                                                   NEW: r(a) -> <v1>
+1                                                                                                                                                    <v2>: *                                                   NEW: r(1) -> <v2>
+1                                                                                                                                                    <v3>: *                                                   NEW: magic[EQUALS_IN_WHEN_CONDITION](1|<v1>, <v2>) -> <v3>
+"1"                                                                                                                                                  <v4>: {<: String?}                                        NEW: r("1") -> <v4>
+2                                                                                                                                                    <v5>: Int!                                                NEW: r(2) -> <v5>
+singleton(2)                                                                                                                                         <v6>: OR{{<: Collection<Int!>}, {<: Collection<Int!>}}    NEW: call(singleton(2), singleton|<v5>) -> <v6>
+Collections.singleton(2)                                                                                                                             <v6>: OR{{<: Collection<Int!>}, {<: Collection<Int!>}}    COPY
+in Collections.singleton(2)                                                                                                                          <v7>: *                                                   NEW: call(in Collections.singleton(2), contains|<v6>, <v1>) -> <v7>
+"2"                                                                                                                                                  <v8>: {<: String?}                                        NEW: r("2") -> <v8>
+is Int                                                                                                                                               <v9>: *                                                   NEW: magic[IS](is Int|<v1>) -> <v9>
+"Int"                                                                                                                                                <v10>: {<: String?}                                       NEW: r("Int") -> <v10>
+3                                                                                                                                                    <v11>: Int!                                               NEW: r(3) -> <v11>
+singleton(3)                                                                                                                                         <v12>: OR{{<: Collection<Int!>}, {<: Collection<Int!>}}   NEW: call(singleton(3), singleton|<v11>) -> <v12>
+Collections.singleton(3)                                                                                                                             <v12>: OR{{<: Collection<Int!>}, {<: Collection<Int!>}}   COPY
+!in Collections.singleton(3)                                                                                                                         <v13>: *                                                  NEW: call(!in Collections.singleton(3), contains|<v12>, <v1>) -> <v13>
+"!3"                                                                                                                                                 <v14>: {<: String?}                                       NEW: r("!3") -> <v14>
+!is Number                                                                                                                                           <v15>: *                                                  NEW: magic[IS](!is Number|<v1>) -> <v15>
+"!Number"                                                                                                                                            <v16>: {<: String?}                                       NEW: r("!Number") -> <v16>
+null                                                                                                                                                 <v17>: {<: String?}                                       NEW: r(null) -> <v17>
+when (a) { 1 -> "1" in Collections.singleton(2) -> "2" is Int -> "Int" !in Collections.singleton(3) -> "!3" !is Number -> "!Number" else -> null }   <v18>: {<: String?}                                       NEW: merge(when (a) { 1 -> "1" in Collections.singleton(2) -> "2" is Int -> "Int" !in Collections.singleton(3) -> "!3" !is Number -> "!Number" else -> null }|<v4>, <v8>, <v10>, <v14>, <v16>, <v17>) -> <v18>
diff --git a/compiler/testData/diagnostics/tests/Builders.kt b/compiler/testData/diagnostics/tests/Builders.kt
index 78127c0..d2a0fa7 100644
--- a/compiler/testData/diagnostics/tests/Builders.kt
+++ b/compiler/testData/diagnostics/tests/Builders.kt
@@ -138 +138 @@
-           attributes.put("href", <!DEBUG_INFO_SMARTCAST!>value<!>)
+           attributes.put("href", value)
diff --git a/compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/phantomClashWithSamAdapter.kt b/compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/phantomClashWithSamAdapter.kt
index 18fc072..b47b41b 100644
--- a/compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/phantomClashWithSamAdapter.kt
+++ b/compiler/testData/diagnostics/tests/duplicateJvmSignature/accidentalOverrides/phantomClashWithSamAdapter.kt
@@ -26 +26,2 @@
-    fun foo(f: () -> Unit) {}
+    // We keep this test to make sure ACCIDENTAL_OVERRIDE is not reported
+    <!VIRTUAL_MEMBER_HIDDEN!>fun <!CANNOT_WEAKEN_ACCESS_PRIVILEGE!>foo<!>(f: () -> Unit)<!> {}
diff --git a/compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-UserTypes.kt b/compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-UserTypes.kt
index 302ed52..cc28efd 100644
--- a/compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-UserTypes.kt
+++ b/compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-UserTypes.kt
@@ -18 +18 @@
-    Y().foo()<!UNSAFE_CALL!>.<!>hashCode()
+    Y().foo().hashCode()
diff --git a/compiler/testData/diagnostics/tests/jdk-annotations/sql/DriverManager.kt b/compiler/testData/diagnostics/tests/jdk-annotations/sql/DriverManager.kt
index 8a4c17c..f6caf2a 100644
--- a/compiler/testData/diagnostics/tests/jdk-annotations/sql/DriverManager.kt
+++ b/compiler/testData/diagnostics/tests/jdk-annotations/sql/DriverManager.kt
@@ -4 +4 @@
-  DriverManager.<!NONE_APPLICABLE!>getConnection<!>(url)
+  DriverManager.getConnection(url)
@@ -9 +9 @@
-  DriverManager.<!NONE_APPLICABLE!>getConnection<!>(url, props)
+  DriverManager.getConnection(url, props)
@@ -14,4 +14,4 @@
-  DriverManager.<!NONE_APPLICABLE!>getConnection<!>(url, user!!, password!!)
-  DriverManager.<!NONE_APPLICABLE!>getConnection<!>(url!!, user, password!!)
-  DriverManager.<!NONE_APPLICABLE!>getConnection<!>(url!!, user!!, password)
-  DriverManager.getConnection(url!!, user!!, password!!) : java.sql.Connection
+  DriverManager.getConnection(url, user!!, password!!)
+  DriverManager.getConnection(url!!, user, password<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>)
+  DriverManager.getConnection(url<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>, user<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>, password)
+  DriverManager.getConnection(url<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>, user<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>, password<!UNNECESSARY_NOT_NULL_ASSERTION!>!!<!>) : java.sql.Connection
@@ -21 +21 @@
-  DriverManager.getDriver(<!TYPE_MISMATCH!>url<!>)
+  DriverManager.getDriver(url)
@@ -26 +26 @@
-   DriverManager.registerDriver(<!TYPE_MISMATCH!>driver<!>)
+   DriverManager.registerDriver(driver)
diff --git a/compiler/testData/diagnostics/tests/jdk-annotations/sql/Statement.kt b/compiler/testData/diagnostics/tests/jdk-annotations/sql/Statement.kt
index 8012c38..8d29bc6 100644
--- a/compiler/testData/diagnostics/tests/jdk-annotations/sql/Statement.kt
+++ b/compiler/testData/diagnostics/tests/jdk-annotations/sql/Statement.kt
@@ -2 +2 @@
-  statement.executeQuery(<!TYPE_MISMATCH!>cmd<!>)
+  statement.executeQuery(cmd)
@@ -11 +11 @@
-  statement.<!NONE_APPLICABLE!>executeUpdate<!>(cmd)
+  statement.executeUpdate(cmd)
diff --git a/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1270.kt b/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1270.kt
index d69264a..3b0a122 100644
--- a/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1270.kt
+++ b/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1270.kt
@@ -0,0 +1 @@
+// !DIAGNOSTICS: -UNUSED_VARIABLE
@@ -7 +8 @@
-    val <!UNUSED_VARIABLE!>value<!> = sc<!UNSAFE_CALL!>.<!>value
+    val value = sc.value
diff --git a/compiler/testData/loadJava/compiledJava/EnumMembers.txt b/compiler/testData/loadJava/compiledJava/EnumMembers.txt
index 31317f1..8f8ef8d 100644
--- a/compiler/testData/loadJava/compiledJava/EnumMembers.txt
+++ b/compiler/testData/loadJava/compiledJava/EnumMembers.txt
@@ -3 +3 @@
-public final enum class EnumMembers : kotlin.Enum<test.EnumMembers> {
+public final enum class EnumMembers : kotlin.Enum<test.EnumMembers!> {
diff --git a/compiler/testData/loadJava/compiledJava/InnerOfGeneric.txt b/compiler/testData/loadJava/compiledJava/InnerOfGeneric.txt
index 8cf2ece..4e5e68a 100644
--- a/compiler/testData/loadJava/compiledJava/InnerOfGeneric.txt
+++ b/compiler/testData/loadJava/compiledJava/InnerOfGeneric.txt
@@ -8,2 +8,2 @@
-        
-        public abstract inner class Inner : test.InnerOfGeneric.S<K> {
+
+        public abstract inner class Inner : test.InnerOfGeneric.S<K!> {
@@ -11 +11 @@
-            public abstract override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<K>?
+            public abstract override /*1*/ /*fake_override*/ fun iterator(): kotlin.(Mutable)Iterator<K!>!
@@ -14,2 +14,2 @@
-    
-    public open inner class B</*0*/ L> : test.InnerOfGeneric.A<L> {
+
+    public open inner class B</*0*/ L> : test.InnerOfGeneric.A<L!> {
@@ -20 +20 @@
-            public open override /*1*/ fun iterator(): kotlin.MutableIterator<L>?
+            public open override /*1*/ fun iterator(): kotlin.(Mutable)Iterator<L!>!
@@ -25 +25 @@
-        public abstract fun iterator(): kotlin.MutableIterator<E>?
+        public abstract fun iterator(): kotlin.(Mutable)Iterator<E!>!
@@ -29 +29 @@
-    public final /*synthesized*/ fun </*0*/ E> S(/*0*/ function: () -> kotlin.MutableIterator<E>?): test.InnerOfGeneric.S<E>
+    public final /*synthesized*/ fun </*0*/ E> S(/*0*/ function: () -> kotlin.MutableIterator<E!>!): test.InnerOfGeneric.S<E>
diff --git a/compiler/testData/loadJava/compiledJava/JavaEnum.txt b/compiler/testData/loadJava/compiledJava/JavaEnum.txt
index 1a4a2f1..5933a52 100644
--- a/compiler/testData/loadJava/compiledJava/JavaEnum.txt
+++ b/compiler/testData/loadJava/compiledJava/JavaEnum.txt
@@ -3 +3 @@
-public final enum class JavaEnum : kotlin.Enum<test.JavaEnum> {
+public final enum class JavaEnum : kotlin.Enum<test.JavaEnum!> {
diff --git a/compiler/testData/loadJava/compiledJava/OverrideMethod.txt b/compiler/testData/loadJava/compiledJava/OverrideMethod.txt
index d862e39..39ada05 100644
--- a/compiler/testData/loadJava/compiledJava/OverrideMethod.txt
+++ b/compiler/testData/loadJava/compiledJava/OverrideMethod.txt
@@ -9 +9 @@
-        public/*package*/ open fun foo(/*0*/ p0: kotlin.String?): kotlin.String?
+        public/*package*/ open fun foo(/*0*/ p0: kotlin.String!): kotlin.String!
@@ -17 +17 @@
-        public/*package*/ open override /*1*/ fun foo(/*0*/ p0: kotlin.String?): kotlin.String?
+        public/*package*/ open override /*1*/ fun foo(/*0*/ p0: kotlin.String!): kotlin.String!
diff --git a/compiler/testData/loadJava/compiledJava/PackageLocalVisibility.txt b/compiler/testData/loadJava/compiledJava/PackageLocalVisibility.txt
index 3d553eb..5e15af3 100644
--- a/compiler/testData/loadJava/compiledJava/PackageLocalVisibility.txt
+++ b/compiler/testData/loadJava/compiledJava/PackageLocalVisibility.txt
@@ -5 +5 @@
-    protected/*protected and package*/ final var accessibleContext: kotlin.String?
+    protected/*protected and package*/ final var accessibleContext: kotlin.String!
diff --git a/compiler/testData/loadJava/compiledJava/PrivateMembers.txt b/compiler/testData/loadJava/compiledJava/PrivateMembers.txt
index f279cc4..93350ea 100644
--- a/compiler/testData/loadJava/compiledJava/PrivateMembers.txt
+++ b/compiler/testData/loadJava/compiledJava/PrivateMembers.txt
@@ -8,2 +8,2 @@
-    private open fun samAdapter(/*0*/ p0: test.PrivateMembers.SamInterface?): kotlin.Unit
-    
+    private open fun samAdapter(/*0*/ p0: test.PrivateMembers.SamInterface!): kotlin.Unit
+
diff --git a/compiler/testData/loadJava/compiledJava/SubclassFromNested.txt b/compiler/testData/loadJava/compiledJava/SubclassFromNested.txt
index 4f0adfd..43c922a 100644
--- a/compiler/testData/loadJava/compiledJava/SubclassFromNested.txt
+++ b/compiler/testData/loadJava/compiledJava/SubclassFromNested.txt
@@ -4 +4 @@
-    public/*package*/ constructor B(/*0*/ p0: test.B.C?)
+    public/*package*/ constructor B(/*0*/ p0: test.B.C!)
diff --git a/compiler/testData/loadJava/compiledJava/annotations/CustomAnnotation.txt b/compiler/testData/loadJava/compiledJava/annotations/CustomAnnotation.txt
index 5bb5dc1..3c05c4e 100644
--- a/compiler/testData/loadJava/compiledJava/annotations/CustomAnnotation.txt
+++ b/compiler/testData/loadJava/compiledJava/annotations/CustomAnnotation.txt
@@ -10 +10 @@
-    public final enum class MyEnum : kotlin.Enum<test.CustomAnnotation.MyEnum> {
+    public final enum class MyEnum : kotlin.Enum<test.CustomAnnotation.MyEnum!> {
diff --git a/compiler/testData/loadJava/compiledJava/annotations/NestedEnumArgument.txt b/compiler/testData/loadJava/compiledJava/annotations/NestedEnumArgument.txt
index eeb14af..c30e7dc 100644
--- a/compiler/testData/loadJava/compiledJava/annotations/NestedEnumArgument.txt
+++ b/compiler/testData/loadJava/compiledJava/annotations/NestedEnumArgument.txt
@@ -12 +12 @@
-    public final enum class E : kotlin.Enum<test.NestedEnumArgument.E> {
+    public final enum class E : kotlin.Enum<test.NestedEnumArgument.E!> {
diff --git a/compiler/testData/loadJava/compiledJava/sam/Comparator.txt b/compiler/testData/loadJava/compiledJava/sam/Comparator.txt
index 995b232..6fd478c 100644
--- a/compiler/testData/loadJava/compiledJava/sam/Comparator.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/Comparator.txt
@@ -3 +3 @@
-public /*synthesized*/ fun </*0*/ T> Comparator(/*0*/ function: (T?, T?) -> kotlin.Int): test.Comparator<T>
+public /*synthesized*/ fun </*0*/ T> Comparator(/*0*/ function: (T!, T!) -> kotlin.Int): test.Comparator<T>
@@ -6 +6 @@
-    public abstract fun compare(/*0*/ p0: T?, /*1*/ p1: T?): kotlin.Int
+    public abstract fun compare(/*0*/ p0: T!, /*1*/ p1: T!): kotlin.Int
diff --git a/compiler/testData/loadJava/compiledJava/sam/FilenameFilter.txt b/compiler/testData/loadJava/compiledJava/sam/FilenameFilter.txt
index 773be76..6085a6c 100644
--- a/compiler/testData/loadJava/compiledJava/sam/FilenameFilter.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/FilenameFilter.txt
@@ -3 +3 @@
-public /*synthesized*/ fun FilenameFilter(/*0*/ function: (java.io.File?, kotlin.String?) -> kotlin.Boolean): test.FilenameFilter
+public /*synthesized*/ fun FilenameFilter(/*0*/ function: (java.io.File!, kotlin.String!) -> kotlin.Boolean): test.FilenameFilter
@@ -6 +6 @@
-    public abstract fun accept(/*0*/ p0: java.io.File?, /*1*/ p1: kotlin.String?): kotlin.Boolean
+    public abstract fun accept(/*0*/ p0: java.io.File!, /*1*/ p1: kotlin.String!): kotlin.Boolean
diff --git a/compiler/testData/loadJava/compiledJava/sam/GenericInterfaceParameterWithSelfBound.txt b/compiler/testData/loadJava/compiledJava/sam/GenericInterfaceParameterWithSelfBound.txt
index a22ae28..04c323b 100644
--- a/compiler/testData/loadJava/compiledJava/sam/GenericInterfaceParameterWithSelfBound.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/GenericInterfaceParameterWithSelfBound.txt
@@ -3 +3 @@
-public /*synthesized*/ fun </*0*/ T : test.GenericInterfaceParameterWithSelfBound<T>?> GenericInterfaceParameterWithSelfBound(/*0*/ function: (T?) -> T?): test.GenericInterfaceParameterWithSelfBound<T>
+public /*synthesized*/ fun </*0*/ T : test.GenericInterfaceParameterWithSelfBound<T!>!> GenericInterfaceParameterWithSelfBound(/*0*/ function: (T!) -> T!): test.GenericInterfaceParameterWithSelfBound<T>
@@ -5,2 +5,2 @@
-public trait GenericInterfaceParameterWithSelfBound</*0*/ T : test.GenericInterfaceParameterWithSelfBound<T>?> {
-    public abstract fun method(/*0*/ p0: T?): T?
+public trait GenericInterfaceParameterWithSelfBound</*0*/ T : test.GenericInterfaceParameterWithSelfBound<T!>!> {
+    public abstract fun method(/*0*/ p0: T!): T!
diff --git a/compiler/testData/loadJava/compiledJava/sam/GenericInterfaceParametersWithBounds.txt b/compiler/testData/loadJava/compiledJava/sam/GenericInterfaceParametersWithBounds.txt
index 844834a..ed9c8a3 100644
--- a/compiler/testData/loadJava/compiledJava/sam/GenericInterfaceParametersWithBounds.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/GenericInterfaceParametersWithBounds.txt
@@ -3 +3 @@
-public /*synthesized*/ fun </*0*/ A : kotlin.Comparable<A>?, /*1*/ B : kotlin.List<A>?> GenericInterfaceParametersWithBounds(/*0*/ function: (kotlin.Array<out A>?, B?) -> kotlin.Unit): test.GenericInterfaceParametersWithBounds<A, B> where A : kotlin.Cloneable?
+public /*synthesized*/ fun </*0*/ A : kotlin.Comparable<A!>!, /*1*/ B : kotlin.(Mutable)List<A!>!> GenericInterfaceParametersWithBounds(/*0*/ function: (kotlin.Array<(out) A!>!, B!) -> kotlin.Unit): test.GenericInterfaceParametersWithBounds<A, B> where A : kotlin.Cloneable!
@@ -5,2 +5,2 @@
-public trait GenericInterfaceParametersWithBounds</*0*/ A : kotlin.Comparable<A>?, /*1*/ B : kotlin.List<A>?> where A : kotlin.Cloneable? {
-    public abstract fun method(/*0*/ p0: kotlin.Array<out A>?, /*1*/ p1: B?): kotlin.Unit
+public trait GenericInterfaceParametersWithBounds</*0*/ A : kotlin.Comparable<A!>!, /*1*/ B : kotlin.(Mutable)List<A!>!> where A : kotlin.Cloneable! {
+    public abstract fun method(/*0*/ p0: kotlin.Array<(out) A!>!, /*1*/ p1: B!): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/sam/GenericMethodParameters.txt b/compiler/testData/loadJava/compiledJava/sam/GenericMethodParameters.txt
index b60140c..426b9a2 100644
--- a/compiler/testData/loadJava/compiledJava/sam/GenericMethodParameters.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/GenericMethodParameters.txt
@@ -4 +4 @@
-    public abstract fun </*0*/ A : kotlin.CharSequence?, /*1*/ B : kotlin.List<A>?> method(/*0*/ p0: kotlin.Array<out A>?, /*1*/ p1: B?): kotlin.Unit
+    public abstract fun </*0*/ A : kotlin.CharSequence!, /*1*/ B : kotlin.(Mutable)List<A!>!> method(/*0*/ p0: kotlin.Array<(out) A!>!, /*1*/ p1: B!): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/sam/SamSubinterfaceOfTwo.txt b/compiler/testData/loadJava/compiledJava/sam/SamSubinterfaceOfTwo.txt
index a341c31..c46effc 100644
--- a/compiler/testData/loadJava/compiledJava/sam/SamSubinterfaceOfTwo.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/SamSubinterfaceOfTwo.txt
@@ -4,3 +4,3 @@
-    
-    public trait Sub : test.SamSubinterfaceOfTwo.Super1, test.SamSubinterfaceOfTwo.Super2<kotlin.String> {
-        public abstract override /*2*/ /*fake_override*/ fun f(): kotlin.String?
+
+    public trait Sub : test.SamSubinterfaceOfTwo.Super1, test.SamSubinterfaceOfTwo.Super2<kotlin.String!> {
+        public abstract override /*2*/ /*fake_override*/ fun f(): kotlin.String!
@@ -10 +10 @@
-        public abstract fun f(): kotlin.CharSequence?
+        public abstract fun f(): kotlin.CharSequence!
@@ -14 +14 @@
-        public abstract fun f(): T?
+        public abstract fun f(): T!
@@ -18,3 +18,3 @@
-    public final /*synthesized*/ fun Sub(/*0*/ function: () -> kotlin.String?): test.SamSubinterfaceOfTwo.Sub
-    public final /*synthesized*/ fun Super1(/*0*/ function: () -> kotlin.CharSequence?): test.SamSubinterfaceOfTwo.Super1
-    public final /*synthesized*/ fun </*0*/ T> Super2(/*0*/ function: () -> T?): test.SamSubinterfaceOfTwo.Super2<T>
+    public /*synthesized*/ fun Sub(/*0*/ function: () -> kotlin.String!): test.SamSubinterfaceOfTwo.Sub
+    public /*synthesized*/ fun Super1(/*0*/ function: () -> kotlin.CharSequence!): test.SamSubinterfaceOfTwo.Super1
+    public /*synthesized*/ fun </*0*/ T> Super2(/*0*/ function: () -> T!): test.SamSubinterfaceOfTwo.Super2<T>
diff --git a/compiler/testData/loadJava/compiledJava/sam/SubstitutedSamInterface.txt b/compiler/testData/loadJava/compiledJava/sam/SubstitutedSamInterface.txt
index 3ba4ec2..4e465e7 100644
--- a/compiler/testData/loadJava/compiledJava/sam/SubstitutedSamInterface.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/SubstitutedSamInterface.txt
@@ -3 +3 @@
-public /*synthesized*/ fun SubstitutedSamInterface(/*0*/ function: (kotlin.String, kotlin.String) -> kotlin.Int): test.SubstitutedSamInterface
+public /*synthesized*/ fun SubstitutedSamInterface(/*0*/ function: (kotlin.String!, kotlin.String!) -> kotlin.Int): test.SubstitutedSamInterface
@@ -5,2 +5,2 @@
-public trait SubstitutedSamInterface : java.util.Comparator<kotlin.String> {
-    public abstract override /*1*/ /*fake_override*/ fun compare(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String): kotlin.Int
+public trait SubstitutedSamInterface : java.util.Comparator<kotlin.String!> {
+    public abstract override /*1*/ /*fake_override*/ fun compare(/*0*/ p0: kotlin.String!, /*1*/ p1: kotlin.String!): kotlin.Int
diff --git a/compiler/testData/loadJava/compiledJava/sam/SubstitutedSamInterfaceSubclassOfBuiltin.txt b/compiler/testData/loadJava/compiledJava/sam/SubstitutedSamInterfaceSubclassOfBuiltin.txt
index ae3fadd..7103eb8 100644
--- a/compiler/testData/loadJava/compiledJava/sam/SubstitutedSamInterfaceSubclassOfBuiltin.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/SubstitutedSamInterfaceSubclassOfBuiltin.txt
@@ -3 +3 @@
-public /*synthesized*/ fun SubstitutedSamInterfaceSubclassOfBuiltin(/*0*/ function: (test.SubstitutedSamInterfaceSubclassOfBuiltin) -> kotlin.Int): test.SubstitutedSamInterfaceSubclassOfBuiltin
+public /*synthesized*/ fun SubstitutedSamInterfaceSubclassOfBuiltin(/*0*/ function: (test.SubstitutedSamInterfaceSubclassOfBuiltin!) -> kotlin.Int): test.SubstitutedSamInterfaceSubclassOfBuiltin
@@ -5,2 +5,2 @@
-public trait SubstitutedSamInterfaceSubclassOfBuiltin : kotlin.Comparable<test.SubstitutedSamInterfaceSubclassOfBuiltin> {
-    public abstract override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.SubstitutedSamInterfaceSubclassOfBuiltin): kotlin.Int
+public trait SubstitutedSamInterfaceSubclassOfBuiltin : kotlin.Comparable<test.SubstitutedSamInterfaceSubclassOfBuiltin!> {
+    public abstract override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.SubstitutedSamInterfaceSubclassOfBuiltin!): kotlin.Int
diff --git a/compiler/testData/loadJava/compiledJava/sam/VarargParameter.txt b/compiler/testData/loadJava/compiledJava/sam/VarargParameter.txt
index 212aae9..a6c513d 100644
--- a/compiler/testData/loadJava/compiledJava/sam/VarargParameter.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/VarargParameter.txt
@@ -3 +3 @@
-public /*synthesized*/ fun VarargParameter(/*0*/ function: (kotlin.Array<kotlin.String?>) -> kotlin.Unit): test.VarargParameter
+public /*synthesized*/ fun VarargParameter(/*0*/ function: (kotlin.Array<(out) kotlin.String!>!) -> kotlin.Unit): test.VarargParameter
@@ -6 +6 @@
-    public abstract fun f(/*0*/ vararg p0: kotlin.String? /*kotlin.Array<kotlin.String?>*/): kotlin.Unit
+    public abstract fun f(/*0*/ vararg p0: kotlin.String! /*kotlin.Array<(out) kotlin.String!>!*/): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/sam/adapters/AmbiguousAdapters.txt b/compiler/testData/loadJava/compiledJava/sam/adapters/AmbiguousAdapters.txt
index 49dd852..3d69c69 100644
--- a/compiler/testData/loadJava/compiledJava/sam/adapters/AmbiguousAdapters.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/adapters/AmbiguousAdapters.txt
@@ -7,2 +7,2 @@
-    public open fun foo(/*0*/ p0: java.io.Closeable?): kotlin.Unit
-    public open fun foo(/*0*/ p0: java.lang.Runnable?): kotlin.Unit
+    public open fun foo(/*0*/ p0: java.io.Closeable!): kotlin.Unit
+    public open fun foo(/*0*/ p0: java.lang.Runnable!): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/sam/adapters/Basic.txt b/compiler/testData/loadJava/compiledJava/sam/adapters/Basic.txt
index ff745a4..1b62556 100644
--- a/compiler/testData/loadJava/compiledJava/sam/adapters/Basic.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/adapters/Basic.txt
@@ -6 +6 @@
-    public open fun foo(/*0*/ p0: java.lang.Runnable?): kotlin.Unit
+    public open fun foo(/*0*/ p0: java.lang.Runnable!): kotlin.Unit
@@ -9,2 +9,2 @@
-    public final /*synthesized*/ fun bar(/*0*/ p0: (() -> kotlin.Unit)?): kotlin.Unit
-    public open fun bar(/*0*/ p0: java.lang.Runnable?): kotlin.Unit
+    public /*synthesized*/ fun bar(/*0*/ p0: (() -> kotlin.Unit)?): kotlin.Unit
+    public open fun bar(/*0*/ p0: java.lang.Runnable!): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/sam/adapters/Constructor.txt b/compiler/testData/loadJava/compiledJava/sam/adapters/Constructor.txt
index 881c029..feb9f32 100644
--- a/compiler/testData/loadJava/compiledJava/sam/adapters/Constructor.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/adapters/Constructor.txt
@@ -5 +5 @@
-    public constructor Constructor(/*0*/ p0: java.lang.Runnable?)
+    public constructor Constructor(/*0*/ p0: java.lang.Runnable!)
diff --git a/compiler/testData/loadJava/compiledJava/sam/adapters/DeepSamLoop.txt b/compiler/testData/loadJava/compiledJava/sam/adapters/DeepSamLoop.txt
index 30a3d1e..54d28be 100644
--- a/compiler/testData/loadJava/compiledJava/sam/adapters/DeepSamLoop.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/adapters/DeepSamLoop.txt
@@ -7 +7 @@
-        public abstract fun foo(/*0*/ p0: test.DeepSamLoop.Foo?): kotlin.Unit
+        public abstract fun foo(/*0*/ p0: test.DeepSamLoop.Foo!): kotlin.Unit
@@ -12 +12 @@
-        public abstract fun foo(/*0*/ p0: test.DeepSamLoop.Bar?): kotlin.Unit
+        public abstract fun foo(/*0*/ p0: test.DeepSamLoop.Bar!): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/sam/adapters/NonTrivialFunctionType.txt b/compiler/testData/loadJava/compiledJava/sam/adapters/NonTrivialFunctionType.txt
index c76f8c5..33efd14 100644
--- a/compiler/testData/loadJava/compiledJava/sam/adapters/NonTrivialFunctionType.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/adapters/NonTrivialFunctionType.txt
@@ -7,2 +7,2 @@
-    public open fun foo(/*0*/ p0: java.io.FilenameFilter?): kotlin.Unit
-    public open fun foo(/*0*/ p0: java.util.Comparator<kotlin.String>?): kotlin.Unit
+    public open fun foo(/*0*/ p0: java.io.FilenameFilter!): kotlin.Unit
+    public open fun foo(/*0*/ p0: java.util.Comparator<kotlin.String!>!): kotlin.Unit
@@ -10,2 +10,2 @@
-    public open fun wildcardBound(/*0*/ p0: java.util.Comparator<in kotlin.CharSequence?>?): kotlin.Unit
-    public open fun wildcardUnbound(/*0*/ p0: java.util.Comparator<out kotlin.Any?>?): kotlin.Unit
+    public open fun wildcardBound(/*0*/ p0: java.util.Comparator<in kotlin.CharSequence!>!): kotlin.Unit
+    public open fun wildcardUnbound(/*0*/ p0: java.util.Comparator<out kotlin.Any?>!): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/sam/adapters/SelfAsParameter.txt b/compiler/testData/loadJava/compiledJava/sam/adapters/SelfAsParameter.txt
index 5f303ce..0167719 100644
--- a/compiler/testData/loadJava/compiledJava/sam/adapters/SelfAsParameter.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/adapters/SelfAsParameter.txt
@@ -3 +3 @@
-public /*synthesized*/ fun SelfAsParameter(/*0*/ function: (test.SelfAsParameter?) -> kotlin.Unit): test.SelfAsParameter
+public /*synthesized*/ fun SelfAsParameter(/*0*/ function: (test.SelfAsParameter!) -> kotlin.Unit): test.SelfAsParameter
@@ -6,2 +6,2 @@
-    public final /*synthesized*/ fun foo(/*0*/ p0: ((test.SelfAsParameter?) -> kotlin.Unit)?): kotlin.Unit
-    public abstract fun foo(/*0*/ p0: test.SelfAsParameter?): kotlin.Unit
+    public final /*synthesized*/ fun foo(/*0*/ p0: ((test.SelfAsParameter!) -> kotlin.Unit)!): kotlin.Unit
+    public abstract fun foo(/*0*/ p0: test.SelfAsParameter!): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/sam/adapters/SeveralSamParameters.txt b/compiler/testData/loadJava/compiledJava/sam/adapters/SeveralSamParameters.txt
index b86d0fd..1790c48 100644
--- a/compiler/testData/loadJava/compiledJava/sam/adapters/SeveralSamParameters.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/adapters/SeveralSamParameters.txt
@@ -7,2 +7,2 @@
-    public final /*synthesized*/ fun findMaxAndInvokeCallback(/*0*/ p0: ((kotlin.String, kotlin.String) -> kotlin.Int)?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: (() -> kotlin.Unit)?): kotlin.String?
-    public open fun findMaxAndInvokeCallback(/*0*/ p0: java.util.Comparator<kotlin.String>?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: java.lang.Runnable?): kotlin.String?
+    public /*synthesized*/ fun findMaxAndInvokeCallback(/*0*/ p0: ((kotlin.String, kotlin.String) -> kotlin.Int)?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: (() -> kotlin.Unit)?): kotlin.String?
+    public open fun findMaxAndInvokeCallback(/*0*/ p0: java.util.Comparator<kotlin.String!>!, /*1*/ p1: kotlin.String!, /*2*/ p2: kotlin.String!, /*3*/ p3: java.lang.Runnable!): kotlin.String!
diff --git a/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfClass.txt b/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfClass.txt
index 284b3d8..4792c79 100644
--- a/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfClass.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfClass.txt
@@ -6 +6 @@
-    public open fun foo(/*0*/ p0: java.util.Comparator<T>?): kotlin.Unit
+    public open fun foo(/*0*/ p0: java.util.Comparator<T!>!): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfMethod.txt b/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfMethod.txt
index 3d68054..831ba5e 100644
--- a/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfMethod.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfMethod.txt
@@ -7,6 +7,6 @@
-    public final /*synthesized*/ fun </*0*/ T> max(/*0*/ p0: ((T, T) -> kotlin.Int)?, /*1*/ p1: T?, /*2*/ p2: T?): T?
-    public open fun </*0*/ T> max(/*0*/ p0: java.util.Comparator<T>?, /*1*/ p1: T?, /*2*/ p2: T?): T?
-    public final /*synthesized*/ fun </*0*/ T : kotlin.CharSequence?> max2(/*0*/ p0: ((T, T) -> kotlin.Int)?, /*1*/ p1: T?, /*2*/ p2: T?): T?
-    public open fun </*0*/ T : kotlin.CharSequence?> max2(/*0*/ p0: java.util.Comparator<T>?, /*1*/ p1: T?, /*2*/ p2: T?): T?
-    public final /*synthesized*/ fun </*0*/ A : kotlin.CharSequence?, /*1*/ B : kotlin.List<A>?> method(/*0*/ p0: ((A, A) -> kotlin.Int)?, /*1*/ p1: B?): kotlin.Unit
-    public open fun </*0*/ A : kotlin.CharSequence?, /*1*/ B : kotlin.List<A>?> method(/*0*/ p0: java.util.Comparator<A>?, /*1*/ p1: B?): kotlin.Unit
+    public /*synthesized*/ fun </*0*/ T> max(/*0*/ p0: ((T, T) -> kotlin.Int)?, /*1*/ p1: T?, /*2*/ p2: T?): T?
+    public open fun </*0*/ T> max(/*0*/ p0: java.util.Comparator<T!>!, /*1*/ p1: T!, /*2*/ p2: T!): T!
+    public /*synthesized*/ fun </*0*/ T : kotlin.CharSequence?> max2(/*0*/ p0: ((T, T) -> kotlin.Int)?, /*1*/ p1: T?, /*2*/ p2: T?): T?
+    public open fun </*0*/ T : kotlin.CharSequence!> max2(/*0*/ p0: java.util.Comparator<T!>!, /*1*/ p1: T!, /*2*/ p2: T!): T!
+    public /*synthesized*/ fun </*0*/ A : kotlin.CharSequence?, /*1*/ B : kotlin.List<A>?> method(/*0*/ p0: ((A, A) -> kotlin.Int)?, /*1*/ p1: B?): kotlin.Unit
+    public open fun </*0*/ A : kotlin.CharSequence!, /*1*/ B : kotlin.(Mutable)List<A!>!> method(/*0*/ p0: java.util.Comparator<A!>!, /*1*/ p1: B!): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfOuterClass.txt b/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfOuterClass.txt
index 1fda834..872f960 100644
--- a/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfOuterClass.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/adapters/TypeParameterOfOuterClass.txt
@@ -9 +9 @@
-        public open fun foo(/*0*/ p0: java.util.Comparator<T>?): kotlin.Unit
+        public open fun foo(/*0*/ p0: java.util.Comparator<T!>!): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedSimple.txt b/compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedSimple.txt
index 0fa258f..cf43fe3 100644
--- a/compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedSimple.txt
+++ b/compiler/testData/loadJava/compiledJava/sam/adapters/inheritance/InheritedSimple.txt
@@ -7 +7 @@
-        public abstract override /*1*/ /*fake_override*/ fun foo(/*0*/ p0: java.lang.Runnable?): kotlin.Unit
+        public abstract override /*1*/ /*fake_override*/ fun foo(/*0*/ p0: java.lang.Runnable!): kotlin.Unit
@@ -12 +12 @@
-        public abstract fun foo(/*0*/ p0: java.lang.Runnable?): kotlin.Unit
+        public abstract fun foo(/*0*/ p0: java.lang.Runnable!): kotlin.Unit
@@ -16,2 +16,2 @@
-    public final /*synthesized*/ fun Sub(/*0*/ function: (java.lang.Runnable?) -> kotlin.Unit): test.InheritedSimple.Sub
-    public final /*synthesized*/ fun Super(/*0*/ function: (java.lang.Runnable?) -> kotlin.Unit): test.InheritedSimple.Super
+    public /*synthesized*/ fun Sub(/*0*/ function: (java.lang.Runnable!) -> kotlin.Unit): test.InheritedSimple.Sub
+    public /*synthesized*/ fun Super(/*0*/ function: (java.lang.Runnable!) -> kotlin.Unit): test.InheritedSimple.Super
diff --git a/compiler/testData/loadJava/compiledJava/signaturePropagation/TwoSuperclassesVarargAndNot.txt b/compiler/testData/loadJava/compiledJava/signaturePropagation/TwoSuperclassesVarargAndNot.txt
index c189339..afa30e1 100644
--- a/compiler/testData/loadJava/compiledJava/signaturePropagation/TwoSuperclassesVarargAndNot.txt
+++ b/compiler/testData/loadJava/compiledJava/signaturePropagation/TwoSuperclassesVarargAndNot.txt
@@ -6,2 +6 @@
-        public abstract override /*1*/ /*fake_override*/ fun foo(/*0*/ vararg p0: kotlin.String? /*kotlin.Array<kotlin.String?>*/): kotlin.Unit
-        public abstract override /*1*/ fun foo(/*0*/ s: kotlin.Array<out kotlin.String?>?): kotlin.Unit
+        public abstract override /*2*/ fun foo(/*0*/ p0: kotlin.Array<(out) kotlin.String!>!): kotlin.Unit
@@ -11 +10 @@
-        public abstract fun foo(/*0*/ vararg p0: kotlin.String? /*kotlin.Array<kotlin.String?>*/): kotlin.Unit
+        public abstract fun foo(/*0*/ vararg p0: kotlin.String! /*kotlin.Array<(out) kotlin.String!>!*/): kotlin.Unit
@@ -15 +14 @@
-        public abstract fun foo(/*0*/ s: kotlin.Array<out kotlin.String?>?): kotlin.Unit
+        public abstract fun foo(/*0*/ p0: kotlin.Array<(out) kotlin.String!>!): kotlin.Unit
@@ -19,2 +18,2 @@
-    public final /*synthesized*/ fun Super1(/*0*/ function: (kotlin.Array<kotlin.String?>) -> kotlin.Unit): test.TwoSuperclassesVarargAndNot.Super1
-    public final /*synthesized*/ fun Super2(/*0*/ function: (kotlin.Array<out kotlin.String?>?) -> kotlin.Unit): test.TwoSuperclassesVarargAndNot.Super2
+    public /*synthesized*/ fun Super1(/*0*/ function: (kotlin.Array<(out) kotlin.String!>!) -> kotlin.Unit): test.TwoSuperclassesVarargAndNot.Super1
+    public /*synthesized*/ fun Super2(/*0*/ function: (kotlin.Array<(out) kotlin.String!>!) -> kotlin.Unit): test.TwoSuperclassesVarargAndNot.Super2
diff --git a/compiler/testData/loadJava/compiledJava/vararg/VarargInt.txt b/compiler/testData/loadJava/compiledJava/vararg/VarargInt.txt
index fa1445c..dcb964d 100644
--- a/compiler/testData/loadJava/compiledJava/vararg/VarargInt.txt
+++ b/compiler/testData/loadJava/compiledJava/vararg/VarargInt.txt
@@ -5 +5 @@
-    public open fun vararg(/*0*/ vararg p0: kotlin.Int /*kotlin.IntArray*/): kotlin.Unit
+    public open fun vararg(/*0*/ vararg p0: kotlin.Int /*kotlin.IntArray!*/): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJava/vararg/VarargString.txt b/compiler/testData/loadJava/compiledJava/vararg/VarargString.txt
index 6294b87..36414b9 100644
--- a/compiler/testData/loadJava/compiledJava/vararg/VarargString.txt
+++ b/compiler/testData/loadJava/compiledJava/vararg/VarargString.txt
@@ -5 +5 @@
-    public open fun vararg(/*0*/ vararg p0: kotlin.String? /*kotlin.Array<kotlin.String?>*/): kotlin.Unit
+    public open fun vararg(/*0*/ vararg p0: kotlin.String! /*kotlin.Array<(out) kotlin.String!>!*/): kotlin.Unit
diff --git a/compiler/testData/loadJava/compiledJavaIncludeObjectMethods/ClassWithObjectMethod.txt b/compiler/testData/loadJava/compiledJavaIncludeObjectMethods/ClassWithObjectMethod.txt
index d83e516..96ba443 100644
--- a/compiler/testData/loadJava/compiledJavaIncludeObjectMethods/ClassWithObjectMethod.txt
+++ b/compiler/testData/loadJava/compiledJavaIncludeObjectMethods/ClassWithObjectMethod.txt
@@ -7 +7 @@
-    public open override /*1*/ fun toString(): kotlin.String
+    public open override /*1*/ fun toString(): kotlin.String!
diff --git a/compiler/testData/loadJava/compiledJavaIncludeObjectMethods/InterfaceWithObjectMethods.txt b/compiler/testData/loadJava/compiledJavaIncludeObjectMethods/InterfaceWithObjectMethods.txt
index 3ad6114..441a366 100644
--- a/compiler/testData/loadJava/compiledJavaIncludeObjectMethods/InterfaceWithObjectMethods.txt
+++ b/compiler/testData/loadJava/compiledJavaIncludeObjectMethods/InterfaceWithObjectMethods.txt
@@ -4 +4 @@
-    public abstract fun clone(): kotlin.Any?
+    public abstract fun clone(): kotlin.Any!
diff --git a/compiler/testData/loadJava/compiledKotlin/fromLoadJava/ClassDoesNotOverrideMethod.txt b/compiler/testData/loadJava/compiledKotlin/fromLoadJava/ClassDoesNotOverrideMethod.txt
index 734f560..f6726c1 100644
--- a/compiler/testData/loadJava/compiledKotlin/fromLoadJava/ClassDoesNotOverrideMethod.txt
+++ b/compiler/testData/loadJava/compiledKotlin/fromLoadJava/ClassDoesNotOverrideMethod.txt
@@ -5 +5 @@
-    invisible_fake final override /*1*/ /*fake_override*/ var cdate: sun.util.calendar.BaseCalendar.Date?
+    invisible_fake final override /*1*/ /*fake_override*/ var cdate: sun.util.calendar.BaseCalendar.Date!
@@ -7,5 +7,5 @@
-    public open override /*1*/ /*fake_override*/ fun after(/*0*/ p0: java.util.Date): kotlin.Boolean
-    public open override /*1*/ /*fake_override*/ fun before(/*0*/ p0: java.util.Date): kotlin.Boolean
-    public open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
-    public open override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: java.util.Date): kotlin.Int
-    invisible_fake final override /*1*/ /*fake_override*/ fun getCalendarDate(): sun.util.calendar.BaseCalendar.Date?
+    public open override /*1*/ /*fake_override*/ fun after(/*0*/ p0: java.util.Date!): kotlin.Boolean
+    public open override /*1*/ /*fake_override*/ fun before(/*0*/ p0: java.util.Date!): kotlin.Boolean
+    public open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any!
+    public open override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: java.util.Date!): kotlin.Int
+    invisible_fake final override /*1*/ /*fake_override*/ fun getCalendarDate(): sun.util.calendar.BaseCalendar.Date!
@@ -22,3 +22,3 @@
-    invisible_fake final override /*1*/ /*fake_override*/ fun normalize(): sun.util.calendar.BaseCalendar.Date?
-    invisible_fake final override /*1*/ /*fake_override*/ fun normalize(/*0*/ p0: sun.util.calendar.BaseCalendar.Date?): sun.util.calendar.BaseCalendar.Date?
-    invisible_fake open override /*1*/ /*fake_override*/ fun readObject(/*0*/ p0: java.io.ObjectInputStream?): kotlin.Unit
+    invisible_fake final override /*1*/ /*fake_override*/ fun normalize(): sun.util.calendar.BaseCalendar.Date!
+    invisible_fake final override /*1*/ /*fake_override*/ fun normalize(/*0*/ p0: sun.util.calendar.BaseCalendar.Date!): sun.util.calendar.BaseCalendar.Date!
+    invisible_fake open override /*1*/ /*fake_override*/ fun readObject(/*0*/ p0: java.io.ObjectInputStream!): kotlin.Unit
@@ -32,4 +32,4 @@
-    kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun toGMTString(): kotlin.String
-    kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun toLocaleString(): kotlin.String
-    invisible_fake open override /*1*/ /*fake_override*/ fun writeObject(/*0*/ p0: java.io.ObjectOutputStream?): kotlin.Unit
-}
\ No newline at end of file
+    kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun toGMTString(): kotlin.String!
+    kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun toLocaleString(): kotlin.String!
+    invisible_fake open override /*1*/ /*fake_override*/ fun writeObject(/*0*/ p0: java.io.ObjectOutputStream!): kotlin.Unit
+}
diff --git a/compiler/testData/loadJava/compiledKotlin/fromLoadJava/modality/ModalityOfFakeOverrides.txt b/compiler/testData/loadJava/compiledKotlin/fromLoadJava/modality/ModalityOfFakeOverrides.txt
index 271e4fc..4994941 100644
--- a/compiler/testData/loadJava/compiledKotlin/fromLoadJava/modality/ModalityOfFakeOverrides.txt
+++ b/compiler/testData/loadJava/compiledKotlin/fromLoadJava/modality/ModalityOfFakeOverrides.txt
@@ -6,4 +6,4 @@
-    public open override /*1*/ /*fake_override*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: kotlin.String): kotlin.Unit
-    public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: kotlin.String): kotlin.Boolean
-    public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.String>): kotlin.Boolean
-    public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<kotlin.String>): kotlin.Boolean
+    public open override /*1*/ /*fake_override*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: kotlin.String!): kotlin.Unit
+    public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: kotlin.String!): kotlin.Boolean
+    public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.String!>): kotlin.Boolean
+    public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: (kotlin.MutableCollection<out kotlin.String!>..kotlin.Collection<kotlin.String!>?)): kotlin.Boolean
@@ -14 +14 @@
-    public open override /*1*/ /*fake_override*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
+    public open override /*1*/ /*fake_override*/ fun indexOf(/*0*/ o: kotlin.Any!): kotlin.Int
@@ -16,5 +16,5 @@
-    public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<kotlin.String>
-    public open override /*1*/ /*fake_override*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
-    public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<kotlin.String>
-    public open override /*1*/ /*fake_override*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<kotlin.String>
-    invisible_fake open override /*1*/ /*fake_override*/ fun outOfBoundsMsg(/*0*/ p0: kotlin.Int): kotlin.String?
+    public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.(Mutable)Iterator<kotlin.String!>!
+    public open override /*1*/ /*fake_override*/ fun lastIndexOf(/*0*/ o: kotlin.Any!): kotlin.Int
+    public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.(Mutable)ListIterator<kotlin.String!>!
+    public open override /*1*/ /*fake_override*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.(Mutable)ListIterator<kotlin.String!>!
+    invisible_fake open override /*1*/ /*fake_override*/ fun outOfBoundsMsg(/*0*/ p0: kotlin.Int): kotlin.String!
@@ -23 +23 @@
-    public open override /*1*/ /*fake_override*/ fun remove(/*0*/ index: kotlin.Int): kotlin.String
+    public open override /*1*/ /*fake_override*/ fun remove(/*0*/ index: kotlin.Int): kotlin.String!
@@ -27 +27 @@
-    public open override /*1*/ /*fake_override*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: kotlin.String): kotlin.String
+    public open override /*1*/ /*fake_override*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: kotlin.String!): kotlin.String!
@@ -29,4 +29,4 @@
-    public open override /*1*/ /*fake_override*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<kotlin.String>
-    public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
-    public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
-}
\ No newline at end of file
+    public open override /*1*/ /*fake_override*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.(Mutable)List<kotlin.String!>!
+    public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<(out) kotlin.Any!>!
+    public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<(out) T!>!): kotlin.Array<(out) T!>!
+}
diff --git a/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/InheritAmbguousSamAdaptersInKotlin.txt b/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/InheritAmbguousSamAdaptersInKotlin.txt
index e75cabb..f3c933c 100644
--- a/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/InheritAmbguousSamAdaptersInKotlin.txt
+++ b/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/InheritAmbguousSamAdaptersInKotlin.txt
@@ -5,4 +5,4 @@
-    public/*package*/ final override /*1*/ /*fake_override*/ fun foo(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
-    public/*package*/ final override /*1*/ /*fake_override*/ fun foo(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
-    public/*package*/ open override /*1*/ /*fake_override*/ fun foo(/*0*/ r: java.io.Closeable?): kotlin.Unit
-    public/*package*/ open override /*1*/ /*fake_override*/ fun foo(/*0*/ r: java.lang.Runnable?): kotlin.Unit
+    public/*package*/ final override /*1*/ /*fake_override*/ fun foo(/*0*/ r: (() -> kotlin.Unit)!): kotlin.Unit
+    public/*package*/ final override /*1*/ /*fake_override*/ fun foo(/*0*/ r: (() -> kotlin.Unit)!): kotlin.Unit
+    public/*package*/ open override /*1*/ /*fake_override*/ fun foo(/*0*/ r: java.io.Closeable!): kotlin.Unit
+    public/*package*/ open override /*1*/ /*fake_override*/ fun foo(/*0*/ r: java.lang.Runnable!): kotlin.Unit
@@ -13,4 +13,4 @@
-    public/*package*/ final /*synthesized*/ fun foo(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
-    public/*package*/ final /*synthesized*/ fun foo(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
-    public/*package*/ open fun foo(/*0*/ r: java.io.Closeable?): kotlin.Unit
-    public/*package*/ open fun foo(/*0*/ r: java.lang.Runnable?): kotlin.Unit
+    public/*package*/ final /*synthesized*/ fun foo(/*0*/ r: (() -> kotlin.Unit)!): kotlin.Unit
+    public/*package*/ final /*synthesized*/ fun foo(/*0*/ r: (() -> kotlin.Unit)!): kotlin.Unit
+    public/*package*/ open fun foo(/*0*/ r: java.io.Closeable!): kotlin.Unit
+    public/*package*/ open fun foo(/*0*/ r: java.lang.Runnable!): kotlin.Unit
diff --git a/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/InheritSamAdapterInKotlin.txt b/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/InheritSamAdapterInKotlin.txt
index 607652e..175c3db 100644
--- a/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/InheritSamAdapterInKotlin.txt
+++ b/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/InheritSamAdapterInKotlin.txt
@@ -5,2 +5,2 @@
-    public/*package*/ final override /*1*/ /*fake_override*/ fun foo(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
-    public/*package*/ open override /*1*/ /*fake_override*/ fun foo(/*0*/ r: java.lang.Runnable?): kotlin.Unit
+    public/*package*/ final override /*1*/ /*fake_override*/ fun foo(/*0*/ r: (() -> kotlin.Unit)!): kotlin.Unit
+    public/*package*/ open override /*1*/ /*fake_override*/ fun foo(/*0*/ r: java.lang.Runnable!): kotlin.Unit
@@ -11,2 +11,2 @@
-    public/*package*/ final /*synthesized*/ fun foo(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
-    public/*package*/ open fun foo(/*0*/ r: java.lang.Runnable?): kotlin.Unit
+    public/*package*/ final /*synthesized*/ fun foo(/*0*/ r: (() -> kotlin.Unit)!): kotlin.Unit
+    public/*package*/ open fun foo(/*0*/ r: java.lang.Runnable!): kotlin.Unit
diff --git a/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/OverrideSamAdapterInKotlin.txt b/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/OverrideSamAdapterInKotlin.txt
index 18d1439..eebc4a3 100644
--- a/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/OverrideSamAdapterInKotlin.txt
+++ b/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/OverrideSamAdapterInKotlin.txt
@@ -6 +6 @@
-    public/*package*/ open override /*1*/ /*fake_override*/ fun foo(/*0*/ r: java.lang.Runnable?): kotlin.Unit
+    public/*package*/ open override /*1*/ /*fake_override*/ fun foo(/*0*/ r: java.lang.Runnable!): kotlin.Unit
@@ -11,2 +11,2 @@
-    public/*package*/ final /*synthesized*/ fun foo(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
-    public/*package*/ open fun foo(/*0*/ r: java.lang.Runnable?): kotlin.Unit
+    public/*package*/ final /*synthesized*/ fun foo(/*0*/ r: (() -> kotlin.Unit)!): kotlin.Unit
+    public/*package*/ open fun foo(/*0*/ r: java.lang.Runnable!): kotlin.Unit
diff --git a/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/SamAdapterForOverriddenFromKotlin.txt b/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/SamAdapterForOverriddenFromKotlin.txt
index 2b4ba5d..8d5333e 100644
--- a/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/SamAdapterForOverriddenFromKotlin.txt
+++ b/compiler/testData/loadJava/javaAgainstKotlin/samAdapters/SamAdapterForOverriddenFromKotlin.txt
@@ -5,2 +5,2 @@
-    public final /*synthesized*/ fun foo(/*0*/ r: () -> kotlin.Unit): kotlin.Unit
-    public open override /*1*/ fun foo(/*0*/ r: java.lang.Runnable): kotlin.Unit
+    public final /*synthesized*/ fun foo(/*0*/ r: (() -> kotlin.Unit)!): kotlin.Unit
+    public open override /*1*/ fun foo(/*0*/ r: java.lang.Runnable!): kotlin.Unit
diff --git a/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/DeepSubclassingKotlinInJava.txt b/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/DeepSubclassingKotlinInJava.txt
index 8f00c29..223dfd9 100644
--- a/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/DeepSubclassingKotlinInJava.txt
+++ b/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/DeepSubclassingKotlinInJava.txt
@@ -10 +10 @@
-    public open override /*1*/ fun foo(): kotlin.String
+    public open override /*1*/ fun foo(): kotlin.String!
@@ -20 +20 @@
-    public open override /*1*/ fun foo(): kotlin.String
+    public open override /*1*/ fun foo(): kotlin.String!
@@ -30 +30 @@
-    public open override /*1*/ fun foo(): kotlin.String
+    public open override /*1*/ fun foo(): kotlin.String!
diff --git a/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/InheritExtensionAndNot.txt b/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/InheritExtensionAndNot.txt
index d6713d6..2864f67 100644
--- a/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/InheritExtensionAndNot.txt
+++ b/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/InheritExtensionAndNot.txt
@@ -4,2 +4,2 @@
-    public abstract override /*1*/ fun bar(/*0*/ vararg p: kotlin.String /*kotlin.Array<kotlin.String>*/): kotlin.Unit
-    public abstract override /*1*/ fun foo(/*0*/ p: kotlin.String): kotlin.Unit
+    public abstract override /*1*/ fun bar(/*0*/ vararg p: kotlin.String! /*kotlin.Array<(out) kotlin.String!>!*/): kotlin.Unit
+    public abstract override /*1*/ fun foo(/*0*/ p: kotlin.String!): kotlin.Unit
diff --git a/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/InheritExtensionFunction.txt b/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/InheritExtensionFunction.txt
index aca2de9..b15451c 100644
--- a/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/InheritExtensionFunction.txt
+++ b/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/InheritExtensionFunction.txt
@@ -5 +5 @@
-    public open override /*1*/ fun kotlin.String.bar(/*0*/ p: kotlin.String): kotlin.String
+    public open override /*1*/ fun kotlin.String!.bar(/*0*/ p: kotlin.String!): kotlin.String!
diff --git a/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/SubclassFromTraitImplementation.txt b/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/SubclassFromTraitImplementation.txt
index d695d8a..4b5c467 100644
--- a/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/SubclassFromTraitImplementation.txt
+++ b/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/SubclassFromTraitImplementation.txt
@@ -11 +11 @@
-    java.lang.Override() public open override /*1*/ fun bar(): kotlin.String
+    java.lang.Override() public open override /*1*/ fun bar(): kotlin.String!
diff --git a/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/SubclassingKotlinInJava.txt b/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/SubclassingKotlinInJava.txt
index cd5842f..d9c0776 100644
--- a/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/SubclassingKotlinInJava.txt
+++ b/compiler/testData/loadJava/javaAgainstKotlin/signaturePropagation/SubclassingKotlinInJava.txt
@@ -5 +5 @@
-    public open override /*1*/ fun foo(): kotlin.String
+    public open override /*1*/ fun foo(): kotlin.String!
diff --git a/compiler/testData/loadJava/kotlinAgainstCompiledJavaWithKotlin/javaRefersToKotlin.txt b/compiler/testData/loadJava/kotlinAgainstCompiledJavaWithKotlin/javaRefersToKotlin.txt
index 71ab1f7..d4ee5ed 100644
--- a/compiler/testData/loadJava/kotlinAgainstCompiledJavaWithKotlin/javaRefersToKotlin.txt
+++ b/compiler/testData/loadJava/kotlinAgainstCompiledJavaWithKotlin/javaRefersToKotlin.txt
@@ -3 +3 @@
-public /*synthesized*/ fun J(/*0*/ function: (test.K?) -> kotlin.Unit): test.J
+public /*synthesized*/ fun J(/*0*/ function: (test.K!) -> kotlin.Unit): test.J
@@ -6 +6 @@
-    public abstract fun foo(/*0*/ p0: test.K?): kotlin.Unit
+    public abstract fun foo(/*0*/ p0: test.K!): kotlin.Unit
diff --git a/compiler/testData/loadJava/kotlinAgainstCompiledJavaWithKotlin/propagationAgainstDeserializedSuperclass.txt b/compiler/testData/loadJava/kotlinAgainstCompiledJavaWithKotlin/propagationAgainstDeserializedSuperclass.txt
index 1929b58..8fa5fa0 100644
--- a/compiler/testData/loadJava/kotlinAgainstCompiledJavaWithKotlin/propagationAgainstDeserializedSuperclass.txt
+++ b/compiler/testData/loadJava/kotlinAgainstCompiledJavaWithKotlin/propagationAgainstDeserializedSuperclass.txt
@@ -5 +5 @@
-    public open override /*1*/ fun foo(/*0*/ l: kotlin.MutableList<kotlin.String>): kotlin.String
+    public open override /*1*/ fun foo(/*0*/ l: kotlin.(Mutable)List<kotlin.String!>!): kotlin.String!
diff --git a/compiler/testData/loadJava/sourceJava/ErrorTypes.txt b/compiler/testData/loadJava/sourceJava/ErrorTypes.txt
index fc962a8..e7c6ed5 100644
--- a/compiler/testData/loadJava/sourceJava/ErrorTypes.txt
+++ b/compiler/testData/loadJava/sourceJava/ErrorTypes.txt
@@ -6,3 +6,3 @@
-        public abstract fun errorTypeInParameter(/*0*/ list: kotlin.List<kotlin.Array<[ERROR : Unresolved java classifier: T]>?>?): kotlin.Unit
-        public abstract override /*1*/ /*fake_override*/ fun errorTypeInParameter(/*0*/ list: kotlin.List<kotlin.Array<[ERROR : Unresolved java classifier: T]>?>?): kotlin.Unit
-        public abstract override /*1*/ fun returnErrorType(): [ERROR : Unresolved java classifier: T]?
+        public abstract fun errorTypeInParameter(/*0*/ list: kotlin.(Mutable)List<kotlin.Array<(out) [ERROR : Unresolved java classifier: T]!>!>!): kotlin.Unit
+        public abstract override /*1*/ /*fake_override*/ fun errorTypeInParameter(/*0*/ list: kotlin.(Mutable)List<kotlin.Array<(out) [ERROR : Unresolved java classifier: T]!>!>!): kotlin.Unit
+        public abstract override /*1*/ fun returnErrorType(): [ERROR : Unresolved java classifier: T]!
@@ -12,2 +12,2 @@
-        public abstract fun errorTypeInParameter(/*0*/ list: kotlin.List<kotlin.Array<[ERROR : Unresolved java classifier: T]>?>?): kotlin.Unit
-        public abstract fun returnErrorType(): [ERROR : Unresolved java classifier: T]?
+        public abstract fun errorTypeInParameter(/*0*/ list: kotlin.(Mutable)List<kotlin.Array<(out) [ERROR : Unresolved java classifier: T]!>!>!): kotlin.Unit
+        public abstract fun returnErrorType(): [ERROR : Unresolved java classifier: T]!
diff --git a/compiler/testData/loadJava/sourceJava/ReturnInnerSubclassOfSupersInner.txt b/compiler/testData/loadJava/sourceJava/ReturnInnerSubclassOfSupersInner.txt
index ddd0d9d..8d3069a 100644
--- a/compiler/testData/loadJava/sourceJava/ReturnInnerSubclassOfSupersInner.txt
+++ b/compiler/testData/loadJava/sourceJava/ReturnInnerSubclassOfSupersInner.txt
@@ -5 +5 @@
-    public open class Sub</*0*/ B> : test.ReturnInnerSubclassOfSupersInner.Super<B> {
+    public open class Sub</*0*/ B> : test.ReturnInnerSubclassOfSupersInner.Super<B!> {
@@ -10 +10 @@
-            public/*package*/ open override /*1*/ fun get(): test.ReturnInnerSubclassOfSupersInner.Sub<B>?
+            public/*package*/ open override /*1*/ fun get(): test.ReturnInnerSubclassOfSupersInner.Sub<B!>!
@@ -19 +19 @@
-            public/*package*/ open fun get(): test.ReturnInnerSubclassOfSupersInner.Super<A>?
+            public/*package*/ open fun get(): test.ReturnInnerSubclassOfSupersInner.Super<A!>!
diff --git a/compiler/testData/loadJava/sourceJava/ReturnNotSubtype.txt b/compiler/testData/loadJava/sourceJava/ReturnNotSubtype.txt
index bd9e800..f1ea009 100644
--- a/compiler/testData/loadJava/sourceJava/ReturnNotSubtype.txt
+++ b/compiler/testData/loadJava/sourceJava/ReturnNotSubtype.txt
@@ -5 +5 @@
-    public trait Sub : test.ReturnNotSubtype.Super<kotlin.Boolean> {
+    public trait Sub : test.ReturnNotSubtype.Super<kotlin.Boolean!> {
@@ -7,2 +7,2 @@
-        public abstract override /*1*/ fun array(): kotlin.Array<java.lang.Void>?
-        public abstract override /*1*/ fun klass(): java.lang.Class<out kotlin.Any?>?
+        public abstract override /*1*/ fun array(): kotlin.Array<(out) java.lang.Void!>!
+        public abstract override /*1*/ fun klass(): java.lang.Class<out kotlin.Any?>!
@@ -10,2 +10,2 @@
-        public abstract override /*1*/ fun string2(): kotlin.MutableList<kotlin.Boolean>?
-        public abstract override /*1*/ fun t(): java.lang.Void?
+        public abstract override /*1*/ fun string2(): kotlin.(Mutable)List<kotlin.Boolean!>!
+        public abstract override /*1*/ fun t(): java.lang.Void!
@@ -16,5 +16,5 @@
-        public abstract fun array(): kotlin.Array<T>?
-        public abstract fun klass(): java.lang.Class<out kotlin.CharSequence?>?
-        public abstract fun string1(): kotlin.String?
-        public abstract fun string2(): kotlin.String?
-        public abstract fun t(): T?
+        public abstract fun array(): kotlin.Array<(out) T!>!
+        public abstract fun klass(): java.lang.Class<out kotlin.CharSequence!>!
+        public abstract fun string1(): kotlin.String!
+        public abstract fun string2(): kotlin.String!
+        public abstract fun t(): T!
diff --git a/compiler/testData/loadJava/sourceJava/WrongNumberOfGenericParameters.txt b/compiler/testData/loadJava/sourceJava/WrongNumberOfGenericParameters.txt
index fb84f13..573f78e 100644
--- a/compiler/testData/loadJava/sourceJava/WrongNumberOfGenericParameters.txt
+++ b/compiler/testData/loadJava/sourceJava/WrongNumberOfGenericParameters.txt
@@ -4,4 +4,4 @@
-    public abstract fun o0(): test.WrongNumberOfGenericParameters.One<out kotlin.Any?>?
-    public abstract fun o2(): test.WrongNumberOfGenericParameters.One<[ERROR : T]>?
-    public abstract fun t1(): test.WrongNumberOfGenericParameters.Two<out kotlin.Any?, out kotlin.Any?>?
-    public abstract fun z(): test.WrongNumberOfGenericParameters.Zero?
+    public abstract fun o0(): test.WrongNumberOfGenericParameters.One<out kotlin.Any?>!
+    public abstract fun o2(): test.WrongNumberOfGenericParameters.One<[ERROR : T]>!
+    public abstract fun t1(): test.WrongNumberOfGenericParameters.Two<out kotlin.Any?, out kotlin.Any?>!
+    public abstract fun z(): test.WrongNumberOfGenericParameters.Zero!
diff --git a/idea/testData/completion/handlers/smart/JavaStaticMethodInsertsImport.kt b/idea/testData/completion/handlers/smart/JavaStaticMethodInsertsImport.kt
index 51eeb11..2b79d4c 100644
--- a/idea/testData/completion/handlers/smart/JavaStaticMethodInsertsImport.kt
+++ b/idea/testData/completion/handlers/smart/JavaStaticMethodInsertsImport.kt
@@ -5 +5 @@
-// ELEMENT_TEXT: Calendar.getInstance(TimeZone)
+// ELEMENT_TEXT: Calendar.getInstance(TimeZone!)
diff --git a/idea/testData/completion/handlers/smart/JavaStaticMethodInsertsImport.kt.after b/idea/testData/completion/handlers/smart/JavaStaticMethodInsertsImport.kt.after
index d284b98..8309bfd 100644
--- a/idea/testData/completion/handlers/smart/JavaStaticMethodInsertsImport.kt.after
+++ b/idea/testData/completion/handlers/smart/JavaStaticMethodInsertsImport.kt.after
@@ -7 +7 @@
-// ELEMENT_TEXT: Calendar.getInstance(TimeZone)
+// ELEMENT_TEXT: Calendar.getInstance(TimeZone!)
diff --git a/idea/testData/completion/smart/JavaStaticFields.kt b/idea/testData/completion/smart/JavaStaticFields.kt
index 4d6d8c2..b35b2c5 100644
--- a/idea/testData/completion/smart/JavaStaticFields.kt
+++ b/idea/testData/completion/smart/JavaStaticFields.kt
@@ -5,2 +5,2 @@
-// EXIST: { lookupString:"Locale.ENGLISH", itemText:"Locale.ENGLISH", tailText:" (java.util)", typeText:"Locale" }
-// EXIST: { lookupString:"Locale.FRENCH", itemText:"Locale.FRENCH", tailText:" (java.util)", typeText:"Locale" }
+// EXIST: { lookupString:"Locale.ENGLISH", itemText:"Locale.ENGLISH", tailText:" (java.util)", typeText:"Locale!" }
+// EXIST: { lookupString:"Locale.FRENCH", itemText:"Locale.FRENCH", tailText:" (java.util)", typeText:"Locale!" }
diff --git a/idea/testData/completion/smart/JavaStaticFieldsForNullable.kt b/idea/testData/completion/smart/JavaStaticFieldsForNullable.kt
index e0bf222..e32351d 100644
--- a/idea/testData/completion/smart/JavaStaticFieldsForNullable.kt
+++ b/idea/testData/completion/smart/JavaStaticFieldsForNullable.kt
@@ -5,2 +5,2 @@
-// EXIST: { lookupString:"Locale.ENGLISH", itemText:"Locale.ENGLISH", tailText:" (java.util)", typeText:"Locale" }
-// EXIST: { lookupString:"Locale.FRENCH", itemText:"Locale.FRENCH", tailText:" (java.util)", typeText:"Locale" }
+// EXIST: { lookupString:"Locale.ENGLISH", itemText:"Locale.ENGLISH", tailText:" (java.util)", typeText:"Locale!" }
+// EXIST: { lookupString:"Locale.FRENCH", itemText:"Locale.FRENCH", tailText:" (java.util)", typeText:"Locale!" }
diff --git a/idea/testData/completion/smart/JavaStaticMethods.kt b/idea/testData/completion/smart/JavaStaticMethods.kt
index c580645..89dd605 100644
--- a/idea/testData/completion/smart/JavaStaticMethods.kt
+++ b/idea/testData/completion/smart/JavaStaticMethods.kt
@@ -5,3 +5,3 @@
-// EXIST: { lookupString:"Calendar.getInstance", itemText:"Calendar.getInstance()", tailText:" (java.util)", typeText:"Calendar" }
-// EXIST: { lookupString:"Calendar.getInstance", itemText:"Calendar.getInstance(TimeZone)", tailText:" (java.util)", typeText:"Calendar" }
-// EXIST: { lookupString:"Calendar.getInstance", itemText:"Calendar.getInstance(TimeZone, Locale)", tailText:" (java.util)", typeText:"Calendar" }
+// EXIST: { lookupString:"Calendar.getInstance", itemText:"Calendar.getInstance()", tailText:" (java.util)", typeText:"Calendar!" }
+// EXIST: { lookupString:"Calendar.getInstance", itemText:"Calendar.getInstance(TimeZone!)", tailText:" (java.util)", typeText:"Calendar!" }
+// EXIST: { lookupString:"Calendar.getInstance", itemText:"Calendar.getInstance(TimeZone!, Locale!)", tailText:" (java.util)", typeText:"Calendar!" }
diff --git a/idea/testData/debugger/tinyApp/src/evaluate/multipleBreakpoints/exceptions.kt b/idea/testData/debugger/tinyApp/src/evaluate/multipleBreakpoints/exceptions.kt
index deb56b8..64275d5 100644
--- a/idea/testData/debugger/tinyApp/src/evaluate/multipleBreakpoints/exceptions.kt
+++ b/idea/testData/debugger/tinyApp/src/evaluate/multipleBreakpoints/exceptions.kt
@@ -40 +40 @@
-        // RESULT: 1: I
+        // RESULT: instance of java.lang.Integer(id=ID): Ljava/lang/Integer;
@@ -49 +49 @@
-        // RESULT: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Number: Ljava/lang/ClassCastException;
+        // RESULT: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer: Ljava/lang/ClassCastException;
diff --git a/idea/testData/editor/quickDoc/JavaClassUsedInKotlin.kt b/idea/testData/editor/quickDoc/JavaClassUsedInKotlin.kt
index 3ae4d72..ab68212 100644
--- a/idea/testData/editor/quickDoc/JavaClassUsedInKotlin.kt
+++ b/idea/testData/editor/quickDoc/JavaClassUsedInKotlin.kt
@@ -5 +5 @@
-// INFO: <b>public</b> <b>constructor</b> SomeClass&lt;T : List&lt;Any?&gt;?&gt;()<br/>Java declaration:<br/>[light_idea_test_case] public class SomeClass&lt;T extends java.util.List&gt; extends Object
\ No newline at end of file
+// INFO: <b>public</b> <b>constructor</b> SomeClass&lt;T : (MutableList&lt;out Any?&gt;..List&lt;Any?&gt;?)&gt;()<br/>Java declaration:<br/>[light_idea_test_case] public class SomeClass&lt;T extends java.util.List&gt; extends Object
\ No newline at end of file
diff --git a/idea/testData/editor/quickDoc/JavaMethodUsedInKotlin.kt b/idea/testData/editor/quickDoc/JavaMethodUsedInKotlin.kt
index 9020cdd..7c71d06 100644
--- a/idea/testData/editor/quickDoc/JavaMethodUsedInKotlin.kt
+++ b/idea/testData/editor/quickDoc/JavaMethodUsedInKotlin.kt
@@ -5 +5 @@
-// INFO: <b>public</b> <b>open</b> <b>fun</b> foo(param: String): Array&lt;out Any&gt;<br/>Java declaration:<br/>Test...
\ No newline at end of file
+// INFO: <b>public</b> <b>open</b> <b>fun</b> foo(param: String!): (Array&lt;Any!&gt;..Array&lt;out Any!&gt;?)<br/>Java declaration:<br/>Test...
\ No newline at end of file
diff --git a/idea/testData/intentions/specifyType/loopParameter.kt.after b/idea/testData/intentions/specifyType/loopParameter.kt.after
index 32f4f93..a0d6772 100644
--- a/idea/testData/intentions/specifyType/loopParameter.kt.after
+++ b/idea/testData/intentions/specifyType/loopParameter.kt.after
@@ -6 +6 @@
-    for (entry: MutableMap.MutableEntry<String, Int><caret> in map.entrySet()) {
+    for (entry: MutableMap.MutableEntry<String, Int>?<caret> in map.entrySet()) {
diff --git a/idea/testData/quickfix/changeSignature/beforeAddParameterNotAvailableForLibrary.kt b/idea/testData/quickfix/changeSignature/beforeAddParameterNotAvailableForLibrary.kt
index b1fb702..36f062b 100644
--- a/idea/testData/quickfix/changeSignature/beforeAddParameterNotAvailableForLibrary.kt
+++ b/idea/testData/quickfix/changeSignature/beforeAddParameterNotAvailableForLibrary.kt
@@ -2 +2 @@
-// ERROR: Too many arguments for public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in java.lang.Object
+// ERROR: Too many arguments for public open fun equals(other: kotlin.Any!): kotlin.Boolean defined in java.lang.Object
diff --git a/idea/testData/structureView/fileStructure/InheritedJavaMembers.after b/idea/testData/structureView/fileStructure/InheritedJavaMembers.after
index 00d6423..661cb72 100644
--- a/idea/testData/structureView/fileStructure/InheritedJavaMembers.after
+++ b/idea/testData/structureView/fileStructure/InheritedJavaMembers.after
@@ -3 +3 @@
-  call(): String? location=→Callable
+  call(): String! location=→Callable
diff --git a/idea/testData/structureView/fileStructure/InheritedSAMConversion.after b/idea/testData/structureView/fileStructure/InheritedSAMConversion.after
index 476e8a1..fbc1ffa 100644
--- a/idea/testData/structureView/fileStructure/InheritedSAMConversion.after
+++ b/idea/testData/structureView/fileStructure/InheritedSAMConversion.after
@@ -4 +4 @@
-  foo((() -> Unit)?): Unit
+  foo((() -> Unit)!): Unit
diff --git a/j2k/tests/testData/ast/annotations/jetbrainsNotNull.java b/j2k/tests/testData/ast/annotations/jetbrainsNotNull.java
index 719ea5d..72a40a5 100644
--- a/j2k/tests/testData/ast/annotations/jetbrainsNotNull.java
+++ b/j2k/tests/testData/ast/annotations/jetbrainsNotNull.java
@@ -14,0 +15 @@
+    // UNNECESSARY_NOT_NULL_ASSERTION heuristic does not work any more, instead we can skip generating !! altogether
diff --git a/j2k/tests/testData/ast/annotations/jetbrainsNotNull.kt b/j2k/tests/testData/ast/annotations/jetbrainsNotNull.kt
index 36d5b96..cbe7606 100644
--- a/j2k/tests/testData/ast/annotations/jetbrainsNotNull.kt
+++ b/j2k/tests/testData/ast/annotations/jetbrainsNotNull.kt
@@ -13 +13,2 @@
-        System.out.println(str)
+        // UNNECESSARY_NOT_NULL_ASSERTION heuristic does not work any more, instead we can skip generating !! altogether
+        System.out!!.println(str)

