diff --git a/libraries/tools/kdoc-maven-plugin/src/main/java/org/jetbrains/kotlin/maven/doc/KDocMojo.java b/libraries/tools/kdoc-maven-plugin/src/main/java/org/jetbrains/kotlin/maven/doc/KDocMojo.java
index 1409871..6225192 100644
--- a/libraries/tools/kdoc-maven-plugin/src/main/java/org/jetbrains/kotlin/maven/doc/KDocMojo.java
+++ b/libraries/tools/kdoc-maven-plugin/src/main/java/org/jetbrains/kotlin/maven/doc/KDocMojo.java
@@ -146 +146 @@
-     * For packages which are not configured, KDoc will look for package.html or package.md files in the source directory
+     * For packages which are not configured, KDoc will look for ReadMe.html or ReadMe.md files in the package source directory
diff --git a/libraries/tools/kdoc/src/main/kotlin/org/jetbrains/kotlin/doc/model/KotlinModel.kt b/libraries/tools/kdoc/src/main/kotlin/org/jetbrains/kotlin/doc/model/KotlinModel.kt
index 2fec434..99cd262 100644
--- a/libraries/tools/kdoc/src/main/kotlin/org/jetbrains/kotlin/doc/model/KotlinModel.kt
+++ b/libraries/tools/kdoc/src/main/kotlin/org/jetbrains/kotlin/doc/model/KotlinModel.kt
@@ -203,0 +204,7 @@
+     * File names we look for in a package directory for the overall description of a package for KDoc
+     */
+    val packageDescriptionFiles = arrayList("readme.md", "ReadMe.md, readme.html, ReadMe.html")
+
+    private val readMeDirsScanned = HashSet<String>()
+
+    /**
@@ -270,10 +277,32 @@
-                if (file == null) {
-                    // lets try find the package.html or package.md file
-                    val srcPath = pkg.filePath()
-                    if (srcPath != null) {
-                        val srcFile = File(srcPath)
-                        val dir = if (srcFile.isDirectory()) srcFile else srcFile.getParentFile()
-                        val f = arrayList(File(dir, "package.html"), File(dir, "package.md")).find{ it.exists() }
-                        if (f != null) file = f.getCanonicalPath() else {
-                            info("package $name has no package.(html|md) in $dir")
-                        }
+                loadWikiDescription(pkg, file)
+            }
+        }
+        return pkg;
+    }
+
+    protected fun loadWikiDescription(pkg: KPackage, file: String?): Unit {
+        if (file != null) {
+            try {
+                pkg.wikiDescription = File(file).readText()
+            } catch (e: Throwable) {
+                warning("Failed to load package ${pkg.name} documentation file $file. Reason $e")
+            }
+        }
+    }
+
+    /**
+     * If a package has no detailed description lets try load it from the descriptors
+     * source directory if we've not checked that directory before
+     */
+    fun tryLoadReadMe(pkg: KPackage, descriptor: DeclarationDescriptor): Unit {
+        if (pkg.wikiDescription.isEmpty()) {
+            // lets try find the package.html or package.md file
+            val srcPath =  pkg.model.filePath(descriptor)
+            if (srcPath != null) {
+                val srcFile = File(srcPath)
+                val dir = if (srcFile.isDirectory()) srcFile else srcFile.getParentFile()
+                if (dir != null && readMeDirsScanned.add(dir.getPath()!!)) {
+                    val f = packageDescriptionFiles.map{ File(dir, it) }.find{ it.exists() }
+                    if (f != null) {
+                        val file = f.getCanonicalPath()
+                        loadWikiDescription(pkg, file)
@@ -281,6 +310,2 @@
-                }
-                if (file != null) {
-                    try {
-                        pkg.wikiDescription = File(file).readText()
-                    } catch (e: Throwable) {
-                        warning("Failed to load package $name documentation file $file. Reason $e")
+                    else {
+                        info("package ${pkg.name} has no ReadMe.(html|md) in $dir")
@@ -291 +315,0 @@
-        return pkg;
@@ -626,7 +650,12 @@
-        val container = classElement.getContainingDeclaration()
-        if (name != null && container is NamespaceDescriptor) {
-            val pkg = getPackage(container)
-            return pkg.getClass(name, classElement)
-        } else {
-            warning("no package found for $container and class $name")
-            return null
+        if (name != null) {
+            var dec: DeclarationDescriptor? = classElement.getContainingDeclaration()
+            while (dec != null) {
+                val container = dec
+                if (container is NamespaceDescriptor) {
+                    val pkg = getPackage(container)
+                    return pkg.getClass(name, classElement)
+                } else {
+                    dec = dec?.getContainingDeclaration()
+                }
+            }
+            warning("no package found for class $name")
@@ -633,0 +663 @@
+        return null
@@ -859,0 +890,4 @@
+            // sometimes we may have source files for a package in different source directories
+            // such as the kotlin package in generated directory; so lets always check if we can find
+            // the readme
+            model.tryLoadReadMe(this, descriptor)

