diff --git a/examples/src/Builder.jetl b/examples/src/Builder.jetl
index ef3036b..8aaf8c6 100644
--- a/examples/src/Builder.jetl
+++ b/examples/src/Builder.jetl
@@ -1 +1 @@
-object AntBuilder() {
+val foo = object AntBuilder() {
diff --git a/idea/src/org/jetbrains/jet/lang/parsing/JetExpressionParsing.java b/idea/src/org/jetbrains/jet/lang/parsing/JetExpressionParsing.java
index 6eb3050..25f4ff4 100644
--- a/idea/src/org/jetbrains/jet/lang/parsing/JetExpressionParsing.java
+++ b/idea/src/org/jetbrains/jet/lang/parsing/JetExpressionParsing.java
@@ -419 +419 @@
-        myBuilder.enableEols();
+        myBuilder.restoreEolsState();
diff --git a/idea/testData/psi/Match.jet b/idea/testData/psi/Match.jet
index e56c458..8a3b14d 100644
--- a/idea/testData/psi/Match.jet
+++ b/idea/testData/psi/Match.jet
@@ -1,0 +2,10 @@
+  return false
+
+  fun a() = {a match { case a => b }}
+
+  // foo
+  fun b() {}
+
+}
+
+fun foo() {
diff --git a/idea/testData/psi/Match.txt b/idea/testData/psi/Match.txt
index 12f3fa9..86b4fab 100644
--- a/idea/testData/psi/Match.txt
+++ b/idea/testData/psi/Match.txt
@@ -15,0 +16,73 @@
+        RETURN
+          PsiElement(return)('return')
+          PsiWhiteSpace(' ')
+          BOOLEAN_CONSTANT
+            PsiElement(false)('false')
+        PsiWhiteSpace('\n\n  ')
+        FUN
+          PsiElement(fun)('fun')
+          PsiWhiteSpace(' ')
+          PsiElement(IDENTIFIER)('a')
+          TYPE_PARAMETER_LIST
+            <empty list>
+          VALUE_PARAMETER_LIST
+            PsiElement(LPAR)('(')
+            PsiElement(RPAR)(')')
+          PsiWhiteSpace(' ')
+          PsiElement(EQ)('=')
+          PsiWhiteSpace(' ')
+          FUNCTION_LITERAL
+            PsiElement(LBRACE)('{')
+            BODY
+              BINARY_EXPRESSION
+                PsiElement(IDENTIFIER)('a')
+                PsiWhiteSpace(' ')
+                PsiElement(match)('match')
+                PsiWhiteSpace(' ')
+                PsiElement(LBRACE)('{')
+                PsiWhiteSpace(' ')
+                MATCH_ENTRY
+                  PsiElement(case)('case')
+                  PsiWhiteSpace(' ')
+                  PATTERN
+                    USER_TYPE
+                      PsiElement(IDENTIFIER)('a')
+                  PsiWhiteSpace(' ')
+                  PsiElement(DOUBLE_ARROW)('=>')
+                  PsiWhiteSpace(' ')
+                  PsiElement(IDENTIFIER)('b')
+                PsiWhiteSpace(' ')
+                PsiElement(RBRACE)('}')
+            PsiElement(RBRACE)('}')
+        PsiWhiteSpace('\n\n  ')
+        PsiComment(EOL_COMMENT)('// foo')
+        PsiWhiteSpace('\n  ')
+        FUN
+          PsiElement(fun)('fun')
+          PsiWhiteSpace(' ')
+          PsiElement(IDENTIFIER)('b')
+          TYPE_PARAMETER_LIST
+            <empty list>
+          VALUE_PARAMETER_LIST
+            PsiElement(LPAR)('(')
+            PsiElement(RPAR)(')')
+          PsiWhiteSpace(' ')
+          BLOCK
+            PsiElement(LBRACE)('{')
+            PsiElement(RBRACE)('}')
+        PsiWhiteSpace('\n\n')
+        PsiElement(RBRACE)('}')
+    PsiWhiteSpace('\n\n')
+    FUN
+      PsiElement(fun)('fun')
+      PsiWhiteSpace(' ')
+      PsiElement(IDENTIFIER)('foo')
+      TYPE_PARAMETER_LIST
+        <empty list>
+      VALUE_PARAMETER_LIST
+        PsiElement(LPAR)('(')
+        PsiElement(RPAR)(')')
+      PsiWhiteSpace(' ')
+      BLOCK
+        PsiElement(LBRACE)('{')
+        PsiWhiteSpace('\n  ')

