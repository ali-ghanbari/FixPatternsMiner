diff --git a/src/main/java/org/I0Itec/zkclient/InMemoryConnection.java b/src/main/java/org/I0Itec/zkclient/InMemoryConnection.java
index f22678d..88122c7 100644
--- a/src/main/java/org/I0Itec/zkclient/InMemoryConnection.java
+++ b/src/main/java/org/I0Itec/zkclient/InMemoryConnection.java
@@ -168 +168 @@
-                    children.add(string);
+                    children.add(stack[stack.length-1]);
diff --git a/src/test/java/org/I0Itec/zkclient/ServerZkClientTest.java b/src/test/java/org/I0Itec/zkclient/ServerZkClientTest.java
index 69a8c84..89f7334 100644
--- a/src/test/java/org/I0Itec/zkclient/ServerZkClientTest.java
+++ b/src/test/java/org/I0Itec/zkclient/ServerZkClientTest.java
@@ -6,0 +7 @@
+import java.util.List;
@@ -11 +11,0 @@
-import org.apache.zookeeper.KeeperException;
@@ -17 +17 @@
-public class ServerZkClientTest extends BaseZkClientTest {
+public class ServerZkClientTest extends AbstractBaseZkClientTest {
@@ -19,0 +20 @@
+    @Override
@@ -21 +22 @@
-    public void setUp() throws InterruptedException, IOException, KeeperException {
+    public void setUp() throws Exception {
@@ -26,0 +28 @@
+    @Override
@@ -28 +30 @@
-    public void tearDown() throws InterruptedException {
+    public void tearDown() throws Exception {
@@ -75,0 +78,75 @@
+    @Test(timeout = 15000)
+    public void testRetryUntilConnected_SessionExpiredException() throws IOException {
+        LOG.info("--- testRetryUntilConnected_SessionExpiredException");
+
+        // Use a tick time of 100ms, because the minimum session timeout is 2 x tick-time.
+        // ZkServer zkServer = TestUtil.startZkServer("ZkClientTest-testSessionExpiredException", 4711, 100);
+        Gateway gateway = new Gateway(4712, 4711);
+        gateway.start();
+
+        // Use a session timeout of 200ms
+        final ZkClient _client = new ZkClient("localhost:4712", 200, 5000);
+
+        gateway.stop();
+
+        // Start server in 600ms, the session should have expired by then
+        new DeferredGatewayStarter(gateway, 600).start();
+
+        // This should work as soon as a new session has been created (and the connection is reestablished), if it fails it throws a SessionExpiredException
+        _client.retryUntilConnected(new Callable<Object>() {
+
+            @Override
+            public Object call() throws Exception {
+                _client.exists("/a");
+                return null;
+            }
+        });
+
+        _client.close();
+        // zkServer.shutdown();
+        gateway.stop();
+    }
+
+    @Test(timeout = 15000)
+    public void testChildListenerAfterSessionExpiredException() throws Exception {
+        LOG.info("--- testChildListenerAfterSessionExpiredException");
+
+        int sessionTimeout = 200;
+        ZkClient connectedClient = _zkServer.getZkClient();
+        connectedClient.createPersistent("/root");
+
+        Gateway gateway = new Gateway(4712, 4711);
+        gateway.start();
+
+        final ZkClient disconnectedZkClient = new ZkClient("localhost:4712", sessionTimeout, 5000);
+        final Holder<List<String>> children = new Holder<List<String>>();
+        disconnectedZkClient.subscribeChildChanges("/root", new IZkChildListener() {
+
+            @Override
+            public void handleChildChange(String parentPath, List<String> currentChilds) throws Exception {
+                children.set(currentChilds);
+            }
+        });
+
+        gateway.stop();
+
+        // The connected client now created a new child node
+        connectedClient.createPersistent("/root/node");
+
+        // Wait for 3 x sessionTimeout, the session should have expired by then and start the gateway again
+        Thread.sleep(sessionTimeout * 3);
+        gateway.start();
+
+        Boolean hasOneChild = TestUtil.waitUntil(true, new Callable<Boolean>() {
+
+            @Override
+            public Boolean call() throws Exception {
+                return children.get() != null && children.get().size() == 1;
+            }
+        }, TimeUnit.SECONDS, 5);
+
+        assertTrue(hasOneChild);
+
+        disconnectedZkClient.close();
+        gateway.stop();
+    }

