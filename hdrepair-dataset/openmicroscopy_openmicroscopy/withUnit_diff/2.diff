diff --git a/components/server/src/ome/logic/PojosImpl.java b/components/server/src/ome/logic/PojosImpl.java
index 0dfb7d2..3667cb2 100644
--- a/components/server/src/ome/logic/PojosImpl.java
+++ b/components/server/src/ome/logic/PojosImpl.java
@@ -344,0 +345,2 @@
+            /* paging has now been done */
+            options = options.page(0, Integer.MAX_VALUE);
diff --git a/components/tools/OmeroJava/test/integration/AbstractServerTest.java b/components/tools/OmeroJava/test/integration/AbstractServerTest.java
index 94ad3ed..27aa2e9 100644
--- a/components/tools/OmeroJava/test/integration/AbstractServerTest.java
+++ b/components/tools/OmeroJava/test/integration/AbstractServerTest.java
@@ -28,0 +29 @@
+import ome.services.blitz.repo.path.FsFile;
@@ -63,0 +65,2 @@
+import omero.model.Fileset;
+import omero.model.FilesetI;
@@ -167,2 +170,3 @@
-    
- 
+
+    /* the managed repository directory for the user from test class setup */
+    private String userFsDir = null;
@@ -224 +228,2 @@
-        newUserAndGroup("rw----");
+        final EventContext ctx = newUserAndGroup("rw----");
+        this.userFsDir = ctx.userName + "_" + ctx.userId + FsFile.separatorChar;
@@ -520,0 +526,11 @@
+     * Create a fileset with a template prefix appropriate for the user created by {@link #setUp()}.
+     * Does not access the OMERO API or persist the new fileset.
+     * @return a new fileset
+     */
+    protected Fileset newFileset() {
+        final Fileset fileset = new FilesetI();
+        fileset.setTemplatePrefix(omero.rtypes.rstring(this.userFsDir + System.currentTimeMillis() + FsFile.separatorChar));
+        return fileset;
+    }
+
+    /**
diff --git a/components/tools/OmeroJava/test/integration/PojosServiceTest.java b/components/tools/OmeroJava/test/integration/PojosServiceTest.java
index 0d32518..3aba4f8 100644
--- a/components/tools/OmeroJava/test/integration/PojosServiceTest.java
+++ b/components/tools/OmeroJava/test/integration/PojosServiceTest.java
@@ -2 +1,0 @@
-/*
@@ -5 +4 @@
- *   Copyright 2006-2010 University of Dundee. All rights reserved.
+ *   Copyright 2006-2013 University of Dundee. All rights reserved.
@@ -13,0 +13 @@
+import java.util.Collections;
@@ -15,0 +16 @@
+import java.util.HashSet;
@@ -22,0 +24 @@
+import org.testng.Assert;
@@ -44 +45,0 @@
-import omero.model.FilesetI;
@@ -762 +763,55 @@
-    
+
+    /**
+     * Tests that the pagination works correctly for
+     * {@link ome.api.IContainer#getImages(Class, Set, ome.parameters.Parameters)}.
+     * @throws Exception unexpected
+     */
+    @Test(groups = "ticket:9934")
+    public void testGetImagesPaged() throws Exception {
+        final int totalNumberOfImages = 12;
+        /* create a new dataset containing new images */
+        final long datasetId = iUpdate.saveAndReturnObject(mmFactory.simpleDatasetData().asIObject()).getId().getValue();
+        final List<Long> datasetIdList = Collections.<Long>singletonList(datasetId);
+        final Set<Long> imageIds = new HashSet<Long>(totalNumberOfImages);
+        for (int i = 0; i < totalNumberOfImages; i++) {
+            final Image image = (Image) iUpdate.saveAndReturnObject(mmFactory.createImage());
+            imageIds.add(image.getId().getValue());
+            final DatasetImageLink dil = new DatasetImageLinkI();
+            dil.setParent((Dataset) iQuery.find(Dataset.class.getName(), datasetId));
+            dil.setChild(image);
+            iUpdate.saveObject(dil);
+        }
+        /* check that the resulting image IDs are unique */
+        Assert.assertEquals(imageIds.size(), totalNumberOfImages,
+                "image IDs should be unique");
+        /* try various page sizes, make sure the total results set is as expected */
+        for (int pageSize = 1; pageSize < totalNumberOfImages + 2; pageSize++) {
+            /* note the IDs found by this set of pages */
+            final Set<Long> imageIdsPaged = new HashSet<Long>(totalNumberOfImages);
+            boolean nextIsEmpty = false;
+            int startImageIndex = 0;
+            while (true) {
+                /* per page */
+                final ParametersI parameters = new ParametersI().page(startImageIndex, pageSize);
+                final List<Image> pageOfImages = iContainer.getImages(Dataset.class.getName(), datasetIdList, parameters);
+                if (nextIsEmpty) {
+                    Assert.assertTrue(pageOfImages.isEmpty(),
+                            "expected empty pages after an undersized page");
+                } else {
+                    nextIsEmpty = pageOfImages.size() < pageSize;
+                }
+                if (pageOfImages.isEmpty()) {
+                    break;
+                }
+                for (final Image image : pageOfImages) {
+                    Assert.assertTrue(imageIdsPaged.add(image.getId().getValue()),
+                            "paged query should not return duplicates");
+                }
+                startImageIndex += pageSize;
+            }
+            /* ensure that exactly the expected image IDs are returned */
+            Assert.assertEquals(imageIdsPaged, imageIds,
+                    "paged query should cumulatively return same results as when unpaged");
+        }
+    }
+
@@ -1416 +1471 @@
-    	Fileset fileset = new FilesetI();
+    	Fileset fileset = newFileset();
@@ -1462 +1517 @@
-    	Fileset fileset = new FilesetI();
+    	Fileset fileset = newFileset();
@@ -1493 +1548 @@
-    	Fileset fileset = new FilesetI();
+    	Fileset fileset = newFileset();
@@ -1546 +1601 @@
-    	Fileset fileset = new FilesetI();
+    	Fileset fileset = newFileset();
@@ -1610 +1665 @@
-    	Fileset fileset = new FilesetI();
+    	Fileset fileset = newFileset();
@@ -1658 +1713 @@
-    	Fileset fileset = new FilesetI();
+    	Fileset fileset = newFileset();
@@ -1730 +1785 @@
-    	Fileset fileset = new FilesetI();
+    	Fileset fileset = newFileset();
@@ -1792 +1847 @@
-    	Fileset fileset = new FilesetI();
+    	Fileset fileset = newFileset();
@@ -1877 +1932 @@
-    	Fileset fileset = new FilesetI();
+    	Fileset fileset = newFileset();
@@ -1928 +1983 @@
-    	Fileset fileset = new FilesetI();
+    	Fileset fileset = newFileset();
@@ -1958 +2013 @@
-    	Fileset fileset = new FilesetI();
+    	Fileset fileset = newFileset();

