diff --git a/jcommune-service/src/test/java/org/jtalks/jcommune/service/nontransactional/AvatarServiceTest.java b/jcommune-service/src/test/java/org/jtalks/jcommune/service/nontransactional/AvatarServiceTest.java
index e777756..7cae467 100644
--- a/jcommune-service/src/test/java/org/jtalks/jcommune/service/nontransactional/AvatarServiceTest.java
+++ b/jcommune-service/src/test/java/org/jtalks/jcommune/service/nontransactional/AvatarServiceTest.java
@@ -94,2 +94,2 @@
-    @Test(expectedExceptions = IllegalArgumentException.class, dataProvider = "nullValues")
-    public void inputDataForProcessConvertAvatarToBase64StringIsNull(byte[] bytes) throws Exception {
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void inputDataForProcessConvertAvatarToBase64StringIsNull() throws Exception {
@@ -97 +97 @@
-        avatarService.convertBytesToBase64String(bytes);
+        avatarService.convertBytesToBase64String(null);
@@ -101,2 +101,2 @@
-    @Test(expectedExceptions = IllegalArgumentException.class, dataProvider = "nullValues")
-    public void inputDataForProcessConvertAvatarToBase64StringIsInvalid(byte[] bytes) throws Exception {
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void inputDataForProcessConvertAvatarToBase64StringIsInvalid() throws Exception {
@@ -104 +104 @@
-        avatarService.convertBytesToBase64String(bytes);
+        avatarService.convertBytesToBase64String(null);
@@ -119,2 +119,2 @@
-    @Test(expectedExceptions = IllegalArgumentException.class, dataProvider = "nullValues")
-    public void inputDataForValidateAvatarFormatIsNull(MultipartFile file) throws Exception {
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void inputDataForValidateAvatarFormatIsNull() throws Exception {
@@ -122 +122 @@
-        avatarService.validateAvatarFormat(file);
+        avatarService.validateAvatarFormat(null);
@@ -131,2 +131,2 @@
-    @Test(expectedExceptions = IllegalArgumentException.class, dataProvider = "nullValues")
-    public void inputDataForValidateAvatarSizeIsNull(byte[] bytes) throws Exception {
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void inputDataForValidateAvatarSizeIsNull() throws Exception {
@@ -134 +134 @@
-        avatarService.validateAvatarSize(bytes);
+        avatarService.validateAvatarSize(null);
@@ -158,8 +157,0 @@
-        };
-    }
-
-    @DataProvider
-    private Object[][] nullValues() {
-
-        return new Object[][]{
-                {null}
diff --git a/jcommune-view/jcommune-web-controller/src/main/java/org/jtalks/jcommune/web/controller/AvatarController.java b/jcommune-view/jcommune-web-controller/src/main/java/org/jtalks/jcommune/web/controller/AvatarController.java
index be3210f..5399198 100644
--- a/jcommune-view/jcommune-web-controller/src/main/java/org/jtalks/jcommune/web/controller/AvatarController.java
+++ b/jcommune-view/jcommune-web-controller/src/main/java/org/jtalks/jcommune/web/controller/AvatarController.java
@@ -194 +193,0 @@
-
diff --git a/jcommune-view/jcommune-web-controller/src/test/java/org/jtalks/jcommune/web/controller/AvatarControllerTest.java b/jcommune-view/jcommune-web-controller/src/test/java/org/jtalks/jcommune/web/controller/AvatarControllerTest.java
index eddae91..6a454da 100644
--- a/jcommune-view/jcommune-web-controller/src/test/java/org/jtalks/jcommune/web/controller/AvatarControllerTest.java
+++ b/jcommune-view/jcommune-web-controller/src/test/java/org/jtalks/jcommune/web/controller/AvatarControllerTest.java
@@ -90 +89,0 @@
-    private String name = "name";
@@ -92,2 +90,0 @@
-    private Map<String, MultipartFile> fileMap;
-    private HttpHeaders headers;
@@ -101,3 +98,3 @@
-    @Test(dataProvider = "validData-iframe-provider")
-    public void testValidUploadAvatarIFrame(Map<String, MultipartFile> fileMap,
-                                            ResponseEntity<String> expectedResponseEntity) throws Exception {
+    @Test(dataProvider = "validDataForOperaIE")
+    public void testValidUploadAvatarForOperaIE(Map<String, MultipartFile> fileMap,
+                                                ResponseEntity<String> expectedResponseEntity) throws Exception {
@@ -210 +207 @@
-    @Test(dataProvider = "validData-XHR-provider")
+    @Test(dataProvider = "validDataForChromeFF")
@@ -224,5 +221,4 @@
-    @Test(enabled = false, dataProvider = "invalidData-XHR-provider")
-    public void testInvalidUploadAvatarXHR(byte[] avatar, Map<String, String> expectedData) throws Exception {
-        //set expectations
-        when(avatarService.convertBytesToBase64String(avatar)).thenThrow(new ImageProcessException());
-
+    @Test(dataProvider = "invalidDataGeneralCaseForChromeFF")
+    public void testErrorUploadAvatarDueInvalidDataForChromeFF(byte[] bytes, Map<String, String> expectedData)
+            throws Exception {
+        //setUp
@@ -230,0 +227,3 @@
+        //set expectations
+        when(avatarService.convertBytesToBase64String(bytes)).thenThrow(new ImageProcessException());
+
@@ -232 +231,4 @@
-        Map<String, String> result = avatarController.uploadAvatar(avatar, response, locale);
+        Map<String, String> result = avatarController.uploadAvatar(bytes, response, locale);
+
+        //check expectations
+        verify(avatarService).convertBytesToBase64String(bytes);
@@ -235,0 +238,27 @@
+    }
+
+    //TODO Must throw expectedExceptions = ImageSizeException.class
+    @Test(dataProvider = "invalidDataCustomCaseForChromeFF")
+    public void testErrorUploadAvatarDueInvalidImageSizeForChromeFF(byte[] bytes, Map<String, String> expectedData)
+            throws Exception {
+        //setUp
+        HttpServletResponse response = new MockHttpServletResponse();
+
+        //set expectations
+        doThrow(new ImageSizeException()).when(avatarService).validateAvatarSize(bytes);
+        when(messageSource.getMessage(
+                eq("image.wrong.size" + " "
+                        + AvatarService.MAX_SIZE), Matchers.<Object[]>any(), Matchers.<Locale>any())).thenReturn(message);
+
+        //invoke objects under test
+        Map<String, String> result = avatarController.uploadAvatar(bytes, response, locale);
+
+        //check expectation
+        verify(avatarService).validateAvatarSize(bytes);
+        verify(messageSource).getMessage(eq("image.wrong.size" + " "
+                + AvatarService.MAX_SIZE), Matchers.<Object[]>any(), Matchers.<Locale>any());
+
+        //check result
+        assertEquals(result, expectedData);
+
+
@@ -250 +279 @@
-    @Test(dataProvider = "validData-XHR-provider")
+    @Test(dataProvider = "validDataForChromeFF")
@@ -267,2 +296,2 @@
-    @DataProvider(name = "validData-XHR-provider")
-    private Object[][] validByteServletResponseData() {
+    @DataProvider
+    private Object[][] validDataForChromeFF() {
@@ -281,4 +310,2 @@
-    @DataProvider(name = "invalidData-XHR-provider")
-    private Object[][] invalidByteServletResponseData() {
-
-        byte[] invalidAvatar = null;
+    @DataProvider
+    private Object[][] invalidDataGeneralCaseForChromeFF() {
@@ -290 +316,0 @@
-
@@ -292 +318 @@
-                {invalidAvatar, errorResponseContent}
+                {validAvatar, errorResponseContent}
@@ -296,2 +322,15 @@
-    @DataProvider(name = "validData-iframe-provider")
-    private Object[][] iframeValidData() {
+    @DataProvider
+    private Object[][] invalidDataCustomCaseForChromeFF() {
+
+        Map<String, String> errorResponseContent = new HashMap<String, String>() {{
+            put(message, message);
+            put("success", "false");
+        }};
+
+        return new Object[][]{
+                {validAvatar, errorResponseContent}
+        };
+    }
+
+    @DataProvider
+    private Object[][] validDataForOperaIE() {
@@ -317,0 +357 @@
+        String name = "name";
@@ -319,2 +359,2 @@
-        fileMap = new HashMap<String, MultipartFile>(1);
-        headers = new HttpHeaders();
+        Map<String, MultipartFile> fileMap = new HashMap<String, MultipartFile>(1);
+        HttpHeaders headers = new HttpHeaders();

