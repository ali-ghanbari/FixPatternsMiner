diff --git a/ninja-core-demo/src/main/java/conf/application.conf b/ninja-core-demo/src/main/java/conf/application.conf
index 9729d1b..386d819 100644
--- a/ninja-core-demo/src/main/java/conf/application.conf
+++ b/ninja-core-demo/src/main/java/conf/application.conf
@@ -26 +26 @@
-application.session.transferred_over_https_only=true
+application.session.transferred_over_https_only=false
diff --git a/ninja-core/src/main/java/ninja/session/FlashCookieImpl.java b/ninja-core/src/main/java/ninja/session/FlashCookieImpl.java
index 0530941..d757662 100644
--- a/ninja-core/src/main/java/ninja/session/FlashCookieImpl.java
+++ b/ninja-core/src/main/java/ninja/session/FlashCookieImpl.java
@@ -124 +124,3 @@
-                cookie.setMaxAge(0);
+                // "-1" does not set "Expires" for that cookie
+                // => Cookie will live as long as the browser is open theoretically
+                cookie.setMaxAge(-1);
diff --git a/ninja-core/src/site/markdown/developer/changelog.md b/ninja-core/src/site/markdown/developer/changelog.md
index bf56378..ad9bda0 100644
--- a/ninja-core/src/site/markdown/developer/changelog.md
+++ b/ninja-core/src/site/markdown/developer/changelog.md
@@ -1,2 +1,2 @@
-Version 1.X
-============
+Version 1.0.X
+=============
@@ -4 +4,6 @@
- * PLEASE ADD YOUR CHANGES HERE
+ * PLZ ADD YOUR CHANGES HERE :)
+ 
+Version 1.0.8
+=============
+ 
+ * Fixed bug + test with flash scope: https://github.com/reyez/ninja/issues/70 (ra)
diff --git a/ninja-core/src/test/java/ninja/session/FlashCookieTest.java b/ninja-core/src/test/java/ninja/session/FlashCookieTest.java
index eddae32..b57b364 100644
--- a/ninja-core/src/test/java/ninja/session/FlashCookieTest.java
+++ b/ninja-core/src/test/java/ninja/session/FlashCookieTest.java
@@ -43,6 +42,0 @@
-	
-	@Mock
-	private Context context;
-	
-	@Mock
-	private HttpServletRequest httpServletRequest;
@@ -50,212 +44,238 @@
-	@Mock
-	private HttpServletResponse httpServletResponse;
-	
-	@Captor
-	private ArgumentCaptor<Cookie> cookieCaptor;
-	
-	@Mock
-	private NinjaProperties ninjaProperties;
-	
-	@Before
-	public void setUp() {
-		
-		when(context.getHttpServletRequest()).thenReturn(httpServletRequest);
-		when(context.getHttpServletResponse()).thenReturn(httpServletResponse);
-		
-		when(ninjaProperties.getOrDie(NinjaConstant.applicationCookiePrefix)).thenReturn("NINJA");
-		
-	}
-	
-	@Test
-	public void testFlashScopeDoesNothingWhenFlashCookieEmpty() {
-		
-		//setup this testmethod
-		//empty cookies
-		Cookie [] emptyCookies = new Cookie [0];
-		
-		//that will be returned by the httprequest...
-		when(context.getHttpServletRequest().getCookies()).thenReturn(emptyCookies);
-		
-		FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
-		
-		flashCookie.init(context);
-		
-		//put nothing => intentionally to check if no flash cookie will be saved		
-		flashCookie.save(context);
-		
-		//no cookie should be set as the flash scope is empty...:
-		verify(httpServletResponse, never()).addCookie(Matchers.any(Cookie.class));
-	}
-	
-	
-	@Test
-	public void testFlashCookieSettingWorks() {
-		//setup this testmethod
-		//empty cookies
-		Cookie [] emptyCookies = new Cookie [0];
-		
-		//that will be returned by the httprequest...
-		when(context.getHttpServletRequest().getCookies()).thenReturn(emptyCookies);
-		
-		FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
-		
-		flashCookie.init(context);
-		
-		flashCookie.put("hello", "flashScope");
-		
-		//put nothing => intentionally to check if no flash cookie will be saved		
-		flashCookie.save(context);
-		
-		//a cookie will be set => hello:flashScope
-		verify(httpServletResponse).addCookie(cookieCaptor.capture());
-		
-		//verify some stuff on the set cookie
-		assertEquals("NINJA_FLASH" , cookieCaptor.getValue().getName());
-		assertEquals("%00hello%3AflashScope%00" , cookieCaptor.getValue().getValue());
-		
-		assertEquals(1, ((FlashCookieImpl) flashCookie).getCurrentFlashCookieData().size());
-		assertEquals(1, ((FlashCookieImpl) flashCookie).getOutgoingFlashCookieData().size());
-		
-	}
-	
-	
-	@Test
-	public void testThatFlashCookieWorksAndIsActiveOnlyOneTime() {
-		//setup this testmethod
-		//empty cookies
-		Cookie [] oneCookie = new Cookie [1];
-		
-		Cookie cookie = new Cookie("NINJA_FLASH", "%00hello%3AflashScope%00");
-		oneCookie[0] = cookie;
-		
-		//that will be returned by the httprequest...
-		when(context.getHttpServletRequest().getCookies()).thenReturn(oneCookie);
-		
-		FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
-		
-		flashCookie.init(context);
-		
-		//make sure the old cookue gets parsed:
-		assertEquals("flashScope", flashCookie.get("hello"));
-		
-		flashCookie.put("another message", "is there...");
-		flashCookie.put("yet another message", "is there...");
-		
-		//put nothing => intentionally to check if no flash cookie will be saved		
-		flashCookie.save(context);
-		
-		//a cookie will be set => hello:flashScope
-		verify(httpServletResponse).addCookie(cookieCaptor.capture());
-		
-		//verify some stuff on the set cookie
-		assertEquals("NINJA_FLASH" , cookieCaptor.getValue().getName());
-		//the new flash messages must be there..
-		//but the old has disappeared (flashScope):
-		assertEquals("%00another+message%3Ais+there...%00%00yet+another+message%3Ais+there...%00" , cookieCaptor.getValue().getValue());
-		assertEquals(3, ((FlashCookieImpl) flashCookie).getCurrentFlashCookieData().size());
-		assertEquals(2, ((FlashCookieImpl) flashCookie).getOutgoingFlashCookieData().size());
-	}
-	
-	
-	@Test
-	public void testThatFlashCookieClearWorks() {
-		//setup this testmethod
-		//empty cookies
-		Cookie [] oneCookie = new Cookie [1];
-		
-		Cookie cookie = new Cookie("NINJA_FLASH", "%00hello%3AflashScope%00");
-		oneCookie[0] = cookie;
-		
-		//that will be returned by the httprequest...
-		when(context.getHttpServletRequest().getCookies()).thenReturn(oneCookie);
-		
-		FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
-		
-		flashCookie.init(context);
-		
-		//make sure the old cookue gets parsed:
-		assertEquals("flashScope", flashCookie.get("hello"));
-		
-		flashCookie.put("funny new flash message", "is there...");
-		
-		//now test clearCurrentFlashCookieData
-		flashCookie.clearCurrentFlashCookieData();
-		
-		assertEquals(0, ((FlashCookieImpl) flashCookie).getCurrentFlashCookieData().size());
-		assertEquals(1, ((FlashCookieImpl) flashCookie).getOutgoingFlashCookieData().size());
-		
-	}
-	
-	@Test
-	public void testThatFlashCookieClearOfOutgoingWorks() {
-		//setup this testmethod
-		//empty cookies
-		Cookie [] oneCookie = new Cookie [1];
-		
-		Cookie cookie = new Cookie("NINJA_FLASH", "%00hello%3AflashScope%00");
-		oneCookie[0] = cookie;
-		
-		//that will be returned by the httprequest...
-		when(context.getHttpServletRequest().getCookies()).thenReturn(oneCookie);
-		
-		FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
-		
-		flashCookie.init(context);
-		
-		//make sure the old cookue gets parsed:
-		assertEquals("flashScope", flashCookie.get("hello"));
-		
-		flashCookie.put("funny new flash message", "is there...");
-		
-		//now test clearCurrentFlashCookieData
-		flashCookie.discard();
-		
-		assertEquals(2, ((FlashCookieImpl) flashCookie).getCurrentFlashCookieData().size());
-		assertEquals(0, ((FlashCookieImpl) flashCookie).getOutgoingFlashCookieData().size());
-		
-	}
-	
-	
-	@Test
-	public void testThatFlashCookieKeepWorks() {
-		//setup this testmethod
-		//empty cookies
-		Cookie [] oneCookie = new Cookie [1];
-		
-		Cookie cookie = new Cookie("NINJA_FLASH", "%00hello%3AflashScope%00");
-		oneCookie[0] = cookie;
-		
-		//that will be returned by the httprequest...
-		when(context.getHttpServletRequest().getCookies()).thenReturn(oneCookie);
-		
-		FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
-		
-		flashCookie.init(context);
-		
-		//make sure the old cookue gets parsed:
-		assertEquals("flashScope", flashCookie.get("hello"));
-		
-		
-		//make sure outgoing is 0		
-		assertEquals(1, ((FlashCookieImpl) flashCookie).getCurrentFlashCookieData().size());
-		assertEquals(0, ((FlashCookieImpl) flashCookie).getOutgoingFlashCookieData().size());
-		
-		//now call keep. 
-		flashCookie.keep();
-		//=> now both queues must be 1
-		assertEquals(1, ((FlashCookieImpl) flashCookie).getCurrentFlashCookieData().size());
-		assertEquals(1, ((FlashCookieImpl) flashCookie).getOutgoingFlashCookieData().size());
-		
-		
-	}
-	
-	public void testThatCorrectMethodOfNinjaPropertiesIsUsedSoThatStuffBreaksWhenPropertyIsAbsent() {
-		
-		//we did not set the cookie prefix
-		when(ninjaProperties.getOrDie(NinjaConstant.applicationCookiePrefix)).thenReturn(null);
-		
-		//stuff must break => ...
-		FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
-		
-		verify(ninjaProperties.getOrDie(NinjaConstant.applicationCookiePrefix));
-	}
+    @Mock
+    private Context context;
+
+    @Mock
+    private HttpServletRequest httpServletRequest;
+
+    @Mock
+    private HttpServletResponse httpServletResponse;
+
+    @Captor
+    private ArgumentCaptor<Cookie> cookieCaptor;
+
+    @Mock
+    private NinjaProperties ninjaProperties;
+
+    @Before
+    public void setUp() {
+
+        when(context.getHttpServletRequest()).thenReturn(httpServletRequest);
+        when(context.getHttpServletResponse()).thenReturn(httpServletResponse);
+
+        when(ninjaProperties.getOrDie(NinjaConstant.applicationCookiePrefix))
+                .thenReturn("NINJA");
+
+    }
+
+    @Test
+    public void testFlashScopeDoesNothingWhenFlashCookieEmpty() {
+
+        // setup this testmethod
+        // empty cookies
+        Cookie[] emptyCookies = new Cookie[0];
+
+        // that will be returned by the httprequest...
+        when(context.getHttpServletRequest().getCookies()).thenReturn(
+                emptyCookies);
+
+        FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
+
+        flashCookie.init(context);
+
+        // put nothing => intentionally to check if no flash cookie will be
+        // saved
+        flashCookie.save(context);
+
+        // no cookie should be set as the flash scope is empty...:
+        verify(httpServletResponse, never()).addCookie(
+                Matchers.any(Cookie.class));
+    }
+
+    @Test
+    public void testFlashCookieSettingWorks() {
+        // setup this testmethod
+        // empty cookies
+        Cookie[] emptyCookies = new Cookie[0];
+
+        // that will be returned by the httprequest...
+        when(context.getHttpServletRequest().getCookies()).thenReturn(
+                emptyCookies);
+
+        FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
+
+        flashCookie.init(context);
+
+        flashCookie.put("hello", "flashScope");
+
+        // put nothing => intentionally to check if no flash cookie will be
+        // saved
+        flashCookie.save(context);
+
+        // a cookie will be set => hello:flashScope
+        verify(httpServletResponse).addCookie(cookieCaptor.capture());
+
+        // verify some stuff on the set cookie
+        assertEquals("NINJA_FLASH", cookieCaptor.getValue().getName());
+        assertEquals("%00hello%3AflashScope%00", cookieCaptor.getValue()
+                .getValue());
+        assertEquals(-1, cookieCaptor.getValue().getMaxAge());
+
+        assertEquals(1, ((FlashCookieImpl) flashCookie)
+                .getCurrentFlashCookieData().size());
+        assertEquals(1, ((FlashCookieImpl) flashCookie)
+                .getOutgoingFlashCookieData().size());
+
+    }
+
+    @Test
+    public void testThatFlashCookieWorksAndIsActiveOnlyOneTime() {
+        // setup this testmethod
+        // empty cookies
+        Cookie[] oneCookie = new Cookie[1];
+
+        Cookie cookie = new Cookie("NINJA_FLASH", "%00hello%3AflashScope%00");
+        oneCookie[0] = cookie;
+
+        // that will be returned by the httprequest...
+        when(context.getHttpServletRequest().getCookies())
+                .thenReturn(oneCookie);
+
+        FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
+
+        flashCookie.init(context);
+
+        // make sure the old cookue gets parsed:
+        assertEquals("flashScope", flashCookie.get("hello"));
+
+        flashCookie.put("another message", "is there...");
+        flashCookie.put("yet another message", "is there...");
+
+        flashCookie.save(context);
+
+        // a cookie will be set => hello:flashScope
+        verify(httpServletResponse).addCookie(cookieCaptor.capture());
+
+        // verify some stuff on the set cookie
+        assertEquals("NINJA_FLASH", cookieCaptor.getValue().getName());
+        // the new flash messages must be there..
+        // but the old has disappeared (flashScope):
+        assertEquals(
+                "%00another+message%3Ais+there...%00%00yet+another+message%3Ais+there...%00",
+                cookieCaptor.getValue().getValue());
+        assertEquals(3, ((FlashCookieImpl) flashCookie)
+                .getCurrentFlashCookieData().size());
+        assertEquals(2, ((FlashCookieImpl) flashCookie)
+                .getOutgoingFlashCookieData().size());
+    }
+
+    @Test
+    public void testThatFlashCookieClearWorks() {
+        // setup this testmethod
+        // empty cookies
+        Cookie[] oneCookie = new Cookie[1];
+
+        Cookie cookie = new Cookie("NINJA_FLASH", "%00hello%3AflashScope%00");
+        oneCookie[0] = cookie;
+
+        // that will be returned by the httprequest...
+        when(context.getHttpServletRequest().getCookies())
+                .thenReturn(oneCookie);
+
+        FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
+
+        flashCookie.init(context);
+
+        // make sure the old cookue gets parsed:
+        assertEquals("flashScope", flashCookie.get("hello"));
+
+        flashCookie.put("funny new flash message", "is there...");
+
+        // now test clearCurrentFlashCookieData
+        flashCookie.clearCurrentFlashCookieData();
+
+        assertEquals(0, ((FlashCookieImpl) flashCookie)
+                .getCurrentFlashCookieData().size());
+        assertEquals(1, ((FlashCookieImpl) flashCookie)
+                .getOutgoingFlashCookieData().size());
+
+    }
+
+    @Test
+    public void testThatFlashCookieClearOfOutgoingWorks() {
+        // setup this testmethod
+        // empty cookies
+        Cookie[] oneCookie = new Cookie[1];
+
+        Cookie cookie = new Cookie("NINJA_FLASH", "%00hello%3AflashScope%00");
+        oneCookie[0] = cookie;
+
+        // that will be returned by the httprequest...
+        when(context.getHttpServletRequest().getCookies())
+                .thenReturn(oneCookie);
+
+        FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
+
+        flashCookie.init(context);
+
+        // make sure the old cookue gets parsed:
+        assertEquals("flashScope", flashCookie.get("hello"));
+
+        flashCookie.put("funny new flash message", "is there...");
+
+        // now test clearCurrentFlashCookieData
+        flashCookie.discard();
+
+        assertEquals(2, ((FlashCookieImpl) flashCookie)
+                .getCurrentFlashCookieData().size());
+        assertEquals(0, ((FlashCookieImpl) flashCookie)
+                .getOutgoingFlashCookieData().size());
+
+    }
+
+    @Test
+    public void testThatFlashCookieKeepWorks() {
+        // setup this testmethod
+        // empty cookies
+        Cookie[] oneCookie = new Cookie[1];
+
+        Cookie cookie = new Cookie("NINJA_FLASH", "%00hello%3AflashScope%00");
+        oneCookie[0] = cookie;
+
+        // that will be returned by the httprequest...
+        when(context.getHttpServletRequest().getCookies())
+                .thenReturn(oneCookie);
+
+        FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
+
+        flashCookie.init(context);
+
+        // make sure the old cookue gets parsed:
+        assertEquals("flashScope", flashCookie.get("hello"));
+
+        // make sure outgoing is 0
+        assertEquals(1, ((FlashCookieImpl) flashCookie)
+                .getCurrentFlashCookieData().size());
+        assertEquals(0, ((FlashCookieImpl) flashCookie)
+                .getOutgoingFlashCookieData().size());
+
+        // now call keep.
+        flashCookie.keep();
+        // => now both queues must be 1
+        assertEquals(1, ((FlashCookieImpl) flashCookie)
+                .getCurrentFlashCookieData().size());
+        assertEquals(1, ((FlashCookieImpl) flashCookie)
+                .getOutgoingFlashCookieData().size());
+
+    }
+
+    public void testThatCorrectMethodOfNinjaPropertiesIsUsedSoThatStuffBreaksWhenPropertyIsAbsent() {
+
+        // we did not set the cookie prefix
+        when(ninjaProperties.getOrDie(NinjaConstant.applicationCookiePrefix))
+                .thenReturn(null);
+
+        // stuff must break => ...
+        FlashCookie flashCookie = new FlashCookieImpl(ninjaProperties);
+
+        verify(ninjaProperties.getOrDie(NinjaConstant.applicationCookiePrefix));
+    }

