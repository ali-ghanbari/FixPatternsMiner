diff --git a/src/main/java/org/basex/io/out/EncodingOutput.java b/src/main/java/org/basex/io/out/EncodingOutput.java
index eb684bc..646473a 100644
--- a/src/main/java/org/basex/io/out/EncodingOutput.java
+++ b/src/main/java/org/basex/io/out/EncodingOutput.java
@@ -32 +32 @@
-    if(b == 0x00 || b == 0xFF) os.write(0xFF);
+    if(b == 0x00 || (b & 0xFF) == 0xFF) os.write(0xFF);
diff --git a/src/test/java/org/basex/test/server/ClientSessionOutTest.java b/src/test/java/org/basex/test/server/ClientSessionOutTest.java
index 899470a..f8c3c7a 100644
--- a/src/test/java/org/basex/test/server/ClientSessionOutTest.java
+++ b/src/test/java/org/basex/test/server/ClientSessionOutTest.java
@@ -3 +3 @@
-import java.io.ByteArrayOutputStream;
+import org.basex.io.out.ArrayOutput;
@@ -17 +17 @@
-    out = new ByteArrayOutputStream();
+    out = new ArrayOutput();
diff --git a/src/test/java/org/basex/test/server/LocalSessionOutTest.java b/src/test/java/org/basex/test/server/LocalSessionOutTest.java
index 7bf9f49..25edf7f 100644
--- a/src/test/java/org/basex/test/server/LocalSessionOutTest.java
+++ b/src/test/java/org/basex/test/server/LocalSessionOutTest.java
@@ -3,2 +3 @@
-import java.io.ByteArrayOutputStream;
-
+import org.basex.io.out.ArrayOutput;
@@ -18 +17 @@
-    out = new ByteArrayOutputStream();
+    out = new ArrayOutput();
diff --git a/src/test/java/org/basex/test/server/SessionTest.java b/src/test/java/org/basex/test/server/SessionTest.java
index 4fefe56..d64733e 100644
--- a/src/test/java/org/basex/test/server/SessionTest.java
+++ b/src/test/java/org/basex/test/server/SessionTest.java
@@ -3 +2,0 @@
-import static org.basex.query.func.Function.*;
@@ -4,0 +4,2 @@
+import static org.basex.query.func.Function.*;
+import static org.basex.util.Token.*;
@@ -7 +7,0 @@
-import java.io.ByteArrayOutputStream;
@@ -10,0 +11 @@
+import org.basex.io.out.ArrayOutput;
@@ -29 +30 @@
-  protected ByteArrayOutputStream out;
+  protected ArrayOutput out;
@@ -206,0 +208,10 @@
+  /** Stores binary content.
+   * @throws IOException I/O exception */
+  @Test
+  public void storeBinary() throws IOException {
+    session.execute("create db " + DB);
+    session.store("X", new ArrayInput(new byte[] { -128, -2, -1, 0, 1, 127 }));
+    check("-128 -2 -1 0 1 127",
+        session.query(TO_BYTES.args(DBRETRIEVE.args(DB, "X"))).execute());
+  }
+
@@ -300 +311 @@
-  public void queryBinary() throws IOException {
+  public void queryNullBinary() throws IOException {
@@ -315 +326 @@
-  public void queryEmpty() throws IOException {
+  public void queryEmptyBinary() throws IOException {
@@ -337,0 +349,27 @@
+  /** Queries binary content (works only if output stream is specified).
+   * @throws IOException I/O exception */
+  @Test
+  public void queryBinary() throws IOException {
+    if(out == null) return;
+    session.execute("create db " + DB);
+    final byte[] tmp = { 0, 1, 2, 127, 0, -1, -2, -128 };
+    session.store("X", new ArrayInput(tmp));
+    final String retr = DBRETRIEVE.args(DB, "X");
+    // check command
+    session.execute("xquery " + RAW + retr + ',' + retr);
+    assertTrue(eq(out.toArray(), concat(tmp, tmp)));
+    out.reset();
+    // check query execution
+    session.query(RAW + retr + ',' + retr).execute();
+    assertTrue(eq(out.toArray(), concat(tmp, tmp)));
+    out.reset();
+    // check iterator
+    final Query q = session.query(RAW + retr + ',' + retr);
+    q.next();
+    assertTrue(eq(out.toArray(), tmp));
+    out.reset();
+    q.next();
+    assertTrue(eq(out.toArray(), tmp));
+    assertNull(q.next());
+  }
+

