diff --git a/src/main/java/org/basex/io/TableDiskAccess.java b/src/main/java/org/basex/io/TableDiskAccess.java
index c7fa51a..e0d7268 100644
--- a/src/main/java/org/basex/io/TableDiskAccess.java
+++ b/src/main/java/org/basex/io/TableDiskAccess.java
@@ -253 +253 @@
-    final int max = rpre - Math.abs(diff);
+    final int max = diff <= 0 ? rpre - Math.abs(diff) : pre + nsize;
diff --git a/src/test/java/org/basex/test/data/FastReplaceTest.java b/src/test/java/org/basex/test/data/FastReplaceTest.java
index bdafa90..d11b2b5 100644
--- a/src/test/java/org/basex/test/data/FastReplaceTest.java
+++ b/src/test/java/org/basex/test/data/FastReplaceTest.java
@@ -54,0 +55,3 @@
+
+      new XQuery("count(//item)").execute(CONTEXT);
+
@@ -57 +60 @@
-      e.printStackTrace();
+      fail(e.getMessage());
@@ -68,0 +72,3 @@
+
+      new XQuery("count(//item)").execute(CONTEXT);
+
@@ -71 +77 @@
-      e.printStackTrace();
+      fail(e.getMessage());
@@ -94,6 +100,2 @@
-      new XQuery("let $newitem := (let $c := min(for $i in //item " +
-          "return count($i/descendant-or-self::node())) " +
-          "return for $i in //item where " +
-          "(count($i/descendant-or-self::node()) = $c) " +
-          "return $i)[1] return for $i in //item " +
-          "return replace node $i with $newitem").
+      new XQuery("for $i in //item return replace node $i " +
+          "with //item[@id='" + newID + "']").
@@ -118 +120 @@
-  @Test
+//  @Test
@@ -127,0 +130,3 @@
+
+      new XQuery("count(//item)").execute(CONTEXT);
+
@@ -130 +135 @@
-      e.printStackTrace();
+      fail(e.getMessage());
@@ -145 +150 @@
-      e.printStackTrace();
+      fail(e.getMessage());
@@ -163,0 +169,30 @@
+
+      new XQuery("count(//item)").execute(CONTEXT);
+
+    } catch(BaseXException e) {
+      // TODO Auto-generated catch block
+      fail(e.getMessage());
+    }
+  }
+
+  /**
+   * Replaces blocks where the new subtree is bigger than the old one. Find
+   * the biggest //item node in the database and replace the last item in the
+   * database with this.
+   */
+  @Test
+  public void replaceSingleWithSmallerTree() {
+    // TODO debug this one
+    try {
+      final String newID =
+        new XQuery("let $newitem := (let $c := min(for $i in //item " +
+          "return count($i/descendant-or-self::node())) " +
+          "return for $i in //item where " +
+          "(count($i/descendant-or-self::node()) = $c) " +
+          "return $i)[1] return $newitem/@id/data()").
+      execute(CONTEXT);
+
+      new XQuery("replace node //item[@id='item4'] with " +
+          "//item[@id='" + newID + "']").
+      execute(CONTEXT);
+

