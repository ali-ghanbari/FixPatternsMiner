diff --git a/java/client/org/apache/derby/client/am/ClientResultSet.java b/java/client/org/apache/derby/client/am/ClientResultSet.java
index d40a9f5..bc94305 100644
--- a/java/client/org/apache/derby/client/am/ClientResultSet.java
+++ b/java/client/org/apache/derby/client/am/ClientResultSet.java
@@ -4841,0 +4842,5 @@
+        } else if (resultSetMetaData_.hasLobColumns()) {
+            // DERBY-6737: If the result set has LOB columns, we cannot use
+            // the cached locator since it might have been released, so
+            // always fetch the row from the server.
+            return false;
diff --git a/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ScrollResultSetTest.java b/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ScrollResultSetTest.java
index 76fe725..dbe0173 100644
--- a/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ScrollResultSetTest.java
+++ b/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ScrollResultSetTest.java
@@ -22,0 +23 @@
+import java.sql.PreparedStatement;
@@ -39 +40 @@
- * rows have been retreived and next has been called from the last row, 
+ * rows have been retrieved and next has been called from the last row,
@@ -45,0 +47,3 @@
+ * - testDerby6737: tests that a LOB can be accessed after using an absolute
+ * positioning method to move the position to the row on which the result set
+ * is currently positioned. (DERBY-6737)
@@ -160 +164,69 @@
-       
+
+    /**
+     * <p>
+     * Test that it is possible to access LOBs after moving the position of
+     * a scrollable result set from one row to the same row. Before DERBY-6737
+     * the following sequence of calls
+     * </p>
+     *
+     * <pre>
+     * rs.last();
+     * rs.first();
+     * rs.getClob(1).length();
+     * </pre>
+     *
+     * <p>
+     * would fail with 'invalid locator' on the client, if the result set
+     * contained only one row.
+     * </p>
+     */
+    public void testDerby6737() throws SQLException {
+        Statement s = createStatement();
+        s.execute("create table d6737(c clob)");
+        s.execute("insert into d6737 values 'abc'");
+
+        PreparedStatement ps = prepareStatement("select * from d6737",
+                ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
+
+        ResultSet rs = ps.executeQuery();
+        assertTrue(rs.last());
+        assertTrue(rs.first());
+        assertEquals(3, rs.getClob(1).length()); // used to fail on client
+        rs.close();
+
+        rs = ps.executeQuery();
+        assertTrue(rs.next());
+        assertTrue(rs.first());
+        assertEquals(3, rs.getClob(1).length()); // used to fail on client
+        rs.close();
+
+        rs = ps.executeQuery();
+        assertTrue(rs.first());
+        assertTrue(rs.last());
+        assertEquals(3, rs.getClob(1).length()); // used to fail on client
+        rs.close();
+
+        rs = ps.executeQuery();
+        assertTrue(rs.last());
+        assertTrue(rs.absolute(1));
+        assertEquals(3, rs.getClob(1).length()); // used to fail on client
+        rs.close();
+
+        // This case, where the CLOB had been accessed, but not explicitly
+        // freed before the result set was repositioned, passed even before
+        // the fix.
+        rs = ps.executeQuery();
+        assertTrue(rs.last());
+        assertEquals(3, rs.getClob(1).length());
+        assertTrue(rs.first());
+        assertEquals(3, rs.getClob(1).length());
+        rs.close();
+
+        // But it failed if the CLOB was explicitly freed before repositioning.
+        rs = ps.executeQuery();
+        assertTrue(rs.last());
+        rs.getClob(1).free();
+        assertTrue(rs.first());
+        assertEquals(3, rs.getClob(1).length()); // used to fail on client
+        rs.close();
+    }

