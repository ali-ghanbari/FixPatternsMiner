diff --git a/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index 5b153ee..843078f 100644
--- a/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -610,0 +611,3 @@
+
+		// Reset the current role
+		getCurrentSQLSessionContext().setRole(null);
diff --git a/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java b/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
index c857113..c48aff8 100644
--- a/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
+++ b/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
@@ -1938,0 +1939,5 @@
+     * <p>
+     * The current role also needs to be reset, but can't be tested here since
+     * we need to run with SQL authorization.
+     *
+     * @see org.apache.derbyTesting.functionTests.tests.lang.RolesTest#testCurrentRoleIsReset
diff --git a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java
index 0882119..7ff3f77 100644
--- a/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java
+++ b/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java
@@ -29,0 +30,2 @@
+import javax.sql.PooledConnection;
+import javax.sql.ConnectionPoolDataSource;
@@ -36,0 +39 @@
+import org.apache.derbyTesting.junit.J2EEDataSource;
@@ -642,0 +646,2 @@
+
+        testCurrentRoleIsReset();
@@ -686,0 +692,73 @@
+    /**
+     * Verifies that the current role is reset when creating a new logical
+     * connection.
+     * <p>
+     * The test is run in a non-statement pooling configuration first,
+     * and then with statement pooling enabled if the environment supports it.
+     * <p>
+     * The test pattern is borrowed from the test case in J2EEDataSourceTest.
+     *
+     * @see org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest#testSchemaIsReset
+     *
+     * @throws SQLException if something goes wrong
+     */
+    private void testCurrentRoleIsReset()
+            throws SQLException {
+
+        if (_authLevel == SQLAUTHORIZATION && isDbo() /* once is enough */) {
+            final String user = "DonaldDuck";
+            final String passwd = user.concat(pwSuffix);
+            ConnectionPoolDataSource cpDs =
+                J2EEDataSource.getConnectionPoolDataSource();
+            // Test without statement pooling first.
+            doTestCurrentRoleIsReset(cpDs.getPooledConnection(user, passwd),
+                                     user);
+
+            // Try to enable statement pooling.
+            // This is currently only implemented in the client driver.
+            if (usingDerbyNetClient()) {
+                J2EEDataSource.setBeanProperty(
+                    cpDs, "maxStatements",new Integer(7));
+                doTestCurrentRoleIsReset(cpDs.getPooledConnection(user, passwd),
+                                         user);
+            }
+        }
+    }
+
+    /**
+     * Executes a test sequence to make sure the current role is reset between
+     * logical connections.
+     *
+     * @param pc pooled connection to get logical connections from
+     * @param user name of  for the connection
+     * @throws SQLException if something goes wrong...
+     */
+    private void doTestCurrentRoleIsReset(PooledConnection pc, String user)
+            throws SQLException {
+
+        Connection con = pc.getConnection();
+        Statement stmt = con.createStatement();
+        String n_a     = null; // auth level not used for this test
+
+        JDBC.assertCurrentSchema(con, user.toUpperCase());
+
+        // Change the role.
+        stmt.execute("set role bar");
+        ResultSet rs = stmt.executeQuery("values current_role");
+        assertRoleInRs(rs, "BAR", n_a);
+        rs.close();
+        stmt.close();
+
+        // Close the logical connection and get a new one and make sure the
+        // current role has been reset.
+        con.close();
+        con = pc.getConnection();
+        stmt = con.createStatement();
+        rs = stmt.executeQuery("values current_role");
+        assertRoleInRs(rs, null, n_a);
+        rs.close();
+        stmt.close();
+        con.close();
+    }
+
+

