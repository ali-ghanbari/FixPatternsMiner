diff --git a/proxy/src/main/java/org/fedoraproject/candlepin/model/AbstractHibernateCurator.java b/proxy/src/main/java/org/fedoraproject/candlepin/model/AbstractHibernateCurator.java
index 22e0424..608d536 100644
--- a/proxy/src/main/java/org/fedoraproject/candlepin/model/AbstractHibernateCurator.java
+++ b/proxy/src/main/java/org/fedoraproject/candlepin/model/AbstractHibernateCurator.java
@@ -105 +104,0 @@
-        flush();
diff --git a/proxy/src/test/java/org/fedoraproject/candlepin/controller/PoolManagerFunctionalTest.java b/proxy/src/test/java/org/fedoraproject/candlepin/controller/PoolManagerFunctionalTest.java
index 7f5760d..e16d19a 100644
--- a/proxy/src/test/java/org/fedoraproject/candlepin/controller/PoolManagerFunctionalTest.java
+++ b/proxy/src/test/java/org/fedoraproject/candlepin/controller/PoolManagerFunctionalTest.java
@@ -31,0 +32,2 @@
+import org.fedoraproject.candlepin.model.Content;
+import org.fedoraproject.candlepin.model.ContentCurator;
@@ -58,0 +61,2 @@
+
+import javax.persistence.EntityNotFoundException;
@@ -243,0 +248,42 @@
+    
+    @Test
+    public void testEntitleByProductsWithModifierAndModifiee()
+        throws EntitlementRefusedException {
+        Product modifier = new Product("modifier", "modifier");
+
+        Set<String> modified = new HashSet<String>();
+        modified.add(PRODUCT_VIRT_HOST);
+        Content content = new Content("modifier-content", "modifier-content",
+            "modifer-content", "yum", "us", "here", "here");
+        content.setModifiedProductIds(modified);
+        modifier.addContent(content);
+        
+        contentCurator.create(content);
+        productAdapter.createProduct(modifier);
+        
+        subCurator.create(new Subscription(o, modifier, new HashSet<Product>(),
+            5L, new Date(), TestUtil.createDate(3020, 12, 12), new Date()));
+        
+        poolManager.refreshPools(o);
+        
+        
+        // This test simulates https://bugzilla.redhat.com/show_bug.cgi?id=676870
+        // where entitling first to the modifier then to the modifiee causes the modifier's
+        // entitlement cert to get regenerated, but since it's all in the same http call,
+        // this ends up causing a hibernate failure (the old cert is asked to be deleted,
+        // but it hasn't been saved yet). Since getting the pool ordering right is tricky
+        // inside an entitleByProducts call, we do it in two singular calls here.  
+        poolManager.entitleByProduct(this.parentSystem,
+            "modifier", 1);
+        
+        try {
+            poolManager.entitleByProduct(this.parentSystem,
+                PRODUCT_VIRT_HOST, 1);
+        }
+        catch (EntityNotFoundException e) {
+            throw e;
+//            fail("Hibernate failed to properly save entitlement certs!");
+        }
+                
+        // If we get here, no exception was raised, so we're happy!
+    }

