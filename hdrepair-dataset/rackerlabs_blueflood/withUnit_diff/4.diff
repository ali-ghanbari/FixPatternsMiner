diff --git a/blueflood-core/src/integration-test/java/com/rackspacecloud/blueflood/service/MetricsIntegrationTest.java b/blueflood-core/src/integration-test/java/com/rackspacecloud/blueflood/service/MetricsIntegrationTest.java
index 89ca5cd..74ec8fe 100644
--- a/blueflood-core/src/integration-test/java/com/rackspacecloud/blueflood/service/MetricsIntegrationTest.java
+++ b/blueflood-core/src/integration-test/java/com/rackspacecloud/blueflood/service/MetricsIntegrationTest.java
@@ -222,3 +222,3 @@
-        Assert.assertTrue(histogramRollup.getNumberOfBins() > 0);
-        Assert.assertTrue("Number of bins is " + histogramRollup.getNumberOfBins(),
-                histogramRollup.getNumberOfBins() <= HistogramRollup.MAX_BIN_SIZE);
+        Assert.assertTrue(histogramRollup.getBins().size() > 0);
+        Assert.assertTrue("Number of bins is " + histogramRollup.getBins().size(),
+                histogramRollup.getBins().size() <= HistogramRollup.MAX_BIN_SIZE);
diff --git a/blueflood-core/src/main/java/com/rackspacecloud/blueflood/types/HistogramRollup.java b/blueflood-core/src/main/java/com/rackspacecloud/blueflood/types/HistogramRollup.java
index fea5c93..ba0d55a 100644
--- a/blueflood-core/src/main/java/com/rackspacecloud/blueflood/types/HistogramRollup.java
+++ b/blueflood-core/src/main/java/com/rackspacecloud/blueflood/types/HistogramRollup.java
@@ -92 +92 @@
-    public int getNumberOfBins() {
+    public int getMaxBins() {
diff --git a/blueflood-core/src/test/java/com/rackspacecloud/blueflood/types/HistogramRollupTest.java b/blueflood-core/src/test/java/com/rackspacecloud/blueflood/types/HistogramRollupTest.java
index 484f0c9..6c3b7bb 100644
--- a/blueflood-core/src/test/java/com/rackspacecloud/blueflood/types/HistogramRollupTest.java
+++ b/blueflood-core/src/test/java/com/rackspacecloud/blueflood/types/HistogramRollupTest.java
@@ -23,0 +24,2 @@
+import java.util.*;
+
@@ -36 +38 @@
-        Assert.assertTrue(histogramRollup.getNumberOfBins() <= HistogramRollup.MAX_BIN_SIZE);
+        Assert.assertTrue(histogramRollup.getBins().size() <= HistogramRollup.MAX_BIN_SIZE);
@@ -44,0 +47,43 @@
+
+    @Test
+    public void testMergeHistogramRollups() throws Exception {
+        long startTime = 12345678L;
+        int sampleSize = 10;
+        Random rand = new Random();
+
+        List<Points<SimpleNumber>> pointsList = new ArrayList<Points<SimpleNumber>>();
+        Points<SimpleNumber> points = new Points<SimpleNumber>();
+        pointsList.add(points);
+
+        for (int i = 0; i < TestData.DOUBLE_SRC.length; i++) {
+            if (i > 0 && (i % sampleSize) == 0) {
+                points = new Points<SimpleNumber>();
+                pointsList.add(points);
+            }
+
+            points.add(new Points.Point<SimpleNumber>(startTime + i, new SimpleNumber(TestData.DOUBLE_SRC[i])));
+        }
+
+        List<HistogramRollup> histogramRollups = new ArrayList<HistogramRollup>();
+        for (Points<SimpleNumber> item : pointsList) {
+            HistogramRollup histogramRollup = HistogramRollup.buildRollupFromRawSamples(item);
+            histogramRollups.add(histogramRollup);
+        }
+
+        // Assert that there is more than 1 histogram rollup to test merging.
+        Assert.assertTrue(histogramRollups.size() > 1);
+
+        int first = rand.nextInt(histogramRollups.size());
+        int second = rand.nextInt(histogramRollups.size());
+        while (second == first) {
+            second = rand.nextInt(histogramRollups.size());
+        }
+
+        Points<HistogramRollup> rollups = new Points<HistogramRollup>();
+        rollups.add(new Points.Point<HistogramRollup>(startTime, histogramRollups.get(first)));
+        rollups.add(new Points.Point<HistogramRollup>(startTime + 1, histogramRollups.get(second)));
+        HistogramRollup merged = HistogramRollup.buildRollupFromRollups(rollups);
+
+        Assert.assertTrue(merged.getBins().size() <= histogramRollups.get(first).getBins().size() +
+                histogramRollups.get(second).getBins().size());
+    }

