diff --git a/org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/GcPackRefsTest.java b/org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/GcPackRefsTest.java
index 0ade902..c7336da 100644
--- a/org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/GcPackRefsTest.java
+++ b/org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/GcPackRefsTest.java
@@ -47,0 +48 @@
+import static org.junit.Assert.assertNull;
@@ -59,0 +61,4 @@
+import org.eclipse.jgit.api.Git;
+import org.eclipse.jgit.junit.TestRepository.BranchBuilder;
+import org.eclipse.jgit.lib.ConfigConstants;
+import org.eclipse.jgit.lib.Constants;
@@ -63,0 +69,2 @@
+import org.eclipse.jgit.revwalk.RevCommit;
+import org.eclipse.jgit.storage.file.FileBasedConfig;
@@ -179,0 +187,61 @@
+
+	@Test
+	public void dontPackHEAD_nonBare() throws Exception {
+		BranchBuilder bb = tr.branch("refs/heads/side");
+		RevCommit first = bb.commit().add("A", "A").add("B", "B").create();
+		bb.commit().add("A", "A2").add("B", "B2").create();
+		Git git = Git.wrap(repo);
+
+		// check for the unborn branch master. HEAD should point to master and
+		// master doesn't exist.
+		assertEquals(repo.getRef("HEAD").getTarget().getName(),
+				"refs/heads/master");
+		assertNull(repo.getRef("HEAD").getTarget().getObjectId());
+		gc.packRefs();
+		assertSame(repo.getRef("HEAD").getStorage(), Storage.LOOSE);
+		assertEquals(repo.getRef("HEAD").getTarget().getName(),
+				"refs/heads/master");
+		assertNull(repo.getRef("HEAD").getTarget().getObjectId());
+
+		git.checkout().setName("refs/heads/side").call();
+		gc.packRefs();
+		assertSame(repo.getRef("HEAD").getStorage(), Storage.LOOSE);
+
+		// check for detached HEAD
+		git.checkout().setName(first.getName()).call();
+		gc.packRefs();
+		assertSame(repo.getRef("HEAD").getStorage(), Storage.LOOSE);
+	}
+
+	@Test
+	public void dontPackHEAD_bare() throws Exception {
+		BranchBuilder bb = tr.branch("refs/heads/side");
+		bb.commit().add("A", "A").add("B", "B").create();
+		RevCommit second = bb.commit().add("A", "A2").add("B", "B2").create();
+
+		// Convert the repo to be bare
+		FileBasedConfig cfg = repo.getConfig();
+		cfg.setBoolean(ConfigConstants.CONFIG_CORE_SECTION, null,
+				ConfigConstants.CONFIG_KEY_BARE, true);
+		cfg.save();
+		Git git = Git.open(repo.getDirectory());
+		repo = (FileRepository) git.getRepository();
+
+		// check for the unborn branch master. HEAD should point to master and
+		// master doesn't exist.
+		assertEquals(repo.getRef("HEAD").getTarget().getName(),
+				"refs/heads/master");
+		assertNull(repo.getRef("HEAD").getTarget().getObjectId());
+		gc.packRefs();
+		assertSame(repo.getRef("HEAD").getStorage(), Storage.LOOSE);
+		assertEquals(repo.getRef("HEAD").getTarget().getName(),
+				"refs/heads/master");
+		assertNull(repo.getRef("HEAD").getTarget().getObjectId());
+
+		// check for non-detached HEAD
+		repo.updateRef(Constants.HEAD).link("refs/heads/side");
+		gc.packRefs();
+		assertSame(repo.getRef("HEAD").getStorage(), Storage.LOOSE);
+		assertEquals(repo.getRef("HEAD").getTarget().getObjectId(),
+				second.getId());
+	}
diff --git a/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java b/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java
index 6c19b7b..3cc4e7b 100644
--- a/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java
+++ b/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java
@@ -484 +484 @@
-		Collection<Ref> refs = repo.getRefDatabase().getRefs(ALL).values();
+		Collection<Ref> refs = repo.getRefDatabase().getRefs(Constants.R_REFS).values();

