diff --git a/apis/openstack-swift/src/main/java/org/jclouds/openstack/swift/v1/domain/SwiftObject.java b/apis/openstack-swift/src/main/java/org/jclouds/openstack/swift/v1/domain/SwiftObject.java
index d238ab8..deace8a 100644
--- a/apis/openstack-swift/src/main/java/org/jclouds/openstack/swift/v1/domain/SwiftObject.java
+++ b/apis/openstack-swift/src/main/java/org/jclouds/openstack/swift/v1/domain/SwiftObject.java
@@ -56 +56 @@
-      this.etag = checkNotNull(etag, "etag of %s", name).replace("\"", "");
+      this.etag = etag != null ? etag.replace("\"", "") : null;
diff --git a/blobstore/src/test/java/org/jclouds/blobstore/integration/internal/BaseBlobIntegrationTest.java b/blobstore/src/test/java/org/jclouds/blobstore/integration/internal/BaseBlobIntegrationTest.java
index aff7b18..7f1bc03 100644
--- a/blobstore/src/test/java/org/jclouds/blobstore/integration/internal/BaseBlobIntegrationTest.java
+++ b/blobstore/src/test/java/org/jclouds/blobstore/integration/internal/BaseBlobIntegrationTest.java
@@ -428,0 +429,26 @@
+   @Test(groups = { "integration", "live" })
+   public void testGetRangeMultipart() throws InterruptedException, IOException {
+      String container = getContainerName();
+      InputStream expect = null;
+      InputStream actual = null;
+      try {
+         String name = "apples";
+         long length = getMinimumMultipartBlobSize();
+         ByteSource byteSource = TestUtils.randomByteSource().slice(0, length);
+         Blob blob = view.getBlobStore().blobBuilder(name)
+                 .payload(byteSource)
+                 .contentLength(length)
+                 .build();
+         view.getBlobStore().putBlob(container, blob, new PutOptions().multipart(true));
+         blob = view.getBlobStore().getBlob(container, name, range(0, 5));
+         validateMetadata(blob.getMetadata(), container, name);
+         expect = byteSource.slice(0, 6).openStream();
+         actual = blob.getPayload().openStream();
+         assertThat(actual).hasContentEqualTo(expect);
+      } finally {
+         Closeables2.closeQuietly(expect);
+         Closeables2.closeQuietly(actual);
+         returnContainer(container);
+      }
+   }
+

