diff --git a/molgenis-data-elasticsearch/src/main/java/org/molgenis/data/elasticsearch/request/QueryGenerator.java b/molgenis-data-elasticsearch/src/main/java/org/molgenis/data/elasticsearch/request/QueryGenerator.java
index 2db6952..6d117e0 100644
--- a/molgenis-data-elasticsearch/src/main/java/org/molgenis/data/elasticsearch/request/QueryGenerator.java
+++ b/molgenis-data-elasticsearch/src/main/java/org/molgenis/data/elasticsearch/request/QueryGenerator.java
@@ -62,0 +63 @@
+					i += 1;
diff --git a/molgenis-data-elasticsearch/src/test/java/org/molgenis/data/elasticsearch/request/QueryGeneratorTest.java b/molgenis-data-elasticsearch/src/test/java/org/molgenis/data/elasticsearch/request/QueryGeneratorTest.java
index ad65f7e..4d9113b 100644
--- a/molgenis-data-elasticsearch/src/test/java/org/molgenis/data/elasticsearch/request/QueryGeneratorTest.java
+++ b/molgenis-data-elasticsearch/src/test/java/org/molgenis/data/elasticsearch/request/QueryGeneratorTest.java
@@ -1645,0 +1646,25 @@
+	// regression test for https://github.com/molgenis/molgenis/issues/2326
+	@Test
+	public void generateMultipleQueryRuleMultipleNotClauses()
+	{
+		// query: a or (b and c)
+		Boolean booleanValue = Boolean.TRUE;
+		String stringValue = "str";
+		Integer intValue = 1;
+		Query q = new QueryImpl().eq(boolAttributeName, booleanValue).and().not().eq(stringAttributeName, stringValue)
+				.and().not().eq(intAttributeName, intValue);
+		new QueryGenerator().generate(searchRequestBuilder, q, entityMetaData);
+		ArgumentCaptor<QueryBuilder> captor = ArgumentCaptor.forClass(QueryBuilder.class);
+		verify(searchRequestBuilder).setQuery(captor.capture());
+
+		FilteredQueryBuilder booleanQuery = QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(),
+				FilterBuilders.termFilter(boolAttributeName, booleanValue));
+		QueryBuilder stringQuery = QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(),
+				FilterBuilders.termFilter(stringAttributeName + '.' + MappingsBuilder.FIELD_NOT_ANALYZED, stringValue));
+		QueryBuilder intQuery = QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(),
+				FilterBuilders.termFilter(intAttributeName, intValue));
+		QueryBuilder expectedQuery = QueryBuilders.boolQuery().must(booleanQuery).mustNot(stringQuery)
+				.mustNot(intQuery);
+		assertQueryBuilderEquals(captor.getValue(), expectedQuery);
+	}
+

