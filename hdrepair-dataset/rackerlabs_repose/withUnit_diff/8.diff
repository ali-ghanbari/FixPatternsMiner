diff --git a/project-set/components/rate-limiting/src/main/java/com/rackspace/papi/components/ratelimit/write/LimitsResponseMimeTypeWriter.java b/project-set/components/rate-limiting/src/main/java/com/rackspace/papi/components/ratelimit/write/LimitsResponseMimeTypeWriter.java
index ccfd56c..12f7164 100644
--- a/project-set/components/rate-limiting/src/main/java/com/rackspace/papi/components/ratelimit/write/LimitsResponseMimeTypeWriter.java
+++ b/project-set/components/rate-limiting/src/main/java/com/rackspace/papi/components/ratelimit/write/LimitsResponseMimeTypeWriter.java
@@ -22 +22 @@
-      if (MediaType.APPLICATION_XML.equals(mediaType)) {
+      if (MediaType.APPLICATION_XML.equals(mediaType.toString())) {
diff --git a/project-set/components/rate-limiting/src/test/java/com/rackspace/papi/components/ratelimit/write/LimitsResponseMimeTypeWriterTest.java b/project-set/components/rate-limiting/src/test/java/com/rackspace/papi/components/ratelimit/write/LimitsResponseMimeTypeWriterTest.java
new file mode 100644
index 0000000..347ebb4
--- /dev/null
+++ b/project-set/components/rate-limiting/src/test/java/com/rackspace/papi/components/ratelimit/write/LimitsResponseMimeTypeWriterTest.java
@@ -0,0 +1,51 @@
+package com.rackspace.papi.components.ratelimit.write;
+
+import com.rackspace.papi.components.ratelimit.util.LimitsEntityStreamTransformer;
+import com.rackspace.repose.service.ratelimit.config.LimitsFormat;
+import org.junit.Test;
+import org.junit.experimental.runners.Enclosed;
+import org.junit.runner.RunWith;
+
+import javax.ws.rs.core.MediaType;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+import static org.mockito.Mockito.*;
+
+@RunWith(Enclosed.class)
+public class LimitsResponseMimeTypeWriterTest {
+
+   public static class WhenWriting {
+      private final LimitsResponseMimeTypeWriter writer;
+      private final byte[] readableContents = {42};
+      private final OutputStream out;
+      private final LimitsEntityStreamTransformer transformer;
+
+      public WhenWriting() throws IOException {
+         transformer = mock(LimitsEntityStreamTransformer.class);
+         out = mock(OutputStream.class);
+         final InputStream in = mock(InputStream.class);
+         this.writer = new LimitsResponseMimeTypeWriter(LimitsFormat.OPENSTACK, transformer);
+
+         doNothing().when(transformer).streamAsJson(in, out, LimitsFormat.OPENSTACK);
+         doNothing().when(out).write(readableContents);
+      }
+
+      @Test
+      public void shouldChooseXmlPath() throws IOException {
+         writer.writeLimitsResponse(readableContents, MediaType.APPLICATION_XML_TYPE, out);
+
+         verify(out, times(1)).write(readableContents);
+      }
+
+      @Test
+      public void shouldChooseJsonPath() throws IOException {
+         writer.writeLimitsResponse(readableContents, MediaType.APPLICATION_JSON_TYPE, out);
+
+         verify(transformer, times(1)).streamAsJson(any(InputStream.class), any(OutputStream.class), any(LimitsFormat.class));
+      }
+   }
+
+}

