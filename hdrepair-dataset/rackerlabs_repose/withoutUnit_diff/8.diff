diff --git a/repose-aggregator/core/core-lib/src/main/java/com/rackspace/papi/service/datastore/distributed/impl/distributed/servlet/DistributedDatastoreServlet.java b/repose-aggregator/core/core-lib/src/main/java/com/rackspace/papi/service/datastore/distributed/impl/distributed/servlet/DistributedDatastoreServlet.java
index b393e06..823a319 100644
--- a/repose-aggregator/core/core-lib/src/main/java/com/rackspace/papi/service/datastore/distributed/impl/distributed/servlet/DistributedDatastoreServlet.java
+++ b/repose-aggregator/core/core-lib/src/main/java/com/rackspace/papi/service/datastore/distributed/impl/distributed/servlet/DistributedDatastoreServlet.java
@@ -174,0 +175,2 @@
+            } catch (ClassCastException e){
+                response.sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());
diff --git a/repose-aggregator/functional-tests/spock-functional-test/src/test/groovy/features/services/datastore/DistDatastoreServiceGetTest.groovy b/repose-aggregator/functional-tests/spock-functional-test/src/test/groovy/features/services/datastore/DistDatastoreServiceGetTest.groovy
index 570d2b6..86e52ba 100644
--- a/repose-aggregator/functional-tests/spock-functional-test/src/test/groovy/features/services/datastore/DistDatastoreServiceGetTest.groovy
+++ b/repose-aggregator/functional-tests/spock-functional-test/src/test/groovy/features/services/datastore/DistDatastoreServiceGetTest.groovy
@@ -3,0 +4 @@
+import org.apache.commons.lang.RandomStringUtils
@@ -13,0 +15 @@
+    def KEY_TOO_LARGE = ObjectSerializer.instance().writeObject(RandomStringUtils.random(2097139, ('A'..'Z').join().toCharArray() ))
@@ -44,0 +47,9 @@
+    def "GET with empty host key returns 401"(){
+        when:
+        MessageChain mc = deproxy.makeRequest([method: 'GET', url:DD_URI + KEY, headers:['X-PP-Host-Key':'', 'X-TTL':'1']])
+
+        then:
+        mc.receivedResponse.code == '401'
+
+    }
+
@@ -75,0 +87,8 @@
+    def "GET with a really large key returns a 413"(){
+        when: "I attempt to get the value from cache"
+        MessageChain mc = deproxy.makeRequest([method: 'GET', url:distDatastoreEndpoint, path:DD_PATH + KEY_TOO_LARGE, headers:DD_HEADERS])
+
+        then:
+        mc.receivedResponse.code == '413'
+    }
+
diff --git a/repose-aggregator/functional-tests/spock-functional-test/src/test/groovy/features/services/datastore/DistDatastoreServicePatchTest.groovy b/repose-aggregator/functional-tests/spock-functional-test/src/test/groovy/features/services/datastore/DistDatastoreServicePatchTest.groovy
new file mode 100644
index 0000000..34ed568
--- /dev/null
+++ b/repose-aggregator/functional-tests/spock-functional-test/src/test/groovy/features/services/datastore/DistDatastoreServicePatchTest.groovy
@@ -0,0 +1,215 @@
+package features.services.datastore
+
+import com.rackspace.papi.commons.util.io.ObjectSerializer
+import com.rackspace.papi.components.datastore.StringValue
+import framework.ReposeValveTest
+import org.apache.commons.lang.RandomStringUtils
+import org.rackspace.deproxy.Deproxy
+import org.rackspace.deproxy.MessageChain
+import org.rackspace.deproxy.PortFinder
+
+class DistDatastoreServicePatchTest extends ReposeValveTest {
+
+    String DD_URI
+    def DD_HEADERS = ['X-PP-Host-Key':'temp', 'X-TTL':'10']
+    def BODY = ObjectSerializer.instance().writeObject(new StringValue.Patch("test data"))
+    def INVALID_BODY = ObjectSerializer.instance().writeObject("test data")
+    static def KEY
+    def DD_PATH = "/powerapi/dist-datastore/objects/"
+    static def distDatastoreEndpoint
+
+    def setupSpec() {
+        deproxy = new Deproxy()
+        deproxy.addEndpoint(properties.targetPort)
+        int dataStorePort1 = PortFinder.Singleton.getNextOpenPort()
+        int dataStorePort2 = PortFinder.Singleton.getNextOpenPort()
+
+        distDatastoreEndpoint = "http://localhost:${dataStorePort1}"
+
+        def params = properties.getDefaultTemplateParams()
+        params += [
+                'datastorePort1' : dataStorePort1,
+                'datastorePort2' : dataStorePort2
+        ]
+
+        repose.configurationProvider.applyConfigs("common", params)
+        repose.configurationProvider.applyConfigs("features/services/datastore/", params)
+        repose.start()
+        repose.waitForNon500FromUrl(reposeEndpoint, 120)
+    }
+
+    def setup() {
+        DD_URI = distDatastoreEndpoint + DD_PATH
+        KEY = UUID.randomUUID().toString()
+    }
+
+    def cleanupSpec() {
+        repose.stop()
+        deproxy.shutdown()
+    }
+
+    def "PATCH a new cache object should return 200 response" () {
+        when:
+        MessageChain mc = deproxy.makeRequest([method: 'PATCH', url:DD_URI + KEY, headers:DD_HEADERS, requestBody: BODY])
+
+        then:
+        mc.receivedResponse.code == '200'
+    }
+
+    def "PATCH a new cache object with invalid Patch should return 400 response" () {
+        when:
+        MessageChain mc = deproxy.makeRequest([method: 'PATCH', url:DD_URI + KEY, headers:DD_HEADERS, requestBody: INVALID_BODY])
+
+        then:
+        mc.receivedResponse.code == '400'
+    }
+
+    def "PATCH with query parameters should ignore query params and return 200"() {
+        when:
+        MessageChain mc = deproxy.makeRequest([method: 'PATCH', url:DD_URI + KEY + "?foo=bar", headers:DD_HEADERS, requestBody: BODY])
+
+        then:
+        mc.receivedResponse.code == '200'
+
+        when:
+        mc = deproxy.makeRequest([method: 'GET', url:DD_URI + KEY, headers:DD_HEADERS])
+
+        then:
+        ObjectSerializer.instance().readObject(mc.receivedResponse.body as byte[]).value == "test data"
+
+    }
+
+    def "PATCH a cache object to an existing key should append onto the cached value"() {
+
+        when: "I make 2 PATCH calls for 2 different values for the same key"
+        def newBody = ObjectSerializer.instance().writeObject(new StringValue.Patch("MY NEW VALUE"))
+        deproxy.makeRequest([method: 'PATCH', url:DD_URI + KEY, headers:DD_HEADERS, requestBody: BODY])
+        deproxy.makeRequest([method: 'PATCH', url:DD_URI + KEY, headers:DD_HEADERS, requestBody: newBody])
+
+        and: "I get the value for the key"
+        MessageChain mc = deproxy.makeRequest([method: 'GET', url:DD_URI + KEY, headers:DD_HEADERS])
+
+        then: "The body of the get response should be the appended value"
+        ObjectSerializer.instance().readObject(mc.receivedResponse.body as byte[]).value == "test dataMY NEW VALUE"
+    }
+
+    def "PATCH with missing X-TTL is allowed"() {
+        when:
+        MessageChain mc = deproxy.makeRequest([method: 'PATCH', url:DD_URI + KEY, headers:['X-PP-Host-Key':'temp'], requestBody: BODY])
+
+        then:
+        mc.receivedResponse.code == '200'
+
+        when: "I get the value for the key"
+        mc = deproxy.makeRequest([method: 'GET', url:DD_URI + KEY, headers:DD_HEADERS])
+
+        then:
+        ObjectSerializer.instance().readObject(mc.receivedResponse.body as byte[]).value == "test data"
+    }
+
+    def "PATCH with empty string as body is allowed, and GET will return it"() {
+        when:
+        MessageChain mc = deproxy.makeRequest([method: 'PATCH', url:DD_URI + KEY, headers:DD_HEADERS, requestBody: ObjectSerializer.instance().writeObject(new StringValue.Patch(""))])
+
+        then:
+        mc.receivedResponse.code == '200'
+
+        when: "I get the value from cache with the empty body"
+        mc = deproxy.makeRequest([method: 'GET', url:DD_URI + KEY, headers:DD_HEADERS])
+
+        then:
+        mc.receivedResponse.code == '200'
+        ObjectSerializer.instance().readObject(mc.receivedResponse.body as byte[]).value == ""
+    }
+
+    def "PATCH with no key should return 400 Bad Request"() {
+        when:
+        MessageChain mc = deproxy.makeRequest([method: 'PATCH', url:DD_URI, headers:DD_HEADERS, requestBody: BODY])
+
+        then:
+        mc.receivedResponse.code == '400'
+        mc.receivedResponse.body.toString().contains("Cache key specified is invalid")
+    }
+
+    def "PATCH with missing X-PP-Host-Key should return a 401 Unauthorized and not be stored"() {
+
+        when:
+        MessageChain mc = deproxy.makeRequest([method: 'PATCH', url:DD_URI + KEY, headers: ['X-TTL':'10'], requestBody: BODY])
+
+        then:
+        mc.receivedResponse.code == '401'
+        mc.receivedResponse.body.toString().contains("No host key specified in header x-pp-host-key")
+
+        when: "I attempt to get the value from cache"
+        mc = deproxy.makeRequest([method: 'GET', url:DD_URI + KEY, headers:DD_HEADERS])
+
+        then: "The key is valid but does not exist, so should return a 404 NOT FOUND"
+        mc.receivedResponse.code == '404'
+    }
+
+    def "PATCH of invalid key should fail with 400 Bad Request"() {
+
+        when:
+        MessageChain mc = deproxy.makeRequest([method: 'PATCH', url: distDatastoreEndpoint, path: DD_PATH + key,
+                headers: DD_HEADERS, requestBody: BODY])
+
+        then:
+        mc.receivedResponse.code == '400'
+
+        when: "I attempt to get the value from cache"
+        mc = deproxy.makeRequest([method: 'GET', url: distDatastoreEndpoint, path: DD_PATH + key,
+                headers:DD_HEADERS])
+
+        then:
+        mc.receivedResponse.code == '404'
+        mc.receivedResponse.body.toString().contains("Cache key specified is invalid")
+
+        where:
+        key                                       | scenario
+        UUID.randomUUID().toString() +"///"       | "unnecessary slashes on path"
+        "foo/bar/?assd=adff"                      | "includes query parameters"
+        "foo"                                     | "less than 36 chars"
+        UUID.randomUUID().toString() + "a"        | "more than 36 chars"
+        "////////" + UUID.randomUUID().toString() | "leading slashes on path"
+        ""                                        | "empty key"
+        "%20foo%20"                               | "spaces"
+        "%2F%2D%20"                               | "random encoded characters"
+    }
+
+    def "PATCH with really large body within limit (2MEGS 2097152) should return 200"() {
+        given:
+        def largeBodyContent = RandomStringUtils.random(2096139, ('A'..'Z').join().toCharArray())
+        def largeBody = ObjectSerializer.instance().writeObject(new StringValue.Patch(largeBodyContent))
+
+        when:
+        MessageChain mc = deproxy.makeRequest([method: 'PATCH', url: DD_URI + KEY, headers: DD_HEADERS, requestBody: largeBody])
+
+        then:
+        mc.receivedResponse.code == '200'
+
+        when: "I attempt to get the value from cache"
+        mc = deproxy.makeRequest([method: 'GET', url:DD_URI + KEY, headers:DD_HEADERS])
+
+        then:
+        mc.receivedResponse.code == '200'
+        ObjectSerializer.instance().readObject(mc.receivedResponse.body as byte[]).value == largeBodyContent
+    }
+
+    def "PATCH with really large body outside limit (2MEGS 2097152) should return 413 Entity Too Large"() {
+        given:
+        def largeBody = ObjectSerializer.instance().writeObject(new StringValue.Patch(RandomStringUtils.random(2097153, ('A'..'Z').join().toCharArray())))
+
+        when:
+        MessageChain mc = deproxy.makeRequest([method: 'PATCH', url: DD_URI + KEY, headers: DD_HEADERS, requestBody: largeBody])
+
+        then:
+        mc.receivedResponse.code == '413'
+        mc.receivedResponse.body.toString().contains("Object is too large to store into the cache")
+
+        when: "I attempt to get the value from cache"
+        mc = deproxy.makeRequest([method: 'GET', url:DD_URI + KEY, headers:DD_HEADERS])
+
+        then:
+        mc.receivedResponse.code == '404'
+    }
+}
diff --git a/repose-aggregator/functional-tests/spock-functional-test/src/test/groovy/features/services/datastore/DistDatastoreServicePutTest.groovy b/repose-aggregator/functional-tests/spock-functional-test/src/test/groovy/features/services/datastore/DistDatastoreServicePutTest.groovy
index 092c466..f4840bf 100644
--- a/repose-aggregator/functional-tests/spock-functional-test/src/test/groovy/features/services/datastore/DistDatastoreServicePutTest.groovy
+++ b/repose-aggregator/functional-tests/spock-functional-test/src/test/groovy/features/services/datastore/DistDatastoreServicePutTest.groovy
@@ -2 +1,0 @@
-
@@ -14 +13 @@
-    def BODY = ObjectSerializer.instance().writeObject("test body")
+    def BODY = ObjectSerializer.instance().writeObject("test data")
@@ -57 +55,0 @@
-
@@ -83 +81 @@
-        then: "The body of the get response should be my second request body"
+        then: "The body of the get response should be the new body"
@@ -103 +101,2 @@
-        MessageChain mc = deproxy.makeRequest([method: 'PUT', url:DD_URI + KEY, headers:DD_HEADERS, requestBody: ObjectSerializer.instance().writeObject("")])
+        MessageChain mc = deproxy.makeRequest([method: 'PUT', url:DD_URI + KEY, headers:DD_HEADERS,
+                requestBody: ObjectSerializer.instance().writeObject("")])
@@ -164,0 +164,3 @@
+        ""                                        | "empty key"
+        "%20foo%20"                               | "spaces"
+        "%2F%2D%20"                               | "random encoded characters"
@@ -166 +167,0 @@
-
@@ -170 +171,2 @@
-        def largeBody = ObjectSerializer.instance().writeObject(RandomStringUtils.random(2097139, ('A'..'Z').join().toCharArray()))
+        def largeBodyContent = RandomStringUtils.random(2006139, ('A'..'Z').join().toCharArray())
+        def largeBody = ObjectSerializer.instance().writeObject(largeBodyContent)
@@ -183,2 +185 @@
-        mc.receivedResponse.body == largeBody
-        mc.receivedResponse.body.length == 2097152
+        ObjectSerializer.instance().readObject(mc.receivedResponse.body as byte[]) == largeBodyContent
@@ -186 +186,0 @@
-
@@ -190 +190,2 @@
-        def largeBody = ObjectSerializer.instance().writeObject(RandomStringUtils.random(2097153, ('A'..'Z').join().toCharArray()))
+        def largeBody = ObjectSerializer.instance().writeObject(
+                RandomStringUtils.random(2097152, ('A'..'Z').join().toCharArray()))

