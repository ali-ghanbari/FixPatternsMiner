diff --git a/ij2-common/src/main/java/imagej/data/UnsignedShortArrayAccessor.java b/ij2-common/src/main/java/imagej/data/UnsignedShortArrayAccessor.java
index 540c39a..2f293b6 100644
--- a/ij2-common/src/main/java/imagej/data/UnsignedShortArrayAccessor.java
+++ b/ij2-common/src/main/java/imagej/data/UnsignedShortArrayAccessor.java
@@ -37 +37 @@
-			value += 65536 + value;
+			value = 65536 + value;
diff --git a/ij2-common/src/test/java/imagej/data/ByteArrayAccessorTest.java b/ij2-common/src/test/java/imagej/data/ByteArrayAccessorTest.java
new file mode 100644
index 0000000..ce3e14c
--- /dev/null
+++ b/ij2-common/src/test/java/imagej/data/ByteArrayAccessorTest.java
@@ -0,0 +1,84 @@
+package imagej.data;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class ByteArrayAccessorTest {
+
+	private ByteArrayAccessor accessor;
+	
+	@Test
+	public void testByteArrayAccessor() {
+		byte[] data = new byte[]{1,2,3,4};
+		this.accessor = new ByteArrayAccessor(data);
+		assertNotNull(this.accessor);
+	}
+
+	@Test
+	public void testGetReal() {
+		byte[] data = new byte[]{1,2,3,4};
+		this.accessor = new ByteArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getReal(0), 0);
+		assertEquals(2, this.accessor.getReal(1), 0);
+		assertEquals(3, this.accessor.getReal(2), 0);
+		assertEquals(4, this.accessor.getReal(3), 0);
+	}
+
+	@Test
+	public void testGetIntegral() {
+		byte[] data = new byte[]{1,2,3,4};
+		this.accessor = new ByteArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getIntegral(0));
+		assertEquals(2, this.accessor.getIntegral(1));
+		assertEquals(3, this.accessor.getIntegral(2));
+		assertEquals(4, this.accessor.getIntegral(3));
+	}
+
+	@Test
+	public void testSetReal() {
+		byte[] data = new byte[]{1,2,3,4,5};
+		this.accessor = new ByteArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setReal(0, -1 + Byte.MIN_VALUE);
+		assertEquals(Byte.MIN_VALUE, this.accessor.getReal(0), 0);
+		
+		this.accessor.setReal(1, Byte.MAX_VALUE+1);
+		assertEquals(Byte.MAX_VALUE, this.accessor.getReal(1), 0);
+		
+		this.accessor.setReal(2, -13.4);
+		assertEquals(-13, this.accessor.getReal(2), 0);
+		
+		this.accessor.setReal(3, 68.6);
+		assertEquals(68, this.accessor.getReal(3), 0);
+		
+		this.accessor.setReal(4, 0);
+		assertEquals(0, this.accessor.getReal(4), 0);
+	}
+
+	@Test
+	public void testSetIntegral() {
+		byte[] data = new byte[]{1,2,3,4,5};
+		this.accessor = new ByteArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setIntegral(0, -1 + Byte.MIN_VALUE);
+		assertEquals(Byte.MIN_VALUE, this.accessor.getIntegral(0));
+		
+		this.accessor.setIntegral(1, Byte.MAX_VALUE+1);
+		assertEquals(Byte.MAX_VALUE, this.accessor.getIntegral(1));
+		
+		this.accessor.setIntegral(2, -13);
+		assertEquals(-13, this.accessor.getIntegral(2));
+		
+		this.accessor.setIntegral(3, 68);
+		assertEquals(68, this.accessor.getIntegral(3));
+		
+		this.accessor.setIntegral(4, 0);
+		assertEquals(0, this.accessor.getIntegral(4));
+	}
+
+}
diff --git a/ij2-common/src/test/java/imagej/data/DoubleArrayAccessorTest.java b/ij2-common/src/test/java/imagej/data/DoubleArrayAccessorTest.java
new file mode 100644
index 0000000..7179cf0
--- /dev/null
+++ b/ij2-common/src/test/java/imagej/data/DoubleArrayAccessorTest.java
@@ -0,0 +1,84 @@
+package imagej.data;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class DoubleArrayAccessorTest {
+
+	private DoubleArrayAccessor accessor;
+	
+	@Test
+	public void testByteArrayAccessor() {
+		double[] data = new double[]{1.1,2.2,3.3,4.4};
+		this.accessor = new DoubleArrayAccessor(data);
+		assertNotNull(this.accessor);
+	}
+
+	@Test
+	public void testGetReal() {
+		double[] data = new double[]{1.1,2.2,3.3,4.4};
+		this.accessor = new DoubleArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1.1, this.accessor.getReal(0), 0);
+		assertEquals(2.2, this.accessor.getReal(1), 0);
+		assertEquals(3.3, this.accessor.getReal(2), 0);
+		assertEquals(4.4, this.accessor.getReal(3), 0);
+	}
+
+	@Test
+	public void testGetIntegral() {
+		double[] data = new double[]{1.1,2.2,3.3,4.4};
+		this.accessor = new DoubleArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getIntegral(0));
+		assertEquals(2, this.accessor.getIntegral(1));
+		assertEquals(3, this.accessor.getIntegral(2));
+		assertEquals(4, this.accessor.getIntegral(3));
+	}
+
+	@Test
+	public void testSetReal() {
+		double[] data = new double[]{1.1,2.2,3.3,4.4,5.5};
+		this.accessor = new DoubleArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setReal(0, -Double.MAX_VALUE);
+		assertEquals(-Double.MAX_VALUE, this.accessor.getReal(0), 0);
+		
+		this.accessor.setReal(1, -1.93);
+		assertEquals(-1.93, this.accessor.getReal(1), 0);
+		
+		this.accessor.setReal(2, 0);
+		assertEquals(0, this.accessor.getReal(2), 0);
+		
+		this.accessor.setReal(3, 14.445);
+		assertEquals(14.445, this.accessor.getReal(3), 0);
+		
+		this.accessor.setReal(4, Double.MAX_VALUE);
+		assertEquals(Double.MAX_VALUE, this.accessor.getReal(4), 0);
+	}
+
+	@Test
+	public void testSetIntegral() {
+		double[] data = new double[]{1.1,2.2,3.3,4.4,5.5};
+		this.accessor = new DoubleArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setIntegral(0, (long)-Double.MAX_VALUE);
+		assertEquals((long)-Double.MAX_VALUE, this.accessor.getIntegral(0));
+		
+		this.accessor.setIntegral(1, -1);
+		assertEquals(-1, this.accessor.getIntegral(1));
+		
+		this.accessor.setIntegral(2, 0);
+		assertEquals(0, this.accessor.getIntegral(2));
+		
+		this.accessor.setIntegral(3, 14);
+		assertEquals(14, this.accessor.getIntegral(3));
+		
+		this.accessor.setIntegral(4, (long)Double.MAX_VALUE);
+		assertEquals((long)Double.MAX_VALUE, this.accessor.getIntegral(4));
+	}
+
+}
diff --git a/ij2-common/src/test/java/imagej/data/FloatArrayAccessorTest.java b/ij2-common/src/test/java/imagej/data/FloatArrayAccessorTest.java
new file mode 100644
index 0000000..15b08bd
--- /dev/null
+++ b/ij2-common/src/test/java/imagej/data/FloatArrayAccessorTest.java
@@ -0,0 +1,86 @@
+package imagej.data;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class FloatArrayAccessorTest {
+
+	private static final double TOL = 0.00001;
+	
+	private FloatArrayAccessor accessor;
+	
+	@Test
+	public void testByteArrayAccessor() {
+		float[] data = new float[]{1.1f,2.2f,3.3f,4.4f,5.5f};
+		this.accessor = new FloatArrayAccessor(data);
+		assertNotNull(this.accessor);
+	}
+
+	@Test
+	public void testGetReal() {
+		float[] data = new float[]{1.1f,2.2f,3.3f,4.4f,5.5f};
+		this.accessor = new FloatArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1.1, this.accessor.getReal(0), TOL);
+		assertEquals(2.2, this.accessor.getReal(1), TOL);
+		assertEquals(3.3, this.accessor.getReal(2), TOL);
+		assertEquals(4.4, this.accessor.getReal(3), TOL);
+	}
+
+	@Test
+	public void testGetIntegral() {
+		float[] data = new float[]{1.1f,2.2f,3.3f,4.4f,5.5f};
+		this.accessor = new FloatArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getIntegral(0));
+		assertEquals(2, this.accessor.getIntegral(1));
+		assertEquals(3, this.accessor.getIntegral(2));
+		assertEquals(4, this.accessor.getIntegral(3));
+	}
+
+	@Test
+	public void testSetReal() {
+		float[] data = new float[]{1.1f,2.2f,3.3f,4.4f,5.5f};
+		this.accessor = new FloatArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setReal(0, -Double.MAX_VALUE);
+		assertEquals(-Float.MAX_VALUE, this.accessor.getReal(0), TOL);
+		
+		this.accessor.setReal(1, -1.93);
+		assertEquals(-1.93, this.accessor.getReal(1), TOL);
+		
+		this.accessor.setReal(2, 0);
+		assertEquals(0, this.accessor.getReal(2), TOL);
+		
+		this.accessor.setReal(3, 14.445);
+		assertEquals(14.445, this.accessor.getReal(3), TOL);
+		
+		this.accessor.setReal(4, Double.MAX_VALUE);
+		assertEquals(Float.MAX_VALUE, this.accessor.getReal(4), TOL);
+	}
+
+	@Test
+	public void testSetIntegral() {
+		float[] data = new float[]{1.1f,2.2f,3.3f,4.4f,5.5f};
+		this.accessor = new FloatArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setIntegral(0, (long)-Double.MAX_VALUE);
+		assertEquals((long)-Float.MAX_VALUE, this.accessor.getIntegral(0));
+		
+		this.accessor.setIntegral(1, -1);
+		assertEquals(-1, this.accessor.getIntegral(1));
+		
+		this.accessor.setIntegral(2, 0);
+		assertEquals(0, this.accessor.getIntegral(2));
+		
+		this.accessor.setIntegral(3, 14);
+		assertEquals(14, this.accessor.getIntegral(3));
+		
+		this.accessor.setIntegral(4, (long)Double.MAX_VALUE);
+		assertEquals((long)Float.MAX_VALUE, this.accessor.getIntegral(4));
+	}
+
+}
diff --git a/ij2-common/src/test/java/imagej/data/IntArrayAccessorTest.java b/ij2-common/src/test/java/imagej/data/IntArrayAccessorTest.java
new file mode 100644
index 0000000..c82beee
--- /dev/null
+++ b/ij2-common/src/test/java/imagej/data/IntArrayAccessorTest.java
@@ -0,0 +1,84 @@
+package imagej.data;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class IntArrayAccessorTest {
+
+	private IntArrayAccessor accessor;
+	
+	@Test
+	public void testByteArrayAccessor() {
+		int[] data = new int[]{1,2,3,4};
+		this.accessor = new IntArrayAccessor(data);
+		assertNotNull(this.accessor);
+	}
+
+	@Test
+	public void testGetReal() {
+		int[] data = new int[]{1,2,3,4};
+		this.accessor = new IntArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getReal(0), 0);
+		assertEquals(2, this.accessor.getReal(1), 0);
+		assertEquals(3, this.accessor.getReal(2), 0);
+		assertEquals(4, this.accessor.getReal(3), 0);
+	}
+
+	@Test
+	public void testGetIntegral() {
+		int[] data = new int[]{1,2,3,4};
+		this.accessor = new IntArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getIntegral(0));
+		assertEquals(2, this.accessor.getIntegral(1));
+		assertEquals(3, this.accessor.getIntegral(2));
+		assertEquals(4, this.accessor.getIntegral(3));
+	}
+
+	@Test
+	public void testSetReal() {
+		int[] data = new int[]{1,2,3,4,5};
+		this.accessor = new IntArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setReal(0, -1.0 + Integer.MIN_VALUE);
+		assertEquals(Integer.MIN_VALUE, this.accessor.getReal(0), 0);
+		
+		this.accessor.setReal(1, Integer.MAX_VALUE+1.0);
+		assertEquals(Integer.MAX_VALUE, this.accessor.getReal(1), 0);
+		
+		this.accessor.setReal(2, -13.4);
+		assertEquals(-13, this.accessor.getReal(2), 0);
+		
+		this.accessor.setReal(3, 68.6);
+		assertEquals(68, this.accessor.getReal(3), 0);
+		
+		this.accessor.setReal(4, 0);
+		assertEquals(0, this.accessor.getReal(4), 0);
+	}
+
+	@Test
+	public void testSetIntegral() {
+		int[] data = new int[]{1,2,3,4,5};
+		this.accessor = new IntArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setIntegral(0, -1L + Integer.MIN_VALUE);
+		assertEquals(Integer.MIN_VALUE, this.accessor.getIntegral(0));
+		
+		this.accessor.setIntegral(1, Integer.MAX_VALUE+1L);
+		assertEquals(Integer.MAX_VALUE, this.accessor.getIntegral(1));
+		
+		this.accessor.setIntegral(2, -13);
+		assertEquals(-13, this.accessor.getIntegral(2));
+		
+		this.accessor.setIntegral(3, 68);
+		assertEquals(68, this.accessor.getIntegral(3));
+		
+		this.accessor.setIntegral(4, 0);
+		assertEquals(0, this.accessor.getIntegral(4));
+	}
+
+}
diff --git a/ij2-common/src/test/java/imagej/data/LongArrayAccessorTest.java b/ij2-common/src/test/java/imagej/data/LongArrayAccessorTest.java
new file mode 100644
index 0000000..2aac5d3
--- /dev/null
+++ b/ij2-common/src/test/java/imagej/data/LongArrayAccessorTest.java
@@ -0,0 +1,84 @@
+package imagej.data;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class LongArrayAccessorTest {
+
+	private LongArrayAccessor accessor;
+	
+	@Test
+	public void testByteArrayAccessor() {
+		long[] data = new long[]{1,2,3,4,5};
+		this.accessor = new LongArrayAccessor(data);
+		assertNotNull(this.accessor);
+	}
+
+	@Test
+	public void testGetReal() {
+		long[] data = new long[]{1,2,3,4,5};
+		this.accessor = new LongArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getReal(0), 0);
+		assertEquals(2, this.accessor.getReal(1), 0);
+		assertEquals(3, this.accessor.getReal(2), 0);
+		assertEquals(4, this.accessor.getReal(3), 0);
+	}
+
+	@Test
+	public void testGetIntegral() {
+		long[] data = new long[]{1,2,3,4,5};
+		this.accessor = new LongArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getIntegral(0));
+		assertEquals(2, this.accessor.getIntegral(1));
+		assertEquals(3, this.accessor.getIntegral(2));
+		assertEquals(4, this.accessor.getIntegral(3));
+	}
+
+	@Test
+	public void testSetReal() {
+		long[] data = new long[]{1,2,3,4,5};
+		this.accessor = new LongArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setReal(0, -Double.MAX_VALUE);
+		assertEquals(Long.MIN_VALUE, this.accessor.getReal(0), 0);
+		
+		this.accessor.setReal(1, Double.MAX_VALUE);
+		assertEquals(Long.MAX_VALUE, this.accessor.getReal(1), 0);
+		
+		this.accessor.setReal(2, -13.4);
+		assertEquals(-13, this.accessor.getReal(2), 0);
+		
+		this.accessor.setReal(3, 68.6);
+		assertEquals(68, this.accessor.getReal(3), 0);
+		
+		this.accessor.setReal(4, 0);
+		assertEquals(0, this.accessor.getReal(4), 0);
+	}
+
+	@Test
+	public void testSetIntegral() {
+		long[] data = new long[]{1,2,3,4,5};
+		this.accessor = new LongArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setIntegral(0, (long)-Double.MAX_VALUE);
+		assertEquals(Long.MIN_VALUE, this.accessor.getIntegral(0));
+		
+		this.accessor.setIntegral(1, (long)Double.MAX_VALUE);
+		assertEquals(Long.MAX_VALUE, this.accessor.getIntegral(1));
+		
+		this.accessor.setIntegral(2, -13);
+		assertEquals(-13, this.accessor.getIntegral(2));
+		
+		this.accessor.setIntegral(3, 68);
+		assertEquals(68, this.accessor.getIntegral(3));
+		
+		this.accessor.setIntegral(4, 0);
+		assertEquals(0, this.accessor.getIntegral(4));
+	}
+
+}
diff --git a/ij2-common/src/test/java/imagej/data/ShortArrayAccessorTest.java b/ij2-common/src/test/java/imagej/data/ShortArrayAccessorTest.java
new file mode 100644
index 0000000..5298715
--- /dev/null
+++ b/ij2-common/src/test/java/imagej/data/ShortArrayAccessorTest.java
@@ -0,0 +1,84 @@
+package imagej.data;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class ShortArrayAccessorTest {
+
+	private ShortArrayAccessor accessor;
+	
+	@Test
+	public void testByteArrayAccessor() {
+		short[] data = new short[]{1,2,3,4,5};
+		this.accessor = new ShortArrayAccessor(data);
+		assertNotNull(this.accessor);
+	}
+
+	@Test
+	public void testGetReal() {
+		short[] data = new short[]{1,2,3,4,5};
+		this.accessor = new ShortArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getReal(0), 0);
+		assertEquals(2, this.accessor.getReal(1), 0);
+		assertEquals(3, this.accessor.getReal(2), 0);
+		assertEquals(4, this.accessor.getReal(3), 0);
+	}
+
+	@Test
+	public void testGetIntegral() {
+		short[] data = new short[]{1,2,3,4,5};
+		this.accessor = new ShortArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getIntegral(0));
+		assertEquals(2, this.accessor.getIntegral(1));
+		assertEquals(3, this.accessor.getIntegral(2));
+		assertEquals(4, this.accessor.getIntegral(3));
+	}
+
+	@Test
+	public void testSetReal() {
+		short[] data = new short[]{1,2,3,4,5};
+		this.accessor = new ShortArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setReal(0, -1.0 + Short.MIN_VALUE);
+		assertEquals(Short.MIN_VALUE, this.accessor.getReal(0), 0);
+		
+		this.accessor.setReal(1, Short.MAX_VALUE+1.0);
+		assertEquals(Short.MAX_VALUE, this.accessor.getReal(1), 0);
+		
+		this.accessor.setReal(2, -13.4);
+		assertEquals(-13, this.accessor.getReal(2), 0);
+		
+		this.accessor.setReal(3, 68.6);
+		assertEquals(68, this.accessor.getReal(3), 0);
+		
+		this.accessor.setReal(4, 0);
+		assertEquals(0, this.accessor.getReal(4), 0);
+	}
+
+	@Test
+	public void testSetIntegral() {
+		short[] data = new short[]{1,2,3,4,5};
+		this.accessor = new ShortArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setIntegral(0, -1 + Short.MIN_VALUE);
+		assertEquals(Short.MIN_VALUE, this.accessor.getIntegral(0));
+		
+		this.accessor.setIntegral(1, Short.MAX_VALUE+1L);
+		assertEquals(Short.MAX_VALUE, this.accessor.getIntegral(1));
+		
+		this.accessor.setIntegral(2, -13);
+		assertEquals(-13, this.accessor.getIntegral(2));
+		
+		this.accessor.setIntegral(3, 68);
+		assertEquals(68, this.accessor.getIntegral(3));
+		
+		this.accessor.setIntegral(4, 0);
+		assertEquals(0, this.accessor.getIntegral(4));
+	}
+
+}
diff --git a/ij2-common/src/test/java/imagej/data/Unsigned12BitArrayAccessorTest.java b/ij2-common/src/test/java/imagej/data/Unsigned12BitArrayAccessorTest.java
index 2e9224f..a7bb0a1 100644
--- a/ij2-common/src/test/java/imagej/data/Unsigned12BitArrayAccessorTest.java
+++ b/ij2-common/src/test/java/imagej/data/Unsigned12BitArrayAccessorTest.java
@@ -34 +34 @@
-		int[] values = new int[]{0,0,0};
+		int[] values = new int[]{-1,-1,-1};
@@ -37,8 +37,14 @@
-		// try entry 0
-		assertEquals(0, this.accessor.getReal(0),  0);
-		this.accessor.setReal(0, 23);
-		assertEquals(23, this.accessor.getReal(0),  0);  // set it to 1
-		this.accessor.setReal(0, -1);
-		assertEquals(0, this.accessor.getReal(0),  0);  // set it to value out of lower range
-		this.accessor.setReal(0, 4096);
-		assertEquals(4095, this.accessor.getReal(0),  0);  // set it to value out of upper range
+		for (int v = 0; v < values.length; v++)
+		{
+			for (int i = 0; i < 4096; i++)
+			{
+				this.accessor.setReal(v, i);
+				assertEquals(i, this.accessor.getReal(v), 0);
+			}
+			
+			for (int i = -68000; i < 0; i+=1000)
+			{
+				this.accessor.setReal(v, 99);
+				this.accessor.setReal(v, i);
+				assertEquals(0, this.accessor.getReal(v), 0);
+			}
@@ -46,26 +52,7 @@
-		// try entry 3
-		assertEquals(0, this.accessor.getReal(3),  0);
-		this.accessor.setReal(3, 145);
-		assertEquals(145, this.accessor.getReal(3),  0);  // set it to 1
-		this.accessor.setReal(3, -1);
-		assertEquals(0, this.accessor.getReal(3),  0);  // set it to value out of lower range
-		this.accessor.setReal(3, 4096);
-		assertEquals(4095, this.accessor.getReal(3),  0);  // set it to value out of upper range
-
-		// try entry 5
-		assertEquals(0, this.accessor.getReal(5),  0);
-		this.accessor.setReal(5, 2010);
-		assertEquals(2010, this.accessor.getReal(5),  0);  // set it to 1
-		this.accessor.setReal(5, -1);
-		assertEquals(0, this.accessor.getReal(5),  0);  // set it to value out of lower range
-		this.accessor.setReal(5, 4096);
-		assertEquals(4095, this.accessor.getReal(5),  0);  // set it to value out of upper range
-		
-		// try entry 7
-		assertEquals(0, this.accessor.getReal(7),  0);
-		this.accessor.setReal(7, 3886);
-		assertEquals(3886, this.accessor.getReal(7),  0);  // set it to 1
-		this.accessor.setReal(7, -1);
-		assertEquals(0, this.accessor.getReal(7),  0);  // set it to value out of lower range
-		this.accessor.setReal(7, 4096);
-		assertEquals(4095, this.accessor.getReal(7),  0);  // set it to value out of upper range
+			for (int i = 4096; i < 68000; i+=1000)
+			{
+				this.accessor.setReal(v, 99);
+				this.accessor.setReal(v, i);
+				assertEquals(4095, this.accessor.getReal(v), 0);
+			}
+		}
@@ -91 +78 @@
-		int[] values = new int[]{0,0,0};
+		int[] values = new int[]{-1,-1,-1};
@@ -94,8 +81,14 @@
-		// try entry 0
-		assertEquals(0, this.accessor.getReal(0),  0);
-		this.accessor.setReal(0, 999);
-		assertEquals(999, this.accessor.getReal(0),  0);  // set it to 1
-		this.accessor.setReal(0, -1);
-		assertEquals(0, this.accessor.getReal(0),  0);  // set it to value out of lower range
-		this.accessor.setReal(0, 4096);
-		assertEquals(4095, this.accessor.getReal(0),  0);  // set it to value out of upper range
+		for (int v = 0; v < values.length; v++)
+		{
+			for (int i = 0; i < 4096; i++)
+			{
+				this.accessor.setIntegral(v, i);
+				assertEquals(i, this.accessor.getIntegral(v));
+			}
+			
+			for (int i = -68000; i < 0; i+=1000)
+			{
+				this.accessor.setIntegral(v, 99);
+				this.accessor.setIntegral(v, i);
+				assertEquals(0, this.accessor.getIntegral(v));
+			}
@@ -103,26 +96,7 @@
-		// try entry 1
-		assertEquals(0, this.accessor.getReal(1),  0);
-		this.accessor.setReal(1, 4040);
-		assertEquals(4040, this.accessor.getReal(1),  0);  // set it to 1
-		this.accessor.setReal(1, -1);
-		assertEquals(0, this.accessor.getReal(1),  0);  // set it to value out of lower range
-		this.accessor.setReal(1, 4096);
-		assertEquals(4095, this.accessor.getReal(1),  0);  // set it to value out of upper range
-
-		// try entry 4
-		assertEquals(0, this.accessor.getReal(4),  0);
-		this.accessor.setReal(4, 3333);
-		assertEquals(3333, this.accessor.getReal(4),  0);  // set it to 1
-		this.accessor.setReal(4, -1);
-		assertEquals(0, this.accessor.getReal(4),  0);  // set it to value out of lower range
-		this.accessor.setReal(4, 4096);
-		assertEquals(4095, this.accessor.getReal(4),  0);  // set it to value out of upper range
-		
-		// try entry 6
-		assertEquals(0, this.accessor.getReal(6),  0);
-		this.accessor.setReal(6, 2422);
-		assertEquals(2422, this.accessor.getReal(6),  0);  // set it to 1
-		this.accessor.setReal(6, -1);
-		assertEquals(0, this.accessor.getReal(6),  0);  // set it to value out of lower range
-		this.accessor.setReal(6, 4096);
-		assertEquals(4095, this.accessor.getReal(6),  0);  // set it to value out of upper range
+			for (int i = 4096; i < 68000; i+=1000)
+			{
+				this.accessor.setIntegral(v, 99);
+				this.accessor.setIntegral(v, i);
+				assertEquals(4095, this.accessor.getIntegral(v));
+			}
+		}
diff --git a/ij2-common/src/test/java/imagej/data/UnsignedByteArrayAccessorTest.java b/ij2-common/src/test/java/imagej/data/UnsignedByteArrayAccessorTest.java
new file mode 100644
index 0000000..c48b6c0
--- /dev/null
+++ b/ij2-common/src/test/java/imagej/data/UnsignedByteArrayAccessorTest.java
@@ -0,0 +1,84 @@
+package imagej.data;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class UnsignedByteArrayAccessorTest {
+
+	private UnsignedByteArrayAccessor accessor;
+	
+	@Test
+	public void testUnsignedByteArrayAccessor() {
+		byte[] data = new byte[]{1,2,3,4};
+		this.accessor = new UnsignedByteArrayAccessor(data);
+		assertNotNull(this.accessor);
+	}
+
+	@Test
+	public void testGetReal() {
+		byte[] data = new byte[]{1,2,3,4};
+		this.accessor = new UnsignedByteArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getReal(0), 0);
+		assertEquals(2, this.accessor.getReal(1), 0);
+		assertEquals(3, this.accessor.getReal(2), 0);
+		assertEquals(4, this.accessor.getReal(3), 0);
+	}
+
+	@Test
+	public void testGetIntegral() {
+		byte[] data = new byte[]{1,2,3,4};
+		this.accessor = new UnsignedByteArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getIntegral(0));
+		assertEquals(2, this.accessor.getIntegral(1));
+		assertEquals(3, this.accessor.getIntegral(2));
+		assertEquals(4, this.accessor.getIntegral(3));
+	}
+
+	@Test
+	public void testSetReal() {
+		byte[] data = new byte[]{1,2,3,4,5};
+		this.accessor = new UnsignedByteArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setReal(0, -1);
+		assertEquals(0, this.accessor.getReal(0), 0);
+		
+		this.accessor.setReal(1, 256);
+		assertEquals(255, this.accessor.getReal(1), 0);
+		
+		this.accessor.setReal(2, 13.4);
+		assertEquals(13, this.accessor.getReal(2), 0);
+		
+		this.accessor.setReal(3, 228.6);
+		assertEquals(228, this.accessor.getReal(3), 0);
+		
+		this.accessor.setReal(4, 0);
+		assertEquals(0, this.accessor.getReal(4), 0);
+	}
+
+	@Test
+	public void testSetIntegral() {
+		byte[] data = new byte[]{1,2,3,4,5};
+		this.accessor = new UnsignedByteArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setIntegral(0, -1);
+		assertEquals(0, this.accessor.getIntegral(0));
+		
+		this.accessor.setIntegral(1, 256);
+		assertEquals(255, this.accessor.getIntegral(1));
+		
+		this.accessor.setIntegral(2, 13);
+		assertEquals(13, this.accessor.getIntegral(2));
+		
+		this.accessor.setIntegral(3, 228);
+		assertEquals(228, this.accessor.getIntegral(3));
+		
+		this.accessor.setIntegral(4, 0);
+		assertEquals(0, this.accessor.getIntegral(4));
+	}
+
+}
diff --git a/ij2-common/src/test/java/imagej/data/UnsignedIntArrayAccessorTest.java b/ij2-common/src/test/java/imagej/data/UnsignedIntArrayAccessorTest.java
new file mode 100644
index 0000000..d531d8e
--- /dev/null
+++ b/ij2-common/src/test/java/imagej/data/UnsignedIntArrayAccessorTest.java
@@ -0,0 +1,84 @@
+package imagej.data;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class UnsignedIntArrayAccessorTest {
+
+	private UnsignedIntArrayAccessor accessor;
+	
+	@Test
+	public void testByteArrayAccessor() {
+		int[] data = new int[]{1,2,3,4,5};
+		this.accessor = new UnsignedIntArrayAccessor(data);
+		assertNotNull(this.accessor);
+	}
+
+	@Test
+	public void testGetReal() {
+		int[] data = new int[]{1,2,3,4,5};
+		this.accessor = new UnsignedIntArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getReal(0), 0);
+		assertEquals(2, this.accessor.getReal(1), 0);
+		assertEquals(3, this.accessor.getReal(2), 0);
+		assertEquals(4, this.accessor.getReal(3), 0);
+	}
+
+	@Test
+	public void testGetIntegral() {
+		int[] data = new int[]{1,2,3,4,5};
+		this.accessor = new UnsignedIntArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getIntegral(0));
+		assertEquals(2, this.accessor.getIntegral(1));
+		assertEquals(3, this.accessor.getIntegral(2));
+		assertEquals(4, this.accessor.getIntegral(3));
+	}
+
+	@Test
+	public void testSetReal() {
+		int[] data = new int[]{1,2,3,4,5};
+		this.accessor = new UnsignedIntArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setReal(0, -1.0);
+		assertEquals(0, this.accessor.getReal(0), 0);
+		
+		this.accessor.setReal(1, 4294967296.0);
+		assertEquals(4294967295.0, this.accessor.getReal(1), 0);
+		
+		this.accessor.setReal(2, 13.4);
+		assertEquals(13, this.accessor.getReal(2), 0);
+		
+		this.accessor.setReal(3, 1234567.6);
+		assertEquals(1234567, this.accessor.getReal(3), 0);
+		
+		this.accessor.setReal(4, 0);
+		assertEquals(0, this.accessor.getReal(4), 0);
+	}
+
+	@Test
+	public void testSetIntegral() {
+		int[] data = new int[]{1,2,3,4,5};
+		this.accessor = new UnsignedIntArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setIntegral(0, -1);
+		assertEquals(0, this.accessor.getIntegral(0));
+		
+		this.accessor.setIntegral(1, 4294967296L);
+		assertEquals(4294967295L, this.accessor.getIntegral(1));
+		
+		this.accessor.setIntegral(2, 13);
+		assertEquals(13, this.accessor.getIntegral(2));
+		
+		this.accessor.setIntegral(3, 1234567);
+		assertEquals(1234567, this.accessor.getIntegral(3));
+		
+		this.accessor.setIntegral(4, 0);
+		assertEquals(0, this.accessor.getIntegral(4));
+	}
+
+}
diff --git a/ij2-common/src/test/java/imagej/data/UnsignedShortArrayAccessorTest.java b/ij2-common/src/test/java/imagej/data/UnsignedShortArrayAccessorTest.java
new file mode 100644
index 0000000..4462f1c
--- /dev/null
+++ b/ij2-common/src/test/java/imagej/data/UnsignedShortArrayAccessorTest.java
@@ -0,0 +1,84 @@
+package imagej.data;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class UnsignedShortArrayAccessorTest {
+
+	private UnsignedShortArrayAccessor accessor;
+	
+	@Test
+	public void testUnsignedShortArrayAccessor() {
+		short[] data = new short[]{1,2,3,4,5};
+		this.accessor = new UnsignedShortArrayAccessor(data);
+		assertNotNull(this.accessor);
+	}
+
+	@Test
+	public void testGetReal() {
+		short[] data = new short[]{1,2,3,4,5};
+		this.accessor = new UnsignedShortArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getReal(0), 0);
+		assertEquals(2, this.accessor.getReal(1), 0);
+		assertEquals(3, this.accessor.getReal(2), 0);
+		assertEquals(4, this.accessor.getReal(3), 0);
+	}
+
+	@Test
+	public void testGetIntegral() {
+		short[] data = new short[]{1,2,3,4,5};
+		this.accessor = new UnsignedShortArrayAccessor(data);
+		assertNotNull(this.accessor);
+		assertEquals(1, this.accessor.getIntegral(0));
+		assertEquals(2, this.accessor.getIntegral(1));
+		assertEquals(3, this.accessor.getIntegral(2));
+		assertEquals(4, this.accessor.getIntegral(3));
+	}
+
+	@Test
+	public void testSetReal() {
+		short[] data = new short[]{1,2,3,4,5};
+		this.accessor = new UnsignedShortArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setReal(0, -1.0);
+		assertEquals(0, this.accessor.getReal(0), 0);
+		
+		this.accessor.setReal(1, 65536.0);
+		assertEquals(65535, this.accessor.getReal(1), 0);
+		
+		this.accessor.setReal(2, 13.4);
+		assertEquals(13, this.accessor.getReal(2), 0);
+		
+		this.accessor.setReal(3, 61101.6);
+		assertEquals(61101, this.accessor.getReal(3), 0);
+		
+		this.accessor.setReal(4, 0);
+		assertEquals(0, this.accessor.getReal(4), 0);
+	}
+
+	@Test
+	public void testSetIntegral() {
+		short[] data = new short[]{1,2,3,4,5};
+		this.accessor = new UnsignedShortArrayAccessor(data);
+		assertNotNull(this.accessor);
+		
+		this.accessor.setIntegral(0, -1);
+		assertEquals(0, this.accessor.getIntegral(0));
+		
+		this.accessor.setIntegral(1, 65536);
+		assertEquals(65535, this.accessor.getIntegral(1));
+		
+		this.accessor.setIntegral(2, 13);
+		assertEquals(13, this.accessor.getIntegral(2));
+		
+		this.accessor.setIntegral(3, 61101);
+		assertEquals(61101, this.accessor.getIntegral(3));
+		
+		this.accessor.setIntegral(4, 0);
+		assertEquals(0, this.accessor.getIntegral(4));
+	}
+
+}

