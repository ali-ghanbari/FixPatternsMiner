diff --git a/modeshape-jcr/src/main/java/org/modeshape/jcr/cache/document/AbstractChildReferences.java b/modeshape-jcr/src/main/java/org/modeshape/jcr/cache/document/AbstractChildReferences.java
index f405c85..f73baac 100644
--- a/modeshape-jcr/src/main/java/org/modeshape/jcr/cache/document/AbstractChildReferences.java
+++ b/modeshape-jcr/src/main/java/org/modeshape/jcr/cache/document/AbstractChildReferences.java
@@ -230,0 +231 @@
+            if (last != null) return true; // 'hasNext()' has been called multiple times before 'next()'
diff --git a/modeshape-jcr/src/test/java/org/modeshape/jcr/JcrNodeTest.java b/modeshape-jcr/src/test/java/org/modeshape/jcr/JcrNodeTest.java
index b8d0118..3a52bb9 100644
--- a/modeshape-jcr/src/test/java/org/modeshape/jcr/JcrNodeTest.java
+++ b/modeshape-jcr/src/test/java/org/modeshape/jcr/JcrNodeTest.java
@@ -25,0 +26,10 @@
+import static org.hamcrest.core.Is.is;
+import static org.hamcrest.core.IsNull.notNullValue;
+import static org.hamcrest.core.IsSame.sameInstance;
+import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
@@ -44,9 +53,0 @@
-import static org.hamcrest.core.Is.is;
-import static org.hamcrest.core.IsNull.notNullValue;
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
@@ -361 +362 @@
-    @FixFor("MODE-1969")
+    @FixFor( "MODE-1969" )
@@ -376,2 +377,2 @@
-        testNode.setProperty("test:multiRef", new Value[]{valueFactory.createSimpleReference(b),
-                valueFactory.createSimpleReference(c)});
+        testNode.setProperty("test:multiRef",
+                             new Value[] {valueFactory.createSimpleReference(b), valueFactory.createSimpleReference(c)});
@@ -388,2 +389,2 @@
-        assertArrayEquals(new String[] { b.getIdentifier(), c.getIdentifier() },
-                          new String[] { actualValues[0].getString(), actualValues[1].getString() });
+        assertArrayEquals(new String[] {b.getIdentifier(), c.getIdentifier()}, new String[] {actualValues[0].getString(),
+            actualValues[1].getString()});
@@ -403 +404 @@
-            //expected
+            // expected
@@ -414 +415 @@
-    @FixFor("MODE-1969")
+    @FixFor( "MODE-1969" )
@@ -426 +427 @@
-            //expected
+            // expected
@@ -435 +436 @@
-    @FixFor("MODE-2069")
+    @FixFor( "MODE-2069" )
@@ -446,2 +447,2 @@
-            assertEquals(0, rootNode.getNodes(new String[] { "*[2]" }).getSize());
-            assertEquals(0, rootNode.getNodes(new String[] { "*[1]", "*[2]" }).getSize());
+            assertEquals(0, rootNode.getNodes(new String[] {"*[2]"}).getSize());
+            assertEquals(0, rootNode.getNodes(new String[] {"*[1]", "*[2]"}).getSize());
@@ -449,4 +450,4 @@
-            assertEquals(2, rootNode.getNodes(new String[] { "child", "child" }).getSize());
-            assertEquals(2, rootNode.getNodes(new String[] { "*child"}).getSize());
-            assertEquals(2, rootNode.getNodes(new String[] { "child*"}).getSize());
-            assertEquals(2, rootNode.getNodes(new String[] { "child"}).getSize());
+            assertEquals(2, rootNode.getNodes(new String[] {"child", "child"}).getSize());
+            assertEquals(2, rootNode.getNodes(new String[] {"*child"}).getSize());
+            assertEquals(2, rootNode.getNodes(new String[] {"child*"}).getSize());
+            assertEquals(2, rootNode.getNodes(new String[] {"child"}).getSize());
@@ -461 +462 @@
-    @FixFor("MODE-2069")
+    @FixFor( "MODE-2069" )
@@ -488 +489 @@
-            assertEquals(1, rootNode.getNodes("*:*").getSize()); //jcr:system
+            assertEquals(1, rootNode.getNodes("*:*").getSize()); // jcr:system
@@ -496 +497 @@
-    @FixFor("MODE-2069")
+    @FixFor( "MODE-2069" )
@@ -521,0 +523,121 @@
+
+    @Test
+    @FixFor( "MODE-2126" )
+    public void shouldAllowIteratorToBeUsedNominally() throws Exception {
+        Node cars = session.getNode("/Cars");
+        NodeIterator iter = cars.getNodes();
+        while (iter.hasNext()) {
+            Node child = iter.nextNode();
+            System.out.println("Child: " + child);
+        }
+    }
+
+    @Test
+    @FixFor( "MODE-2126" )
+    public void shouldAllowHasNextToBeCalledMultipleTimesWithoutAdvancing() throws Exception {
+        Node cars = session.getNode("/Cars");
+        NodeIterator iter = cars.getNodes();
+        for (int i = 0; i != 10; ++i) { // there are only 4 children
+            assertThat(iter.hasNext(), is(true));
+        }
+
+        NodeIterator iter2 = cars.getNodes();
+        while (iter2.hasNext()) {
+            Node child2 = iter2.nextNode();
+            Node child1 = iter.nextNode();
+            System.out.println("Child: " + child1);
+            assertThat(child1, is(sameInstance(child2)));
+        }
+    }
+
+    @Test
+    @FixFor( "MODE-2126" )
+    public void shouldAllowIteratorOverNamedNodesToBeUsedNominally() throws Exception {
+        Node cars = session.getNode("/Cars");
+        NodeIterator iter = cars.getNodes("Hybrid");
+        while (iter.hasNext()) {
+            Node child = iter.nextNode();
+            System.out.println("Child: " + child);
+        }
+    }
+
+    @Test
+    @FixFor( "MODE-2126" )
+    public void shouldAllowHasNextToBeCalledMultipleTimesWithoutAdvancingOnIteratorOverNamedNodes() throws Exception {
+        Node cars = session.getNode("/Cars");
+        NodeIterator iter = cars.getNodes("Hybrid");
+        for (int i = 0; i != 10; ++i) { // there's only 1 with this name
+            assertThat(iter.hasNext(), is(true));
+        }
+
+        NodeIterator iter2 = cars.getNodes("Hybrid");
+        while (iter2.hasNext()) {
+            Node child2 = iter2.nextNode();
+            Node child1 = iter.nextNode();
+            System.out.println("Child: " + child1);
+            assertThat(child1, is(sameInstance(child2)));
+        }
+    }
+
+    @Test
+    @FixFor( "MODE-2126" )
+    public void shouldAllowHasNextToBeCalledMultipleTimesWithoutAdvancingOnIteratorOverNamedNodesWithSameNameSiblings()
+        throws Exception {
+        Node parent = session.getRootNode().addNode("parent", "nt:unstructured");
+        try {
+            parent.addNode("child");
+            parent.addNode("child");
+            parent.addNode("child");
+            parent.addNode("child");
+            session.save();
+
+            NodeIterator iter = parent.getNodes("child");
+            for (int i = 0; i != 10; ++i) { // there are 4 with this name, but let's call 'hasNext' 10x
+                assertThat(iter.hasNext(), is(true));
+            }
+
+            NodeIterator iter2 = parent.getNodes("child");
+            while (iter2.hasNext()) {
+                Node child2 = iter2.nextNode();
+                Node child1 = iter.nextNode();
+                System.out.println("Child: " + child1);
+                assertThat(child1, is(sameInstance(child2)));
+            }
+        } finally {
+            parent.remove();
+            session.save();
+        }
+    }
+
+    @Test
+    @FixFor( "MODE-2126" )
+    public void shouldAllowHasNextToBeCalledMultipleTimesWithoutAdvancingOnIteratorOverNamedTransientNodesWithSameNameSiblings()
+        throws Exception {
+        Node parent = session.getRootNode().addNode("parent", "nt:unstructured");
+        try {
+            parent.addNode("child");
+            parent.addNode("child");
+            parent.addNode("child");
+            // session.save();
+
+            NodeIterator iter = parent.getNodes("child");
+
+            // there are 3 child nodes with this name, but let's call 'hasNext' 5x
+            assertThat(iter.hasNext(), is(true));
+            assertThat(iter.hasNext(), is(true));
+            assertThat(iter.hasNext(), is(true));
+            assertThat(iter.hasNext(), is(true));
+            assertThat(iter.hasNext(), is(true));
+
+            NodeIterator iter2 = parent.getNodes("child");
+            while (iter2.hasNext()) {
+                Node child2 = iter2.nextNode();
+                Node child1 = iter.nextNode();
+                System.out.println("Child: " + child1);
+                assertThat(child1, is(sameInstance(child2)));
+            }
+        } finally {
+            parent.remove();
+            session.save();
+        }
+    }

