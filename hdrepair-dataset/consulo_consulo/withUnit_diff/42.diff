diff --git a/plugins/maven/src/main/java/org/jetbrains/idea/maven/importing/MavenProjectImporter.java b/plugins/maven/src/main/java/org/jetbrains/idea/maven/importing/MavenProjectImporter.java
index 8c45bee..0386791 100644
--- a/plugins/maven/src/main/java/org/jetbrains/idea/maven/importing/MavenProjectImporter.java
+++ b/plugins/maven/src/main/java/org/jetbrains/idea/maven/importing/MavenProjectImporter.java
@@ -540 +540 @@
-      if (!MavenRootModelAdapter.isChangedByUser(each)) {
+      if (MavenRootModelAdapter.isMavenLibrary(each) && !MavenRootModelAdapter.isChangedByUser(each)) {
diff --git a/plugins/maven/src/test/java/org/jetbrains/idea/maven/importing/DependenciesImportingTest.java b/plugins/maven/src/test/java/org/jetbrains/idea/maven/importing/DependenciesImportingTest.java
index 1862a53..40c8ae8 100644
--- a/plugins/maven/src/test/java/org/jetbrains/idea/maven/importing/DependenciesImportingTest.java
+++ b/plugins/maven/src/test/java/org/jetbrains/idea/maven/importing/DependenciesImportingTest.java
@@ -1202,4 +1202 @@
-    Library lib = ProjectLibraryTable.getInstance(myProject).createLibrary("My Library");
-    ModifiableRootModel model = ModuleRootManager.getInstance(getModule("project")).getModifiableModel();
-    model.addLibraryEntry(lib);
-    model.commit();
+    createAndAddProjectLibrary("project", "My Library");
@@ -1362 +1358,0 @@
-    myProjectsManager.listenForExternalChanges(); // to recognize repository change
@@ -1363,0 +1360 @@
+    myProjectsManager.getEmbeddersManagerInTests().reset(); // to recognize repository change
@@ -1633,0 +1631,36 @@
+  public void testDoNoRemoveUserProjectLibraries() throws Exception {
+    importProject("<groupId>test</groupId>" +
+                  "<artifactId>project</artifactId>" +
+                  "<version>1</version>");
+
+    createAndAddProjectLibrary("project", "lib");
+
+    assertProjectLibraries("lib");
+    addLibraryRoot("lib", OrderRootType.CLASSES, "file://" + getRepositoryPath() + "/foo/bar.jar!/");
+    assertModuleLibDeps("project", "lib");
+
+    importProject("<groupId>test</groupId>" +
+                  "<artifactId>project</artifactId>" +
+                  "<version>1</version>");
+
+    assertProjectLibraries("lib");
+    assertModuleLibDeps("project", "lib");
+  }
+
+  public void testDoNoRemoveUnusedUserProjectLibraries() throws Exception {
+    importProject("<groupId>test</groupId>" +
+                  "<artifactId>project</artifactId>" +
+                  "<version>1</version>");
+
+    createProjectLibrary("lib");
+    addLibraryRoot("lib", OrderRootType.CLASSES, "file://" + getRepositoryPath() + "/foo/bar.jar!/");
+
+    assertProjectLibraries("lib");
+
+    importProject("<groupId>test</groupId>" +
+                  "<artifactId>project</artifactId>" +
+                  "<version>1</version>");
+
+    assertProjectLibraries("lib");
+  }
+
@@ -1718,0 +1752,11 @@
+  private Library createProjectLibrary(String libraryName) {
+    return ProjectLibraryTable.getInstance(myProject).createLibrary(libraryName);
+  }
+
+  private void createAndAddProjectLibrary(String moduleName, String libraryName) {
+    Library lib = createProjectLibrary(libraryName);
+    ModifiableRootModel model = ModuleRootManager.getInstance(getModule(moduleName)).getModifiableModel();
+    model.addLibraryEntry(lib);
+    model.commit();
+  }
+

