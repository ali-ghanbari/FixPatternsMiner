diff --git a/jps/jps-builders/src/org/jetbrains/jps/incremental/ModuleRootsIndex.java b/jps/jps-builders/src/org/jetbrains/jps/incremental/ModuleRootsIndex.java
index 523e09a..d9ae521 100644
--- a/jps/jps-builders/src/org/jetbrains/jps/incremental/ModuleRootsIndex.java
+++ b/jps/jps-builders/src/org/jetbrains/jps/incremental/ModuleRootsIndex.java
@@ -48 +48 @@
-      for (String r : module.getExcludes()) {
+      for (String r : module.getOwnExcludes()) {
diff --git a/jps/jps-builders/testSrc/org/jetbrains/jps/incremental/artifacts/ArtifactBuilderTest.java b/jps/jps-builders/testSrc/org/jetbrains/jps/incremental/artifacts/ArtifactBuilderTest.java
index e9f8a68..306428f 100644
--- a/jps/jps-builders/testSrc/org/jetbrains/jps/incremental/artifacts/ArtifactBuilderTest.java
+++ b/jps/jps-builders/testSrc/org/jetbrains/jps/incremental/artifacts/ArtifactBuilderTest.java
@@ -175 +175 @@
-    module.getExcludes().add(excluded);
+    module.addExcludedRoot(excluded);
@@ -191 +191 @@
-    module.getExcludes().add(PathUtil.getParentPath(file));
+    module.addExcludedRoot(PathUtil.getParentPath(file));
diff --git a/jps/model/src/org/jetbrains/jps/Module.groovy b/jps/model/src/org/jetbrains/jps/Module.groovy
index 6f8347d..b3f06ed 100644
--- a/jps/model/src/org/jetbrains/jps/Module.groovy
+++ b/jps/model/src/org/jetbrains/jps/Module.groovy
@@ -19 +19,2 @@
-  List<String> excludes = []
+  private List<String> excludes
+  private List<String> ownExcludes = []
@@ -77 +78 @@
-        arg.each { excludes << FileUtil.toCanonicalPath(it) }
+        arg.each { addExcludedRoot(FileUtil.toCanonicalPath(it)) }
@@ -92,0 +94,20 @@
+  List<String> getOwnExcludes() {
+    return ownExcludes
+  }
+
+  List<String> getExcludes() {
+    if (excludes == null) {
+      excludes = new ArrayList<String>(ownExcludes)
+      Set<String> allContentRoots = project.modules.values().collect { it.contentRoots }.flatten() as Set
+      Set<File> myRoots = contentRoots.collect { new File(it) } as Set
+      Collection<String> newExcludes = (allContentRoots - contentRoots).findAll { PathUtil.isUnder(myRoots, new File(it)) }.collect { FileUtil.toCanonicalPath(it) }
+      excludes.addAll(newExcludes)
+    }
+    return excludes
+  }
+
+  void addExcludedRoot(String path) {
+    ownExcludes.add(path)
+    excludes = null
+  }
+
diff --git a/jps/model/src/org/jetbrains/jps/ModuleChunk.groovy b/jps/model/src/org/jetbrains/jps/ModuleChunk.groovy
index 663a235..093d4c3 100644
--- a/jps/model/src/org/jetbrains/jps/ModuleChunk.groovy
+++ b/jps/model/src/org/jetbrains/jps/ModuleChunk.groovy
@@ -57 +57 @@
-    map {it.excludes}
+    map {it.getExcludes()}

