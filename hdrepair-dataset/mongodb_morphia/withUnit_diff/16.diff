diff --git a/morphia/src/main/java/com/google/code/morphia/mapping/EmbeddedMapper.java b/morphia/src/main/java/com/google/code/morphia/mapping/EmbeddedMapper.java
index 002fcad..03d427d 100644
--- a/morphia/src/main/java/com/google/code/morphia/mapping/EmbeddedMapper.java
+++ b/morphia/src/main/java/com/google/code/morphia/mapping/EmbeddedMapper.java
@@ -111 +111 @@
-					refObj = mapper.fromDb(dbVal, refObj, null);
+					refObj = mapper.fromDb(dbVal, refObj, retrieved);
diff --git a/morphia/src/test/java/com/google/code/morphia/mapping/ReferencesInEmbeddedTest.java b/morphia/src/test/java/com/google/code/morphia/mapping/ReferencesInEmbeddedTest.java
new file mode 100644
index 0000000..b939bce
--- /dev/null
+++ b/morphia/src/test/java/com/google/code/morphia/mapping/ReferencesInEmbeddedTest.java
@@ -0,0 +1,75 @@
+package com.google.code.morphia.mapping;
+
+import junit.framework.Assert;
+
+import org.junit.Test;
+
+import com.google.code.morphia.TestBase;
+import com.google.code.morphia.annotations.Embedded;
+import com.google.code.morphia.annotations.Entity;
+import com.google.code.morphia.annotations.Reference;
+import com.google.code.morphia.testutil.TestEntity;
+
+/**
+ * @author josephpachod
+ */
+public class ReferencesInEmbeddedTest extends TestBase
+{
+    @Entity
+    static class Container extends TestEntity
+    {
+        String name ;
+        @Embedded
+        private EmbedContainingReference embed;
+    }
+    
+    static class EmbedContainingReference {
+        String name ;
+        @Reference
+        private ReferencedEntity ref;
+        
+        @Reference(lazy=true)
+        private ReferencedEntity lazyRef;
+    }
+    
+    @Entity
+    static class ReferencedEntity extends TestEntity{
+        String foo;
+    }
+    @Test
+    public void testMapping() throws Exception {
+        morphia.map(Container.class);
+        morphia.map(ReferencedEntity.class);
+    }
+    
+    @Test
+    public void testNonLazyReferencesInEmbebbed() throws Exception {
+        Container container = new Container();
+        container.name= "nonLazy";
+        ds.save(container);
+        ReferencedEntity referencedEntity = new ReferencedEntity();
+        ds.save(referencedEntity);
+        
+        container.embed = new EmbedContainingReference();
+        container.embed.ref = referencedEntity;
+        ds.save(container);
+        
+        Container reloadedContainer = ds.get(container);
+        Assert.assertNotNull(reloadedContainer);
+    }
+    @Test
+    public void testLazyReferencesInEmbebbed() throws Exception {
+        Container container = new Container();
+        container.name="lazy";
+        ds.save(container);
+        ReferencedEntity referencedEntity = new ReferencedEntity();
+        ds.save(referencedEntity);
+        
+        container.embed = new EmbedContainingReference();
+        container.embed.lazyRef = referencedEntity;
+        ds.save(container);
+        
+        Container reloadedContainer = ds.get(container);
+        Assert.assertNotNull(reloadedContainer);
+    }
+}

