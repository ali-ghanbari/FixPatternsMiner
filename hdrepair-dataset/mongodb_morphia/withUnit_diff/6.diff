diff --git a/morphia/src/main/java/org/mongodb/morphia/mapping/Mapper.java b/morphia/src/main/java/org/mongodb/morphia/mapping/Mapper.java
index 0d69111..70cb50c 100644
--- a/morphia/src/main/java/org/mongodb/morphia/mapping/Mapper.java
+++ b/morphia/src/main/java/org/mongodb/morphia/mapping/Mapper.java
@@ -835 +835 @@
-        } else if (value.getClass().isAssignableFrom(Key.class) && type.equals(((Key) value).getKindClass())) {
+        } else if (Key.class.isInstance(value) && type.equals(((Key) value).getKindClass())) {
diff --git a/morphia/src/test/java/org/mongodb/morphia/issue615/QueryForSubtypeTest.java b/morphia/src/test/java/org/mongodb/morphia/issue615/QueryForSubtypeTest.java
index ef7c9c7..892107a 100644
--- a/morphia/src/test/java/org/mongodb/morphia/issue615/QueryForSubtypeTest.java
+++ b/morphia/src/test/java/org/mongodb/morphia/issue615/QueryForSubtypeTest.java
@@ -7,0 +8 @@
+import org.mongodb.morphia.Key;
@@ -79,0 +81,13 @@
+
+    @Test
+    public void testSubclassOfKey() {
+        MappedField mf = jobMappedClass.getMappedField("owner");
+
+        boolean compatible = Mapper.isCompatibleForOperator(
+                mf,
+                mf.getType(),
+                FilterOperator.EQUAL,
+                new Key<User>(User.class, 212L) {}); // anonymous subclass of Key
+
+        assertTrue("Subclass of Key<User> should be compatible for field of type User", compatible);
+    }

