diff --git a/morphia/src/main/java/org/mongodb/morphia/mapping/Mapper.java b/morphia/src/main/java/org/mongodb/morphia/mapping/Mapper.java
index 819c332..956c7a5 100644
--- a/morphia/src/main/java/org/mongodb/morphia/mapping/Mapper.java
+++ b/morphia/src/main/java/org/mongodb/morphia/mapping/Mapper.java
@@ -842 +842 @@
-        } else if (!value.getClass().isAssignableFrom(type) && !value.getClass().getSimpleName().equalsIgnoreCase(type.getSimpleName())) {
+        } else if (!type.isInstance(value) && !value.getClass().getSimpleName().equalsIgnoreCase(type.getSimpleName())) {
diff --git a/morphia/src/test/java/org/mongodb/morphia/issue615/QueryForSubtypeTest.java b/morphia/src/test/java/org/mongodb/morphia/issue615/QueryForSubtypeTest.java
new file mode 100644
index 0000000..2acad9c
--- /dev/null
+++ b/morphia/src/test/java/org/mongodb/morphia/issue615/QueryForSubtypeTest.java
@@ -0,0 +1,67 @@
+package org.mongodb.morphia.issue615;
+
+import java.util.ArrayList;
+
+import org.bson.types.ObjectId;
+import org.junit.Before;
+import org.junit.Test;
+import org.mongodb.morphia.TestBase;
+import org.mongodb.morphia.annotations.Entity;
+import org.mongodb.morphia.annotations.Id;
+import org.mongodb.morphia.annotations.Reference;
+import org.mongodb.morphia.mapping.MappedClass;
+import org.mongodb.morphia.mapping.MappedField;
+import org.mongodb.morphia.mapping.Mapper;
+import org.mongodb.morphia.query.FilterOperator;
+
+import static org.junit.Assert.assertTrue;
+
+/**
+ * @author jbyler
+ */
+public class QueryForSubtypeTest extends TestBase {
+
+    private MappedClass jobMappedClass;
+
+    interface User { }
+
+    @Entity
+    static class LocalUser implements User {
+        @Id
+        @SuppressWarnings("unused")
+        private ObjectId id;
+    }
+
+    @Entity
+    static class Job {
+        @Id
+        @SuppressWarnings("unused")
+        private ObjectId id;
+
+        @Reference
+        @SuppressWarnings("unused")
+        private User owner;
+
+        @SuppressWarnings("unused")
+        private ArrayList<String> attributes;
+    }
+
+    @Before
+    public void commonSetup() throws Exception {
+        Mapper mapper = new Mapper();
+        jobMappedClass = mapper.getMappedClass(Job.class);
+    }
+
+    @Test
+    public void testClassIsCompatibleWithInterface() {
+        MappedField mf = jobMappedClass.getMappedField("owner");
+
+        boolean compatible = Mapper.isCompatibleForOperator(
+                mf,
+                mf.getType(),
+                FilterOperator.EQUAL,
+                new LocalUser());
+
+        assertTrue("LocalUser should be compatible for field of type User", compatible);
+    }
+}

