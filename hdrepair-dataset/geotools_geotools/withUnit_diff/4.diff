diff --git a/modules/unsupported/csv/src/main/java/org/geotools/data/csv/CSVFeatureSource.java b/modules/unsupported/csv/src/main/java/org/geotools/data/csv/CSVFeatureSource.java
index e98eff2..4eaaeb4 100644
--- a/modules/unsupported/csv/src/main/java/org/geotools/data/csv/CSVFeatureSource.java
+++ b/modules/unsupported/csv/src/main/java/org/geotools/data/csv/CSVFeatureSource.java
@@ -69 +69 @@
-        FeatureReader<SimpleFeatureType, SimpleFeature> featureReader = getReader(query);
+        FeatureReader<SimpleFeatureType, SimpleFeature> featureReader = getReaderInternal(query);
diff --git a/modules/unsupported/csv/src/test/java/org/geotools/data/csv/CSVDataStoreTest.java b/modules/unsupported/csv/src/test/java/org/geotools/data/csv/CSVDataStoreTest.java
index fcc942a..34443a6 100644
--- a/modules/unsupported/csv/src/test/java/org/geotools/data/csv/CSVDataStoreTest.java
+++ b/modules/unsupported/csv/src/test/java/org/geotools/data/csv/CSVDataStoreTest.java
@@ -9,0 +10 @@
+import static org.junit.Assert.assertTrue;
@@ -11,0 +13 @@
+import java.io.FileNotFoundException;
@@ -19,0 +22 @@
+import org.geotools.data.Query;
@@ -20,0 +24,3 @@
+import org.geotools.data.simple.SimpleFeatureCollection;
+import org.geotools.data.simple.SimpleFeatureIterator;
+import org.geotools.data.simple.SimpleFeatureSource;
@@ -95,0 +102,78 @@
+    
+    /**
+     * Test query with a start index
+     * @throws IOException
+     * @throws FileNotFoundException
+     */
+     @Test
+     public void testOffset() throws FileNotFoundException, IOException {
+         Query query = new Query(Query.ALL);
+         query.setStartIndex(3);
+         SimpleFeatureSource rows = csvDataStore.getFeatureSource();
+         SimpleFeatureCollection matches = rows.getFeatures(query);
+         List<String> offsetCities = Arrays.asList("Ottawa", "Minneapolis", "Lausanne", "Victoria", "Cape Town", "Sydney");
+         int count = 0;
+         SimpleFeatureIterator iter = matches.features();
+         while(iter.hasNext()) {
+             SimpleFeature f = iter.next();
+             assertTrue(offsetCities.contains(f.getAttribute("CITY")));
+             count++;
+         }
+         iter.close();
+         assertEquals(6, count);
+         assertEquals(6, matches.size());
+         assertEquals(6, rows.getCount(query));
+    
+    
+     }
+    
+     /**
+     * Test query with maxFeatures
+     * @throws IOException
+     * @throws FileNotFoundException
+     */
+     @Test
+     public void testLimit() throws FileNotFoundException, IOException {
+         Query query = new Query(Query.ALL);
+         query.setMaxFeatures(3);
+         SimpleFeatureSource rows = csvDataStore.getFeatureSource();
+         SimpleFeatureCollection matches = rows.getFeatures(query);
+         List<String> limitCities = Arrays.asList("Trento", "St Paul", "Bangkok");
+         int count = 0;
+         SimpleFeatureIterator iter = matches.features();
+         while(iter.hasNext()) {
+             SimpleFeature f = iter.next();
+             assertTrue(limitCities.contains(f.getAttribute("CITY")));
+             count++;
+         }
+         iter.close();
+         assertEquals(3, count);
+         assertEquals(3, matches.size());
+         assertEquals(3, rows.getCount(query));
+     }
+    
+     /**
+     * Test query with maxFeatures and startIndex
+     * @throws IOException
+     * @throws FileNotFoundException
+     */
+     @Test
+     public void testLimitOffset() throws FileNotFoundException, IOException {
+         Query query = new Query(Query.ALL);
+         query.setMaxFeatures(3);
+         query.setStartIndex(3);
+         SimpleFeatureSource rows = csvDataStore.getFeatureSource();
+         SimpleFeatureCollection matches = rows.getFeatures(query);
+         List<String> limitCities = Arrays.asList("Ottawa", "Minneapolis", "Lausanne");
+         int count = 0;
+         SimpleFeatureIterator iter = matches.features();
+         while(iter.hasNext()) {
+             SimpleFeature f = iter.next();
+             assertTrue(limitCities.contains(f.getAttribute("CITY")));
+             count++;
+         }
+         iter.close();
+         assertEquals(3, count);
+         assertEquals(3, matches.size());
+         assertEquals(3, rows.getCount(query));
+     }

