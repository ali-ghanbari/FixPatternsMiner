diff --git a/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java b/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java
index effb0a6..cad6c98 100644
--- a/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java
+++ b/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java
@@ -213,0 +214,4 @@
+            // FIXME dummyLookupContext isn't good enough - we need *all* the interfaces of the entity/location.
+            // So we need to peek inside the list of entities.
+            // Need to add methods such as Map<String, String> persister.loadEntityTypes()
+            
diff --git a/core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java b/core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java
index 20bd841..ed2b626 100644
--- a/core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java
+++ b/core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java
@@ -27,0 +28 @@
+import brooklyn.entity.Group;
@@ -28,0 +30 @@
+import brooklyn.entity.basic.AbstractGroupImpl;
@@ -36,0 +39 @@
+import brooklyn.entity.trait.Resizable;
@@ -254,0 +258,19 @@
+    // Where the same object is referenced from two different fields, using types that do not share a 
+    // super type... then the object will just be deserialized once - at that point it must have *both*
+    // interfaces.
+    @Test(groups="WIP")
+    public void testHandlesReferencingOtherEntityInPojoFieldsOfOtherTypes() throws Exception {
+        MyEntityWithMultipleInterfaces origE = origApp.createAndManageChild(EntitySpec.create(MyEntityWithMultipleInterfaces.class));
+        ReffingEntity reffer = new ReffingEntity();
+        reffer.group = origE;
+        reffer.resizable = origE;
+        origApp.setConfig(TestEntity.CONF_OBJECT, reffer);
+
+        newApp = rebind(false);
+        MyEntityWithMultipleInterfaces newE = (MyEntityWithMultipleInterfaces) Iterables.find(newApp.getChildren(), Predicates.instanceOf(MyEntityWithMultipleInterfaces.class));
+        ReffingEntity newReffer = (ReffingEntity)newApp.getConfig(TestEntity.CONF_OBJECT);
+        
+        assertEquals(newReffer.group, newE);
+        assertEquals(newReffer.resizable, newE);
+    }
+    
@@ -255,0 +278,2 @@
+        public Group group;
+        public Resizable resizable;
@@ -261 +285,3 @@
-            return (o instanceof ReffingEntity) && Objects.equal(entity, ((ReffingEntity)o).entity) && Objects.equal(obj, ((ReffingEntity)o).obj);
+            return (o instanceof ReffingEntity) && Objects.equal(entity, ((ReffingEntity)o).entity) 
+                    && Objects.equal(obj, ((ReffingEntity)o).obj) && Objects.equal(group, ((ReffingEntity)o).group)
+                    && Objects.equal(resizable, ((ReffingEntity)o).resizable);
@@ -603,0 +630,22 @@
+    @ImplementedBy(MyEntityWithMultipleInterfacesImpl.class)
+    public interface MyEntityWithMultipleInterfaces extends Group, Resizable, EntityLocal {
+        @SetFromFlag("myconfig")
+        public static final ConfigKey<String> MY_CONFIG = new BasicConfigKey<String>(
+                        String.class, "test.myentity.myconfig", "My test config");
+
+        public static final AttributeSensor<String> MY_SENSOR = new BasicAttributeSensor<String>(
+                String.class, "test.myentity.mysensor", "My test sensor");
+    }
+    
+    public static class MyEntityWithMultipleInterfacesImpl extends AbstractGroupImpl implements MyEntityWithMultipleInterfaces {
+        private final Object dummy = new Object(); // so not serializable
+
+        public MyEntityWithMultipleInterfacesImpl() {
+        }
+
+        @Override
+        public Integer resize(Integer desiredSize) {
+            return 0;
+        }
+    }
+    

