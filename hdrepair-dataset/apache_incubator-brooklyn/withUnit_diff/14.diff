diff --git a/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java b/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java
index 0417778..b28b6cf 100644
--- a/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java
+++ b/core/src/main/java/brooklyn/entity/rebind/RebindManagerImpl.java
@@ -203,0 +204,5 @@
+            //
+            // TODO if underlying data-store is changed between first and second phase (e.g. to add an
+            // entity), then second phase might try to reconstitute an entity that has not been put in
+            // the rebindContext. This should not affect normal production usage, because rebind is run
+            // against a data-store that is not being written to by other brooklyn instance(s).
diff --git a/software/webapp/src/test/java/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java b/software/webapp/src/test/java/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java
index e13d9c4..f9ff189 100644
--- a/software/webapp/src/test/java/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java
+++ b/software/webapp/src/test/java/brooklyn/entity/webapp/AbstractWebAppFixtureIntegrationTest.java
@@ -27,0 +28 @@
+import brooklyn.entity.Entity;
@@ -45,0 +47 @@
+import brooklyn.test.EntityTestUtils;
@@ -178,4 +180 @@
-        Asserts.succeedsEventually(MutableMap.of("timeout", 120*1000), new Runnable() {
-            public void run() {
-                assertTrue(entity.getAttribute(Startable.SERVICE_UP));
-            }});
+        EntityTestUtils.assertAttributeEqualsEventually(MutableMap.of("timeout", 120*1000), entity, Startable.SERVICE_UP, true);
@@ -183,0 +183,12 @@
+        killEntityBehindBack(entity);
+        log.info("Killed {} behind mgmt's back, waiting for service up false in mgmt context", entity);
+        
+        EntityTestUtils.assertAttributeEqualsEventually(entity, Startable.SERVICE_UP, false);
+        
+        log.info("success getting service up false in primary mgmt universe");
+    }
+    
+    /**
+     * Stop the given underlying entity, but without our entity instance being told!
+     */
+    protected void killEntityBehindBack(Entity tokill) throws Exception {
@@ -188 +199 @@
-            ManagementContext managementContext = ((EntityInternal)entity).getManagementContext();
+            ManagementContext managementContext = ((EntityInternal)tokill).getManagementContext();
@@ -193 +204,2 @@
-            
+            oldPersister.waitForWritesCompleted(30*1000, TimeUnit.MILLISECONDS);
+
@@ -199 +211 @@
-            SoftwareProcess entity2 = (SoftwareProcess) newManagementContext.getEntityManager().getEntity(entity.getId());
+            SoftwareProcess entity2 = (SoftwareProcess) newManagementContext.getEntityManager().getEntity(tokill.getId());
@@ -205,8 +217 @@
-        log.info("called to stop tomcat in parallel mgmt universe, waiting for service up false in primary mgmt universe");
-        
-        Asserts.succeedsEventually(new Runnable() {
-            public void run() {
-                assertFalse(entity.getAttribute(Startable.SERVICE_UP));
-            }});
-        
-        log.info("success getting service up false in primary mgmt universe");
+        log.info("called to stop {} in parallel mgmt universe", entity);

