diff --git a/core/src/main/java/brooklyn/util/task/Tasks.java b/core/src/main/java/brooklyn/util/task/Tasks.java
index aae71ca..bf8a65b 100644
--- a/core/src/main/java/brooklyn/util/task/Tasks.java
+++ b/core/src/main/java/brooklyn/util/task/Tasks.java
@@ -105,2 +105,3 @@
-            } else if (v instanceof Closure) {
-                v = ((Closure) v).call();
+// FIXME Confirm we really want to remove this
+//            } else if (v instanceof Closure) {
+//                v = ((Closure) v).call();
diff --git a/core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java b/core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java
index 88bec7d..4ecd20e 100644
--- a/core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java
+++ b/core/src/test/java/brooklyn/entity/rebind/RebindEntityTest.java
@@ -52,2 +52,2 @@
-        MyEntity origE = new MyEntity(MutableMap.of("myfield", "myval"), origApp);
-        MyEntity origE2 = new MyEntity(MutableMap.of("myfield", "myval2"), origE);
+        MyEntity origE = new MyEntity(origApp);
+        MyEntity origE2 = new MyEntity(origE);
@@ -98,2 +98,2 @@
-        MyEntity origE = new MyEntity(MutableMap.of("myfield", "myval"), origApp);
-        MyEntity origE2 = new MyEntity(MutableMap.of("myfield", "myval2"), origApp);
+        MyEntity origE = new MyEntity(origApp);
+        MyEntity origE2 = new MyEntity(origApp);
@@ -201,0 +202,16 @@
+    // FIXME Fails because newE has the config explicitly set to null, rather than no entry for the config key
+    @Test(groups="WIP")
+    public void testRebindPreservesGetConfigWithDefault() throws Exception {
+        MyEntity origE = new MyEntity(origApp);
+        origApp.getManagementContext().manage(origApp);
+
+        assertNull(origE.getConfig(MyEntity.MY_CONFIG));
+        assertEquals(origE.getConfig(MyEntity.MY_CONFIG, "mydefault"), "mydefault");
+        
+        MyApplication newApp = (MyApplication) serializeRebindAndManage(origApp, getClass().getClassLoader());
+        MyEntity newE = (MyEntity) Iterables.find(newApp.getOwnedChildren(), Predicates.instanceOf(MyEntity.class));
+        
+        assertNull(newE.getConfig(MyEntity.MY_CONFIG));
+        assertEquals(newE.getConfig(MyEntity.MY_CONFIG, "mydefault"), "mydefault");
+    }
+
diff --git a/software/webapp/src/main/java/brooklyn/entity/webapp/ControlledDynamicWebAppCluster.groovy b/software/webapp/src/main/java/brooklyn/entity/webapp/ControlledDynamicWebAppCluster.groovy
index be3a6b0..7782bde 100644
--- a/software/webapp/src/main/java/brooklyn/entity/webapp/ControlledDynamicWebAppCluster.groovy
+++ b/software/webapp/src/main/java/brooklyn/entity/webapp/ControlledDynamicWebAppCluster.groovy
@@ -93 +93,3 @@
-            initialSize: { getConfig(INITIAL_SIZE) });
+            // FIXME Establish if definitely want to change how we treat closures like this
+            //initialSize: { getConfig(INITIAL_SIZE) } );
+            initialSize: getConfig(INITIAL_SIZE));
@@ -98,2 +99,0 @@
-        
-        addOwnedChild(controller);
@@ -100,0 +101 @@
+        
@@ -102 +103,11 @@
-        Entities.invokeEffectorList(this, [cluster, controller], Startable.START, [locations:locations]).get();
+
+        // Set controller as child of cluster, if it is not already owned
+        List<Entity> childrenToStart;        
+        if (controller.getOwner() == null) {
+            addOwnedChild(controller);
+            childrenToStart = [cluster, controller];
+        } else {
+            childrenToStart = [cluster];
+        }
+                
+        Entities.invokeEffectorList(this, childrenToStart, Startable.START, [locations:locations]).get();
@@ -108 +119,3 @@
-        controller.stop()
+        if (this.equals(controller.getOwner())) {
+            controller.stop()
+        }
diff --git a/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.groovy b/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.groovy
index b0974f4..148f18d 100644
--- a/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.groovy
+++ b/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.groovy
@@ -3,4 +2,0 @@
-import groovy.lang.MetaClass
-
-import java.util.Map
-
@@ -54,2 +50,5 @@
-        
-        // Enricher attribute setup.  A way of automatically discovering these (but avoiding 
+    }
+    
+    @Override
+    public void onManagementBecomingMaster() {
+        // Enricher attribute setup.  A way of automatically discovering these (but avoiding
diff --git a/software/webapp/src/test/java/brooklyn/entity/webapp/jboss/ControlledDynamicWebAppClusterRebindIntegrationTest.java b/software/webapp/src/test/java/brooklyn/entity/webapp/jboss/ControlledDynamicWebAppClusterRebindIntegrationTest.java
index f815ac0..26e8080 100644
--- a/software/webapp/src/test/java/brooklyn/entity/webapp/jboss/ControlledDynamicWebAppClusterRebindIntegrationTest.java
+++ b/software/webapp/src/test/java/brooklyn/entity/webapp/jboss/ControlledDynamicWebAppClusterRebindIntegrationTest.java
@@ -6,0 +7 @@
+import static com.google.common.base.Preconditions.checkNotNull;
@@ -21,2 +22 @@
-import brooklyn.entity.Application;
-import brooklyn.entity.basic.AbstractApplication;
+import brooklyn.entity.Entity;
@@ -27,2 +26,0 @@
-import brooklyn.management.internal.LocalManagementContext;
-import brooklyn.mementos.BrooklynMemento;
@@ -53 +51 @@
-        warUrl = getClass().getClassLoader().getResource(warPath);
+        warUrl = checkNotNull(getClass().getClassLoader().getResource(warPath), "warUrl");
@@ -79 +77,2 @@
-    @Test(groups = "Integration")
+    // FIXME Fails due to RebindEntityTest.testRebindPreservesGetConfigWithDefault problem
+    @Test(groups = {"Integration", "WIP"})
@@ -86 +85 @@
-    					.put("initialSize", "2")
+    					.put("initialSize", "1")
@@ -91,0 +91 @@
+        String rootUrl = origNginx.getAttribute(JBoss7Server.ROOT_URL);
@@ -93,2 +93,2 @@
-        assertHttpStatusCodeEventuallyEquals(origNginx.getAttribute(JBoss7Server.ROOT_URL), 200);
-        WebAppMonitor monitor = newWebAppMonitor(origNginx.getAttribute(JBoss7Server.ROOT_URL));
+        assertHttpStatusCodeEventuallyEquals(rootUrl, 200);
+        WebAppMonitor monitor = newWebAppMonitor(rootUrl);
@@ -102 +102 @@
-        assertHttpStatusCodeEventuallyEquals(newNginx.getAttribute(JBoss7Server.ROOT_URL), 200);
+        assertHttpStatusCodeEquals(rootUrl, 200);
@@ -104,3 +104,6 @@
-        // Resize the cluster; nginx routing rule will update
-        assertEquals(newCluster.getCurrentSize(), (Integer)2);
-        newCluster.resize(1);
+        // Confirm the cluster is usable: we can scale-up
+        assertEquals(newCluster.getCurrentSize(), (Integer)1);
+        newCluster.resize(2);
+        
+        Iterable<Entity> newJbosses = Iterables.filter(newCluster.getOwnedChildren(), Predicates.instanceOf(JBoss7Server.class));
+        assertEquals(Iterables.size(newJbosses), 2);
@@ -109 +112,3 @@
-        assertHttpStatusCodeEquals(newNginx.getAttribute(JBoss7Server.ROOT_URL), 200);
+        for (int i = 0; i < 10; i++) {
+            assertHttpStatusCodeEquals(rootUrl, 200);
+        }
@@ -110,0 +116 @@
+        // Ensure while doing all of this the original jboss server remained reachable
@@ -111,0 +118,5 @@
+        
+        // Ensure cluster is usable: we can scale back to stop the original jboss server
+        newCluster.resize(0);
+        
+        assertHttpStatusCodeEventuallyEquals(rootUrl, 404);
diff --git a/software/webapp/src/test/java/brooklyn/entity/webapp/jboss/DynamicWebAppClusterRebindIntegrationTest.java b/software/webapp/src/test/java/brooklyn/entity/webapp/jboss/DynamicWebAppClusterRebindIntegrationTest.java
new file mode 100644
index 0000000..2575606
--- /dev/null
+++ b/software/webapp/src/test/java/brooklyn/entity/webapp/jboss/DynamicWebAppClusterRebindIntegrationTest.java
@@ -0,0 +1,114 @@
+package brooklyn.entity.webapp.jboss;
+
+import static brooklyn.entity.rebind.RebindTestUtils.serializeRebindAndManage;
+import static brooklyn.test.HttpTestUtils.assertHttpStatusCodeEquals;
+import static brooklyn.test.HttpTestUtils.assertHttpStatusCodeEventuallyEquals;
+import static brooklyn.test.HttpTestUtils.assertUrlUnreachableEventually;
+import static org.testng.Assert.assertEquals;
+
+import java.net.URL;
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.testng.annotations.AfterMethod;
+import org.testng.annotations.BeforeMethod;
+import org.testng.annotations.Test;
+
+import brooklyn.entity.Entity;
+import brooklyn.entity.webapp.DynamicWebAppCluster;
+import brooklyn.location.basic.LocalhostMachineProvisioningLocation;
+import brooklyn.test.WebAppMonitor;
+import brooklyn.test.entity.TestApplication;
+import brooklyn.util.MutableMap;
+import brooklyn.util.internal.TimeExtras;
+
+import com.google.common.base.Predicates;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Iterables;
+
+public class DynamicWebAppClusterRebindIntegrationTest {
+    private static final Logger LOG = LoggerFactory.getLogger(DynamicWebAppClusterRebindIntegrationTest.class);
+    
+    static { TimeExtras.init(); }
+
+    private URL warUrl;
+    private LocalhostMachineProvisioningLocation localhostProvisioningLocation;
+    private TestApplication origApp;
+    private TestApplication newApp;
+    private List<WebAppMonitor> webAppMonitors = new CopyOnWriteArrayList<WebAppMonitor>();
+	private ExecutorService executor;
+    
+    @BeforeMethod(groups = "Integration")
+    public void setUp() {
+    	String warPath = "hello-world.war";
+        warUrl = getClass().getClassLoader().getResource(warPath);
+
+    	localhostProvisioningLocation = new LocalhostMachineProvisioningLocation();
+        origApp = new TestApplication();
+        executor = Executors.newCachedThreadPool();
+    }
+
+    @AfterMethod(groups = "Integration", alwaysRun=true)
+    public void tearDown() throws Exception {
+        for (WebAppMonitor monitor : webAppMonitors) {
+        	monitor.terminate();
+        }
+        if (executor != null) executor.shutdownNow();
+        if (newApp != null) newApp.stop();
+        if (origApp != null) origApp.stop();
+    }
+
+    private WebAppMonitor newWebAppMonitor(String url) {
+    	WebAppMonitor monitor = new WebAppMonitor(url)
+//    			.delayMillis(0)
+		    	.logFailures(LOG);
+    	webAppMonitors.add(monitor);
+    	executor.execute(monitor);
+    	return monitor;
+    }
+    
+    @Test(groups = "Integration")
+    public void testRebindsToRunningCluster() throws Exception {
+        DynamicWebAppCluster origCluster = new DynamicWebAppCluster(
+    			MutableMap.builder()
+    					.put("factory", new JBoss7ServerFactory(MutableMap.of("war", warUrl.toString())))
+    					.put("initialSize", 1)
+    					.build(),
+    			origApp);
+    	
+        origApp.start(ImmutableList.of(localhostProvisioningLocation));
+        JBoss7Server origJboss = (JBoss7Server) Iterables.find(origCluster.getOwnedChildren(), Predicates.instanceOf(JBoss7Server.class));
+        String jbossUrl = origJboss.getAttribute(JBoss7Server.ROOT_URL);
+        
+        assertHttpStatusCodeEventuallyEquals(jbossUrl, 200);
+        WebAppMonitor monitor = newWebAppMonitor(jbossUrl);
+        
+        // Rebind
+        newApp = (TestApplication) serializeRebindAndManage(origApp, getClass().getClassLoader());
+        DynamicWebAppCluster newCluster = (DynamicWebAppCluster) Iterables.find(newApp.getOwnedChildren(), Predicates.instanceOf(DynamicWebAppCluster.class));
+
+        assertHttpStatusCodeEquals(jbossUrl, 200);
+
+        // Confirm the cluster is usable: we can scale-up
+        assertEquals(newCluster.getCurrentSize(), (Integer)1);
+        newCluster.resize(2);
+
+        Iterable<Entity> newJbosses = Iterables.filter(newCluster.getOwnedChildren(), Predicates.instanceOf(JBoss7Server.class));
+        assertEquals(Iterables.size(newJbosses), 2);
+        for (Entity j : newJbosses) {
+            assertHttpStatusCodeEventuallyEquals(j.getAttribute(JBoss7Server.ROOT_URL), 200);
+        }
+
+        // Ensure while doing all of this the original jboss server remained reachable
+        assertEquals(monitor.getFailures(), 0);
+        
+        // Ensure cluster is usable: we can scale back to stop the original jboss server
+        newCluster.resize(0);
+        
+        assertUrlUnreachableEventually(jbossUrl);
+    }
+}

