diff --git a/software/base/src/main/java/brooklyn/entity/basic/lifecycle/CommonCommands.java b/software/base/src/main/java/brooklyn/entity/basic/lifecycle/CommonCommands.java
index a750598..70989d2 100644
--- a/software/base/src/main/java/brooklyn/entity/basic/lifecycle/CommonCommands.java
+++ b/software/base/src/main/java/brooklyn/entity/basic/lifecycle/CommonCommands.java
@@ -150 +150 @@
-                sudo(formatIfNotNull("apt-get install -y %s", getFlag(flags, "apt", packageDefaultName)))));
+                sudo(formatIfNotNull("apt-get install -y --allow-unauthenticated %s", getFlag(flags, "apt", packageDefaultName)))));
diff --git a/software/database/src/main/java/brooklyn/entity/database/mysql/MySqlSshDriver.groovy b/software/database/src/main/java/brooklyn/entity/database/mysql/MySqlSshDriver.groovy
index 7d35ab5..b543249 100644
--- a/software/database/src/main/java/brooklyn/entity/database/mysql/MySqlSshDriver.groovy
+++ b/software/database/src/main/java/brooklyn/entity/database/mysql/MySqlSshDriver.groovy
@@ -76 +76,2 @@
-        commands.add(installPackage(yum: "libgcc_s.so.1 libaio.so.1 libncurses.so.5", apt: "libaio1", null));
+        commands.add("uname -a")
+        commands.add(installPackage(yum: "libgcc_s.so.1 libaio.so.1 libncurses.so.5", apt: "libaio1 libaio-dev", null));
diff --git a/software/database/src/test/java/brooklyn/entity/database/mysql/MySqlLiveEc2Test.groovy b/software/database/src/test/java/brooklyn/entity/database/mysql/MySqlLiveEc2Test.groovy
new file mode 100644
index 0000000..6bb08c8
--- /dev/null
+++ b/software/database/src/test/java/brooklyn/entity/database/mysql/MySqlLiveEc2Test.groovy
@@ -0,0 +1,82 @@
+package brooklyn.entity.database.mysql
+
+
+import brooklyn.config.BrooklynProperties;
+import brooklyn.entity.database.VogellaExampleAccess;
+import brooklyn.entity.proxying.BasicEntitySpec;
+import brooklyn.location.basic.LocationRegistry;
+import brooklyn.location.basic.SshMachineLocation;
+import brooklyn.location.basic.jclouds.JcloudsLocation;
+import org.testng.annotations.Test;
+
+import static java.util.Arrays.asList;
+
+public class MySqlLiveEc2Test extends MySqlIntegrationTest {
+
+    @Test(groups = ["Live"])
+    public void test_Debian_6() {
+        test(".*squeeze*.*64.*");
+    }
+
+//    @Test(groups = ["Live"])
+//    public void test_Ubuntu_10_0() {
+//        test("Ubuntu 10.0");
+//    }
+//
+//    @Test(groups = ["Live"])
+//    public void test_Ubuntu_11_0() {
+//        test("Ubuntu 11.0");
+//    }
+//
+//    @Test(groups = ["Live"])
+//    public void test_Ubuntu_12_0() {
+//        test("Ubuntu 12.0");
+//    }
+//
+//    @Test(groups = ["Live"])
+//    public void test_CentOS_6_0() {
+//        test("CentOS 6.0");
+//    }
+//
+//    @Test(groups = ["Live"])
+//    public void test_CentOS_5_6() {
+//        test("CentOS 5.6");
+//    }
+//
+//    @Test(groups = ["Live"])
+//    public void test_Fedora_17() {
+//        test("Fedora 17");
+//    }
+//
+//    @Test(groups = ["Live"])
+//    public void test_Red_Hat_Enterprise_Linux_6() {
+//        test("Red Hat Enterprise Linux 6");
+//    }
+
+    public void test(String osRegex) throws Exception {
+        MySqlNode mysql = tapp.createAndManageChild(BasicEntitySpec.newInstance(MySqlNode.class)
+                .configure("creationScriptContents", CREATION_SCRIPT));
+
+
+        BrooklynProperties brooklynProperties = BrooklynProperties.Factory.newDefault();
+        brooklynProperties.put("brooklyn.jclouds.aws-ec2.image-description-regex", osRegex);
+        brooklynProperties.remove("brooklyn.jclouds.aws-ec2.image-id");
+        brooklynProperties.put("loginUser","root");
+
+        brooklynProperties.put("inboundPorts", [22, 3306]);
+        LocationRegistry locationRegistry = new LocationRegistry(brooklynProperties);
+
+        JcloudsLocation jcloudsLocation = (JcloudsLocation) locationRegistry.resolve("aws-ec2:us-east-1");
+
+        tapp.start(asList(jcloudsLocation));
+
+        SshMachineLocation l = (SshMachineLocation) mysql.getLocations().iterator().next();
+        //hack to get the port for mysql open; is the inbounds property not respected on rackspace??
+        l.exec(asList("iptables -I INPUT -p tcp --dport 3306 -j ACCEPT"))
+
+        String host = mysql.getAttribute(MySqlNode.HOSTNAME);
+        int port = mysql.getAttribute(MySqlNode.MYSQL_PORT);
+        new VogellaExampleAccess().readDataBase("com.mysql.jdbc.Driver", "mysql", host, port);
+    }
+}
+
diff --git a/software/database/src/test/java/brooklyn/entity/database/mysql/MySqlLiveRackspaceTest.groovy b/software/database/src/test/java/brooklyn/entity/database/mysql/MySqlLiveRackspaceTest.groovy
new file mode 100644
index 0000000..398d593
--- /dev/null
+++ b/software/database/src/test/java/brooklyn/entity/database/mysql/MySqlLiveRackspaceTest.groovy
@@ -0,0 +1,88 @@
+package brooklyn.entity.database.mysql;
+
+
+import static java.util.Arrays.asList
+
+import org.testng.annotations.Test
+
+import brooklyn.config.BrooklynProperties
+import brooklyn.entity.database.VogellaExampleAccess
+import brooklyn.entity.proxying.BasicEntitySpec
+import brooklyn.location.basic.LocationRegistry
+import brooklyn.location.basic.SshMachineLocation
+import brooklyn.location.basic.jclouds.JcloudsLocation
+
+/**
+ * The MySqlLiveTest installs MySQL on various operating systems like Ubuntu, CentOS, Red Hat etc. To make sure that
+ * MySQL works like expected on these Operating Systems.
+ */
+public class MySqlLiveRackspaceTest extends MySqlIntegrationTest {
+    @Test(groups = ["Live"])
+    public void test_Debian_6() {
+        test("Debian 6");
+    }
+
+    @Test(groups = ["Live"])
+    public void test_Ubuntu_10_0() {
+        test("Ubuntu 10.0");
+    }
+
+    @Test(groups = ["Live"])
+    public void test_Ubuntu_11_0() {
+        test("Ubuntu 11.0");
+    }
+
+    @Test(groups = ["Live"])
+    public void test_Ubuntu_12_0() {
+        test("Ubuntu 12.0");
+    }
+
+    @Test(groups = ["Live"])
+    public void test_CentOS_6_0() {
+        test("CentOS 6.0");
+    }
+
+    @Test(groups = ["Live"])
+    public void test_CentOS_5_6() {
+        test("CentOS 5.6");
+    }
+
+    @Test(groups = ["Live"])
+    public void test_Fedora_17() {
+        test("Fedora 17");
+    }
+
+    @Test(groups = ["Live"])
+    public void test_Red_Hat_Enterprise_Linux_6() {
+        test("Red Hat Enterprise Linux 6");
+    }
+
+    @Test(groups = ["Live"])
+    public void test_localhost() throws Exception {
+        super.test_localhost();
+    }
+
+    public void test(String osRegex) throws Exception {
+        MySqlNode mysql = tapp.createAndManageChild(BasicEntitySpec.newInstance(MySqlNode.class)
+                .configure("creationScriptContents", CREATION_SCRIPT));
+
+        BrooklynProperties brooklynProperties = BrooklynProperties.Factory.newDefault();
+        brooklynProperties.put("brooklyn.jclouds.cloudservers-uk.image-name-regex", osRegex);
+        brooklynProperties.remove("brooklyn.jclouds.cloudservers-uk.image-id");
+        brooklynProperties.put("inboundPorts", [22, 3306]);
+        LocationRegistry locationRegistry = new LocationRegistry(brooklynProperties);
+
+        JcloudsLocation jcloudsLocation = (JcloudsLocation) locationRegistry.resolve("cloudservers-uk");
+
+        tapp.start(asList(jcloudsLocation));
+
+        SshMachineLocation l = (SshMachineLocation) mysql.getLocations().iterator().next();
+        //hack to get the port for mysql open; is the inbounds property not respected on rackspace??
+        l.exec(asList("iptables -I INPUT -p tcp --dport 3306 -j ACCEPT"))
+
+        String host = mysql.getAttribute(MySqlNode.HOSTNAME);
+        int port = mysql.getAttribute(MySqlNode.MYSQL_PORT);
+        new VogellaExampleAccess().readDataBase("com.mysql.jdbc.Driver", "mysql", host, port);
+       
+    } 
+}
diff --git a/software/database/src/test/java/brooklyn/entity/database/mysql/MySqlLiveTest.groovy b/software/database/src/test/java/brooklyn/entity/database/mysql/MySqlLiveTest.groovy
deleted file mode 100644
index 776ba8c..0000000
--- a/software/database/src/test/java/brooklyn/entity/database/mysql/MySqlLiveTest.groovy
+++ /dev/null
@@ -1,88 +0,0 @@
-package brooklyn.entity.database.mysql;
-
-
-import static java.util.Arrays.asList
-
-import org.testng.annotations.Test
-
-import brooklyn.config.BrooklynProperties
-import brooklyn.entity.database.VogellaExampleAccess
-import brooklyn.entity.proxying.BasicEntitySpec
-import brooklyn.location.basic.LocationRegistry
-import brooklyn.location.basic.SshMachineLocation
-import brooklyn.location.basic.jclouds.JcloudsLocation
-
-/**
- * The MySqlLiveTest installs MySQL on various operating systems like Ubuntu, CentOS, Red Hat etc. To make sure that
- * MySQL works like expected on these Operating Systems.
- */
-public class MySqlLiveTest extends MySqlIntegrationTest {
-    @Test(groups = ["Live"])
-    public void test_Debian_6() {
-        test("Debian 6");
-    }
-
-    @Test(groups = ["Live"])
-    public void test_Ubuntu_10_0() {
-        test("Ubuntu 10.0");
-    }
-
-    @Test(groups = ["Live"])
-    public void test_Ubuntu_11_0() {
-        test("Ubuntu 11.0");
-    }
-
-    @Test(groups = ["Live"])
-    public void test_Ubuntu_12_0() {
-        test("Ubuntu 12.0");
-    }
-
-    @Test(groups = ["Live"])
-    public void test_CentOS_6_0() {
-        test("CentOS 6.0");
-    }
-
-    @Test(groups = ["Live"])
-    public void test_CentOS_5_6() {
-        test("CentOS 5.6");
-    }
-
-    @Test(groups = ["Live"])
-    public void test_Fedora_17() {
-        test("Fedora 17");
-    }
-
-    @Test(groups = ["Live"])
-    public void test_Red_Hat_Enterprise_Linux_6() {
-        test("Red Hat Enterprise Linux 6");
-    }
-
-    @Test(groups = ["Live"])
-    public void test_localhost() throws Exception {
-        super.test_localhost();
-    }
-
-    public void test(String osRegex) throws Exception {
-        MySqlNode mysql = tapp.createAndManageChild(BasicEntitySpec.newInstance(MySqlNode.class)
-                .configure("creationScriptContents", CREATION_SCRIPT));
-
-        BrooklynProperties brooklynProperties = BrooklynProperties.Factory.newDefault();
-        brooklynProperties.put("brooklyn.jclouds.cloudservers-uk.image-name-regex", osRegex);
-        brooklynProperties.remove("brooklyn.jclouds.cloudservers-uk.image-id");
-        brooklynProperties.put("inboundPorts", [22, 3306]);
-        LocationRegistry locationRegistry = new LocationRegistry(brooklynProperties);
-
-        JcloudsLocation jcloudsLocation = (JcloudsLocation) locationRegistry.resolve("cloudservers-uk");
-
-        tapp.start(asList(jcloudsLocation));
-
-        SshMachineLocation l = (SshMachineLocation) mysql.getLocations().iterator().next();
-        //hack to get the port for mysql open; is the inbounds property not respected on rackspace??
-        l.exec(asList("iptables -I INPUT -p tcp --dport 3306 -j ACCEPT"))
-
-        String host = mysql.getAttribute(MySqlNode.HOSTNAME);
-        int port = mysql.getAttribute(MySqlNode.MYSQL_PORT);
-        new VogellaExampleAccess().readDataBase("com.mysql.jdbc.Driver", "mysql", host, port);
-       
-    } 
-}

