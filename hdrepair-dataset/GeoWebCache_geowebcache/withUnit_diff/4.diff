diff --git a/geowebcache/core/src/test/java/org/geowebcache/layer/wms/WMSLayerTest.java b/geowebcache/core/src/test/java/org/geowebcache/layer/wms/WMSLayerTest.java
index 79626ff..cf19d6f 100644
--- a/geowebcache/core/src/test/java/org/geowebcache/layer/wms/WMSLayerTest.java
+++ b/geowebcache/core/src/test/java/org/geowebcache/layer/wms/WMSLayerTest.java
@@ -21 +20,0 @@
-import java.awt.image.BufferedImage;
@@ -26 +24,0 @@
-import javax.imageio.ImageIO;
@@ -89,2 +87 @@
-        BufferedImage read = ImageIO.read(value.getBlob().getInputStream());
-        assertNotNull(read);
+        assertTrue(value.getBlob().getSize() > 0);
diff --git a/geowebcache/core/src/test/java/org/geowebcache/seed/SeedTaskTest.java b/geowebcache/core/src/test/java/org/geowebcache/seed/SeedTaskTest.java
index a80af2c..5f78c9a 100644
--- a/geowebcache/core/src/test/java/org/geowebcache/seed/SeedTaskTest.java
+++ b/geowebcache/core/src/test/java/org/geowebcache/seed/SeedTaskTest.java
@@ -19 +19,4 @@
-import static org.easymock.classextension.EasyMock.*;
+import static org.easymock.EasyMock.anyObject;
+import static org.easymock.EasyMock.capture;
+import static org.easymock.EasyMock.expect;
+import static org.easymock.classextension.EasyMock.replay;
@@ -22,0 +26 @@
+import java.io.ByteArrayInputStream;
@@ -24,0 +29 @@
+import java.nio.channels.Channels;
@@ -44,0 +50,2 @@
+import org.geowebcache.io.Resource;
+import org.geowebcache.layer.TileResponseReceiver;
@@ -87 +94 @@
-        WMSSourceHelper mockSourceHelper = new MockWMSSourceHelper();// EasyMock.createMock(WMSSourceHelper.class);
+        WMSSourceHelper mockSourceHelper = EasyMock.createMock(WMSSourceHelper.class);
@@ -99,3 +106,15 @@
-//        expect(mockSourceHelper.makeRequest(capture(wmsRequestsCapturer))).andReturn(
-//                fakeWMSResponse).anyTimes();
-//        replay(mockSourceHelper);
+        Capture<Resource> resourceCapturer = new Capture<Resource>() {
+            @Override
+            public void setValue(Resource target) {
+                try {
+                    target.transferFrom(Channels.newChannel(new ByteArrayInputStream(
+                            fakeWMSResponse)));
+                } catch (IOException e) {
+                    throw new RuntimeException(e);
+                }
+            }
+        };
+        mockSourceHelper.makeRequest(capture(wmsRequestsCapturer), capture(resourceCapturer));
+        mockSourceHelper.makeRequest(capture(wmsRequestsCapturer), capture(resourceCapturer));
+        mockSourceHelper.makeRequest(capture(wmsRequestsCapturer), capture(resourceCapturer));
+        replay(mockSourceHelper);
@@ -149 +168 @@
-        ///final byte[] fakeWMSResponse = createFakeSourceImage(tl);
+        final byte[] fakeWMSResponse = createFakeSourceImage(tl);
@@ -152 +171,4 @@
-        WMSSourceHelper mockSourceHelper = new MockWMSSourceHelper();/// EasyMock.createMock(WMSSourceHelper.class);
+        // WMSSourceHelper mockSourceHelper = new MockWMSSourceHelper();///
+        // EasyMock.createMock(WMSSourceHelper.class);
+        WMSSourceHelper mockSourceHelper = new MockWMSSourceHelper() {
+            private int numCalls;
@@ -154,5 +175,0 @@
-        final AtomicInteger wmsRequestsCounter = new AtomicInteger();
-        Capture<WMSMetaTile> wmsRequestsCapturer = new Capture<WMSMetaTile>() {
-            /**
-             * Override because setValue with anyTimes() resets the list of values
-             */
@@ -160,2 +177,21 @@
-            public void setValue(WMSMetaTile o) {
-                wmsRequestsCounter.incrementAndGet();
+            protected void makeRequest(TileResponseReceiver tileRespRecv, WMSLayer layer,
+                    String wmsParams, String expectedMimeType, Resource target)
+                    throws GeoWebCacheException {
+                numCalls++;
+                switch (numCalls) {
+                case 1:
+                    throw new GeoWebCacheException("test exception");
+                case 2:
+                    throw new RuntimeException("test unexpected exception");
+                case 3:
+                    throw new GeoWebCacheException("second test exception");
+                case 4:
+                    throw new RuntimeException("second test unexpected exception");
+                default:
+                    try {
+                        target.transferFrom(Channels.newChannel(new ByteArrayInputStream(
+                                fakeWMSResponse)));
+                    } catch (IOException e) {
+                        throw new RuntimeException(e);
+                    }
+                }
@@ -164,12 +199,0 @@
-//        expect(mockSourceHelper.makeRequest(capture(wmsRequestsCapturer))).andThrow(
-//                new GeoWebCacheException("test exception"));
-//        expect(mockSourceHelper.makeRequest(capture(wmsRequestsCapturer))).andThrow(
-//                new RuntimeException("test unexpected exception"));
-//        expect(mockSourceHelper.makeRequest(capture(wmsRequestsCapturer))).andThrow(
-//                new GeoWebCacheException("second test exception"));
-//        expect(mockSourceHelper.makeRequest(capture(wmsRequestsCapturer))).andThrow(
-//                new RuntimeException("second test unexpected exception"));
-//        expect(mockSourceHelper.makeRequest(capture(wmsRequestsCapturer))).andReturn(
-//                fakeWMSResponse).anyTimes();
-//
-//        replay(mockSourceHelper);
@@ -181 +205 @@
-        
+
@@ -197 +221 @@
-        
+
@@ -202 +226,2 @@
-        seedTask.setFailurePolicy(tileFailureRetryCount, tileFailureRetryWaitTime, totalFailuresBeforeAborting, sharedFailureCounter);
+        seedTask.setFailurePolicy(tileFailureRetryCount, tileFailureRetryWaitTime,
+                totalFailuresBeforeAborting, sharedFailureCounter);
@@ -213 +237,0 @@
-        verify(mockSourceHelper);
@@ -228 +252 @@
-///        final byte[] fakeWMSResponse = createFakeSourceImage(tl);
+        // / final byte[] fakeWMSResponse = createFakeSourceImage(tl);
@@ -231,3 +255,4 @@
-//        expect(mockSourceHelper.makeRequest((WMSMetaTile) anyObject())).andReturn(fakeWMSResponse)
-//                .anyTimes();
-//        replay(mockSourceHelper);
+        // expect(mockSourceHelper.makeRequest((WMSMetaTile)
+        // anyObject())).andReturn(fakeWMSResponse)
+        // .anyTimes();
+        // replay(mockSourceHelper);
diff --git a/geowebcache/core/src/test/java/org/geowebcache/util/MockWMSSourceHelper.java b/geowebcache/core/src/test/java/org/geowebcache/util/MockWMSSourceHelper.java
index f64fbb4..3f4cfce 100644
--- a/geowebcache/core/src/test/java/org/geowebcache/util/MockWMSSourceHelper.java
+++ b/geowebcache/core/src/test/java/org/geowebcache/util/MockWMSSourceHelper.java
@@ -28 +28 @@
-public final class MockWMSSourceHelper extends WMSSourceHelper {
+public class MockWMSSourceHelper extends WMSSourceHelper {

