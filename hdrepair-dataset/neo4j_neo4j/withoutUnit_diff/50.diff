diff --git a/community/cypher/src/docs/dev/index.txt b/community/cypher/src/docs/dev/index.txt
index e43a48c..554fe3f 100644
--- a/community/cypher/src/docs/dev/index.txt
+++ b/community/cypher/src/docs/dev/index.txt
@@ -53 +53 @@
-include::ql/skip/index.txt[]
+include::ql/limit/index.txt[]
@@ -57 +57 @@
-include::ql/limit/index.txt[]
+include::ql/skip/index.txt[]
diff --git a/community/cypher/src/docs/dev/ql/cookbook/friend-finding.txt b/community/cypher/src/docs/dev/ql/cookbook/friend-finding.txt
index fa59984..9bdfe30 100644
--- a/community/cypher/src/docs/dev/ql/cookbook/friend-finding.txt
+++ b/community/cypher/src/docs/dev/ql/cookbook/friend-finding.txt
@@ -2 +2 @@
-== Basic Friend finding based on social neighborhood ==
+== Basic friend finding based on social neighborhood ==
diff --git a/community/cypher/src/docs/dev/ql/create/index.txt b/community/cypher/src/docs/dev/ql/create/index.txt
index 7adc1c5..a519b3b 100644
--- a/community/cypher/src/docs/dev/ql/create/index.txt
+++ b/community/cypher/src/docs/dev/ql/create/index.txt
@@ -18,0 +19,3 @@
+// TODO: get the query from the code somehow (could be written to a file).
+// This goes for the example below as well.
+
@@ -29 +32 @@
-create node {props}
+create ({props})
@@ -51 +54 @@
-create node {props}
+create (n {props}) return n
@@ -62,0 +66 @@
+
diff --git a/community/cypher/src/docs/dev/ql/foreach/index.txt b/community/cypher/src/docs/dev/ql/foreach/index.txt
index d87410d..9bb68b7 100644
--- a/community/cypher/src/docs/dev/ql/foreach/index.txt
+++ b/community/cypher/src/docs/dev/ql/foreach/index.txt
@@ -11 +11 @@
-Inside of the `FOREACH` parenthesis, you can do any updating commands -- `CREATE`, `CREATE UNIQUE`, `DELETE`,
+Inside of the `FOREACH` parentheses, you can do any updating commands -- `CREATE`, `CREATE UNIQUE`, `DELETE`,
diff --git a/community/cypher/src/docs/dev/ql/functions/index.txt b/community/cypher/src/docs/dev/ql/functions/index.txt
index 45f7eb2..ebf1d84 100644
--- a/community/cypher/src/docs/dev/ql/functions/index.txt
+++ b/community/cypher/src/docs/dev/ql/functions/index.txt
@@ -4 +4 @@
-Most functions in Cypher will return null if the input parameter is null.
+Most functions in Cypher will return +null+ if the input parameter is +null+.
diff --git a/community/cypher/src/docs/dev/ql/return/index.txt b/community/cypher/src/docs/dev/ql/return/index.txt
index f6d20ad..0fc5479 100644
--- a/community/cypher/src/docs/dev/ql/return/index.txt
+++ b/community/cypher/src/docs/dev/ql/return/index.txt
@@ -5 +5 @@
-In the return part of your query, you define which parts of the pattern you are
+In the `RETURN` part of your query, you define which parts of the pattern you are
diff --git a/community/cypher/src/docs/dev/ql/skip/index.txt b/community/cypher/src/docs/dev/ql/skip/index.txt
index 35021d8..ae8ac6d 100644
--- a/community/cypher/src/docs/dev/ql/skip/index.txt
+++ b/community/cypher/src/docs/dev/ql/skip/index.txt
@@ -5 +5,2 @@
-+SKIP+ enables the return of only subsets of the total result. By using +SKIP+, the result set will trimmed from the top.
++SKIP+ enables the return of only subsets of the total result.
+By using +SKIP+, the result set will get trimmed from the top.
@@ -11,0 +13 @@
+
diff --git a/community/cypher/src/docs/dev/ql/where/index.txt b/community/cypher/src/docs/dev/ql/where/index.txt
index 8c42eda..e16a480 100644
--- a/community/cypher/src/docs/dev/ql/where/index.txt
+++ b/community/cypher/src/docs/dev/ql/where/index.txt
@@ -6 +6 @@
-for, you can add clauses in the where part of the query.
+for, you can add clauses in the `WHERE` part of the query.
@@ -20,0 +21 @@
+include::filter-on-patterns-using-not.txt[]
@@ -21,0 +23 @@
+
diff --git a/community/cypher/src/docs/dev/ql/with/index.txt b/community/cypher/src/docs/dev/ql/with/index.txt
index 3c71856..7b35536 100644
--- a/community/cypher/src/docs/dev/ql/with/index.txt
+++ b/community/cypher/src/docs/dev/ql/with/index.txt
@@ -7,2 +7 @@
-+WITH+ is also used to separate reading from updating of the graph. Every sub-query of a query must either be
-a read-only or a write-only.
++WITH+ is also used to separate reading from updating of the graph. Every sub-query of a query must be either read-only or write-only.
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/AggregationTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/AggregationTest.scala
index fe092ea..7febce1 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/AggregationTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/AggregationTest.scala
@@ -43 +43 @@
-      returns = "The start node and the count of related nodes.",
+      returns = "This returns the start node and the count of related nodes.",
@@ -52 +52 @@
-      returns = "The relationship types and their group count.",
+      returns = "The relationship types and their group count is returned by the query.",
@@ -62 +62 @@
-      returns = "The number of connected nodes from the start node.",
+      returns = "The example query returns the number of connected nodes from the start node.",
@@ -71 +71 @@
-      returns = "The count of related nodes.",
+      returns = "The count of related nodes with the `property` property set is returned by the query.",
@@ -81 +81 @@
-      returns = "The sum of all the values in the property 'property'.",
+      returns = "This returns the sum of all the values in the property `property`.",
@@ -90 +90 @@
-      returns = "The average of all the values in the property 'property'.",
+      returns = "The average of all the values in the property `property` is returned by the example query.",
@@ -99 +99 @@
-      returns = "The smallest of all the values in the property 'property'.",
+      returns = "This returns the smallest of all the values in the property `property`.",
@@ -108 +108 @@
-      returns = "The largest of all the values in the property 'property'.",
+      returns = "The largest of all the values in the property `property` is returned.",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/CreateTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/CreateTest.scala
index ddc1249..725e38e 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/CreateTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/CreateTest.scala
@@ -55 +55 @@
-      returns = "The newly created node is returned. This query uses the alternative syntax for single node creation",
+      returns = "The newly created node is returned. This query uses the alternative syntax for single node creation.",
@@ -76,2 +76,2 @@
-      queryText = "start a=node(" + aId + "), b=node(" + bId + ") create a-[r:REL]->b return r",
-      returns = "The created relationship is returned.",
+      queryText = "start a=node(" + aId + "), b=node(" + bId + ") create a-[r:RELTYPE]->b return r",
+      returns = "The created relationship is returned by the query.",
@@ -124 +124 @@
-        """When you use CREATE and a pattern, all parts of the pattern that are not already in scope at this time
+        """When you use `CREATE` and a pattern, all parts of the pattern that are not already in scope at this time
@@ -145 +145 @@
-      text = "Setting properties on relationships is done in a similar manner to how it's done when creating nodes." +
+      text = "Setting properties on relationships is done in a similar manner to how it's done when creating nodes. " +
@@ -147,2 +147,2 @@
-      queryText = "start a=node(" + aId + "), b=node(" + bId + ") create a-[r:REL {name : a.name + '<->' + b.name }]->b return r",
-      returns = "The newly created relationship is returned.",
+      queryText = "start a=node(" + aId + "), b=node(" + bId + ") create a-[r:RELTYPE {name : a.name + '<->' + b.name }]->b return r",
+      returns = "The newly created relationship is returned by the example query.",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/CreateUniqueTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/CreateUniqueTest.scala
index a6adfc0..c5b82b0 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/CreateUniqueTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/CreateUniqueTest.scala
@@ -50 +50 @@
-      returns = "The root node doesn't have any LOVES relationships, and so a node is created, and also a relationship " +
+      returns = "The root node doesn't have any `LOVES` relationships, and so a node is created, and also a relationship " +
@@ -58 +58 @@
-      text = "The pattern described can also contain values on the node. These are given using the JSON-like prop : <expression> syntax.",
+      text = "The pattern described can also contain values on the node. These are given using the following syntax: `prop : <expression>`.",
@@ -60 +60 @@
-      returns = "Node node connected with the root node has the name 'D', and so a new node needs to be created to " +
+      returns = "No node connected with the root node has the name +D+, and so a new node is created to " +
@@ -68 +68 @@
-      text = "Relationships created can also be matched on values.",
+      text = "Relationships to be created can also be matched on values.",
@@ -79 +79 @@
-      text = "The pattern described by +CREATE UNIQUE+ can be separated by commas, just like in +MATCH+ and +CREATE+",
+      text = "The pattern described by +CREATE UNIQUE+ can be separated by commas, just like in +MATCH+ and +CREATE+.",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/DeleteTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/DeleteTest.scala
index c29b8e5..98fa9a5 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/DeleteTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/DeleteTest.scala
@@ -68 +68 @@
-      text = "Neo4j doesn't allow storing null in properties. Instead, if no value exists, the property is" +
+      text = "Neo4j doesn't allow storing +null+ in properties. Instead, if no value exists, the property is " +
@@ -71 +71 @@
-      returns = "The node is returned, and no property 'age' exists on it.",
+      returns = "The node is returned, and no property `age` exists on it.",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/ForeachTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/ForeachTest.scala
index 11869c3..04dba0e 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/ForeachTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/ForeachTest.scala
@@ -52 +52 @@
-      text = "This query will set the property marked to true on all nodes along a path.",
+      text = "This query will set the property `marked` to true on all nodes along a path.",
@@ -54 +54 @@
-      returns = "Nothing is returned from this query",
+      returns = "Nothing is returned from this query.",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/FunctionsTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/FunctionsTest.scala
index 82c5527..6b35d57 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/FunctionsTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/FunctionsTest.scala
@@ -45 +45 @@
-    "predicate" -> "A predicate that is tested against all items in iterable"
+    "predicate" -> "A predicate that is tested against all items in iterable."
@@ -55 +55 @@
-      returns = """All nodes in the path.""",
+      returns = """All nodes in the returned paths will have an `age` property of at least 30.""",
@@ -66 +66 @@
-      returns = """All nodes in the path.""",
+      returns = """All nodes in the returned paths has at least one `one` value set in the array property named `array`.""",
@@ -77 +77 @@
-      returns = """All nodes in the path.""",
+      returns = """No nodes in the returned paths has a `age` property set to `25`.""",
@@ -88 +88 @@
-      returns = """All nodes in the path.""",
+      returns = """Exactly one node in every returned path will have the `eyes` property set to `"blue"`.""",
@@ -96 +96 @@
-      arguments = List("relationship" -> "A relationship"),
+      arguments = List("relationship" -> "A relationship."),
@@ -99 +99 @@
-      returns = """The relationship type of r.""",
+      returns = """The relationship type of `r` is returned by the query.""",
@@ -107,2 +107,2 @@
-      arguments = List("iterable" -> "An iterable, value or function call"),
-      text = """To return or filter on the length of a path, use the special property LENGTH""",
+      arguments = List("iterable" -> "An iterable, value or function call."),
+      text = """To return or filter on the length of a path, use the `LENGTH()` function.""",
@@ -110 +110 @@
-      returns = """The length of the path p.""",
+      returns = """The length of the path `p` is returned by the query.""",
@@ -124 +124 @@
- you can use EXTRACT. It will go through all enitities in the iterable, and run an expression, and return the results
+ you can use `EXTRACT`. It will go through all enitities in the iterable, and run an expression, and return the results
@@ -127 +127 @@
-      returns = """The age property of all nodes in the path.""",
+      returns = """The age property of all nodes in the path are returned.""",
@@ -136 +136 @@
-        "expression" -> "This expression should return a collection of some sort."
+        "expression" -> "This expression should return a collection of some kind."
@@ -138 +138 @@
-      text = "HEAD returns the first element in a collection.",
+      text = "`HEAD` returns the first element in a collection.",
@@ -140 +140 @@
-      returns = "The first node in the path",
+      returns = "The first node in the path is returned.",
@@ -149 +149 @@
-        "expression" -> "This expression should return a collection of some sort."
+        "expression" -> "This expression should return a collection of some kind."
@@ -151 +151 @@
-      text = "LAST returns the last element in a collection.",
+      text = "`LAST` returns the last element in a collection.",
@@ -153 +153 @@
-      returns = "The first node in the path",
+      returns = "The last node in the path is returned.",
@@ -162 +162 @@
-        "expression" -> "This expression should return a collection of some sort."
+        "expression" -> "This expression should return a collection of some kind."
@@ -164 +164 @@
-      text = "TAIL returns all but the first element in a collection.",
+      text = "`TAIL` returns all but the first element in a collection.",
@@ -166 +166 @@
-      returns = "The first node in the path",
+      returns = "This returns the property named `array` and all elements of that property except the first one.",
@@ -178 +178 @@
-      text = "FILTER returns all the elements in an iterable that comply to a predicate.",
+      text = "`FILTER` returns all the elements in an iterable that comply to a predicate.",
@@ -180 +180 @@
-      returns = "The first node in the path",
+      returns = "This returns the property named `array` and a list of values in it, which have the length `3`.",
@@ -191,2 +191,2 @@
-      arguments = List("path" -> "A path"),
-      text = """Returns all nodes in a path""",
+      arguments = List("path" -> "A path."),
+      text = """Returns all nodes in a path.""",
@@ -194 +194 @@
-      returns = """All the nodes in the path p.""",
+      returns = """All the nodes in the path `p` are returned by the example query.""",
@@ -203,2 +203,2 @@
-      arguments = List("path" -> "A path"),
-      text = """Returns all relationships in a path""",
+      arguments = List("path" -> "A path."),
+      text = """Returns all relationships in a path.""",
@@ -206 +206 @@
-      returns = """All the nodes in the path p.""",
+      returns = """All the relationships in the path `p` are returned.""",
@@ -215,2 +215,2 @@
-      arguments = List("property-container" -> "A node or a relationship"),
-      text = """Returns the id of the relationship or node""",
+      arguments = List("property-container" -> "A node or a relationship."),
+      text = """Returns the id of the relationship or node.""",
@@ -218 +218 @@
-      returns = """The node id for three nodes.""",
+      returns = """This returns the node id for three nodes.""",
@@ -227,2 +227,2 @@
-      arguments = List("expression" -> "The expression that might return null"),
-      text = """Returns the first non-null value in the list of expressions passed to it.""",
+      arguments = List("expression" -> "The expression that might return null."),
+      text = """Returns the first non-+null+ value in the list of expressions passed to it.""",
@@ -239,2 +239,2 @@
-      arguments = List("expression" -> "A numeric expression"),
-      text = "Returns the absolute value of a number",
+      arguments = List("expression" -> "A numeric expression."),
+      text = "`ABS` returns the absolute value of a number.",
@@ -242 +242 @@
-      returns = "The absolute value of age difference",
+      returns = "The absolute value of the age difference is returned.",
@@ -251,2 +251,2 @@
-      arguments = List("expression" -> "A numerical expression"),
-      text = "ROUND returns the numerical expression, rounded to the nearest integer.",
+      arguments = List("expression" -> "A numerical expression."),
+      text = "`ROUND` returns the numerical expression, rounded to the nearest integer.",
@@ -264 +264 @@
-      text = "SQRT returns the square root of a number",
+      text = "`SQRT` returns the square root of a number.",
@@ -266 +266 @@
-      returns = """All the nodes in the path p.""",
+      returns = "",
@@ -276 +276 @@
-      text = "Returns the signum of a number -- zero if the expression is zero, `-1` for any negative number, and `1` for any positive number.",
+      text = "`SIGN` returns the signum of a number -- zero if the expression is zero, `-1` for any negative number, and `1` for any positive number.",
@@ -288,3 +288,3 @@
-        "start" -> "A numerical expression",
-        "end" -> "A numerical expression",
-        "step" -> "A numerical expression"
+        "start" -> "A numerical expression.",
+        "end" -> "A numerical expression.",
+        "step" -> "A numerical expression."
@@ -292 +292 @@
-      text = "Returns numerical values in range [start;end) with non-zero step value step. Range is inclusive in both ends.",
+      text = "Returns numerical values in a range with a non-zero step value step. Range is inclusive in both ends.",
@@ -294 +294 @@
-      returns = "Two lists of numbers.",
+      returns = "Two lists of numbers are returned.",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/LimitTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/LimitTest.scala
index 847c977..648c822 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/LimitTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/LimitTest.scala
@@ -36 +36 @@
-      returns = "The top three items are returned",
+      returns = "The top three items are returned by the example query.",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/MatchTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/MatchTest.scala
index b03b589..2b58b1d 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/MatchTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/MatchTest.scala
@@ -133 +133,3 @@
-      text = "Nodes that are a variable number of relationship->node hops away can be found using the following syntax: `-[:TYPE*minHops..maxHops]->`. ",
+      text = """Nodes that are a variable number of relationship->node hops away can be found using the following syntax:
+`-[:TYPE*minHops..maxHops]->`.
+Note that either the minimum or maximum limit can be omitted.""",
@@ -270,2 +272,2 @@
-      text = "Strictly speaking, you can't do OR in your MATCH. It's still possible to form a query that " +
-             "works a lot like OR.",
+      text = "Strictly speaking, you can't do `OR` in your `MATCH`. It's still possible to form a query that " +
+             "works a lot like `OR`.",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/OrderByTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/OrderByTest.scala
index 39c21fc..307a5e9 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/OrderByTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/OrderByTest.scala
@@ -39 +39 @@
-      text = "+ORDER BY+ is used to sort the output",
+      text = "+ORDER BY+ is used to sort the output.",
@@ -41 +41 @@
-      returns = """The nodes, sorted by their name.""",
+      returns = """The nodes are returned, sorted by their name.""",
@@ -50 +50 @@
-      returns = """The nodes, sorted by their name reversely.""",
+      returns = """The example returns the nodes, sorted by their name reversely.""",
@@ -58,2 +58,2 @@
-        " statement. Cypher will sort the result by the first identifier listed, and for equals values, " +
-        "go to the next property in the order by, and so on.",
+        " clause. Cypher will sort the result by the first identifier listed, and for equals values, " +
+        "go to the next property in the `ORDER BY` clause, and so on.",
@@ -61 +61 @@
-      returns = """The nodes, sorted first by their age, and then by their name.""",
+      returns = """This returns the nodes, sorted first by their age, and then by their name.""",
@@ -71 +71 @@
-      returns = """The nodes sorted by the length property, with a node without that property last.""",
+      returns = """The nodes are returned sorted by the length property, with a node without that property last.""",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/PatternTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/PatternTest.scala
index a731083..ff64727 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/PatternTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/PatternTest.scala
@@ -139,0 +140 @@
+
@@ -186 +187 @@
-This query starts from one node, and follows KNOWS relationships two or three steps out, and then stops.
+This query starts from one node, and follows `KNOWS` relationships two or three steps out, and then stops.
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/ReturnTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/ReturnTest.scala
index 9c262e3..bfc8fee 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/ReturnTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/ReturnTest.scala
@@ -36 +36 @@
-      text = "To return a node, list it in the return statemenet.",
+      text = "To return a node, list it in the `RETURN` statemenet.",
@@ -38 +38 @@
-      returns = """The node.""",
+      returns = """The example will return the node.""",
@@ -45 +45 @@
-      text = "To return a relationship, just include it in the return list.",
+      text = "To return a relationship, just include it in the `RETURN` list.",
@@ -47 +47 @@
-      returns = """The relationship.""",
+      returns = """The relationship is returned by the example.""",
@@ -56 +56 @@
-      returns = """The the value of the property 'name'.""",
+      returns = """The value of the property `name` gets returned.""",
@@ -78 +78 @@
-      returns = """The age when the node has that property, or +null+ if the property is not there.""",
+      returns = """This example returns the age when the node has that property, or +null+ if the property is not there.""",
@@ -87 +87 @@
-      returns = """The node named B, but only once.""",
+      returns = """The node named B is returned by the query, but only once.""",
@@ -94 +94 @@
-      text = """If the name of the column should be different from the expression used, you can rename it by using AS <new name>.""",
+      text = """If the name of the column should be different from the expression used, you can rename it by using `AS` <new name>.""",
@@ -105 +105 @@
-      returns = """Returns the two nodes, the relationship and the path used in the query""",
+      returns = """This returns the two nodes, the relationship and the path used in the query.""",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/SetTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/SetTest.scala
index 2f10971..0f3371a 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/SetTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/SetTest.scala
@@ -38 +38 @@
-      text = "To set a property on a node or relationship, use +SET+",
+      text = "To set a property on a node or relationship, use +SET+.",
@@ -40 +40 @@
-      returns = "The newly changes node is returned",
+      returns = "The newly changed node is returned by the query.",
@@ -51 +51 @@
-      returns = "The node is returned, and the name property is now missing.",
+      returns = "The node is returned by the query, and the name property is now missing.",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/SkipTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/SkipTest.scala
index 9883dc8..7fbd7d4 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/SkipTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/SkipTest.scala
@@ -34 +34 @@
-      text = "To return a subset of the result, starting from third result, use this syntax:",
+      text = "To return a subset of the result, starting from the fourth result, use the following syntax:",
@@ -36 +36 @@
-      returns = "The first three nodes are skipped, and only the last two are returned.",
+      returns = "The first three nodes are skipped, and only the last two are returned in the result.",
@@ -45 +45 @@
-      returns = "Two nodes from the middle are returned",
+      returns = "Two nodes from the middle are returned.",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/StartTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/StartTest.scala
index 8e2ce96..946ae5a 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/StartTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/StartTest.scala
@@ -79 +79 @@
-      returns = """The query returns the node indexed with the name "A".""",
+      returns = """The query returns the node indexed with the name "+A+".""",
@@ -99 +99 @@
-      returns = """The relationship indexed with the +name+ property set to "Andrés" is returned by the query.""",
+      returns = """The relationship indexed with the +name+ property set to "+Andrés+" is returned by the query.""",
@@ -119 +119 @@
-      returns = """Both the +A+ and the +B+ nodes are returned.""",
+      returns = """Both the nodes +A+ and the +B+  are returned.""",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/WhereTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/WhereTest.scala
index 30f4fed..0ca4b95 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/WhereTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/WhereTest.scala
@@ -40 +40 @@
-      text = "To filter on a property, write your clause after the `WHERE` keyword.",
+      text = "To filter on a property, write your clause after the `WHERE` keyword. Filtering on relationship properties works just the same way.",
@@ -42 +42 @@
-      returns = """The node.""",
+      returns = """The "+Tobias+" node will be returned.""",
@@ -51 +51 @@
-      returns = """The node.""",
+      returns = """This will return both nodes in the start clause.""",
@@ -60 +60 @@
-      returns = """The node named Tobias.""",
+      returns = """The "+Tobias+" node will be returned.""",
@@ -76 +76 @@
-      text = "By pre-pending a regular expression with (?i), the whole expression becomes case insensitive.",
+      text = "By pre-pending a regular expression with `(?i)`, the whole expression becomes case insensitive.",
@@ -78 +78 @@
-      returns = """The node with name 'Andres' is returned.""",
+      returns = """The node with name "+Andres+" is returned.""",
@@ -85 +85 @@
-      text = "To only include nodes/relationships that have a property, just write out the identifier and the property you expect it to have.",
+      text = "To only include nodes/relationships that have a property, use the `HAS()` function and just write out the identifier and the property you expect it to have.",
@@ -87 +87 @@
-      returns = """The node named Andres.""",
+      returns = """The node named "+Andres+" is returned.""",
@@ -97 +97 @@
-      returns = "All nodes, even those without the belt property",
+      returns = "This returns all nodes, even those without the belt property.",
@@ -117 +117 @@
-      returns = """The relationship that has a type whose name starts with K.""",
+      returns = """This returns relationships that has a type whose name starts with K.""",
@@ -124,2 +124,2 @@
-      text = "Sometimes you might want to test if a value or an identifier is null. This is done just like SQL does it, " +
-        "with IS NULL. Also like SQL, the negative is `IS NOT NULL`, althought `NOT(IS NULL x)` also works.",
+      text = "Sometimes you might want to test if a value or an identifier is +null+. This is done just like SQL does it, " +
+        "with `IS NULL`. Also like SQL, the negative is `IS NOT NULL`, although `NOT(IS NULL x)` also works.",
@@ -127 +127 @@
-      returns = "Nodes that Tobias is not connected to",
+      returns = "Nodes that Tobias is not connected to are returned.",
@@ -138,2 +138,2 @@
-able to express it in a single path. You can't use comas between multiple paths like you do in MATCH. You can achieve
-the same effect by combining multiple patterns with AND.
+able to express it in a single path. You can not use commas between multiple paths like you do in `MATCH`. You can achieve
+the same effect by combining multiple patterns with `AND`.
@@ -146,3 +146,12 @@
-      queryText = """start a=node(%Tobias%), b=node(%Andres%, %Peter%) where a<--b return b""",
-      returns = "Nodes that Tobias is not connected to",
-      assertions = (p) => assertEquals(List(Map("b" -> node("Andres"))), p.toList))
+      queryText = """start tobias=node(%Tobias%), others=node(%Andres%, %Peter%) where tobias<--others return others""",
+      returns = "Nodes that have an outgoing relationship to the \"+Tobias+\" node are returned.",
+      assertions = (p) => assertEquals(List(Map("others" -> node("Andres"))), p.toList))
+  }
+
+  @Test def has_not_relationship_to() {
+    testQuery(
+      title = "Filter on patterns using NOT",
+      text = """The `NOT()` function can be used to exclude a pattern. """,
+      queryText = """start persons=node(*), peter=node(%Peter%) where not(persons-->peter) return persons""",
+      returns = "Nodes that do not have an outgoing relationship to the \"+Peter+\" node are returned.",
+      assertions = (p) => assertEquals(List(Map("persons" -> node("Tobias")),Map("persons" -> node("Peter"))), p.toList))
@@ -154 +163 @@
-      text = "To check if an element exists in a collection, you can use the IN operator.",
+      text = "To check if an element exists in a collection, you can use the `IN` operator.",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/WithTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/WithTest.scala
index 03cc50d..ac35864 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/WithTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/WithTest.scala
@@ -42 +42 @@
-      text = "Aggregated results have to pass through a WITH clause to be able to filter on.",
+      text = "Aggregated results have to pass through a `WITH` clause to be able to filter on.",
@@ -44 +44 @@
-      returns = """The person connected to David with the at least more than one outgoing relationship.""",
+      returns = """The person connected to David with the at least more than one outgoing relationship will be returned by the query.""",
@@ -50 +50 @@
-      title = "Alternative syntax of with",
+      title = "Alternative syntax of WITH",
@@ -53 +53 @@
-        "before the column list, and at least after.",
+        "before the column list, and at least three after.",
@@ -58 +58 @@
-      returns = """The person connected to David with the at least more than one outgoing relationship.""",
+      returns = """For persons connected to David, the `connection_count` property is set to their number of outgoing relationships.""",
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/cookbook/CoFavoritedPlacesTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/cookbook/CoFavoritedPlacesTest.scala
index 82a7836..db28db7 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/cookbook/CoFavoritedPlacesTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/cookbook/CoFavoritedPlacesTest.scala
@@ -28 +27,0 @@
-
@@ -30,12 +29,12 @@
-  def graphDescription = List("Joe favorite CoffeeShop1", 
-      "Joe favorite SaunaX", 
-      "Joe favorite MelsPlace",
-      "Jill favorite CoffeeShop1", 
-      "Jill favorite MelsPlace", 
-      "CoffeeShop2 tagged Cool",
-      "CoffeeShop1 tagged Cool",
-      "CoffeeShop1 tagged Cosy",
-      "CoffeeShop3 tagged Cosy",
-      "MelsPlace tagged Cosy",
-      "MelsPlace tagged Cool",
-      "Jill favorite CoffeShop2")
+  def graphDescription = List("Joe favorite CoffeeShop1",
+    "Joe favorite SaunaX",
+    "Joe favorite MelsPlace",
+    "Jill favorite CoffeeShop1",
+    "Jill favorite MelsPlace",
+    "CoffeeShop2 tagged Cool",
+    "CoffeeShop1 tagged Cool",
+    "CoffeeShop1 tagged Cosy",
+    "CoffeeShop3 tagged Cosy",
+    "MelsPlace tagged Cosy",
+    "MelsPlace tagged Cool",
+    "Jill favorite CoffeShop2")
@@ -62,4 +61,4 @@
-          Map("stuff.name" -> "CoffeShop2", "count(*)" -> 1),
-          Map("stuff.name" -> "SaunaX", "count(*)" -> 1)),p.toList))
-  } 
-  
+        Map("stuff.name" -> "CoffeShop2", "count(*)" -> 1),
+        Map("stuff.name" -> "SaunaX", "count(*)" -> 1)), p.toList))
+  }
+
@@ -74,4 +73,4 @@
-      		MATCH place-[:tagged]->tag<-[:tagged]-otherPlace
-      		RETURN otherPlace.name, collect(tag.name) 
-      		ORDER BY otherPlace.name DESC""",
-      returns = "The list of possible friends ranked by them liking similar stuff that are not yet friends is returned.",
+MATCH place-[:tagged]->tag<-[:tagged]-otherPlace
+RETURN otherPlace.name, collect(tag.name)
+ORDER BY length(collect(tag.name)) DESC, otherPlace.name""",
+      returns = "This query returns other places than CoffeeShop1 which share the same tags; they are ranked by the number of tags.",
@@ -80,2 +79,2 @@
-                Map("otherPlace.name" -> "CoffeeShop3", "collect(tag.name)" -> List("Cosy")),
-                Map("otherPlace.name" -> "CoffeeShop2", "collect(tag.name)" -> List("Cool"))),p.toList)
+          Map("otherPlace.name" -> "CoffeeShop2", "collect(tag.name)" -> List("Cool")),
+          Map("otherPlace.name" -> "CoffeeShop3", "collect(tag.name)" -> List("Cosy"))), p.toList)
@@ -83 +82 @@
-  } 
+  }
diff --git a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/cookbook/CollabFilteringTest.scala b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/cookbook/CollabFilteringTest.scala
index c506449..60ca0e2 100644
--- a/community/cypher/src/test/scala/org/neo4j/cypher/docgen/cookbook/CollabFilteringTest.scala
+++ b/community/cypher/src/test/scala/org/neo4j/cypher/docgen/cookbook/CollabFilteringTest.scala
@@ -44,3 +44,2 @@
-        "match joe-[:knows]-friend-[:knows]-friend_of_friend, " +
-        "joe-[r?:knows]-friend_of_friend " +
-        "where r IS NULL " +
+        "match joe-[:knows*2..2]-friend_of_friend " +
+        "where not(joe-[:knows]-friend_of_friend) " +
diff --git a/community/embedded-examples/src/docs/dev/hello-world.txt b/community/embedded-examples/src/docs/dev/hello-world.txt
index c69cc9a..50782b5 100644
--- a/community/embedded-examples/src/docs/dev/hello-world.txt
+++ b/community/embedded-examples/src/docs/dev/hello-world.txt
@@ -69 +69 @@
-== Wrap mutating operations in a transaction ==
+== Wrap writes in a transaction ==
@@ -71 +71 @@
-All mutating operations (creating, deleting and updating any data) have to be performed in a transaction.
+All writes (creating, deleting and updating any data) have to be performed in a transaction.
diff --git a/community/embedded-examples/src/main/java/org/neo4j/examples/EmbeddedNeo4j.java b/community/embedded-examples/src/main/java/org/neo4j/examples/EmbeddedNeo4j.java
index 9a94025..6a6246b 100644
--- a/community/embedded-examples/src/main/java/org/neo4j/examples/EmbeddedNeo4j.java
+++ b/community/embedded-examples/src/main/java/org/neo4j/examples/EmbeddedNeo4j.java
@@ -71 +71 @@
-            // Mutating operations go here
+            // Updating operations go here
diff --git a/community/kernel/src/docs/ops/cache.txt b/community/kernel/src/docs/ops/cache.txt
index abef45e..8e6b744 100644
--- a/community/kernel/src/docs/ops/cache.txt
+++ b/community/kernel/src/docs/ops/cache.txt
@@ -10 +10 @@
-The object cache caches the nodes, relationships and properties in a format that is optimized for high traversal speeds and transactional mutation.
+The object cache caches the nodes, relationships and properties in a format that is optimized for high traversal speeds and transactional writes.
diff --git a/community/kernel/src/docs/ops/performance-guide.txt b/community/kernel/src/docs/ops/performance-guide.txt
index 3747fbe..23852f8 100644
--- a/community/kernel/src/docs/ops/performance-guide.txt
+++ b/community/kernel/src/docs/ops/performance-guide.txt
@@ -109 +109 @@
-log contains mutating operations. All writes to the logical log are append-only 
+log contains modifying operations. All writes to the logical log are append-only 
diff --git a/community/lucene-index/src/docs/dev/index.txt b/community/lucene-index/src/docs/dev/index.txt
index 5ad7772..e3a2fa9 100644
--- a/community/lucene-index/src/docs/dev/index.txt
+++ b/community/lucene-index/src/docs/dev/index.txt
@@ -29 +29 @@
-NOTE: All modifying index operations must be performed inside a transaction, as with any mutating operation in Neo4j.
+NOTE: All modifying index operations must be performed inside a transaction, as with any modifying operation in Neo4j.

