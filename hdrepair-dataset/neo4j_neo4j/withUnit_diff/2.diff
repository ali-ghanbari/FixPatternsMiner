diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/store/counts/CountsStore.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/store/counts/CountsStore.java
index a1d4789..4a6983d 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/store/counts/CountsStore.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/store/counts/CountsStore.java
@@ -101 +101 @@
-        catch ( RuntimeException e )
+        catch ( Exception e )
diff --git a/community/kernel/src/test/java/org/neo4j/kernel/impl/store/counts/CountsStoreTest.java b/community/kernel/src/test/java/org/neo4j/kernel/impl/store/counts/CountsStoreTest.java
index c82d016..6a69f6b 100644
--- a/community/kernel/src/test/java/org/neo4j/kernel/impl/store/counts/CountsStoreTest.java
+++ b/community/kernel/src/test/java/org/neo4j/kernel/impl/store/counts/CountsStoreTest.java
@@ -46,0 +47,2 @@
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
@@ -286,0 +289,33 @@
+    @Test
+    public void shouldCloseFileIfOpenFailsWithIOExceptionOnHeaderFormat() throws Exception
+    {
+        // given
+           // A header with invalid data that will lead to IOException being thrown
+        PageCache myCache = spy( pageCache );
+        try ( StoreChannel channel = fs.open( alpha, "rw" ) )
+        {
+            // header
+            ByteBuffer buffer = ByteBuffer.allocate( 4 );
+            buffer.putInt( 0xA );
+            buffer.flip();
+            channel.write( buffer );
+            channel.force( false );
+        }
+
+        // when
+           // opening the file fails while verifying contents
+        try
+        {
+            CountsStore.open( fs, myCache, alpha );
+            fail("Test setup error, this should have thrown an IOException");
+        }
+        catch( IOException expected )
+        {
+            // totally expected, continue
+        }
+
+        // then
+           // ensure that whatever was opened is unmapped before returning
+        verify( myCache ).unmap( alpha );
+    }
+

