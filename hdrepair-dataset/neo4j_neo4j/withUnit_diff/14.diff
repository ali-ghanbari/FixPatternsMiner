diff --git a/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/ProposerState.java b/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/ProposerState.java
index 44311bb..5d6597e 100644
--- a/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/ProposerState.java
+++ b/enterprise/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/ProposerState.java
@@ -153 +153 @@
-                                message = context.unbookInstance( instance.id );
+//                                message = context.unbookInstance( instance.id );
diff --git a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/ProposerStateTest.java b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/ProposerStateTest.java
index d1a3a62..3b1cede 100644
--- a/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/ProposerStateTest.java
+++ b/enterprise/cluster/src/test/java/org/neo4j/cluster/protocol/atomicbroadcast/multipaxos/ProposerStateTest.java
@@ -21,0 +22,5 @@
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
@@ -22,0 +28 @@
+import org.mockito.Matchers;
@@ -23,0 +30,4 @@
+import org.neo4j.cluster.com.message.Message;
+import org.neo4j.cluster.com.message.MessageHolder;
+import org.neo4j.cluster.com.message.MessageType;
+import org.neo4j.cluster.protocol.omega.MessageArgumentMatcher;
@@ -28 +38 @@
-    public void ifProposingWithClosedInstanceThenRetryWithNextInstance() throws Exception
+    public void ifProposingWithClosedInstanceThenRetryWithNextInstance() throws Throwable
@@ -30,2 +39,0 @@
-        ProposerState state = ProposerState.proposer;
-
@@ -34 +42,24 @@
-//        state.handle( context )
+        InstanceId instanceId = new InstanceId( 42 );
+        PaxosInstanceStore paxosInstanceStore = new PaxosInstanceStore();
+
+        // The instance is closed
+        PaxosInstance paxosInstance = new PaxosInstance( paxosInstanceStore, instanceId ); // the instance
+        paxosInstance.closed( null, "1/15#" ); // is closed for that conversation, not really important
+        when( context.unbookInstance( instanceId ) ).thenReturn( Message.internal( ProposerMessage.accepted, "the closed payload" ) );
+
+        when( context.getPaxosInstance( instanceId ) ).thenReturn( paxosInstance ); // required for
+
+        // But in the meantime it was reused and has now (of course) timed out
+        String theTimedoutPayload = "the timed out payload";
+        Message message = Message.internal( ProposerMessage.phase1Timeout, theTimedoutPayload );
+        message.setHeader( InstanceId.INSTANCE, instanceId.toString() );
+
+        // Handle it
+        MessageHolder mockHolder = mock( MessageHolder.class );
+        ProposerState.proposer.handle( context, message, mockHolder );
+
+        // Verify it was resent as a propose with the same value
+        verify( mockHolder, times(1) ).offer(
+                Matchers.<Message<? extends MessageType>>argThat(
+                        new MessageArgumentMatcher().onMessageType( ProposerMessage.propose ).withPayload( theTimedoutPayload )
+                ) );

