diff --git a/build.xml b/build.xml
index d84dc70..32176eb 100644
--- a/build.xml
+++ b/build.xml
@@ -259 +259 @@
-    <target name="gossip-ec2test" depends="contrib-jar" description="Run EC2 testing contrib junit tests.">
+    <target name="gossip-ec2test" depends="contrib-jar" description="Run gossip tests on EC2.">
@@ -286,0 +287,27 @@
+    <target name="rebalancing-ec2test" depends="contrib-jar" description="Run rebalancing tests on EC2.">
+        <copy todir="${testclasses.dir}">
+          <fileset dir="${contrib.root.dir}/ec2-testing/resources" />
+        </copy>
+        <replace-dir dir="${contribtestreport.dir}" />
+        <replace-dir dir="${contribtesthtml.dir}" />
+        <junit printsummary="yes" maxmemory="2048m" showoutput="true" failureProperty="test.failure">
+          <syspropertyset>
+            <propertyref prefix="ec2" />
+            <propertyref  prefix="log4j" />
+            <propertyref  prefix="rebalancing" />
+          </syspropertyset>
+          <classpath refid="contrib-test-classpath" />
+          <formatter type="xml" />
+          <batchtest fork="yes" todir="${contribtestreport.dir}">
+            <fileset dir="${contrib.classes.dir}">
+              <include name="**/Ec2RebalancingTest.class" />
+            </fileset>
+          </batchtest>
+        </junit>
+        <junitreport todir="${contribtesthtml.dir}">
+          <fileset dir="${contribtestreport.dir}">
+            <include name="TEST-*.xml" />
+          </fileset>
+          <report todir="${contribtesthtml.dir}" format="frames" />
+        </junitreport>
+      </target>
diff --git a/contrib/ec2-testing/src/java/voldemort/utils/ClusterGenerator.java b/contrib/ec2-testing/src/java/voldemort/utils/ClusterGenerator.java
index d8517f8..a15ac59 100644
--- a/contrib/ec2-testing/src/java/voldemort/utils/ClusterGenerator.java
+++ b/contrib/ec2-testing/src/java/voldemort/utils/ClusterGenerator.java
@@ -130 +129,0 @@
-            Collections.sort(partitions);
diff --git a/contrib/ec2-testing/test/voldemort/utils/Ec2RebalancingTest.java b/contrib/ec2-testing/test/voldemort/utils/Ec2RebalancingTest.java
index 38698a0..91d177f 100644
--- a/contrib/ec2-testing/test/voldemort/utils/Ec2RebalancingTest.java
+++ b/contrib/ec2-testing/test/voldemort/utils/Ec2RebalancingTest.java
@@ -8,0 +9 @@
+import voldemort.client.protocol.RequestFormatType;
@@ -12,0 +14,8 @@
+import voldemort.routing.ConsistentRoutingStrategy;
+import voldemort.routing.RoutingStrategy;
+import voldemort.store.InvalidMetadataException;
+import voldemort.store.Store;
+import voldemort.store.socket.SocketStore;
+import voldemort.versioning.ObsoleteVersionException;
+import voldemort.versioning.VectorClock;
+import voldemort.versioning.Versioned;
@@ -17,0 +27 @@
+import static org.junit.Assert.*;
@@ -25,0 +36 @@
+
@@ -73,0 +85,18 @@
+
+        /**
+         * Split the last element of the two-dimension array into the "car" and "cdr"
+         * arrays, separating them at the "pivot".
+         *
+         * e.g.
+         *  .---+---+---+---+---+---.
+         * | 0 | 1	| 2 | 3	| 4 | 5	|
+         * |   |  	|   | ^ |   |  	|
+         * `---+---+---+--|-----+---'
+         * ^    	   ^ ^`pivot   ^ 
+         * |    	   | | 	       |
+         * `--"car"---'  `"cdr"----'
+         *
+         * The car then goes into *second to last* element of the returned array,
+         * cdr goes the *last* element.
+         */
+
@@ -75 +104,2 @@
-
+        int carSize = pivot+1;
+        int cdrSize = template[len-1].length - carSize;
@@ -76,0 +107,3 @@
+        layout[len-1] = new int[carSize];
+        layout[len] = new int[cdrSize];
+
@@ -78,6 +111,2 @@
-
-        layout[len-1] = new int[len-1];
-        System.arraycopy(template[len-1], 0, layout[len-1], 0, pivot);
-
-        layout[len] = new int[template[len-1].length - pivot];
-        System.arraycopy(template[len-1], pivot, layout[len], 0, template[len-1].length - pivot);
+        System.arraycopy(template[len-1], 0, layout[len-1], 0, carSize);
+        System.arraycopy(template[len-1], pivot+1, layout[len], 0, cdrSize);
@@ -106 +135 @@
-
+        nodeIds = generateClusterDescriptor(hostNamePairs, originalCluster, ec2RebalancingTestConfig);
@@ -111 +139,0 @@
-        nodeIds = generateClusterDescriptor(hostNamePairs, originalCluster, ec2RebalancingTestConfig);
@@ -113 +140,0 @@
-
@@ -119 +146 @@
-        Thread.sleep(3000);
+        Thread.sleep(15000);
@@ -149,0 +177 @@
+        List<String> newHostnames = toHostNames(newInstances);
@@ -161 +189,9 @@
-        logger.info("Expanded the cluster. New layout: " + nodeIds);
+        deploy(newHostnames, ec2RebalancingTestConfig);
+        startClusterAsync(newHostnames, ec2RebalancingTestConfig, nodeIds);
+
+        if (logger.isInfoEnabled()) {
+            logger.info("Expanded the cluster. New layout: " + nodeIds);
+            logger.info("Sleeping for 10 seconds to let voldemort start");
+        }
+
+        Thread.sleep(10);
@@ -191 +227,32 @@
-        // TODO: implement this
+        // Create SocketStores for each Node first
+        Map<Integer, Store<ByteArray, byte[]>> storeMap = new HashMap<Integer, Store<ByteArray, byte[]>>();
+        for(int nodeId: nodeList) {
+            Node node = cluster.getNodeById(nodeId);
+            storeMap.put(nodeId, ServerTestUtils.getSocketStore(ec2RebalancingTestConfig.testStoreName,
+                                                                node.getHost(),
+                                                                node.getSocketPort(),
+                                                                RequestFormatType.PROTOCOL_BUFFERS));
+        }
+
+        RoutingStrategy routing = new ConsistentRoutingStrategy(cluster.getNodes(), 1);
+        for(Map.Entry<String, String> entry: testEntries.entrySet()) {
+            int masterNode = routing.routeRequest(ByteUtils.getBytes(entry.getKey(), "UTF-8"))
+                                    .get(0)
+                                    .getId();
+            if(nodeList.contains(masterNode)) {
+                try {
+                    ByteArray keyBytes = new ByteArray(ByteUtils.getBytes(entry.getKey(), "UTF-8"));
+                    storeMap.get(masterNode)
+                            .put(keyBytes,
+                                 new Versioned<byte[]>(ByteUtils.getBytes(entry.getValue(), "UTF-8")));
+                } catch(ObsoleteVersionException e) {
+                    System.out.println("Why are we seeing this at all here ?? ");
+                    e.printStackTrace();
+                }
+            }
+        }
+
+        // close all socket stores
+        for(Store store: storeMap.values()) {
+            store.close();
+        }
@@ -198 +265,13 @@
-        // TODO: implement this
+        rebalanceClient.rebalance(currentCluster, targetCluster);
+
+        for(int nodeId: nodeCheckList) {
+            List<Integer> availablePartitions = targetCluster.getNodeById(nodeId).getPartitionIds();
+            List<Integer> unavailablePartitions = getUnavailablePartitions(targetCluster,
+                                                                           availablePartitions);
+
+            checkGetEntries(currentCluster.getNodeById(nodeId),
+                            targetCluster,
+                            unavailablePartitions,
+                            availablePartitions);
+        }
+
@@ -199,0 +279,61 @@
+
+    private void checkGetEntries(Node node,
+                                 Cluster cluster,
+                                 List<Integer> unavailablePartitions,
+                                 List<Integer> availablePartitions) {
+        int matchedEntries = 0;
+        RoutingStrategy routing = new ConsistentRoutingStrategy(cluster.getNodes(), 1);
+
+        SocketStore store = ServerTestUtils.getSocketStore(ec2RebalancingTestConfig.testStoreName,
+                                                           node.getHost(),
+                                                           node.getSocketPort(),
+                                                           RequestFormatType.PROTOCOL_BUFFERS);
+
+        for(Map.Entry<String, String> entry: testEntries.entrySet()) {
+            ByteArray keyBytes = new ByteArray(ByteUtils.getBytes(entry.getKey(), "UTF-8"));
+
+            List<Integer> partitions = routing.getPartitionList(keyBytes.get());
+
+            if(null != unavailablePartitions && unavailablePartitions.containsAll(partitions)) {
+                try {
+                    List<Versioned<byte[]>> value = store.get(keyBytes);
+                    assertEquals("unavailable partitons should return zero size list.",
+                                 0,
+                                 value.size());
+                } catch(InvalidMetadataException e) {
+                    // ignore.
+                }
+            } else if(null != availablePartitions && availablePartitions.containsAll(partitions)) {
+                List<Versioned<byte[]>> values = store.get(keyBytes);
+
+                // expecting exactly one version
+                assertEquals("Expecting exactly one version", 1, values.size());
+                Versioned<byte[]> value = values.get(0);
+                // check version matches (expecting base version for all)
+                assertEquals("Value version should match", new VectorClock(), value.getVersion());
+                // check value matches.
+                assertEquals("Value bytes should match",
+                             entry.getValue(),
+                             ByteUtils.getString(value.getValue(), "UTF-8"));
+                matchedEntries++;
+            } else {
+                // dont care about these
+            }
+        }
+
+        if(null != availablePartitions && availablePartitions.size() > 0)
+            assertNotSame("CheckGetEntries should match some entries.", 0, matchedEntries);
+    }
+
+    private List<Integer> getUnavailablePartitions(Cluster targetCluster,
+                                                   List<Integer> availablePartitions) {
+        List<Integer> unavailablePartitions = new ArrayList<Integer>();
+
+        for(Node node: targetCluster.getNodes()) {
+            unavailablePartitions.addAll(node.getPartitionIds());
+        }
+
+        unavailablePartitions.removeAll(availablePartitions);
+        return unavailablePartitions;
+    }
+
@@ -205,0 +346 @@
+    @Ignore
@@ -218 +359,2 @@
-        private static String testStoreName = "test-replication-memory";
+        private String testStoreName = "test-replication-memory";
+

