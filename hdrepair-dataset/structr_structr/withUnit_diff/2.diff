diff --git a/structr-server/src/main/java/org/structr/server/Structr.java b/structr-server/src/main/java/org/structr/server/Structr.java
index fdcff8e..753824f 100644
--- a/structr-server/src/main/java/org/structr/server/Structr.java
+++ b/structr-server/src/main/java/org/structr/server/Structr.java
@@ -583 +583 @@
-			rewriteFilter.setInitParameter("confPath", "/urlrewrite.xml");
+			rewriteFilter.setInitParameter("confPath", "urlrewrite.xml");
diff --git a/structr-ui/src/test/java/org/structr/web/common/StructrUiTest.java b/structr-ui/src/test/java/org/structr/web/common/StructrUiTest.java
index b5cb71a..7c61a88 100644
--- a/structr-ui/src/test/java/org/structr/web/common/StructrUiTest.java
+++ b/structr-ui/src/test/java/org/structr/web/common/StructrUiTest.java
@@ -181,164 +180,0 @@
-		
-		
-		/*
-		Date now       = new Date();
-		long timestamp = now.getTime();
-		
-		context.put(Services.CONFIGURED_SERVICES, "ModuleService NodeService");
-		context.put(Services.APPLICATION_TITLE, "structr unit test app" + timestamp);
-		context.put(Services.TMP_PATH, "/tmp/");
-		context.put(Services.BASE_PATH, "/tmp/structr-test-" + timestamp);
-		context.put(Services.DATABASE_PATH, "/tmp/structr-test-" + timestamp + "/db");
-		context.put(Services.FILES_PATH, "/tmp/structr-test-" + timestamp + "/files");
-		context.put(Services.TCP_PORT, "13465");
-		context.put(Services.SERVER_IP, "127.0.0.1");
-		context.put(Services.UDP_PORT, "13466");
-		context.put(Services.SUPERUSER_USERNAME, "superadmin");
-		context.put(Services.SUPERUSER_PASSWORD, "sehrgeheim");
-		
-		Services.initialize(context);
-		*/
-//		
-//		String name = "structr-ui-test-" + System.nanoTime();
-//		
-//		// set up base path
-//		basePath = "/tmp/" + name;
-//		
-//		try {
-//			// create test directory
-//			File basePathFile                    = new File(basePath);
-//			
-//			basePathFile.mkdirs();
-//			
-//			
-//			String sourceJarName                 = getClass().getProtectionDomain().getCodeSource().getLocation().toString();
-//			
-//			//checkUrlrewriteConf(basePath);
-//			checkStructrConf(basePath, sourceJarName);
-//			
-//			List<Connector> connectors           = new LinkedList<Connector>();
-//			HandlerCollection handlerCollection  = new HandlerCollection();
-//
-//			server = new Server(httpPort);
-//			
-//			ServletContextHandler servletContext = new ServletContextHandler(server, contextPath, ServletContextHandler.SESSIONS);
-//
-//			// create resource collection from base path & source JAR
-//			servletContext.setBaseResource(new ResourceCollection(Resource.newResource(basePath), JarResource.newJarResource(Resource.newResource(sourceJarName))));
-//			servletContext.setInitParameter("configfile.path", basePath + "/structr.conf");
-//
-//			// configure JSON REST servlet
-//			JsonRestServlet structrRestServlet     = new JsonRestServlet(new UiResourceProvider(), PropertyView.Public, AbstractNode.uuid);
-//			ServletHolder structrRestServletHolder = new ServletHolder(structrRestServlet);
-//			
-//			Map<String, String> servletParams = new LinkedHashMap<String, String>();
-//			servletParams.put("Authenticator", UiAuthenticator.class.getName());
-//
-//			structrRestServletHolder.setInitParameters(servletParams);
-//			structrRestServletHolder.setInitOrder(0);
-//
-//			// add to servlets
-//			Map<String, ServletHolder> servlets = new LinkedHashMap<String, ServletHolder>();
-//			servlets.put(restUrl + "/*", structrRestServletHolder);
-//
-//			// WebSocket Servlet
-//			WebSocketServlet wsServlet = new WebSocketServlet(AbstractNode.uuid);
-//			ServletHolder wsServletHolder = new ServletHolder(wsServlet);
-//			Map<String, String> wsInitParams = new HashMap<String, String>();
-//
-//			wsInitParams.put("Authenticator", "org.structr.web.auth.UiAuthenticator");
-//			wsInitParams.put("IdProperty", "uuid");
-//			wsServletHolder.setInitParameters(wsInitParams);
-//			wsServletHolder.setInitOrder(3);
-//			
-//			// add to servlets
-//			servlets.put(wsUrl + "/*", wsServletHolder);
-//
-//			// HTML Servlet
-//			HtmlServlet htmlServlet = new HtmlServlet();
-//			ServletHolder htmlServletHolder = new ServletHolder(htmlServlet);
-//			Map<String, String> htmlInitParams = new HashMap<String, String>();
-//
-//			htmlInitParams.put("Authenticator", "org.structr.web.auth.HttpAuthenticator");
-//			htmlServletHolder.setInitParameters(htmlInitParams);
-//			htmlServletHolder.setInitOrder(1);
-//
-//			// add to servlets
-//			servlets.put(htmlUrl + "/*", htmlServletHolder);
-//
-//			// add servlet elements
-//			int position = 1;
-//			for (Map.Entry<String, ServletHolder> servlet : servlets.entrySet()) {
-//
-//				String path                 = servlet.getKey();
-//				ServletHolder servletHolder = servlet.getValue();
-//
-//				servletHolder.setInitOrder(position++);
-//
-//				logger.log(Level.INFO, "Adding servlet {0} for {1}", new Object[] { servletHolder, path } );
-//
-//				servletContext.addServlet(servletHolder, path);
-//			}
-//
-//			// Add static resource handler for structr UI's main page
-//			ResourceHandler resourceHandler = new ResourceHandler();
-//			resourceHandler.setDirectoriesListed(true);
-//			resourceHandler.setWelcomeFiles(new String[] { "index.html"});
-//			resourceHandler.setResourceBase("src/main/resources/structr");		
-//			ContextHandler staticResourceHandler = new ContextHandler();
-//			staticResourceHandler.setContextPath("/structr");
-//			staticResourceHandler.setHandler(resourceHandler);
-//
-//			handlerCollection.addHandler(staticResourceHandler);
-//
-//			FilterHolder rewriteFilter = new FilterHolder(UrlRewriteFilter.class);
-//			rewriteFilter.setInitParameter("confPath", "/urlrewrite.xml");
-//			rewriteFilter.setInitParameter("logLevel", "DEBUG");
-//			servletContext.addFilter(rewriteFilter, "/*", EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD));
-//			
-//			handlerCollection.addHandler(servletContext);
-//			
-//			// register structr application context listener
-//			servletContext.addEventListener(new ApplicationContextListener());
-//			//handlerCollection.addHandler(servletContext);
-//
-//			server.setHandler(handlerCollection);
-//
-//			if (host != null && !host.isEmpty() && httpPort > -1) {
-//
-//				SelectChannelConnector httpConnector = new SelectChannelConnector();
-//
-//				httpConnector.setHost(host);
-//				httpConnector.setPort(httpPort);
-//				httpConnector.setMaxIdleTime(30000);
-//				httpConnector.setRequestHeaderSize(8192);
-//
-//				connectors.add(httpConnector);
-//
-//			} else {
-//
-//				logger.log(Level.WARNING, "Unable to configure HTTP port, please make sure that application.host, application.http.port and application.rest.path are set correctly in structr.conf.");
-//			}
-//			
-//			if (!connectors.isEmpty()) {
-//
-//				server.setConnectors(connectors.toArray(new Connector[0]));
-//
-//			} else {
-//
-//				logger.log(Level.SEVERE, "No connectors configured, aborting.");
-//				System.exit(0);
-//			}
-//
-//			server.setGracefulShutdown(1000);
-//			server.setStopAtShutdown(true);
-//
-//			server.start();
-//			
-//			running = server.isRunning();
-//
-//		} catch(Throwable t) {
-//			
-//			t.printStackTrace();
-//		}
-//		
@@ -357 +193 @@
-
+		
diff --git a/structr-ui/src/test/javascript/run_tests.sh b/structr-ui/src/test/javascript/run_tests.sh
index 414550f..f34f87e 100755
--- a/structr-ui/src/test/javascript/run_tests.sh
+++ b/structr-ui/src/test/javascript/run_tests.sh
@@ -8 +7,0 @@
-#chromium-browser failed_login.html &
@@ -12 +10,0 @@
-#chromium-browser successful_login.html &
@@ -16 +13,0 @@
-#chromium-browser create_page.html &
diff --git a/structr-ui/src/test/javascript/setup.js b/structr-ui/src/test/javascript/setup.js
index 7476083..948b3be 100644
--- a/structr-ui/src/test/javascript/setup.js
+++ b/structr-ui/src/test/javascript/setup.js
@@ -108 +108 @@
-exports.animateHtml = function(name, heading, desc) {
+exports.animateHtml = function(testName, heading, desc) {
@@ -118 +118 @@
-    var files = fs.list(exports.docsDir + '/screenshots/' + name + '/');
+    var files = fs.list(exports.docsDir + '/screenshots/' + testName + '/');
@@ -120 +120 @@
-    html += 'function setImg(i) { anim.src = "../screenshots/' + name + '/" + ("000000000" + i).substr(-' + filenameLength + ') + ".' + exports.imageType + '"; }\n'
+    html += 'function setImg(i) { anim.src = "../screenshots/' + testName + '/" + ("000000000" + i).substr(-' + filenameLength + ') + ".' + exports.imageType + '"; }\n'
@@ -126 +126 @@
-    fs.write(exports.docsDir + '/html/' + name + '.html', html);
+    fs.write(exports.docsDir + '/html/' + testName + '.html', html);

