diff --git a/src/org/exist/security/SimpleACLPermission.java b/src/org/exist/security/SimpleACLPermission.java
index 9e59f17..90c5907 100644
--- a/src/org/exist/security/SimpleACLPermission.java
+++ b/src/org/exist/security/SimpleACLPermission.java
@@ -272 +272 @@
-            acl[0] = istream.readInt();
+            acl[i] = istream.readInt();
diff --git a/test/src/org/exist/security/SimpleACLPermissionTest.java b/test/src/org/exist/security/SimpleACLPermissionTest.java
index ccf4d47..ecf2475 100644
--- a/test/src/org/exist/security/SimpleACLPermissionTest.java
+++ b/test/src/org/exist/security/SimpleACLPermissionTest.java
@@ -2,0 +3,4 @@
+import org.exist.storage.io.VariableByteInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import org.exist.storage.io.VariableByteOutputStream;
@@ -8,0 +13 @@
+import org.exist.util.ByteArray;
@@ -47,0 +53 @@
+        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));
@@ -596,0 +603,65 @@
+    
+    @Test
+    public void roundtrip_write_read() throws PermissionDeniedException, IOException {
+        
+        final SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);
+        final Database mockDatabase = EasyMock.createMock(Database.class);
+        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);
+        
+        replay(mockSecurityManager, mockDatabase, mockCurrentSubject);
+        
+        SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager);
+        
+        assertEquals(0, permission.getACECount());
+
+        final int userId1 = 1;
+        final int mode1 = ALL;
+        permission.addUserACE(ACE_ACCESS_TYPE.ALLOWED, userId1, mode1);
+        
+        final int groupId2 = 2;
+        final int mode2 = Permission.READ;
+        permission.addGroupACE(ACE_ACCESS_TYPE.DENIED, groupId2, mode2);
+        
+        final VariableByteOutputStream os = new VariableByteOutputStream();
+        
+        //write the acl out
+        permission.write(os);
+        
+        verify(mockSecurityManager, mockDatabase, mockCurrentSubject);
+        
+        assertEquals(2, permission.getACECount());
+        
+        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission.getACEAccessType(0));
+        assertEquals(userId1, permission.getACEId(0));
+        assertEquals(ACE_TARGET.USER, permission.getACETarget(0));
+        assertEquals(mode1, permission.getACEMode(0));
+        
+        assertEquals(ACE_ACCESS_TYPE.DENIED, permission.getACEAccessType(1));
+        assertEquals(groupId2, permission.getACEId(1));
+        assertEquals(ACE_TARGET.GROUP, permission.getACETarget(1));
+        assertEquals(mode2, permission.getACEMode(1));
+        
+        //get the written acl data
+        ByteArray buf = os.data();
+        byte data[] = new byte[buf.size()];
+        buf.copyTo(data, 0);
+        
+        
+        //create a new permission instance
+        SimpleACLPermission permission2 = new SimpleACLPermission(mockSecurityManager);
+        
+        //read the acl in
+        permission2.read(new VariableByteInputStream(new ByteArrayInputStream(data)));
+        
+        assertEquals(2, permission2.getACECount());
+        
+        assertEquals(ACE_ACCESS_TYPE.ALLOWED, permission2.getACEAccessType(0));
+        assertEquals(userId1, permission2.getACEId(0));
+        assertEquals(ACE_TARGET.USER, permission2.getACETarget(0));
+        assertEquals(mode1, permission2.getACEMode(0));
+        
+        assertEquals(ACE_ACCESS_TYPE.DENIED, permission2.getACEAccessType(1));
+        assertEquals(groupId2, permission2.getACEId(1));
+        assertEquals(ACE_TARGET.GROUP, permission2.getACETarget(1));
+        assertEquals(mode2, permission2.getACEMode(1));
+    }

