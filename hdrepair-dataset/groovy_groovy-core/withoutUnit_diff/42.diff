diff --git a/src/main/org/codehaus/groovy/runtime/memoize/Memoize.java b/src/main/org/codehaus/groovy/runtime/memoize/Memoize.java
index e43fd9a..9c53ed3 100644
--- a/src/main/org/codehaus/groovy/runtime/memoize/Memoize.java
+++ b/src/main/org/codehaus/groovy/runtime/memoize/Memoize.java
@@ -156 +156 @@
-                cache.put(key, new SoftReference(result));
+                cache.put(key, new SoftReference(result, queue));
diff --git a/src/test/org/codehaus/groovy/runtime/memoize/CacheCleanupCollectedSoftReferencesTest.groovy b/src/test/org/codehaus/groovy/runtime/memoize/CacheCleanupCollectedSoftReferencesTest.groovy
new file mode 100644
index 0000000..85e2f3e
--- /dev/null
+++ b/src/test/org/codehaus/groovy/runtime/memoize/CacheCleanupCollectedSoftReferencesTest.groovy
@@ -0,0 +1,84 @@
+package org.codehaus.groovy.runtime.memoize
+
+import java.lang.ref.ReferenceQueue
+import java.lang.ref.SoftReference
+
+/**
+ * @author Rafael Luque
+ */
+public class CacheCleanupCollectedSoftReferencesTest extends GroovyTestCase {   
+
+
+    public void testCollectedCacheValuesAreEnqueued() {
+
+        Closure cl = { 
+            new Integer(it + 1) 
+        }
+
+        UnlimitedConcurrentCache cache = new UnlimitedConcurrentCache()
+        Closure memoizedClosure = Memoize.buildSoftReferenceMemoizeFunction(0, cache, cl)
+
+        assert cache.cache.size() == 0
+        memoizedClosure.call(1)
+        assert cache.cache.size() == 1
+
+        forceSoftReferencesRecollection()
+
+        def softReference = cache.get([1])
+        checkSoftReferenceAreSoftlyReachable(softReference)
+        checkCollectedSoftReferenceAreEnqueued(softReference)
+
+    }
+
+
+    public void testCollectedCacheValuesAreRemovedFromCache() {
+
+        Closure cl = { 
+            new Integer(it + 1) 
+        }
+
+        UnlimitedConcurrentCache cache = new UnlimitedConcurrentCache()
+        Closure memoizedClosure = Memoize.buildSoftReferenceMemoizeFunction(0, cache, cl)
+
+        assert cache.cache.size() == 0
+        memoizedClosure.call(1)
+        assert cache.cache.size() == 1
+
+        forceSoftReferencesRecollection()
+
+        assert cache.cache.size() == 1
+
+        // As there is not a cleanup thread polling the ReferenceQueue, 
+        // a call() invocation is needed to fire the cleaning up of null references.
+        memoizedClosure.call(2)
+
+        assert cache.cache.size() == 1 : 'collected SoftReferences should be removed from cache'
+    }
+
+
+    private void checkSoftReferenceAreSoftlyReachable(softReference) {
+
+        assert softReference.get() == null : 
+            'cache values should be softly reachable and collected before an OOME' 
+
+    }
+
+    private void checkCollectedSoftReferenceAreEnqueued(softReference) {
+
+        assert softReference.enqueued : 'collected cache values should be enqueued'
+
+    }
+
+    private void forceSoftReferencesRecollection() {
+
+        try {
+            int maxMemory = Runtime.getRuntime().maxMemory()
+            Object[] fillingMemory = new Object[maxMemory]
+        } catch (Throwable e) {
+            // Ignore OOME
+        }
+
+    }
+
+
+}

