diff --git a/SingularityService/src/main/java/com/hubspot/singularity/scheduler/SingularityScheduler.java b/SingularityService/src/main/java/com/hubspot/singularity/scheduler/SingularityScheduler.java
index 1c054fe..4450d1f 100644
--- a/SingularityService/src/main/java/com/hubspot/singularity/scheduler/SingularityScheduler.java
+++ b/SingularityService/src/main/java/com/hubspot/singularity/scheduler/SingularityScheduler.java
@@ -334 +334 @@
-    if (!request.isScheduled()) {
+    if (request.isLongRunning()) {
diff --git a/SingularityService/src/test/java/com/hubspot/singularity/scheduler/SingularitySchedulerTest.java b/SingularityService/src/test/java/com/hubspot/singularity/scheduler/SingularitySchedulerTest.java
index 1d5d194..68e993c 100644
--- a/SingularityService/src/test/java/com/hubspot/singularity/scheduler/SingularitySchedulerTest.java
+++ b/SingularityService/src/test/java/com/hubspot/singularity/scheduler/SingularitySchedulerTest.java
@@ -366 +365,0 @@
-    requestId = "oneoffRequest";
@@ -377,0 +377,59 @@
+    requestResource.scheduleImmediately(requestId, user, Collections.<String> emptyList());
+
+    resourceOffers();
+
+    Assert.assertEquals(1, taskManager.getActiveTaskIds().size());
+
+    statusUpdate(taskManager.getActiveTasks().get(0), TaskState.TASK_FINISHED);
+
+    resourceOffers();
+    Assert.assertEquals(0, taskManager.getActiveTaskIds().size());
+    Assert.assertEquals(0, taskManager.getPendingTaskIds().size());
+
+    requestResource.scheduleImmediately(requestId, user, Collections.<String> emptyList());
+
+    resourceOffers();
+
+    Assert.assertEquals(1, taskManager.getActiveTaskIds().size());
+
+    statusUpdate(taskManager.getActiveTasks().get(0), TaskState.TASK_LOST);
+
+    resourceOffers();
+    Assert.assertEquals(0, taskManager.getActiveTaskIds().size());
+    Assert.assertEquals(0, taskManager.getPendingTaskIds().size());
+  }
+
+  @Test
+  public void testOneOffsDontMoveDuringDecomission() {
+    SingularityRequestBuilder bldr = new SingularityRequestBuilder(requestId, RequestType.ON_DEMAND);
+    requestResource.submit(bldr.build(), Optional.<String> absent());
+    deploy("d2");
+
+    requestResource.scheduleImmediately(requestId, user, Collections.<String> emptyList());
+
+    validateTaskDoesntMoveDuringDecommission();
+  }
+
+  private void validateTaskDoesntMoveDuringDecommission() {
+    sms.resourceOffers(driver, Arrays.asList(createOffer(1, 129, "slave1", "host1", Optional.of("rack1"))));
+    sms.resourceOffers(driver, Arrays.asList(createOffer(1, 129, "slave2", "host2", Optional.of("rack1"))));
+
+    Assert.assertEquals(1, taskManager.getActiveTaskIds().size());
+
+    Assert.assertEquals("host1", taskManager.getActiveTaskIds().get(0).getHost());
+
+    Assert.assertEquals(StateChangeResult.SUCCESS, slaveManager.changeState("slave1", MachineState.STARTING_DECOMMISSION, Optional.of("user1")));
+
+    sms.resourceOffers(driver, Arrays.asList(createOffer(1, 129, "slave2", "host2", Optional.of("rack1"))));
+
+    cleaner.drainCleanupQueue();
+
+    sms.resourceOffers(driver, Arrays.asList(createOffer(1, 129, "slave2", "host2", Optional.of("rack1"))));
+
+    cleaner.drainCleanupQueue();
+
+    // task should not move!
+    Assert.assertEquals(1, taskManager.getActiveTaskIds().size());
+    Assert.assertEquals("host1", taskManager.getActiveTaskIds().get(0).getHost());
+    Assert.assertTrue(taskManager.getKilledTaskIdRecords().isEmpty());
+    Assert.assertTrue(taskManager.getCleanupTaskIds().size() == 1);
@@ -399 +457 @@
-    statusUpdate(taskManager.getActiveTasks().get(0), TaskState.TASK_FINISHED);
+    statusUpdate(taskManager.getActiveTasks().get(0), TaskState.TASK_LOST);
@@ -425,0 +484,15 @@
+  public void testRunOnceDontMoveDuringDecomission() {
+    SingularityRequestBuilder bldr = new SingularityRequestBuilder(requestId, RequestType.RUN_ONCE);
+    request = bldr.build();
+    saveRequest(request);
+
+    deployResource.deploy(new SingularityDeployRequest(new SingularityDeployBuilder(requestId, "d1").setCommand(Optional.of("cmd")).build(), Optional.<String> absent(), Optional.<Boolean> absent()));
+
+    scheduler.drainPendingQueue(stateCacheProvider.get());
+
+    deployChecker.checkDeploys();
+
+    validateTaskDoesntMoveDuringDecommission();
+  }
+
+  @Test

