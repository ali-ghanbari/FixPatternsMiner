diff --git a/repository/src/org/pentaho/platform/repository2/unified/jcr/JcrRepositoryFileDao.java b/repository/src/org/pentaho/platform/repository2/unified/jcr/JcrRepositoryFileDao.java
index b7e6201..03377e6 100644
--- a/repository/src/org/pentaho/platform/repository2/unified/jcr/JcrRepositoryFileDao.java
+++ b/repository/src/org/pentaho/platform/repository2/unified/jcr/JcrRepositoryFileDao.java
@@ -260 +260 @@
-        versionMessage, new java.util.Date(), true );
+        versionMessage, file.getCreatedDate() != null ? file.getCreatedDate() : new java.util.Date(), true );
diff --git a/repository/test-src/org/pentaho/platform/repository2/unified/jcr/JcrRepositoryFileDaoTest.java b/repository/test-src/org/pentaho/platform/repository2/unified/jcr/JcrRepositoryFileDaoTest.java
new file mode 100644
index 0000000..509942c
--- /dev/null
+++ b/repository/test-src/org/pentaho/platform/repository2/unified/jcr/JcrRepositoryFileDaoTest.java
@@ -0,0 +1,81 @@
+package org.pentaho.platform.repository2.unified.jcr;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+import java.util.Date;
+import java.util.List;
+
+import org.junit.Test;
+import org.pentaho.platform.api.mt.ITenant;
+import org.pentaho.platform.api.repository2.unified.IRepositoryFileData;
+import org.pentaho.platform.api.repository2.unified.RepositoryFile;
+import org.pentaho.platform.api.repository2.unified.VersionSummary;
+import org.pentaho.platform.api.repository2.unified.data.sample.SampleRepositoryFileData;
+import org.pentaho.platform.repository2.ClientRepositoryPaths;
+import org.pentaho.platform.repository2.unified.DefaultUnifiedRepositoryBase;
+
+public class JcrRepositoryFileDaoTest extends DefaultUnifiedRepositoryBase {
+
+  @Test
+  //Running within defined date
+  public void testUpdateFile1() throws Exception {
+    
+    RepositoryFile newFile = createFile( "JcrRepositoryFileDaoTest1.test" );
+    IRepositoryFileData dataMock = new SampleRepositoryFileData( "", true, 0 );
+
+    Date startDate = new Date();
+    newFile = new RepositoryFile.Builder( newFile ).createdDate( startDate ).build();
+    repo.updateFile( newFile, dataMock, "edition #2" );
+
+    List<VersionSummary> summaries = repo.getVersionSummaries( newFile.getId() );
+    Date lastVersionDate = summaries.get( summaries.size() - 1 ).getDate();
+    assertEquals( "incorrect version date", lastVersionDate, startDate );
+
+  }
+  
+  
+  @Test
+  //Running without defined date
+  public void testUpdateFile2() throws Exception {
+
+    RepositoryFile newFile = createFile( "JcrRepositoryFileDaoTest1.test" );
+    IRepositoryFileData dataMock = new SampleRepositoryFileData( "", true, 0 );
+
+    Date startDate = new Date();
+    newFile = new RepositoryFile.Builder( newFile ).createdDate( null ).build();
+    repo.updateFile( newFile, dataMock, "edition #2" );
+
+    Date finishDate = new Date();
+
+    List<VersionSummary> summaries = repo.getVersionSummaries( newFile.getId() );
+    Date lastVersionDate = summaries.get( summaries.size() - 1 ).getDate();
+    if ( lastVersionDate.before( startDate ) || lastVersionDate.after( finishDate ) ) {
+      fail( "incorrect version date" );
+    }
+
+  }
+
+  private RepositoryFile createFile( String fileName ) throws Exception {
+    loginAsSysTenantAdmin();
+    ITenant tenantAcme =
+        tenantManager.createTenant( systemTenant, TENANT_ID_ACME, tenantAdminRoleName, tenantAuthenticatedRoleName,
+            ANONYMOUS_ROLE_NAME );
+    userRoleDao.createUser( tenantAcme, USERNAME_ADMIN, PASSWORD, "", new String[] { tenantAdminRoleName } );
+
+    login( USERNAME_ADMIN, tenantAcme, new String[] { tenantAdminRoleName, tenantAuthenticatedRoleName } );
+    userRoleDao.createUser( tenantAcme, USERNAME_SUZY, PASSWORD, "", null );
+
+    login( USERNAME_SUZY, tenantAcme, new String[] { tenantAuthenticatedRoleName } );
+
+    RepositoryFile parentFolder = repo.getFile( ClientRepositoryPaths.getUserHomeFolderPath( USERNAME_SUZY ) );
+
+    Date oldDate = new Date();
+    RepositoryFile newFile = createSampleFile( parentFolder.getPath(), fileName, "sdfdf", false, 5, true );
+    newFile = new RepositoryFile.Builder( newFile ).createdDate( oldDate ).build();
+
+    return newFile;
+
+  }
+
+}

