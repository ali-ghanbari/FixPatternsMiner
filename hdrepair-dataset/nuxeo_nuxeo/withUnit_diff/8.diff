diff --git a/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/util/Properties.java b/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/util/Properties.java
index c0254ff..d204433 100644
--- a/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/util/Properties.java
+++ b/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/util/Properties.java
@@ -126 +126 @@
-                line = prevLine + line;
+                line = prevLine + "\n" + line;
diff --git a/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/test/CoreOperationsTest.java b/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/test/CoreOperationsTest.java
index 9135840..7b3b6e5 100644
--- a/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/test/CoreOperationsTest.java
+++ b/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/test/CoreOperationsTest.java
@@ -49 +48,0 @@
-import org.nuxeo.ecm.automation.core.operations.document.Query;
@@ -67 +65,0 @@
-import org.nuxeo.ecm.core.api.DocumentModelList;
diff --git a/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/test/DocumentUpdatePropertiesWithMultilineTest.java b/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/test/DocumentUpdatePropertiesWithMultilineTest.java
new file mode 100644
index 0000000..cf59e95
--- /dev/null
+++ b/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/test/DocumentUpdatePropertiesWithMultilineTest.java
@@ -0,0 +1,128 @@
+package org.nuxeo.ecm.automation.core.test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.nuxeo.ecm.automation.AutomationService;
+import org.nuxeo.ecm.automation.OperationChain;
+import org.nuxeo.ecm.automation.OperationContext;
+import org.nuxeo.ecm.automation.core.operations.FetchContextDocument;
+import org.nuxeo.ecm.automation.core.operations.document.CreateDocument;
+import org.nuxeo.ecm.automation.core.operations.document.GetDocumentParent;
+import org.nuxeo.ecm.automation.core.operations.document.LockDocument;
+import org.nuxeo.ecm.automation.core.operations.document.SaveDocument;
+import org.nuxeo.ecm.automation.core.operations.document.SetDocumentProperty;
+import org.nuxeo.ecm.automation.core.operations.document.UpdateDocument;
+import org.nuxeo.ecm.automation.core.operations.stack.PopDocument;
+import org.nuxeo.ecm.automation.core.operations.stack.PushDocument;
+import org.nuxeo.ecm.automation.core.util.Properties;
+import org.nuxeo.ecm.core.api.CoreSession;
+import org.nuxeo.ecm.core.api.DocumentModel;
+import org.nuxeo.ecm.core.test.CoreFeature;
+import org.nuxeo.ecm.core.test.TransactionalFeature;
+import org.nuxeo.runtime.RuntimeServiceEvent;
+import org.nuxeo.runtime.RuntimeServiceListener;
+import org.nuxeo.runtime.api.Framework;
+import org.nuxeo.runtime.test.runner.Deploy;
+import org.nuxeo.runtime.test.runner.Features;
+import org.nuxeo.runtime.test.runner.FeaturesRunner;
+import org.nuxeo.runtime.test.runner.LocalDeploy;
+import org.nuxeo.runtime.test.runner.SimpleFeature;
+
+import com.google.inject.Inject;
+
+@RunWith(FeaturesRunner.class)
+@Features({ DocumentUpdatePropertiesWithMultilineTest.InitFeature.class,
+        TransactionalFeature.class, CoreFeature.class })
+@Deploy("org.nuxeo.ecm.automation.core")
+public class DocumentUpdatePropertiesWithMultilineTest {
+
+    public static class InitFeature extends SimpleFeature {
+
+        @Override
+        public void initialize(FeaturesRunner runner) {
+            Framework.addListener(new RuntimeServiceListener() {
+
+                @Override
+                public void handleEvent(RuntimeServiceEvent event) {
+                    if (event.id != RuntimeServiceEvent.RUNTIME_ABOUT_TO_START) {
+                        return;
+                    }
+                    Framework.removeListener(this);
+                    event.runtime.getProperties().setProperty(
+                            "nuxeo.automation.properties.multiline.escape",
+                            "true");
+                }
+            });
+        }
+    }
+
+    protected DocumentModel src;
+
+    protected DocumentModel dst;
+
+    @Inject
+    AutomationService service;
+
+    @Inject
+    CoreSession session;
+
+    @Before
+    public void initRepo() throws Exception {
+        session.removeChildren(session.getRootDocument().getRef());
+        session.save();
+
+        src = session.createDocumentModel("/", "src", "Workspace");
+        src.setPropertyValue("dc:title", "Source");
+        src = session.createDocument(src);
+        session.save();
+        src = session.getDocument(src.getRef());
+
+        dst = session.createDocumentModel("/", "dst", "Workspace");
+        dst.setPropertyValue("dc:title", "Destination");
+        dst = session.createDocument(dst);
+        session.save();
+        dst = session.getDocument(dst.getRef());
+    }
+
+    /**
+     * Test if a multiline description is correctly updated
+     */
+    @Test
+    public void testUpdateWithMultilineDescription() throws Exception {
+        OperationContext ctx = new OperationContext(session);
+        ctx.setInput(src);
+
+        OperationChain chain = new OperationChain("testChain");
+        chain.add(FetchContextDocument.ID);
+        chain.add(CreateDocument.ID).set("type", "Note").set("properties",
+                new Properties("dc:title=MyDoc")).set("name", "note");
+        chain.add(PushDocument.ID);
+        chain.add(GetDocumentParent.ID);
+        chain.add(SetDocumentProperty.ID).set("xpath", "dc:description").set(
+                "value", "parentdoc");
+        chain.add(SaveDocument.ID);
+        chain.add(PopDocument.ID);
+        chain.add(UpdateDocument.ID).set(
+                "properties",
+                new Properties("dc:title=MyDoc2\ndc:description="
+                        + "mydesc\notherdesc".replace("\n", "\\\n")));
+        chain.add(LockDocument.ID);
+        chain.add(SaveDocument.ID);
+
+        assertNull(src.getPropertyValue("dc:description"));
+        DocumentModel out = (DocumentModel) service.run(ctx, chain);
+        assertEquals("mydesc\notherdesc",
+                out.getPropertyValue("dc:description"));
+        assertEquals("MyDoc2", out.getPropertyValue("dc:title"));
+        assertTrue(out.isLocked());
+        assertEquals(
+                "parentdoc",
+                session.getDocument(src.getRef()).getPropertyValue(
+                        "dc:description"));
+    }
+}
\ No newline at end of file

