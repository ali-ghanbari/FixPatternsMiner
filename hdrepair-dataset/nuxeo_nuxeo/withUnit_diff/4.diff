diff --git a/nuxeo-automation/nuxeo-automation-io/src/main/java/org/nuxeo/ecm/automation/jaxrs/io/documents/JsonDocumentWriter.java b/nuxeo-automation/nuxeo-automation-io/src/main/java/org/nuxeo/ecm/automation/jaxrs/io/documents/JsonDocumentWriter.java
index 834ef3e..e8661f1 100644
--- a/nuxeo-automation/nuxeo-automation-io/src/main/java/org/nuxeo/ecm/automation/jaxrs/io/documents/JsonDocumentWriter.java
+++ b/nuxeo-automation/nuxeo-automation-io/src/main/java/org/nuxeo/ecm/automation/jaxrs/io/documents/JsonDocumentWriter.java
@@ -333,0 +334 @@
+                jg.writeEndArray();
diff --git a/nuxeo-automation/nuxeo-automation-io/src/test/java/org/nuxeo/ecm/automation/test/service/RestServiceTest.java b/nuxeo-automation/nuxeo-automation-io/src/test/java/org/nuxeo/ecm/automation/test/service/RestServiceTest.java
index b5b62cc..7ddf336 100644
--- a/nuxeo-automation/nuxeo-automation-io/src/test/java/org/nuxeo/ecm/automation/test/service/RestServiceTest.java
+++ b/nuxeo-automation/nuxeo-automation-io/src/test/java/org/nuxeo/ecm/automation/test/service/RestServiceTest.java
@@ -19,0 +20 @@
+
@@ -28,0 +30 @@
+import org.nuxeo.common.utils.FileUtils;
@@ -33 +34,0 @@
-
@@ -48,0 +50 @@
+import org.skyscreamer.jsonassert.JSONAssert;
@@ -50,0 +53 @@
+
@@ -51,0 +55 @@
+import java.io.File;
@@ -75,0 +80,2 @@
+    private static final String[] ALL_SCHEMAS = new String[] { "*" };
+
@@ -90 +95,0 @@
-        doc = session.saveDocument(doc);
@@ -92,0 +98 @@
+            doc.setPropertyValue("dc:title", "Note " + i);
@@ -94 +99,0 @@
-            doc = session.saveDocument(doc);
@@ -96,0 +102,27 @@
+    }
+
+    protected void assertEqualsJson(String expected, String actual) throws Exception {
+        JSONAssert.assertEquals(expected, actual, true);
+    }
+
+    @Test
+    public void testDocumentJson() throws Exception {
+        DocumentModel doc = session.getDocument(new PathRef("/folder1/doc0"));
+        String json = getFullDocumentAsJson(doc, null);
+        json = json.replace(doc.getId(), "the-doc-id");
+        json = json.replace(doc.getParentRef().toString(), "the-parent-id");
+        File file = FileUtils.getResourceFileFromContext("test-expected-document1.json");
+        String expected = FileUtils.readFile(file);
+        assertEqualsJson(expected, json);
+    }
+
+    @Test
+    public void testDocumentJsonWithNullArray() throws Exception {
+        DocumentModel doc = session.getDocument(new PathRef("/folder1/doc0"));
+        doc.setPropertyValue("dc:subjects", null); // set array to null
+        String json = getFullDocumentAsJson(doc, null);
+        json = json.replace(doc.getId(), "the-doc-id");
+        json = json.replace(doc.getParentRef().toString(), "the-parent-id");
+        File file = FileUtils.getResourceFileFromContext("test-expected-document1.json");
+        String expected = FileUtils.readFile(file);
+        assertEqualsJson(expected, json);
@@ -244,7 +275,0 @@
-    /**
-     * @param out
-     * @return
-     * @throws IOException
-     * @throws JsonProcessingException
-     *
-     */
@@ -256,0 +282,15 @@
+     * Returns the JSON representation of the document with all schemas. A
+     * category may be passed to have impact on the Content Enrichers.
+     */
+    protected String getFullDocumentAsJson(DocumentModel doc, String category)
+            throws Exception {
+        ByteArrayOutputStream out = new ByteArrayOutputStream();
+        JsonGenerator jg = getJsonGenerator(out);
+        // When it is written as Json with appropriate headers
+        JsonDocumentWriter.writeDocument(jg, doc, ALL_SCHEMAS, null,
+                getFakeHeaders(category), null);
+        jg.flush();
+        return out.toString();
+    }
+
+    /**
@@ -259,6 +298,0 @@
-     *
-     * @param doc
-     * @param category
-     * @return
-     * @throws Exception
-     *
@@ -280,6 +313,0 @@
-     *
-     * @param doc
-     * @param category
-     * @return
-     * @throws Exception
-     *
@@ -300,5 +327,0 @@
-     *
-     * @param doc
-     * @return
-     * @throws Exception
-     *
diff --git a/nuxeo-automation/nuxeo-automation-io/src/test/resources/test-expected-document1.json b/nuxeo-automation/nuxeo-automation-io/src/test/resources/test-expected-document1.json
new file mode 100644
index 0000000..00a54b9
--- /dev/null
+++ b/nuxeo-automation/nuxeo-automation-io/src/test/resources/test-expected-document1.json
@@ -0,0 +1,50 @@
+{
+   "entity-type" : "document",
+   "repository" : "test",
+   "uid" : "the-doc-id",
+   "path" : "/folder1/doc0",
+   "type" : "Note",
+   "changeToken" : null,
+   "contextParameters" : {},
+   "isCheckedOut" : true,
+   "versionLabel" : "0.0",
+   "parentRef" : "the-parent-id",
+   "state" : "project",
+   "title" : "Note 0",
+   "facets" : [
+      "Commentable",
+      "Versionable",
+      "Publishable",
+      "HasRelatedText"
+   ],
+   "properties" : {
+      "common:icon" : null,
+      "common:icon-expanded" : null,
+      "common:size" : null,
+      "dc:contributors" : [],
+      "dc:coverage" : null,
+      "dc:created" : null,
+      "dc:creator" : null,
+      "dc:description" : null,
+      "dc:expired" : null,
+      "dc:format" : null,
+      "dc:issued" : null,
+      "dc:language" : null,
+      "dc:lastContributor" : null,
+      "dc:modified" : null,
+      "dc:nature" : null,
+      "dc:publisher" : null,
+      "dc:rights" : null,
+      "dc:source" : null,
+      "dc:subjects" : [],
+      "dc:title" : "Note 0",
+      "dc:valid" : null,
+      "files:files" : [],
+      "note:mime_type" : null,
+      "note:note" : null,
+      "relatedtext:relatedtextresources" : [],
+      "uid:major_version" : 0,
+      "uid:minor_version" : 0,
+      "uid:uid" : null
+   }
+}

