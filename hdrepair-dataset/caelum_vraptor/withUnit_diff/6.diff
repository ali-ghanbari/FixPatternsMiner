diff --git a/vraptor-core/src/main/java/br/com/caelum/vraptor/http/route/DefaultParametersControl.java b/vraptor-core/src/main/java/br/com/caelum/vraptor/http/route/DefaultParametersControl.java
index 92f3a23..3e4d169 100644
--- a/vraptor-core/src/main/java/br/com/caelum/vraptor/http/route/DefaultParametersControl.java
+++ b/vraptor-core/src/main/java/br/com/caelum/vraptor/http/route/DefaultParametersControl.java
@@ -79 +79 @@
-			base = base.replace("{" + key + "}", result == null ? "" : result.toString());
+			base = base.replaceAll("\\{" + key + "\\*?\\}", result == null ? "" : result.toString());
diff --git a/vraptor-core/src/test/java/br/com/caelum/vraptor/http/route/DefaultParametersControlTest.java b/vraptor-core/src/test/java/br/com/caelum/vraptor/http/route/DefaultParametersControlTest.java
index e720365..0082555 100644
--- a/vraptor-core/src/test/java/br/com/caelum/vraptor/http/route/DefaultParametersControlTest.java
+++ b/vraptor-core/src/test/java/br/com/caelum/vraptor/http/route/DefaultParametersControlTest.java
@@ -5,11 +5,11 @@
- * Licensed under the Apache License, Version 2.0 (the "License"); 
- * you may not use this file except in compliance with the License. 
- * You may obtain a copy of the License at 
- * 
- * 	http://www.apache.org/licenses/LICENSE-2.0 
- * 
- * Unless required by applicable law or agreed to in writing, software 
- * distributed under the License is distributed on an "AS IS" BASIS, 
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
- * See the License for the specific language governing permissions and 
- * limitations under the License. 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * 	http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
@@ -32,0 +33,4 @@
+import br.com.caelum.vraptor.http.ParanamerNameProvider;
+import br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;
+import br.com.caelum.vraptor.resource.DefaultResourceMethod;
+import br.com.caelum.vraptor.resource.ResourceMethod;
@@ -186,0 +191,25 @@
+	static class PathToFile {
+
+		public void withPath(String pathToFile) {
+
+		}
+	}
+	@Test
+	public void fillURLWithGreedyParameters() throws SecurityException, NoSuchMethodException {
+		DefaultParametersControl control = new DefaultParametersControl("/clients/{pathToFile*}");
+		ResourceMethod method = DefaultResourceMethod.instanceFor(PathToFile.class, PathToFile.class.getDeclaredMethods()[0]);
+		Object object = new AsmBasedTypeCreator(new ParanamerNameProvider()).instanceWithParameters(method, "my/path/to/file");
+		String filled = control.fillUri(object);
+		assertThat(filled, is("/clients/my/path/to/file"));
+		mockery.assertIsSatisfied();
+	}
+	@Test
+	public void fillURLWithoutGreedyParameters() throws SecurityException, NoSuchMethodException {
+		DefaultParametersControl control = new DefaultParametersControl("/clients/{pathToFile}");
+		ResourceMethod method = DefaultResourceMethod.instanceFor(PathToFile.class, PathToFile.class.getDeclaredMethods()[0]);
+		Object object = new AsmBasedTypeCreator(new ParanamerNameProvider()).instanceWithParameters(method, "my/path/to/file");
+		String filled = control.fillUri(object);
+		assertThat(filled, is("/clients/my/path/to/file"));
+		mockery.assertIsSatisfied();
+	}
+

