diff --git a/vraptor-core/src/main/java/br/com/caelum/vraptor/ioc/pico/ComponentRegistrar.java b/vraptor-core/src/main/java/br/com/caelum/vraptor/ioc/pico/ComponentRegistrar.java
index b3989d0..db15ebd 100644
--- a/vraptor-core/src/main/java/br/com/caelum/vraptor/ioc/pico/ComponentRegistrar.java
+++ b/vraptor-core/src/main/java/br/com/caelum/vraptor/ioc/pico/ComponentRegistrar.java
@@ -32,0 +33 @@
+import br.com.caelum.vraptor.ioc.Component;
diff --git a/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ComponentRegistrarTest.java b/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ComponentRegistrarTest.java
index 4fa2cb6..b53aa69 100644
--- a/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ComponentRegistrarTest.java
+++ b/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ComponentRegistrarTest.java
@@ -3,9 +3,4 @@
-import java.io.Serializable;
-import java.util.AbstractCollection;
-import java.util.AbstractList;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.RandomAccess;
-import java.util.Arrays;
-
+import br.com.caelum.vraptor.ComponentRegistry;
+import br.com.caelum.vraptor.Resource;
+import br.com.caelum.vraptor.ioc.Component;
+import br.com.caelum.vraptor.ioc.Stereotype;
@@ -17,4 +12,8 @@
-import br.com.caelum.vraptor.ComponentRegistry;
-import br.com.caelum.vraptor.Resource;
-import br.com.caelum.vraptor.ioc.Component;
-import br.com.caelum.vraptor.ioc.Stereotype;
+import java.io.Serializable;
+import java.util.AbstractCollection;
+import java.util.AbstractList;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.RandomAccess;
@@ -56 +55 @@
-        mockery.checking(new Expectations(){{
+        mockery.checking(new Expectations() {{
@@ -69 +68 @@
-        mockery.checking(new Expectations(){{
+        mockery.checking(new Expectations() {{
@@ -76,2 +75,2 @@
-            one(registry).register(Collection.class, ArrayListSubclass.class);
-            one(registry).register(Iterable.class, ArrayListSubclass.class);
+            atLeast(1).of(registry).register(Collection.class, ArrayListSubclass.class);
+            atLeast(1).of(registry).register(Iterable.class, ArrayListSubclass.class);
@@ -84 +82,0 @@
-            one(registry).register(Collection.class, ArrayListSubclass.class);
@@ -100 +98,2 @@
-		public void run() {	}
+        public void run() {
+        }
@@ -102 +101 @@
-    
+
@@ -104 +103 @@
-	@Component
+    @Component
@@ -106 +105 @@
-    	
+
diff --git a/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ConverterAcceptorTest.java b/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ConverterAcceptorTest.java
deleted file mode 100644
index 6e6743b..0000000
--- a/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ConverterAcceptorTest.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package br.com.caelum.vraptor.ioc.pico;
-
-import java.util.ResourceBundle;
-
-import org.jmock.Expectations;
-import org.jmock.Mockery;
-import org.junit.Before;
-import org.junit.Test;
-
-import br.com.caelum.vraptor.Convert;
-import br.com.caelum.vraptor.Converter;
-import br.com.caelum.vraptor.VRaptorException;
-import br.com.caelum.vraptor.core.Converters;
-
-public class ConverterAcceptorTest {
-
-	private Mockery mockery;
-	private Acceptor acceptor;
-	private Converters converters;
-
-	@Before
-	public void setUp() {
-		this.mockery = new Mockery();
-		this.converters = mockery.mock(Converters.class);
-		this.acceptor = new ConverterAcceptor(converters);
-	}
-
-	@Test(expected = VRaptorException.class)
-	public void shouldNotAcceptAConverterThatDoesNotImplementTheCorrectInterface() throws Exception {
-
-		mockery.checking(new Expectations() {
-			{
-				never(converters).register(with(any(Class.class)));
-			}
-		});
-		this.acceptor.analyze(ConverterNotOk.class);
-		this.mockery.assertIsSatisfied();
-	}
-
-	@Test
-	public void shouldNotAcceptAConverterThatIsNotAnnotated() throws Exception {
-		mockery.checking(new Expectations() {
-			{
-				never(converters).register(ConverterNotAnnotated.class);
-			}
-		});
-		this.acceptor.analyze(ConverterNotAnnotated.class);
-		this.mockery.assertIsSatisfied();
-	}
-
-	@Test
-	public void shouldAcceptAConverterThatIsAnnotatedAndImplementsCorrectInterface() throws Exception {
-		mockery.checking(new Expectations() {
-			{
-				one(converters).register(ConverterOk.class);
-			}
-		});
-		this.acceptor.analyze(ConverterOk.class);
-		this.mockery.assertIsSatisfied();
-	}
-
-	@Convert(String.class)
-	class ConverterNotOk {
-
-	}
-
-	@Convert(String.class)
-	class ConverterOk implements Converter<String> {
-
-		public String convert(String value, Class<? extends String> type, ResourceBundle bundle) {
-			return null;
-		}
-
-	}
-
-	class ConverterNotAnnotated implements Converter<String> {
-
-		public String convert(String value, Class<? extends String> type, ResourceBundle bundle) {
-			return null;
-		}
-	}
-
-}
diff --git a/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ConverterRegistrarTest.java b/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ConverterRegistrarTest.java
new file mode 100644
index 0000000..4823843
--- /dev/null
+++ b/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ConverterRegistrarTest.java
@@ -0,0 +1,79 @@
+package br.com.caelum.vraptor.ioc.pico;
+
+import br.com.caelum.vraptor.Convert;
+import br.com.caelum.vraptor.Converter;
+import br.com.caelum.vraptor.VRaptorException;
+import br.com.caelum.vraptor.core.Converters;
+import org.jmock.Expectations;
+import org.jmock.Mockery;
+import org.junit.Before;
+import org.junit.Test;
+
+import static java.util.Arrays.asList;
+import java.util.ResourceBundle;
+
+/**
+ * @author Fabio Kung
+ */
+public class ConverterRegistrarTest {
+
+    private Mockery mockery;
+    private Registrar registrar;
+    private Converters converters;
+    private Scanner scanner;
+
+    @Before
+    public void setUp() {
+        this.mockery = new Mockery();
+        this.converters = mockery.mock(Converters.class);
+        this.scanner = mockery.mock(Scanner.class);
+        this.registrar = new ConverterRegistrar(converters);
+    }
+
+    @Test(expected = VRaptorException.class)
+    public void shouldNotAcceptAConverterThatDoesNotImplementTheCorrectInterface() throws Exception {
+        mockery.checking(new Expectations() {
+            {
+                one(scanner).getTypesWithAnnotation(Convert.class);
+                will(returnValue(asList(ConverterNotOk.class)));
+            }
+        });
+        registrar.registerFrom(scanner);
+        mockery.assertIsSatisfied();
+    }
+
+    @Test
+    public void shouldAcceptAConverterThatIsAnnotatedAndImplementsCorrectInterface() throws Exception {
+        mockery.checking(new Expectations() {
+            {
+                one(scanner).getTypesWithAnnotation(Convert.class);
+                will(returnValue(asList(ConverterOk.class)));
+                one(converters).register(ConverterOk.class);
+            }
+        });
+        this.registrar.registerFrom(scanner);
+        this.mockery.assertIsSatisfied();
+    }
+
+    @Convert(String.class)
+    class ConverterNotOk {
+
+    }
+
+    @Convert(String.class)
+    class ConverterOk implements Converter<String> {
+
+        public String convert(String value, Class<? extends String> type, ResourceBundle bundle) {
+            return null;
+        }
+
+    }
+
+    class ConverterNotAnnotated implements Converter<String> {
+
+        public String convert(String value, Class<? extends String> type, ResourceBundle bundle) {
+            return null;
+        }
+    }
+
+}
diff --git a/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/InterceptorAcceptorTest.java b/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/InterceptorAcceptorTest.java
deleted file mode 100644
index 844f048..0000000
--- a/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/InterceptorAcceptorTest.java
+++ /dev/null
@@ -1,109 +0,0 @@
-package br.com.caelum.vraptor.ioc.pico;
-
-import java.util.Arrays;
-import java.util.List;
-
-import org.jmock.Expectations;
-import org.jmock.Mockery;
-import org.junit.Before;
-import org.junit.Test;
-
-import br.com.caelum.vraptor.InterceptionException;
-import br.com.caelum.vraptor.Interceptor;
-import br.com.caelum.vraptor.Intercepts;
-import br.com.caelum.vraptor.core.InterceptorStack;
-import br.com.caelum.vraptor.interceptor.InterceptorRegistry;
-import br.com.caelum.vraptor.interceptor.InterceptorSequence;
-import br.com.caelum.vraptor.resource.ResourceMethod;
-
-public class InterceptorAcceptorTest {
-
-	private InterceptorAcceptor acceptor;
-	private Mockery mockery;
-	private InterceptorRegistry registry;
-
-	@Before
-	public void setup() {
-		this.mockery = new Mockery();
-		this.registry = mockery.mock(InterceptorRegistry.class);
-		this.acceptor = new InterceptorAcceptor(registry);
-	}
-
-	@Intercepts
-	class IgnorableIntercepts {
-	}
-
-	@Test
-	public void shouldIgnoreInterceptsWithAFailingType() {
-		mockery.checking(new Expectations() {
-			{
-				never(registry).register(with(any(List.class)));
-			}
-		});
-		acceptor.analyze(IgnorableIntercepts.class);
-		mockery.assertIsSatisfied();
-	}
-
-	@Intercepts
-	public static class MySequence implements InterceptorSequence {
-		@SuppressWarnings("unchecked")
-		public Class<? extends Interceptor>[] getSequence() {
-			return new Class[] { InterceptorAnnotated.class, InterceptorNotAnnotated.class };
-		}
-	}
-
-	@Test
-	public void shouldAddAllInterceptorsFromASequenceInItsOrder() {
-
-		mockery.checking(new Expectations() {
-			{
-				one(registry).register(Arrays.asList(InterceptorAnnotated.class, InterceptorNotAnnotated.class));
-			}
-		});
-		acceptor.analyze(MySequence.class);
-		mockery.assertIsSatisfied();
-	}
-
-	@Test
-	public void shouldAcceptInterceptorsAnnotatedWithInterceptorAnnotation() {
-		mockery.checking(new Expectations() {
-			{
-				one(registry).register(Arrays.<Class<? extends Interceptor>> asList(InterceptorAnnotated.class));
-			}
-		});
-		acceptor.analyze(InterceptorAnnotated.class);
-		mockery.assertIsSatisfied();
-	}
-
-	@Test
-	public void ignoresNonAnnotatedInterceptors() {
-		mockery.checking(new Expectations() {
-			{
-				never(registry).register(Arrays.<Class<? extends Interceptor>> asList(InterceptorNotAnnotated.class));
-			}
-		});
-		acceptor.analyze(InterceptorNotAnnotated.class);
-		mockery.assertIsSatisfied();
-	}
-
-	@Intercepts
-	class InterceptorAnnotated implements Interceptor {
-		public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)
-				throws InterceptionException {
-		}
-
-		public boolean accepts(ResourceMethod method) {
-			return true;
-		}
-	}
-
-	class InterceptorNotAnnotated implements Interceptor {
-		public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)
-				throws InterceptionException {
-		}
-
-		public boolean accepts(ResourceMethod method) {
-			return true;
-		}
-	}
-}
diff --git a/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/InterceptorRegistrarTest.java b/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/InterceptorRegistrarTest.java
new file mode 100644
index 0000000..65379ab
--- /dev/null
+++ b/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/InterceptorRegistrarTest.java
@@ -0,0 +1,108 @@
+package br.com.caelum.vraptor.ioc.pico;
+
+import br.com.caelum.vraptor.InterceptionException;
+import br.com.caelum.vraptor.Intercepts;
+import br.com.caelum.vraptor.VRaptorException;
+import br.com.caelum.vraptor.core.InterceptorStack;
+import br.com.caelum.vraptor.interceptor.Interceptor;
+import br.com.caelum.vraptor.interceptor.InterceptorRegistry;
+import br.com.caelum.vraptor.interceptor.InterceptorSequence;
+import br.com.caelum.vraptor.resource.ResourceMethod;
+import org.jmock.Expectations;
+import org.jmock.Mockery;
+import org.junit.Before;
+import org.junit.Test;
+
+import static java.util.Arrays.asList;
+
+/**
+ * @author Fabio Kung
+ */
+public class InterceptorRegistrarTest {
+
+    private Mockery mockery;
+    private InterceptorRegistrar registrar;
+    private InterceptorRegistry registry;
+    private Scanner scanner;
+
+    @Before
+    public void setup() {
+        mockery = new Mockery();
+        registry = mockery.mock(InterceptorRegistry.class);
+        scanner = mockery.mock(Scanner.class);
+        registrar = new InterceptorRegistrar(registry);
+    }
+
+    @Test(expected = VRaptorException.class)
+    public void shouldFailIfClassAnnotatedWithInterceptsDoesntImplementInterceptorOrInterceptorSequence() {
+        mockery.checking(new Expectations() {
+            {
+                one(scanner).getTypesWithAnnotation(Intercepts.class);
+                will(returnValue(asList(WrongInterceptor.class)));
+            }
+        });
+        registrar.registerFrom(scanner);
+        mockery.assertIsSatisfied();
+    }
+
+    @Test
+    public void shouldAddAllInterceptorsFromASequenceInItsOrder() {
+
+        mockery.checking(new Expectations() {
+            {
+                one(scanner).getTypesWithAnnotation(Intercepts.class);
+                will(returnValue(asList(MySequence.class)));
+                one(registry).register(AnnotatedInterceptor.class, NotAnnotatedInterceptor.class);
+            }
+        });
+        registrar.registerFrom(scanner);
+        mockery.assertIsSatisfied();
+    }
+
+    @Test
+    public void shouldAcceptInterceptorsAnnotatedWithInterceptorAnnotation() {
+        mockery.checking(new Expectations() {
+            {
+                one(scanner).getTypesWithAnnotation(Intercepts.class);
+                will(returnValue(asList(AnnotatedInterceptor.class)));
+                one(registry).register(AnnotatedInterceptor.class);
+            }
+        });
+        registrar.registerFrom(scanner);
+        mockery.assertIsSatisfied();
+    }
+
+    @Intercepts
+    public static class WrongInterceptor {
+    }
+
+    @Intercepts
+    public static class MySequence implements InterceptorSequence {
+
+        @SuppressWarnings("unchecked")
+        public Class<? extends Interceptor>[] getSequence() {
+            return new Class[]{AnnotatedInterceptor.class, NotAnnotatedInterceptor.class};
+        }
+    }
+
+    @Intercepts
+    public static class AnnotatedInterceptor implements Interceptor {
+        public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)
+                throws InterceptionException {
+        }
+
+        public boolean accepts(ResourceMethod method) {
+            return true;
+        }
+    }
+
+    public static class NotAnnotatedInterceptor implements Interceptor {
+        public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)
+                throws InterceptionException {
+        }
+
+        public boolean accepts(ResourceMethod method) {
+            return true;
+        }
+    }
+}
diff --git a/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ResourceAcceptorTest.java b/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ResourceAcceptorTest.java
deleted file mode 100644
index 29d82dc..0000000
--- a/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ResourceAcceptorTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package br.com.caelum.vraptor.ioc.pico;
-
-import org.jmock.Expectations;
-import org.jmock.Mockery;
-import org.junit.Before;
-import org.junit.Test;
-
-import br.com.caelum.vraptor.Resource;
-import br.com.caelum.vraptor.http.route.Router;
-import br.com.caelum.vraptor.ioc.Component;
-import br.com.caelum.vraptor.resource.DefaultResourceClass;
-
-public class ResourceAcceptorTest {
-
-    private ResourceAcceptor acceptor;
-    private Mockery mockery;
-    private Router registry;
-
-    @Before
-    public void setup() {
-        mockery = new Mockery();
-        registry = mockery.mock(Router.class);
-        this.acceptor = new ResourceAcceptor(registry);
-    }
-
-    @Test
-    public void shouldAcceptResourcesAnnotatedWithResourceAnnotation() {
-        mockery.checking(new Expectations() {
-            {
-                one(registry).register(new DefaultResourceClass(ResourceAnnotated.class));
-            }
-        });
-        acceptor.analyze(ResourceAnnotated.class);
-        mockery.assertIsSatisfied();
-    }
-
-    @Test
-    public void ignoresNonAnnotatedResources() {
-        acceptor.analyze(ResourceNotAnnotated.class);
-        mockery.assertIsSatisfied();
-    }
-
-    @Resource
-    class ResourceAnnotated {
-    }
-
-    @Component
-    class ResourceNotAnnotated {
-    }
-
-}
diff --git a/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ResourceRegistrarTest.java b/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ResourceRegistrarTest.java
new file mode 100644
index 0000000..a138273
--- /dev/null
+++ b/vraptor-core/src/test/java/br/com/caelum/vraptor/ioc/pico/ResourceRegistrarTest.java
@@ -0,0 +1,49 @@
+package br.com.caelum.vraptor.ioc.pico;
+
+import org.jmock.Expectations;
+import org.jmock.Mockery;
+import org.junit.Before;
+import org.junit.Test;
+
+import br.com.caelum.vraptor.Resource;
+import br.com.caelum.vraptor.http.route.Router;
+import br.com.caelum.vraptor.ioc.Component;
+import br.com.caelum.vraptor.resource.DefaultResourceClass;
+
+import java.util.Arrays;
+
+/**
+ * @author Fabio Kung
+ */
+public class ResourceRegistrarTest {
+
+    private Mockery mockery;
+    private ResourceRegistrar registrar;
+    private Router registry;
+    private Scanner scanner;
+
+    @Before
+    public void setup() {
+        mockery = new Mockery();
+        registry = mockery.mock(Router.class);
+        scanner = mockery.mock(Scanner.class);
+        this.registrar = new ResourceRegistrar(registry);
+    }
+
+    @Test
+    public void shouldRegisterResourcesAnnotatedWithResource() {
+        mockery.checking(new Expectations() {
+            {
+                one(scanner).getTypesWithAnnotation(Resource.class);
+                will(returnValue(Arrays.asList(ResourceAnnotated.class)));
+                one(registry).register(new DefaultResourceClass(ResourceAnnotated.class));
+            }
+        });
+        registrar.registerFrom(scanner);
+        mockery.assertIsSatisfied();
+    }
+
+    @Resource
+    class ResourceAnnotated {
+    }
+}

