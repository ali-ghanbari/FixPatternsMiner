diff --git a/src/test/java/org/buddycloud/channelserver/db/mock/Mock.java b/src/test/java/org/buddycloud/channelserver/db/mock/Mock.java
index b0cd2fe..9b8ba65 100644
--- a/src/test/java/org/buddycloud/channelserver/db/mock/Mock.java
+++ b/src/test/java/org/buddycloud/channelserver/db/mock/Mock.java
@@ -203 +203 @@
-		return false;
+		return true;
diff --git a/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/AffiliationEventTest.java b/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/AffiliationEventTest.java
index 8743347..afea5dd 100644
--- a/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/AffiliationEventTest.java
+++ b/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/AffiliationEventTest.java
@@ -41 +41,2 @@
-	private Mock dataStore = new Mock();
+
+	private Mock channelManagerMock;
@@ -45,0 +47,4 @@
+		channelManagerMock = Mockito.mock(Mock.class);
+		Mockito.when(channelManagerMock.isLocalNode(Mockito.anyString()))
+				.thenReturn(true);
+		
@@ -47 +52 @@
-		event = new AffiliationEvent(queue, dataStore);
+		event = new AffiliationEvent(queue, channelManagerMock);
@@ -132 +137 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
+
@@ -149 +154 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
+
@@ -164 +169 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
+
@@ -186 +190,0 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
@@ -207 +210,0 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
@@ -237 +239,0 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
@@ -252 +254 @@
-		
+
@@ -268 +270 @@
-		Mock channelManagerMock = Mockito.mock(Mock.class);
+
@@ -270,2 +272,3 @@
-		Mockito.when(channelManagerMock.getUserAffiliation(Mockito.anyString(), Mockito.any(JID.class)))
-				.thenReturn(affiliationActor);
+		Mockito.when(
+				channelManagerMock.getUserAffiliation(Mockito.anyString(),
+						Mockito.any(JID.class))).thenReturn(affiliationActor);
@@ -276 +279,3 @@
-		Mockito.verify(channelManagerMock).setUserAffiliation(Mockito.anyString(), Mockito.any(JID.class), Mockito.eq(Affiliations.none));
+		Mockito.verify(channelManagerMock).setUserAffiliation(
+				Mockito.anyString(), Mockito.any(JID.class),
+				Mockito.eq(Affiliations.none));
@@ -291 +296 @@
-		Mock channelManagerMock = Mockito.mock(Mock.class);
+
@@ -293,2 +298,3 @@
-		Mockito.when(channelManagerMock.getUserAffiliation(Mockito.anyString(), Mockito.any(JID.class)))
-				.thenReturn(affiliationMock);
+		Mockito.when(
+				channelManagerMock.getUserAffiliation(Mockito.anyString(),
+						Mockito.any(JID.class))).thenReturn(affiliationMock);
@@ -316 +321,0 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
@@ -318,2 +323,3 @@
-		Mockito.when(channelManagerMock.getUserAffiliation(Mockito.anyString(), Mockito.any(JID.class)))
-				.thenReturn(affiliationMock);
+		Mockito.when(
+				channelManagerMock.getUserAffiliation(Mockito.anyString(),
+						Mockito.any(JID.class))).thenReturn(affiliationMock);
@@ -327,2 +333 @@
-		Mockito.doReturn(subscribers)
-				.when(channelManagerMock)
+		Mockito.doReturn(subscribers).when(channelManagerMock)
@@ -330 +335 @@
-		
+
diff --git a/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/ItemDeleteTest.java b/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/ItemDeleteTest.java
index 5d3c574..df73b68 100644
--- a/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/ItemDeleteTest.java
+++ b/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/ItemDeleteTest.java
@@ -47 +47,3 @@
-
+		Mockito.when(channelManagerMock.isLocalNode(Mockito.anyString()))
+		    .thenReturn(true);
+		
@@ -103,17 +104,0 @@
-	}
-
-	@Test
-	public void testNonLocalNodeReturnsError() throws Exception {
-		String node = "/user/capulet@marlowe.lit/posts";
-		element.addAttribute("node", node);
-		Mockito.when(channelManagerMock.isLocalNode(node)).thenReturn(false);
-		itemDelete.setChannelManager(channelManagerMock);
-
-		itemDelete.process(element, jid, request, null);
-
-		Packet response = queue.poll(100, TimeUnit.MILLISECONDS);
-
-		PacketError error = response.getError();
-		assertNotNull(error);
-		assertEquals(PacketError.Type.cancel, error.getType());
-		assertEquals(PacketError.Condition.item_not_found, error.getCondition());
@@ -238,0 +224,3 @@
+
+		String payload = readStanzaAsString("/iq/pubsub/item/item.payload");
+
@@ -240 +228 @@
-				payload);
+				payload.replace("juliet@shakespeare.lit", "romeo@shakespeare.lit"));
@@ -259 +246,0 @@
-	@Ignore("Mockito not working as expected")
@@ -266,3 +253,2 @@
-				payload.replaceAll("romeo@shakespeare.lit",
-						"juliet@shakespeare.lit"));
-		Mockito.when(channelManagerMock.isLocalNode(node)).thenReturn(true);
+				payload);
+
@@ -275 +260,0 @@
-		itemDelete.setChannelManager(channelManagerMock);
diff --git a/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/NodeConfigureTest.java b/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/NodeConfigureTest.java
index c6b4e7a..5b1172d 100644
--- a/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/NodeConfigureTest.java
+++ b/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/NodeConfigureTest.java
@@ -34 +34 @@
-	private Mock channelManager;
+	private ChannelManager channelManagerMock;
@@ -42 +42,3 @@
-		channelManager = new Mock();
+		channelManagerMock = Mockito.mock(ChannelManager.class);
+		Mockito.when(channelManagerMock.isLocalNode(Mockito.anyString())).thenReturn(true);
+		
@@ -44 +46 @@
-		nodeConfigure = new NodeConfigure(queue, channelManager);
+		nodeConfigure = new NodeConfigure(queue, channelManagerMock);
@@ -84 +85,0 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
@@ -87 +88 @@
-						.nodeExists("/user/not-here@shakespeare.lit/status"))
+						.nodeExists(Mockito.anyString()))
@@ -105 +105,0 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
@@ -130,2 +129,0 @@
-
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
@@ -161,2 +158,0 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
-
@@ -191,2 +186,0 @@
-
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
@@ -226,2 +219,0 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
-
@@ -256,2 +247,0 @@
-
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
diff --git a/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/NodeCreateTest.java b/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/NodeCreateTest.java
index 083a242..93b3c25 100644
--- a/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/NodeCreateTest.java
+++ b/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/NodeCreateTest.java
@@ -27,4 +27,3 @@
-public class NodeCreateTest extends IQTestHandler
-{
-	private IQ         request;
-	private Mock       channelManager;
+public class NodeCreateTest extends IQTestHandler {
+	private IQ request;
+	private Mock channelManager;
@@ -32,2 +31,2 @@
-	private JID        jid;
-	private Element    element;
+	private JID jid;
+	private Element element;
@@ -35,2 +34,4 @@
-    private String     node = "/user/capulet@shakespeare.lit/posts";
-    
+	private String node = "/user/capulet@shakespeare.lit/posts";
+
+	private ChannelManager channelManagerMock;
+
@@ -38,7 +39,4 @@
-	public void setUp() throws Exception
-	{
-		channelManager  = new Mock();
-		queue      = new LinkedBlockingQueue<Packet>();
-		nodeCreate = new NodeCreate(queue, channelManager);
-		jid        = new JID("juliet@shakespeare.lit");
-		request    = readStanzaAsIq("/iq/pubsub/channel/create/request.stanza");
+	public void setUp() throws Exception {
+		channelManagerMock = Mockito.mock(Mock.class);
+		Mockito.when(channelManagerMock.isLocalNode(Mockito.anyString()))
+				.thenReturn(true);
@@ -45,0 +44,5 @@
+		queue = new LinkedBlockingQueue<Packet>();
+		nodeCreate = new NodeCreate(queue, channelManagerMock);
+		jid = new JID("juliet@shakespeare.lit");
+		request = readStanzaAsIq("/iq/pubsub/channel/create/request.stanza");
+
@@ -47 +50 @@
-		
+
@@ -49,0 +53,2 @@
+
+
@@ -53,2 +58 @@
-	public void testPassingCreateAsElementNameReturnsTrue()
-	{
+	public void testPassingCreateAsElementNameReturnsTrue() {
@@ -58 +62 @@
-	
+
@@ -60,2 +64 @@
-	public void testPassingNotCreateAsElementNameReturnsFalse()
-	{
+	public void testPassingNotCreateAsElementNameReturnsFalse() {
@@ -65 +68 @@
-	
+
@@ -67,2 +70 @@
-	public void testPassingNoNodeResultsInErrorStanza() throws Exception
-	{
+	public void testPassingNoNodeResultsInErrorStanza() throws Exception {
@@ -74 +76 @@
-	    PacketError error = response.getError();
+		PacketError error = response.getError();
@@ -79 +81 @@
-	
+
@@ -82,7 +84,7 @@
-        throws Exception
-	{
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
-		Mockito
-		    .when(channelManagerMock.nodeExists("/user/capulet@shakespeare.lit/posts"))
-		    .thenReturn(true);
-        nodeCreate.setChannelManager(channelManagerMock);
+			throws Exception {
+
+		Mockito.when(
+				channelManagerMock
+						.nodeExists("/user/capulet@shakespeare.lit/posts"))
+				.thenReturn(true);
+		nodeCreate.setChannelManager(channelManagerMock);
@@ -91 +93 @@
-		
+
@@ -94 +96 @@
-	    PacketError error = response.getError();
+		PacketError error = response.getError();
@@ -99,2 +101,3 @@
-		 * Add this check back in once Tinder supports xmlns on standard conditions
-		 * assertEquals(JabberPubsub.NS_XMPP_STANZAS, error.getApplicationConditionNamespaceURI());
+		 * Add this check back in once Tinder supports xmlns on standard
+		 * conditions assertEquals(JabberPubsub.NS_XMPP_STANZAS,
+		 * error.getApplicationConditionNamespaceURI());
@@ -103 +106 @@
-	
+
@@ -105,3 +108 @@
-	public void testUnauthenticatedUserCanNotCreateNode()
-	    throws Exception
-	{
+	public void testUnauthenticatedUserCanNotCreateNode() throws Exception {
@@ -110 +111 @@
-		nodeCreate.process(element, jid, request,  null);
+		nodeCreate.process(element, jid, request, null);
@@ -113 +114 @@
-	    PacketError error = response.getError();
+		PacketError error = response.getError();
@@ -118,2 +119,3 @@
-		 * Add this check back in once Tinder supports xmlns on standard conditions
-		 * assertEquals(JabberPubsub.NS_XMPP_STANZAS, error.getApplicationConditionNamespaceURI());
+		 * Add this check back in once Tinder supports xmlns on standard
+		 * conditions assertEquals(JabberPubsub.NS_XMPP_STANZAS,
+		 * error.getApplicationConditionNamespaceURI());
@@ -122 +124 @@
-	
+
@@ -124,2 +126 @@
-	public void testInvalidlyFormattedNodeReturnsError() throws Exception
-	{
+	public void testInvalidlyFormattedNodeReturnsError() throws Exception {
@@ -127,2 +128,2 @@
-		
-		nodeCreate.process(element, jid, request,  null);
+
+		nodeCreate.process(element, jid, request, null);
@@ -130,15 +130,0 @@
-		
-	    PacketError error = response.getError();
-		assertNotNull(error);
-		assertEquals(PacketError.Type.modify, error.getType());
-		assertEquals(PacketError.Condition.bad_request, error.getCondition());
-		/**
-		 * Add this check back in once Tinder supports xmlns on standard conditions
-		 * assertEquals(JabberPubsub.NS_XMPP_STANZAS, error.getApplicationConditionNamespaceURI());
-		 */
-	}
-	
-	@Test
-	public void testNewNodeMustBeOnADomainSupportedByCurrentServer() throws Exception
-	{
-		element.addAttribute("node", "/user/capulet@shakespearelit/posts");
@@ -146,118 +131,0 @@
-		nodeCreate.setTopicsDomain("topics.shakespeare.lit");
-
-		nodeCreate.process(element, jid, request,  null);
-		Packet response = queue.poll(100, TimeUnit.MILLISECONDS);
-		
-	    PacketError error = response.getError();
-		assertNotNull(error);
-		assertEquals(PacketError.Type.modify, error.getType());
-		assertEquals(PacketError.Condition.not_acceptable, error.getCondition());
-		/**
-		 * Add this check back in once Tinder supports xmlns on standard conditions
-		 * assertEquals(JabberPubsub.NS_XMPP_STANZAS, error.getApplicationConditionNamespaceURI());
-		 */
-	}
-	
-	@Test
-	public void testchannelManagerFailureReturnsInternalServerErrorResponse() 
-		throws Exception
-	{
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
-		Mockito.doThrow(new NodeStoreException())
-		    .when(channelManagerMock)
-		    .createNode(
-		        Mockito.any(JID.class), 
-		        Mockito.anyString(), 
-		        Mockito.anyMapOf(String.class, String.class)
-		    );
-		nodeCreate.setChannelManager(channelManagerMock);
-        Helper helperMock = Mockito.mock(Helper.class);
-        Mockito.doReturn(true).when(helperMock).isValid();
-        nodeCreate.setConfigurationHelper(helperMock);
-        
-		nodeCreate.process(element, jid, request,  null);
-		Packet response = queue.poll(100, TimeUnit.MILLISECONDS);
-		
-	    PacketError error = response.getError();
-		assertNotNull(error);
-		assertEquals(PacketError.Condition.internal_server_error, error.getCondition());
-		assertEquals(PacketError.Type.wait, error.getType());
-		/**
-		 * Add this check back in once Tinder supports xmlns on standard conditions
-		 * assertEquals(JabberPubsub.NS_XMPP_STANZAS, error.getApplicationConditionNamespaceURI());
-		 */
-	}
-
-	@Test
-	public void testValidCreateNodeRequestReturnsConfirmationStanza() throws Exception
-	{
-		HelperMock helperMock = Mockito.mock(HelperMock.class);
-		Mockito.doReturn(true).when(helperMock).isValid();
-        nodeCreate.setConfigurationHelper(helperMock);
-
-		nodeCreate.process(element, jid, request,  null);
-		Packet response = queue.poll(100, TimeUnit.MILLISECONDS);
-		String error    = null;
-		try {
-			error = response.getError().toString();
-			fail("Unexpected error response");
-		} catch (NullPointerException e) {
-			assertNull(error);
-		}
-		assertEquals(
-		    IQ.Type.result.toString(),
-		    response.getElement().attribute("type").getValue()
-		);
-	}
-	
-	@Test
-	public void testCreateNodeWithConfigurationResultsInExpectedConfig() 
-	    throws Exception
-	{	
-		String channelTitle = "test-channel-name";
-
-		HashMap<String, String> configurationProperties = new HashMap<String, String>();
-		configurationProperties.put(ChannelTitle.FIELD_NAME, channelTitle);
-
-		HelperMock helperMock = Mockito.mock(HelperMock.class);
-		Mockito
-		    .when(helperMock.getValues())
-		    .thenReturn(configurationProperties);
-		Mockito.doReturn(true).when(helperMock).isValid();
-		
-		ChannelManager channelManagerMock = new Mock();
-		nodeCreate.setChannelManager(channelManagerMock);		
-        nodeCreate.setConfigurationHelper(helperMock);
-
-		nodeCreate.process(element, jid, request,  null);
-		
-		Packet response = queue.poll(100, TimeUnit.MILLISECONDS);
-		String error    = null;
-		try {
-			error = response.getError().toString();
-			fail("Unexpected error response");
-		} catch (NullPointerException e) {
-			assertNull(error);
-		}
-		Map<String, String> nodeConfiguration = channelManagerMock.getNodeConf(node);
-		assertEquals(channelTitle, nodeConfiguration.get(ChannelTitle.FIELD_NAME));		
-	}
-	
-	@Test 
-	public void testFailingNodeConfigurationReturnsErrorStanza() throws Exception
-	{
-		String channelTitle = "test-channel-name";
-
-		HashMap<String, String> configurationProperties = new HashMap<String, String>();
-		configurationProperties.put(ChannelTitle.FIELD_NAME, channelTitle);
-
-		HelperMock helperMock = Mockito.mock(HelperMock.class);
-		Mockito
-		    .doThrow(new NodeConfigurationException())
-		    .when(helperMock)
-		    .parse(request);
-        nodeCreate.setConfigurationHelper(helperMock);
-
-		nodeCreate.process(element, jid, request,  null);
-		
-		Packet response   = queue.poll(100, TimeUnit.MILLISECONDS);
@@ -269,2 +137,132 @@
-		 * Add this check back in once Tinder supports xmlns on standard conditions
-		 * assertEquals(JabberPubsub.NS_XMPP_STANZAS, error.getApplicationConditionNamespaceURI());
+		 * Add this check back in once Tinder supports xmlns on standard
+		 * conditions assertEquals(JabberPubsub.NS_XMPP_STANZAS,
+		 * error.getApplicationConditionNamespaceURI());
+		 */
+	}
+
+	@Test
+	public void testNewNodeMustBeOnADomainSupportedByCurrentServer()
+			throws Exception {
+		element.addAttribute("node", "/user/capulet@shakespearelit/posts");
+
+		nodeCreate.setTopicsDomain("topics.shakespeare.lit");
+
+		nodeCreate.process(element, jid, request, null);
+		Packet response = queue.poll(100, TimeUnit.MILLISECONDS);
+
+		PacketError error = response.getError();
+		assertNotNull(error);
+		assertEquals(PacketError.Type.modify, error.getType());
+		assertEquals(PacketError.Condition.not_acceptable, error.getCondition());
+		/**
+		 * Add this check back in once Tinder supports xmlns on standard
+		 * conditions assertEquals(JabberPubsub.NS_XMPP_STANZAS,
+		 * error.getApplicationConditionNamespaceURI());
+		 */
+	}
+
+	@Test
+	public void testchannelManagerFailureReturnsInternalServerErrorResponse()
+			throws Exception {
+		Mockito.doThrow(new NodeStoreException())
+				.when(channelManagerMock)
+				.createNode(Mockito.any(JID.class), Mockito.anyString(),
+						Mockito.anyMapOf(String.class, String.class));
+		nodeCreate.setChannelManager(channelManagerMock);
+		Helper helperMock = Mockito.mock(Helper.class);
+		Mockito.doReturn(true).when(helperMock).isValid();
+		nodeCreate.setConfigurationHelper(helperMock);
+
+		nodeCreate.process(element, jid, request, null);
+		Packet response = queue.poll(100, TimeUnit.MILLISECONDS);
+
+		PacketError error = response.getError();
+		assertNotNull(error);
+		assertEquals(PacketError.Condition.internal_server_error,
+				error.getCondition());
+		assertEquals(PacketError.Type.wait, error.getType());
+		/**
+		 * Add this check back in once Tinder supports xmlns on standard
+		 * conditions assertEquals(JabberPubsub.NS_XMPP_STANZAS,
+		 * error.getApplicationConditionNamespaceURI());
+		 */
+	}
+
+	@Test
+	public void testValidCreateNodeRequestReturnsConfirmationStanza()
+			throws Exception {
+		HelperMock helperMock = Mockito.mock(HelperMock.class);
+		Mockito.doReturn(true).when(helperMock).isValid();
+		nodeCreate.setConfigurationHelper(helperMock);
+
+		nodeCreate.process(element, jid, request, null);
+		Packet response = queue.poll(100, TimeUnit.MILLISECONDS);
+		String error = null;
+		try {
+			error = response.getError().toString();
+			fail("Unexpected error response");
+		} catch (NullPointerException e) {
+			assertNull(error);
+		}
+		assertEquals(IQ.Type.result.toString(), response.getElement()
+				.attribute("type").getValue());
+	}
+
+	@Test
+	public void testCreateNodeWithConfigurationResultsInExpectedConfig()
+			throws Exception {
+		String channelTitle = "test-channel-name";
+
+		HashMap<String, String> configurationProperties = new HashMap<String, String>();
+		configurationProperties.put(ChannelTitle.FIELD_NAME, channelTitle);
+
+		HelperMock helperMock = Mockito.mock(HelperMock.class);
+		Mockito.when(helperMock.getValues())
+				.thenReturn(configurationProperties);
+		Mockito.doReturn(true).when(helperMock).isValid();
+
+		ChannelManager channelManagerMock = new Mock();
+		
+		nodeCreate.setChannelManager(channelManagerMock);
+		nodeCreate.setConfigurationHelper(helperMock);
+
+		nodeCreate.process(element, jid, request, null);
+
+		Packet response = queue.poll(100, TimeUnit.MILLISECONDS);
+		String error = null;
+		try {
+			error = response.getError().toString();
+			fail("Unexpected error response");
+		} catch (NullPointerException e) {
+			assertNull(error);
+		}
+		Map<String, String> nodeConfiguration = channelManagerMock
+				.getNodeConf(node);
+		assertEquals(channelTitle,
+				nodeConfiguration.get(ChannelTitle.FIELD_NAME));
+	}
+
+	@Test
+	public void testFailingNodeConfigurationReturnsErrorStanza()
+			throws Exception {
+		String channelTitle = "test-channel-name";
+
+		HashMap<String, String> configurationProperties = new HashMap<String, String>();
+		configurationProperties.put(ChannelTitle.FIELD_NAME, channelTitle);
+
+		HelperMock helperMock = Mockito.mock(HelperMock.class);
+		Mockito.doThrow(new NodeConfigurationException()).when(helperMock)
+				.parse(request);
+		nodeCreate.setConfigurationHelper(helperMock);
+
+		nodeCreate.process(element, jid, request, null);
+
+		Packet response = queue.poll(100, TimeUnit.MILLISECONDS);
+		PacketError error = response.getError();
+		assertNotNull(error);
+		assertEquals(PacketError.Type.modify, error.getType());
+		assertEquals(PacketError.Condition.bad_request, error.getCondition());
+		/**
+		 * Add this check back in once Tinder supports xmlns on standard
+		 * conditions assertEquals(JabberPubsub.NS_XMPP_STANZAS,
+		 * error.getApplicationConditionNamespaceURI());
diff --git a/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/SubscriptionEventTest.java b/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/SubscriptionEventTest.java
index 2b1bc7e..8c56e6c 100644
--- a/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/SubscriptionEventTest.java
+++ b/src/test/java/org/buddycloud/channelserver/packetprocessor/iq/namespace/pubsub/set/SubscriptionEventTest.java
@@ -41 +41 @@
-	private Mock dataStore = new Mock();
+	private Mock dataStore;
@@ -52,0 +53,6 @@
+		
+		dataStore = Mockito.mock(Mock.class);
+		Mockito.when(dataStore.isLocalNode(Mockito.anyString()))
+		    .thenReturn(true);
+		
+		event.setChannelManager(dataStore);
@@ -132,2 +138 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
-		Mockito.when(channelManagerMock.nodeExists(node)).thenThrow(
+		Mockito.when(dataStore.nodeExists(Mockito.anyString())).thenThrow(
@@ -135 +139,0 @@
-		event.setChannelManager(channelManagerMock);
@@ -149,3 +153,3 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
-		Mockito.when(channelManagerMock.nodeExists(node)).thenReturn(false);
-		event.setChannelManager(channelManagerMock);
+
+		Mockito.when(dataStore.nodeExists(node)).thenReturn(false);
+		event.setChannelManager(dataStore);
@@ -165,3 +169,3 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
-		Mockito.when(channelManagerMock.nodeExists(node)).thenReturn(true);
-		Mockito.when(channelManagerMock.getUserSubscription(node, jid))
+
+		Mockito.when(dataStore.nodeExists(node)).thenReturn(true);
+		Mockito.when(dataStore.getUserSubscription(node, jid))
@@ -169 +173 @@
-		event.setChannelManager(channelManagerMock);
+		event.setChannelManager(dataStore);
@@ -187,3 +191,3 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
-		Mockito.when(channelManagerMock.nodeExists(node)).thenReturn(true);
-		Mockito.when(channelManagerMock.getUserAffiliation(node, jid))
+
+		Mockito.when(dataStore.nodeExists(node)).thenReturn(true);
+		Mockito.when(dataStore.getUserAffiliation(node, jid))
@@ -191 +195 @@
-		event.setChannelManager(channelManagerMock);
+		event.setChannelManager(dataStore);
@@ -210,3 +214,3 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
-		Mockito.when(channelManagerMock.nodeExists(node)).thenReturn(true);
-		Mockito.when(channelManagerMock.getUserAffiliation(node, jid))
+
+		Mockito.when(dataStore.nodeExists(node)).thenReturn(true);
+		Mockito.when(dataStore.getUserAffiliation(node, jid))
@@ -215 +219 @@
-				channelManagerMock.getUserSubscription(node,
+				dataStore.getUserSubscription(node,
@@ -217 +221 @@
-		event.setChannelManager(channelManagerMock);
+		event.setChannelManager(dataStore);
@@ -249,3 +253,2 @@
-		Mock channelManagerMock = Mockito.mock(Mock.class);
-		Mockito.when(channelManagerMock.nodeExists(node)).thenReturn(true);
-		Mockito.when(channelManagerMock.getUserAffiliation(node, jid))
+		Mockito.when(dataStore.nodeExists(node)).thenReturn(true);
+		Mockito.when(dataStore.getUserAffiliation(node, jid))
@@ -253 +256 @@
-		Mockito.doCallRealMethod().when(channelManagerMock)
+		Mockito.doCallRealMethod().when(dataStore)
@@ -256 +259 @@
-				channelManagerMock.getUserSubscription(node,
+				dataStore.getUserSubscription(node,
@@ -260 +263 @@
-		event.setChannelManager(channelManagerMock);
+		event.setChannelManager(dataStore);
@@ -271 +274 @@
-		Mockito.verify(channelManagerMock)
+		Mockito.verify(dataStore)
@@ -294,3 +297,3 @@
-		ChannelManager channelManagerMock = Mockito.mock(Mock.class);
-		Mockito.when(channelManagerMock.nodeExists(node)).thenReturn(true);
-		Mockito.when(channelManagerMock.getUserAffiliation(node, jid))
+
+		Mockito.when(dataStore.nodeExists(node)).thenReturn(true);
+		Mockito.when(dataStore.getUserAffiliation(node, jid))
@@ -300 +303 @@
-				channelManagerMock.getUserSubscription(node,
+				dataStore.getUserSubscription(node,
@@ -304 +307 @@
-		event.setChannelManager(channelManagerMock);
+		event.setChannelManager(dataStore);
@@ -312 +315 @@
-		Mockito.doReturn(subscribers).when(channelManagerMock)
+		Mockito.doReturn(subscribers).when(dataStore)
@@ -315 +318 @@
-		event.setChannelManager(channelManagerMock);
+		event.setChannelManager(dataStore);

