diff --git a/Product/Production/Common/CONNECTCoreLib/src/main/java/gov/hhs/fha/nhinc/callback/openSAML/OpenSAMLCallbackHandler.java b/Product/Production/Common/CONNECTCoreLib/src/main/java/gov/hhs/fha/nhinc/callback/openSAML/OpenSAMLCallbackHandler.java
index cf9b046..b04c9c0 100644
--- a/Product/Production/Common/CONNECTCoreLib/src/main/java/gov/hhs/fha/nhinc/callback/openSAML/OpenSAMLCallbackHandler.java
+++ b/Product/Production/Common/CONNECTCoreLib/src/main/java/gov/hhs/fha/nhinc/callback/openSAML/OpenSAMLCallbackHandler.java
@@ -100,0 +101,2 @@
+        } catch (UnsupportedCallbackException ex) {
+            throw ex;
diff --git a/Product/Production/Common/CONNECTCoreLib/src/test/java/gov/hhs/fha/nhinc/callback/openSAML/OpenSAMLCallbackHandlerTest.java b/Product/Production/Common/CONNECTCoreLib/src/test/java/gov/hhs/fha/nhinc/callback/openSAML/OpenSAMLCallbackHandlerTest.java
index 2e4bb99..eda6320 100644
--- a/Product/Production/Common/CONNECTCoreLib/src/test/java/gov/hhs/fha/nhinc/callback/openSAML/OpenSAMLCallbackHandlerTest.java
+++ b/Product/Production/Common/CONNECTCoreLib/src/test/java/gov/hhs/fha/nhinc/callback/openSAML/OpenSAMLCallbackHandlerTest.java
@@ -5,0 +6,2 @@
+import static org.junit.Assert.*;
+
@@ -9,0 +12,2 @@
+import javax.security.auth.callback.NameCallback;
+import javax.security.auth.callback.UnsupportedCallbackException;
@@ -16,0 +21 @@
+import java.io.IOException;
@@ -25,33 +29,0 @@
-	
-	private Mockery context = new Mockery() {{
-        setImposteriser(ClassImposteriser.INSTANCE);
-    }};
-	
-	final SAMLCallback mockCallback = context.mock(SAMLCallback.class);
-	final SAMLAssertionBuilderFactory mockAssertionBuilderFactory = context.mock(SAMLAssertionBuilderFactory.class);
-	final SAMLAssertionBuilder mockAssertionBuilder = context.mock(SAMLAssertionBuilder.class);
-	final Element mockElement = context.mock(Element.class);
-	final CallbackProperties mockProperties = context.mock(CallbackProperties.class);
-	
-	@Test
-	@Ignore
-	public void testHOKAssertionType() throws Exception {
-		OpenSAMLCallbackHandler handler = new OpenSAMLCallbackHandler(mockAssertionBuilderFactory);
-		Callback[] callbacks = {mockCallback};
-		
-		context.checking(new Expectations() {{
-		   oneOf(mockAssertionBuilder).build(mockProperties);
-		   will(returnValue(mockElement));
-			
-			
-		   oneOf(mockAssertionBuilderFactory).getBuilder(with(SAMLCallback.HOK_ASSERTION_TYPE));
-		   will(returnValue(mockAssertionBuilder));
-			
-		   allowing(mockCallback).getRuntimeProperties();
-		   will(returnValue(Collections.EMPTY_MAP));
-	       allowing(mockCallback).getConfirmationMethod(); 
-	       will(returnValue(SAMLCallback.HOK_ASSERTION_TYPE));
-	       oneOf(mockCallback).getAssertionElement();
-	       oneOf(mockCallback).setAssertionElement(with(same(mockElement)));
-	       
-		}});
@@ -59,5 +31,79 @@
-		
-		handler.handle(callbacks);
-	}
-	
-	
+    private Mockery context = new Mockery() {
+        {
+            setImposteriser(ClassImposteriser.INSTANCE);
+        }
+    };
+
+    final NameCallback mockNonSAMLCallback = context.mock(NameCallback.class);
+    final SAMLCallback mockCallback = context.mock(SAMLCallback.class);
+    final SAMLAssertionBuilderFactory mockAssertionBuilderFactory = context.mock(SAMLAssertionBuilderFactory.class);
+    final SAMLAssertionBuilder mockAssertionBuilder = context.mock(SAMLAssertionBuilder.class);
+    final Element mockElement = context.mock(Element.class);
+    final CallbackProperties mockProperties = context.mock(CallbackProperties.class);
+
+    @Test
+    public void testHOKAssertionType() throws Exception {
+        OpenSAMLCallbackHandler handler = new OpenSAMLCallbackHandler(mockAssertionBuilderFactory);
+        Callback[] callbacks = { mockCallback };
+
+        assertEquals(callbacks.length, 1);
+
+        context.checking(new Expectations() {
+            {
+                allowing(mockAssertionBuilderFactory).getBuilder(with(SAMLCallback.HOK_ASSERTION_TYPE));
+                will(returnValue(mockAssertionBuilder));
+
+                oneOf(mockAssertionBuilder).build(with(any(CallbackProperties.class)));
+                will(returnValue(mockElement));
+
+                oneOf(mockCallback).getRuntimeProperties();
+                will(returnValue(Collections.EMPTY_MAP));
+
+                oneOf(mockCallback).getConfirmationMethod();
+                will(returnValue(SAMLCallback.HOK_ASSERTION_TYPE));
+
+                oneOf(mockCallback).getAssertionElement();
+                oneOf(mockCallback).setAssertionElement(with(same(mockElement)));
+
+            }
+        });
+
+        handler.handle(callbacks);
+    }
+
+    @Test(expected=UnsupportedCallbackException.class)
+    public void testHandleWithNullBuilder() throws Exception {
+        OpenSAMLCallbackHandler handler = new OpenSAMLCallbackHandler(mockAssertionBuilderFactory);
+        Callback[] callbacks = { mockCallback };
+
+        context.checking(new Expectations() {
+            {
+                oneOf(mockAssertionBuilderFactory).getBuilder(with(SAMLCallback.HOK_ASSERTION_TYPE));
+                will(returnValue(null));
+                
+                oneOf(mockCallback).getRuntimeProperties();
+                will(returnValue(Collections.EMPTY_MAP));
+
+                oneOf(mockCallback).getConfirmationMethod();
+                will(returnValue(SAMLCallback.HOK_ASSERTION_TYPE));
+            }
+        });
+        assertEquals(callbacks.length, 1);
+        handler.handle(callbacks);
+    }
+    
+    @Test(expected=UnsupportedCallbackException.class)
+    public void testHandleWithNonSAMLCallback() throws Exception {
+        OpenSAMLCallbackHandler handler = new OpenSAMLCallbackHandler(mockAssertionBuilderFactory);
+        Callback[] callbacks = { mockNonSAMLCallback };
+
+        context.checking(new Expectations() {
+            {
+                oneOf(mockAssertionBuilderFactory).getBuilder(with(SAMLCallback.HOK_ASSERTION_TYPE));
+                will(returnValue(null));
+            }
+        });
+        assertEquals(callbacks.length, 1);
+        handler.handle(callbacks);
+    }
+

