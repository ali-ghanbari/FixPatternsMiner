diff --git a/shell/src/main/java/org/springframework/roo/shell/SimpleParser.java b/shell/src/main/java/org/springframework/roo/shell/SimpleParser.java
index f1ce595..289b657 100644
--- a/shell/src/main/java/org/springframework/roo/shell/SimpleParser.java
+++ b/shell/src/main/java/org/springframework/roo/shell/SimpleParser.java
@@ -593 +593 @@
-										candidate.convertFromText("*", null, include.optionContext());
+										candidate.convertFromText("*", paramType, include.optionContext());
diff --git a/shell/src/test/java/org/springframework/roo/shell/converters/EnumConverterTest.java b/shell/src/test/java/org/springframework/roo/shell/converters/EnumConverterTest.java
new file mode 100644
index 0000000..68fa2d1
--- /dev/null
+++ b/shell/src/test/java/org/springframework/roo/shell/converters/EnumConverterTest.java
@@ -0,0 +1,70 @@
+/**
+ * 
+ */
+package org.springframework.roo.shell.converters;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * Unit test of {@link EnumConverter}
+ *
+ * @author Andrew Swan
+ * @since 1.2.0 
+ */
+public class EnumConverterTest {
+
+	// Fixture
+	private EnumConverter enumConverter;
+	
+	@Before
+	public void setUp() {
+		this.enumConverter = new EnumConverter();
+	}
+
+	@Test
+	public void testSupports() {
+		assertTrue(enumConverter.supports(Flavour.class, "anything"));
+	}
+	
+	@Test
+	public void testConvertFromText() {
+		// Invoke
+		final Enum<?> result = enumConverter.convertFromText(Flavour.BANANA.name(), Flavour.class, "anything");
+		
+		// Check
+		assertEquals(Flavour.BANANA, result);
+	}
+	
+	@Test
+	public void testGetAllPossibleValuesForPartialName() {
+		// Set up
+		final List<String> completions = new ArrayList<String>();
+		
+		// Invoke
+		final boolean result = enumConverter.getAllPossibleValues(completions, Flavour.class, "b", "anything", null);
+		
+		// Check
+		assertTrue(result);
+		assertEquals(1, completions.size());
+		assertEquals(Flavour.BANANA.name(), completions.get(0));
+	}
+	
+	/**
+	 * A simple test enum (enums can't be mocked).
+	 *
+	 * @author Andrew Swan
+	 * @since 1.2.0
+	 */
+	private enum Flavour {
+		BANANA,
+		CHERRY,
+		RASPBERRY;
+	}
+}

