diff --git a/juxta-ws/src/main/java/org/juxtasoftware/service/JuxtaTagExtractor.java b/juxta-ws/src/main/java/org/juxtasoftware/service/JuxtaTagExtractor.java
index 2a8500f..523677d 100644
--- a/juxta-ws/src/main/java/org/juxtasoftware/service/JuxtaTagExtractor.java
+++ b/juxta-ws/src/main/java/org/juxtasoftware/service/JuxtaTagExtractor.java
@@ -333 +333 @@
-        txt = txt.replaceAll("[\\n]\\s*", "");
+        txt = txt.replaceAll("^[\\n]\\s*", "");
diff --git a/juxta-ws/src/main/resources/xslt/basic-strip-ws.xslt b/juxta-ws/src/main/resources/xslt/basic-strip-ws.xslt
index be152d0..38c0c84 100644
--- a/juxta-ws/src/main/resources/xslt/basic-strip-ws.xslt
+++ b/juxta-ws/src/main/resources/xslt/basic-strip-ws.xslt
@@ -2 +2 @@
-<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" {NAMESPACE}>
+<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" {NAMESPACE}>
@@ -6,2 +5,0 @@
-    <xsl:variable name="marker" select="'&#x2573;'" />
-    <xsl:variable name="tab" select="'&#9;'" />
@@ -21,52 +19,5 @@
-        <!-- turn newline into special char so its not treated as whitespace -->
-        <xsl:variable name="fixed" select="translate(., $new-line, $marker)"/>
-
-        <!-- find any leading white space in front of the nl. preserve 1 -->
-        <xsl:variable name="leading">
-            <xsl:variable name="tmp" select="substring($fixed, 1, 1)"/>
-            <xsl:choose>
-                <xsl:when test="$tmp = ' ' or $tmp = $tab">
-                    <xsl:value-of select="' '"/>
-                </xsl:when>
-                <xsl:otherwise>
-                    <xsl:value-of select="''"/>
-                </xsl:otherwise>
-            </xsl:choose>
-        </xsl:variable>
-
-        <!-- see if there is a trailing space on the line -->
-        <xsl:variable name="trailing">
-            <xsl:choose>
-                <!-- if there are any nl markers, normalize to strip trailing spaces
-                     and compress thise before the marker to 1. preserve it if found -->
-                <xsl:when test="contains($fixed, $marker)">
-                    <xsl:call-template name="get-trailing">
-                        <xsl:with-param name="string" select="normalize-space($fixed)" />
-                    </xsl:call-template>
-                </xsl:when>
-                <xsl:otherwise>
-                    <!-- no markers. do not normalize here - it would eat the trailing spaces -->
-                    <xsl:call-template name="get-trailing">
-                        <xsl:with-param name="string" select="$fixed" />
-                    </xsl:call-template>
-                </xsl:otherwise>
-            </xsl:choose>
-        </xsl:variable>
-
-        <!-- end result: normalize the original src and append leading/trailing space -->
-        <xsl:value-of select="concat(concat($leading, normalize-space(.)),$trailing)"/>
-    </xsl:template>
-
-    <!-- return ' ' if trailing char is a ' ' -->
-    <xsl:template name="get-trailing">
-        <xsl:param name="string" select="''"/>
-        <xsl:variable name="tmp1" select="translate($string, $marker, '')"/>
-        <xsl:variable name="tmp" select="substring($tmp1, string-length($tmp1), 1)"/>
-        <xsl:choose>
-            <xsl:when test="$tmp = ' ' or $tmp = $tab">
-                <xsl:value-of select="' '"/>
-            </xsl:when>
-            <xsl:otherwise>
-                <xsl:value-of select="''"/>
-            </xsl:otherwise>
-        </xsl:choose>
+        <xsl:variable name="a" select="replace(., '[\n]\s*$', '')"/>
+        <xsl:variable name="b" select="replace($a, '^[\n]\s*', '')"/>
+        <xsl:variable name="c" select="replace($b, '\n+', '')"/>
+        <xsl:variable name="d" select="replace($c, '\s+', ' ')"/>
+        <xsl:value-of select="$d"/>
diff --git a/juxta-ws/src/main/resources/xslt/basic.xslt b/juxta-ws/src/main/resources/xslt/basic.xslt
deleted file mode 100644
index b19052c..0000000
--- a/juxta-ws/src/main/resources/xslt/basic.xslt
+++ /dev/null
@@ -1,136 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<xsl:stylesheet version="1.0" 
-                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
-                {NAMESPACE}>
-    <xsl:output method="text" indent="no"/>
-    <xsl:strip-space elements="*"/>
-    <xsl:variable name="new-line" select="'&#10;'" />
-    <xsl:variable name="tab" select="'&#9;'" />
-    <xsl:variable name="display-linebreak" select="'{LINEBREAK}'" />
-    <!--special-handling-->
-    <xsl:template match="{NOTE}"/>
-    <xsl:template match="{PB}">
-        <xsl:value-of select="$display-linebreak"/>
-    </xsl:template>
-    
-    <!--global-exclusions-->
-    <!--single-exclusions-->
-    <!--breaks-->   
-
-    <xsl:template match="text()">
-         <!-- Rules: Newlines bound the formatting whitespace. At the start of
-              a line, all space prior to the newline is to be kept. All is formatting.
-              At the end of a line, all whitespace after the last newline is to be stripped -
-              includinf the newline itself -->
-         <!-- first, left trim the original text to eliminate xml-formatting whitespace -->     
-         <xsl:variable name="left-trimmed">
-             <!-- if the first char is a space, we want to preserve it -->
-             <xsl:variable name="tmp" select="substring(., 1, 1)"/>
-             <xsl:choose>
-                <xsl:when test="$tmp = ' ' or $tmp = $tab">
-                    <!-- extract the leading non-formattng-space pad for this element -->
-                    <xsl:variable name="pad">
-                        <xsl:call-template name="find-left-pad">
-                            <xsl:with-param name="string" select="." />
-                        </xsl:call-template>
-                    </xsl:variable>      
-                    <!-- left trim all whitespace and add the pad found above -->
-                    <xsl:call-template name="left-trim">
-                        <xsl:with-param name="string" select="." />
-                        <xsl:with-param name="pad" select="$pad" />
-                    </xsl:call-template>
-                </xsl:when>
-                <xsl:otherwise>
-                    <!-- first char is non-space. strip all whitespace -->
-                    <xsl:call-template name="left-trim">
-                        <xsl:with-param name="string" select="." />
-                        <xsl:with-param name="pad" select="''" />
-                    </xsl:call-template>
-                </xsl:otherwise>
-             </xsl:choose>
-         </xsl:variable>
-
-         <!-- next, right trim any unwanted space -->
-         <xsl:choose>
-             <!-- if there is anything before the last newline, throw away evertying after that
-                  newline (including the newline itself -->
-             <xsl:when test="substring-before($left-trimmed,$new-line)">
-                  <xsl:variable name="trimmed">
-                    <xsl:call-template name="right-trim">
-                        <xsl:with-param name="string" select="$left-trimmed" />
-                    </xsl:call-template>
-                 </xsl:variable>
-                 <xsl:value-of select="$trimmed"/>
-             </xsl:when>
-             <xsl:otherwise>
-                 <!-- nothing after the last newline, so nothing to trim -->
-                <xsl:value-of select="$left-trimmed"/>
-             </xsl:otherwise>
-         </xsl:choose>       
-    </xsl:template>
-    
-    <!-- find all of the leading space characters up until newline or non-whitespace -->
-    <xsl:template name="find-left-pad">
-        <xsl:param name="string" select="''"/>
-        <xsl:param name="pad" select="''"/>
-        <xsl:variable name="tmp" select="substring($string, 1, 1)"/>
-        <xsl:choose>
-            <xsl:when test="$tmp = ' '  or $tmp = $tab">
-                <xsl:variable name="new-pad" select="concat($pad, ' ')"/>
-                <xsl:call-template name="find-left-pad">
-                    <xsl:with-param name="string" select="substring-after($string, $tmp)"/>
-                    <xsl:with-param name="pad" select="$new-pad"/>
-                </xsl:call-template>
-            </xsl:when>
-            <xsl:otherwise>
-                <xsl:value-of select="$pad"/>
-            </xsl:otherwise>
-        </xsl:choose>
-    </xsl:template>
-    
-    <!-- remove all leading whitespace and replace with the specified pad -->
-    <xsl:template name="left-trim">
-        <xsl:param name="string" select="''"/>
-        <xsl:param name="pad" select="''"/>
-        <xsl:variable name="tmp" select="substring($string, 1, 1)"/>
-        <xsl:choose>
-            <xsl:when test="normalize-space($tmp) = ''">
-                <xsl:call-template name="left-trim">
-                    <xsl:with-param name="string" select="substring-after($string, $tmp)"/>
-                    <xsl:with-param name="pad" select="$pad"/>
-                </xsl:call-template>
-            </xsl:when>
-            <xsl:otherwise>
-                <xsl:value-of select="concat($pad,$string)"/>
-            </xsl:otherwise>
-        </xsl:choose>
-    </xsl:template>
-    
-    <!-- remove all trailing whitespace from an element -->
-    <xsl:template name="right-trim">
-        <xsl:param name="string" select="''"/>
-        <xsl:variable name="tmp" select="substring($string, string-length($string), 1)"/>
-        <xsl:choose>
-            <xsl:when test="$tmp = ' ' or $tmp = $tab">
-                <xsl:call-template name="right-trim">
-                    <xsl:with-param name="string" select="substring($string, 1, string-length($string)-1)"/>
-                </xsl:call-template>
-            </xsl:when>
-            <xsl:otherwise>
-                <xsl:choose>
-                     <xsl:when test="$tmp = $new-line">
-                        <xsl:value-of select="substring($string, 1, string-length($string)-1)"/>
-                     </xsl:when>
-                     <xsl:otherwise>
-                         <xsl:value-of select="$string"/>
-                     </xsl:otherwise>
-                </xsl:choose>
-            </xsl:otherwise>
-        </xsl:choose>
-    </xsl:template>
-        
-    <xsl:template name="line-break">
-        <xsl:apply-templates/>
-        <xsl:value-of select="$display-linebreak"/>
-    </xsl:template>
-</xsl:stylesheet>
\ No newline at end of file

