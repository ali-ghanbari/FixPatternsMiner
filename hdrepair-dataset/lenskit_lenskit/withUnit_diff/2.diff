diff --git a/lenskit-core/src/main/java/org/lenskit/util/BinarySearch.java b/lenskit-core/src/main/java/org/lenskit/util/BinarySearch.java
index 42e5337..f5701df 100644
--- a/lenskit-core/src/main/java/org/lenskit/util/BinarySearch.java
+++ b/lenskit-core/src/main/java/org/lenskit/util/BinarySearch.java
@@ -68 +68 @@
-                while (pos > 0 && test(pos-1) == 0) {
+                while (pos > start && test(pos-1) == 0) {
diff --git a/lenskit-core/src/test/java/org/lenskit/util/BinarySearchTest.java b/lenskit-core/src/test/java/org/lenskit/util/BinarySearchTest.java
index afc7b9a..492978a 100644
--- a/lenskit-core/src/test/java/org/lenskit/util/BinarySearchTest.java
+++ b/lenskit-core/src/test/java/org/lenskit/util/BinarySearchTest.java
@@ -37,0 +38 @@
+import static org.junit.Assume.assumeThat;
@@ -155,0 +157,25 @@
+
+    @Test
+    public void testRandomSubsetSearches() {
+        for (List<Long> keys: someSortedLists(longs(), 10, 50)) {
+            long key = longs().next();
+            BinarySearch search = BinarySearch.forList(key, keys);
+            int start = integers(0, keys.size()).next();
+            int end = integers(start, keys.size()).next();
+            int rv = search.search(start, end);
+            int idx = BinarySearch.resultToIndex(rv);
+            assertThat(idx, greaterThanOrEqualTo(start));
+            assertThat(idx, lessThanOrEqualTo(end));
+            if (rv >= 0) {
+                assertThat(rv, lessThan(end));
+                assertThat(keys.get(rv), equalTo(key));
+            } else {
+                if (idx < end) {
+                    assertThat(keys.get(idx), greaterThan(key));
+                }
+                if (idx > start) {
+                    assertThat(keys.get(idx - 1), lessThan(key));
+                }
+            }
+        }
+    }

