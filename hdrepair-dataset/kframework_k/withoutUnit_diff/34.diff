diff --git a/k-distribution/src/test/java/org/kframework/kore/convertors/TstTinyOnKORE_IT.java b/k-distribution/src/test/java/org/kframework/kore/convertors/TstTinyOnKORE_IT.java
index 9fb6b70..08420f5 100644
--- a/k-distribution/src/test/java/org/kframework/kore/convertors/TstTinyOnKORE_IT.java
+++ b/k-distribution/src/test/java/org/kframework/kore/convertors/TstTinyOnKORE_IT.java
@@ -58 +58 @@
-            Assert.assertEquals("<top>(<k>(#KSequence()),<state>(_Map_(Tuple2(s:Id,55),Tuple2(n:Id,-1))))", result.toString());
+            Assert.assertEquals("<top>(<k>(#KSequence()),<state>(_Map_(Tuple2(n:Id,-1),Tuple2(s:Id,55))))", result.toString());
diff --git a/kore/src/main/scala/org/kframework/kore/interface.scala b/kore/src/main/scala/org/kframework/kore/interface.scala
index 7635523..19fd87b 100644
--- a/kore/src/main/scala/org/kframework/kore/interface.scala
+++ b/kore/src/main/scala/org/kframework/kore/interface.scala
@@ -35,0 +36 @@
+  override def hashCode = sort.hashCode() * 13 + s.hashCode
@@ -43,0 +45 @@
+  override def hashCode = name.hashCode
@@ -48,0 +51,9 @@
+
+  override def equals(that: Any): Boolean =
+    hashCode == that.hashCode && (that match {
+      case that: AnyRef if that.asInstanceOf[AnyRef] eq this => true
+      case that: KCollection => this.items == that.items
+      case _ => false
+    })
+
+  override def hashCode = items.hashCode
@@ -57,0 +69,9 @@
+  override def equals(that: Any): Boolean =
+    hashCode == that.hashCode && (that match {
+      case that: AnyRef if that.asInstanceOf[AnyRef] eq this => true
+      case that: KApply =>
+        that.klabel == klabel && this.klist == that.klist
+      case _ => false
+    })
+
+  override def hashCode = klabel.hashCode * 17 + klist.hashCode
@@ -68,0 +89,9 @@
+
+  override def equals(that: Any): Boolean =
+    hashCode == that.hashCode && (that match {
+      case that: AnyRef if that.asInstanceOf[AnyRef] eq this => true
+      case that: KRewrite => this.left == that.left && this.right == that.right
+      case _ => false
+    })
+
+  override def hashCode = left.hashCode * 19 + right.hashCode
@@ -72,0 +102,7 @@
+
+  override def equals(that: Any): Boolean =
+    hashCode == that.hashCode && (that match {
+      case that: AnyRef if that.asInstanceOf[AnyRef] eq this => true
+      case that: InjectedKLabel => this.klabel == that.klabel
+      case _ => false
+    })
diff --git a/tiny/src/main/scala/org/kframework/tiny/adt.scala b/tiny/src/main/scala/org/kframework/tiny/adt.scala
index 092a819..08b1be7 100644
--- a/tiny/src/main/scala/org/kframework/tiny/adt.scala
+++ b/tiny/src/main/scala/org/kframework/tiny/adt.scala
@@ -70 +70 @@
-  lazy val isGround = !(children exists { !_.isGround })
+  lazy val isGround = !(children exists {!_.isGround})
@@ -93 +93 @@
-    klabel((children map { _.normalize }).toSeq, att)
+    klabel((children map {_.normalize}).toSeq, att)
@@ -127 +127 @@
-  val children = productIterator collect {case k: K => k } toList
+  val children = productIterator collect { case k: K => k } toList
@@ -237,2 +236,0 @@
-  lazy override val hashCode = name.hashCode
-
@@ -249 +247 @@
-    l match { case Seq(k) => apply(k, att) }
+    l match {case Seq(k) => apply(k, att) }
@@ -255 +253 @@
-    l match { case Seq(k1, k2) => apply(k1, k2, att) }
+    l match {case Seq(k1, k2) => apply(k1, k2, att) }
@@ -268 +266 @@
-    new KAppAssocBuilder(ListBuffer[K](), this).mapResult { constructFromFlattened(_, att) }
+    new KAppAssocBuilder(ListBuffer[K](), this).mapResult {constructFromFlattened(_, att)}
diff --git a/tiny/src/main/scala/org/kframework/tiny/builtin/MapKApp.scala b/tiny/src/main/scala/org/kframework/tiny/builtin/MapKApp.scala
index f106092..3ac7cb8 100644
--- a/tiny/src/main/scala/org/kframework/tiny/builtin/MapKApp.scala
+++ b/tiny/src/main/scala/org/kframework/tiny/builtin/MapKApp.scala
@@ -13 +13 @@
-  val children: immutable.Iterable[K] = theMap map { case (k, v) => Tuple2Label(k, v) }
+  val children: immutable.Iterable[K] = (theMap map { case (k, v) => Tuple2Label(k, v) } toList).sortBy(_.toString)
@@ -81,2 +81,2 @@
-      val leftGroundKeys = left.theMap.keys filter { _.isGround } toSet
-      val rightGroundKeys = right.theMap.keys filter { _.isGround } toSet
+      val leftGroundKeys = left.theMap.keys filter {_.isGround} toSet
+      val rightGroundKeys = right.theMap.keys filter {_.isGround} toSet

