diff --git a/src/main/java/com/github/marschall/memoryfilesystem/BlockChannel.java b/src/main/java/com/github/marschall/memoryfilesystem/BlockChannel.java
index e4f8875..b252518 100644
--- a/src/main/java/com/github/marschall/memoryfilesystem/BlockChannel.java
+++ b/src/main/java/com/github/marschall/memoryfilesystem/BlockChannel.java
@@ -106 +106 @@
-        long read = this.memoryContents.read(dsts[offset + 1], this.position, Long.MAX_VALUE - totalRead);
+        long read = this.memoryContents.read(dsts[offset + i], this.position, Long.MAX_VALUE - totalRead);
diff --git a/src/test/java/com/github/marschall/memoryfilesystem/MemoryFileSystemTest.java b/src/test/java/com/github/marschall/memoryfilesystem/MemoryFileSystemTest.java
index 1e8da12..64c9002 100644
--- a/src/test/java/com/github/marschall/memoryfilesystem/MemoryFileSystemTest.java
+++ b/src/test/java/com/github/marschall/memoryfilesystem/MemoryFileSystemTest.java
@@ -73,0 +74,25 @@
+  public void scatteringRead() throws IOException {
+    FileSystem fileSystem = this.rule.getFileSystem();
+
+    Path path = fileSystem.getPath("file.txt");
+    Files.createFile(path);
+    this.setContents(path, "abcd");
+
+    byte[] a = new byte[1];
+    byte[] b = new byte[1];
+    byte[] c = new byte[1];
+    byte[] d = new byte[1];
+
+    try (FileChannel channel = FileChannel.open(path, READ)) {
+      ByteBuffer[] buffers = new ByteBuffer[]{ByteBuffer.wrap(a), ByteBuffer.wrap(b), ByteBuffer.wrap(c), ByteBuffer.wrap(d)};
+      long read = channel.read(buffers, 1, 2);
+      assertEquals("bytes read", 2L, read);
+    }
+
+    assertArrayEquals(new byte[]{0}, a);
+    assertArrayEquals(new byte[]{'a'}, b);
+    assertArrayEquals(new byte[]{'b'}, c);
+    assertArrayEquals(new byte[]{0}, d);
+  }
+
+  @Test
@@ -84 +109,2 @@
-      channel.write(new ByteBuffer[]{a, b, c, d}, 1, 2);
+      long written = channel.write(new ByteBuffer[]{a, b, c, d}, 1, 2);
+      assertEquals("byte written", 2L, written);
@@ -104 +130,2 @@
-      channel.write(new ByteBuffer[]{a, b, c, d}, 1, 2);
+      long written = channel.write(new ByteBuffer[]{a, b, c, d}, 1, 2);
+      assertEquals("byte written", 2L, written);

