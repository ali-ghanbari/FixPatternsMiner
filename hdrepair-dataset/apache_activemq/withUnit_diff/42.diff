diff --git a/activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java b/activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java
index 5a78fd7..74c4419 100755
--- a/activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java
+++ b/activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java
@@ -109 +109,3 @@
-            synchronized (started) {
+            // Lock here on the target transport's started since we want to wait for its start()
+            // method to finish dispatching out of the queue before we do our own.
+            synchronized (transport.started) {
diff --git a/activemq-core/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java b/activemq-core/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java
index 2dd3428..4a1a211 100644
--- a/activemq-core/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java
+++ b/activemq-core/src/test/java/org/apache/activemq/transport/vm/VMTransportThreadSafeTest.java
@@ -34,0 +35,2 @@
+import org.apache.activemq.transport.MutexTransport;
+import org.apache.activemq.transport.Transport;
@@ -93,0 +96,41 @@
+            }
+        }
+
+        @Override
+        public void onException(IOException error) {
+        }
+
+        @Override
+        public void transportInterupted() {
+        }
+
+        @Override
+        public void transportResumed() {
+        }
+    }
+
+    private class VMResponderTransportListener implements TransportListener {
+
+        protected final Queue<DummyCommand> received;
+
+        private final Transport peer;
+
+        public VMResponderTransportListener(Queue<DummyCommand> receiveQueue, Transport peer) {
+            this.received = receiveQueue;
+            this.peer = peer;
+        }
+
+        @Override
+        public void onCommand(Object command) {
+
+            if (command instanceof ShutdownInfo) {
+                return;
+            } else {
+                received.add((DummyCommand) command);
+
+                if (peer != null) {
+                    try {
+                        peer.oneway(command);
+                    } catch (IOException e) {
+                    }
+                }
@@ -716,0 +760,114 @@
+    @Test(timeout=120000)
+    public void testTwoWayTrafficWithMutexTransportSync1() throws Exception {
+
+        for (int i = 0; i < 20; ++i) {
+            doTestTwoWayTrafficWithMutexTransport(false, false);
+        }
+    }
+
+    @Test(timeout=120000)
+    public void testTwoWayTrafficWithMutexTransportSync2() throws Exception {
+
+        for (int i = 0; i < 20; ++i) {
+            doTestTwoWayTrafficWithMutexTransport(true, false);
+        }
+    }
+
+    @Test(timeout=120000)
+    public void testTwoWayTrafficWithMutexTransportSync3() throws Exception {
+
+        for (int i = 0; i < 20; ++i) {
+            doTestTwoWayTrafficWithMutexTransport(false, true);
+        }
+    }
+
+    @Test(timeout=120000)
+    public void testTwoWayTrafficWithMutexTransportSync4() throws Exception {
+
+        for (int i = 0; i < 20; ++i) {
+            doTestTwoWayTrafficWithMutexTransport(false, false);
+        }
+    }
+
+    public void doTestTwoWayTrafficWithMutexTransport(boolean localAsync, boolean remoteAsync) throws Exception {
+
+        final VMTransport vmlocal = new VMTransport(new URI(location1));
+        final VMTransport vmremote = new VMTransport(new URI(location2));
+
+        final MutexTransport local = new MutexTransport(vmlocal);
+        final MutexTransport remote = new MutexTransport(vmremote);
+
+        final AtomicInteger sequenceId = new AtomicInteger();
+
+        vmlocal.setAsync(localAsync);
+        vmremote.setAsync(remoteAsync);
+
+        vmlocal.setPeer(vmremote);
+        vmremote.setPeer(vmlocal);
+
+        local.setTransportListener(new VMTestTransportListener(localReceived));
+        remote.setTransportListener(new VMResponderTransportListener(remoteReceived, remote));
+
+        final int messageCount = 200000;
+
+        Thread localSend = new Thread(new Runnable() {
+
+            @Override
+            public void run() {
+                for(int i = 0; i < messageCount; ++i) {
+                    try {
+                        local.oneway(new DummyCommand(sequenceId.incrementAndGet()));
+                    } catch (Exception e) {
+                    }
+                }
+            }
+        });
+
+        Thread remoteSend = new Thread(new Runnable() {
+
+            @Override
+            public void run() {
+                for(int i = 0; i < messageCount; ++i) {
+                    try {
+                        remote.oneway(new DummyCommand(sequenceId.incrementAndGet()));
+                    } catch (Exception e) {
+                    }
+                }
+            }
+        });
+
+        localSend.start();
+        remoteSend.start();
+
+        Thread.sleep(10);
+
+        local.start();
+        remote.start();
+
+        // Wait for both to finish and then check that each side go the correct amount
+        localSend.join();
+        remoteSend.join();
+
+        assertTrue("Remote should have received ("+messageCount+") but got ()" + remoteReceived.size(), Wait.waitFor(new Wait.Condition() {
+            @Override
+            public boolean isSatisified() throws Exception {
+                return remoteReceived.size() == messageCount;
+            }
+        }));
+
+        assertTrue("Local should have received ("+messageCount*2+") but got ()" + localReceived.size(), Wait.waitFor(new Wait.Condition() {
+            @Override
+            public boolean isSatisified() throws Exception {
+                return localReceived.size() == messageCount*2;
+            }
+        }));
+
+        LOG.debug("All messages sent,stop all");
+
+        local.stop();
+        remote.stop();
+
+        localReceived.clear();
+        remoteReceived.clear();
+    }
+

