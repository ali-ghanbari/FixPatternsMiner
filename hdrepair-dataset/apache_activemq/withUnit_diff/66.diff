diff --git a/activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/ReadOnlyAsyncDataManager.java b/activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/ReadOnlyAsyncDataManager.java
index 3203527..5b67b70 100644
--- a/activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/ReadOnlyAsyncDataManager.java
+++ b/activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/ReadOnlyAsyncDataManager.java
@@ -50,0 +51,2 @@
+
+        accessorPool = new DataFileAccessorPool(this);
diff --git a/activemq-core/src/test/java/org/apache/activemq/kaha/impl/async/JournalImplTest.java b/activemq-core/src/test/java/org/apache/activemq/kaha/impl/async/JournalImplTest.java
index d6d5454..d944a2e 100644
--- a/activemq-core/src/test/java/org/apache/activemq/kaha/impl/async/JournalImplTest.java
+++ b/activemq-core/src/test/java/org/apache/activemq/kaha/impl/async/JournalImplTest.java
@@ -20,0 +21 @@
+import java.util.ArrayList;
@@ -28,0 +30,2 @@
+import org.apache.activemq.kaha.impl.async.ReadOnlyAsyncDataManager;
+import org.apache.activemq.util.ByteSequence;
@@ -128,0 +132,31 @@
+    public void testReadOnlyRead() throws InvalidRecordLocationException, InterruptedException, IOException {
+    	
+    	Packet data1 = createPacket("Hello World 1");
+        RecordLocation location1 = journal.write(data1, false);
+        Packet data2 = createPacket("Hello World 2");
+        RecordLocation location2 = journal.write(data2, false);
+        Packet data3 = createPacket("Hello World 3");
+        RecordLocation location3 = journal.write(data3, false);
+        
+        Packet packet;
+        packet = journal.read(location2);
+        assertEquals(data2, packet);
+        packet = journal.read(location1);
+        assertEquals(data1, packet);
+        packet = journal.read(location3);
+        assertEquals(data3, packet);
+    	
+        ArrayList<File> data = new ArrayList<File>();
+        data.add(logDirectory);
+        ReadOnlyAsyncDataManager rodm = new ReadOnlyAsyncDataManager(data);
+        rodm.start();
+        try {
+            for (Location curr = rodm.getFirstLocation(); curr != null; curr = rodm.getNextLocation(curr)) {
+                ByteSequence bs = rodm.read(curr);
+                assertNotNull(bs);
+            }
+        } finally {
+    	    rodm.close();
+        }
+    }
+

