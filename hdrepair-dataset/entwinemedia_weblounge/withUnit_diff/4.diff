diff --git a/src/main/java/ch/entwine/weblounge/common/impl/request/RequestUtils.java b/src/main/java/ch/entwine/weblounge/common/impl/request/RequestUtils.java
index bf5c81e..ba04ae9 100644
--- a/src/main/java/ch/entwine/weblounge/common/impl/request/RequestUtils.java
+++ b/src/main/java/ch/entwine/weblounge/common/impl/request/RequestUtils.java
@@ -136,3 +136 @@
-    // first param is empty (because of leading slash), therefore start with
-    // index 1
-    for (int i = 1; i < params.length; i++) {
+    for (int i = 0; i < params.length; i++) {
diff --git a/src/test/java/ch/entwine/weblounge/common/content/ResourceUtilsTest.java b/src/test/java/ch/entwine/weblounge/common/content/ResourceUtilsTest.java
index 307c64c..a1d34d8 100644
--- a/src/test/java/ch/entwine/weblounge/common/content/ResourceUtilsTest.java
+++ b/src/test/java/ch/entwine/weblounge/common/content/ResourceUtilsTest.java
@@ -24,0 +25,4 @@
+import ch.entwine.weblounge.common.impl.request.RequestUtils;
+import ch.entwine.weblounge.common.request.WebloungeRequest;
+import ch.entwine.weblounge.common.site.Action;
+import ch.entwine.weblounge.common.url.WebUrl;
@@ -25,0 +30,2 @@
+import org.easymock.EasyMock;
+import org.junit.Before;
@@ -26,0 +33,2 @@
+
+import java.util.List;
@@ -32 +40 @@
-  
+
@@ -35,0 +44,21 @@
+  protected Action action = null;
+  
+  protected WebUrl url = null;
+
+  protected WebloungeRequest request = null;
+
+  @Before
+  public void setUp() {
+    action = EasyMock.createNiceMock(Action.class);
+    EasyMock.expect(action.getPath()).andReturn("/the/mountpoint/").anyTimes();
+    EasyMock.replay(action);
+    
+    url = EasyMock.createNiceMock(WebUrl.class);
+    EasyMock.expect(url.getPath()).andReturn("/the/mountpoint/some/url/params").anyTimes();
+    EasyMock.replay(url);
+    
+    request = EasyMock.createNiceMock(WebloungeRequest.class);
+    EasyMock.expect(request.getRequestedUrl()).andStubReturn(url);
+    EasyMock.replay(request);
+  }
+
@@ -37 +66,3 @@
-   * Test method for {@link ch.entwine.weblounge.common.content.ResourceUtils#formatFileSize(long)}.
+   * Test method for
+   * {@link ch.entwine.weblounge.common.content.ResourceUtils#formatFileSize(long)}
+   * .
@@ -45,2 +76,2 @@
-    
-    assertEquals("1.3GB", ResourceUtils.formatFileSize((long)fileSize));
+
+    assertEquals("1.3GB", ResourceUtils.formatFileSize((long) fileSize));
@@ -48 +79 @@
-    assertEquals("1.3MB", ResourceUtils.formatFileSize((long)fileSize));
+    assertEquals("1.3MB", ResourceUtils.formatFileSize((long) fileSize));
@@ -50 +81 @@
-    assertEquals("1.3kB", ResourceUtils.formatFileSize((long)fileSize));
+    assertEquals("1.3kB", ResourceUtils.formatFileSize((long) fileSize));
@@ -52 +83,14 @@
-    assertEquals("1B", ResourceUtils.formatFileSize((long)fileSize));
+    assertEquals("1B", ResourceUtils.formatFileSize((long) fileSize));
+  }
+
+  /**
+   * Test method for
+   * {@link ch.entwine.weblounge.common.content.ResourceUtils#formatFileSize(long)}
+   * .
+   */
+  @Test
+  public void testGetRequestedUrlParams() {
+    List<String> params = RequestUtils.getRequestedUrlParams(request, action);
+    assertEquals("some", params.get(0));
+    assertEquals("url", params.get(1));
+    assertEquals("params", params.get(2));

