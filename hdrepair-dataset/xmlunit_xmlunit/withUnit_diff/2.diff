diff --git a/xmlunit-core/src/main/java/org/xmlunit/util/Linqy.java b/xmlunit-core/src/main/java/org/xmlunit/util/Linqy.java
index 3691a90..95dda5e 100644
--- a/xmlunit-core/src/main/java/org/xmlunit/util/Linqy.java
+++ b/xmlunit-core/src/main/java/org/xmlunit/util/Linqy.java
@@ -193,0 +194 @@
+            hasNext(); // allow next() to be called without hasNext()
diff --git a/xmlunit-core/src/test/java/org/xmlunit/util/LinqyTest.java b/xmlunit-core/src/test/java/org/xmlunit/util/LinqyTest.java
index fb1ab7a..5480f4a 100644
--- a/xmlunit-core/src/test/java/org/xmlunit/util/LinqyTest.java
+++ b/xmlunit-core/src/test/java/org/xmlunit/util/LinqyTest.java
@@ -17,0 +18 @@
+import java.util.Iterator;
@@ -21,0 +23,28 @@
+
+    @Test
+    public void castContract() {
+        ArrayList al = new ArrayList();
+        al.add((Object) "");
+        Iterable<String> s = Linqy.<String>cast(al);
+        Assert.assertTrue(s.iterator().next() instanceof String);
+    }
+
+    @Test
+    public void canRemoveFromMapIterator() {
+        ArrayList al = new ArrayList();
+        al.add("foo");
+        Iterator i = Linqy.map(al, new IdentityMapper()).iterator();
+        i.next();
+        i.remove();
+        Assert.assertEquals(0, al.size());
+    }
+
+    @Test
+    public void canRemoveFromFilterIterator() {
+        ArrayList al = new ArrayList();
+        al.add("foo");
+        Iterator i = Linqy.filter(al, new IsNotNullPredicate()).iterator();
+        i.next();
+        i.remove();
+        Assert.assertEquals(0, al.size());
+    }
@@ -60,0 +90,14 @@
+
+    private static class IdentityMapper implements Linqy.Mapper<Object, Object> {
+        @Override
+        public Object apply(Object s) {
+            return s;
+        }
+    }
+
+    private class IsNotNullPredicate implements Predicate<Object> {
+        @Override
+        public boolean test(Object toTest) {
+            return toTest != null;
+        }
+    }

