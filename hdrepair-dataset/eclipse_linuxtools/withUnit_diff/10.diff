diff --git a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/AbstractStapTest.java b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/AbstractStapTest.java
index c78e111..08f5755 100644
--- a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/AbstractStapTest.java
+++ b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/AbstractStapTest.java
@@ -7 +7 @@
- * 
+ *
@@ -12,0 +13 @@
+import java.io.IOException;
@@ -25 +26,2 @@
-import org.osgi.framework.Bundle;
+import org.eclipse.linuxtools.tools.launch.core.factory.RuntimeProcessFactory;
+import org.osgi.framework.FrameworkUtil;
@@ -27 +29 @@
-public abstract class AbstractStapTest extends AbstractTest {
+public class AbstractStapTest extends AbstractTest {
@@ -39 +41 @@
-	
+
@@ -42 +44 @@
-		return createProjectAndBuild(getBundle(), projname);
+		return createProjectAndBuild(FrameworkUtil.getBundle(this.getClass()), projname);
@@ -45 +47,7 @@
-	protected abstract Bundle getBundle();
+	public void killStap() {
+		try {
+			RuntimeProcessFactory.getFactory().exec("kill stap", null);
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
@@ -52 +59,0 @@
-
@@ -55 +62 @@
-	
+
diff --git a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/AllTests.java b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/AllTests.java
index a4948e6..2525f88 100644
--- a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/AllTests.java
+++ b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/AllTests.java
@@ -33,0 +34 @@
+		suite.addTestSuite(SystemTapErrorHandlerTest.class);
diff --git a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/ConfigurationTest.java b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/ConfigurationTest.java
index c6d870b..a72b6ab 100644
--- a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/ConfigurationTest.java
+++ b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/ConfigurationTest.java
@@ -7 +7 @@
- * 
+ *
@@ -12,4 +11,0 @@
-
-import java.io.IOException;
-
-import junit.framework.TestCase;
@@ -23 +18,0 @@
-import org.eclipse.linuxtools.tools.launch.core.factory.RuntimeProcessFactory;
@@ -25,3 +20,3 @@
-public class ConfigurationTest extends TestCase{
-	
-	
+public class ConfigurationTest extends AbstractStapTest{
+
+
@@ -31 +26 @@
-	 * 
+	 *
@@ -32,0 +28 @@
+	 * @throws CoreException
@@ -34,3 +30,2 @@
-	public void testConfig() {
-		
-		System.out.println("\n\nLaunching ConfigurationTest\n");
+	public void testConfig() throws CoreException {
+
@@ -38,13 +32,0 @@
-		
-		try {
-			String testCDirectives = "-DRandomjunk -DMoreJunk";
-			String testOutputPath = "/tmp/ThisFileDoesNothingDeleteIt";
-			String testBinaryPath = "More random junk";
-			String testScriptPath = "/tmp/NotAScriptFile.stp";
-			String testArguments = "Nonexistent Arguments";
-			int testPid = 413;
-			int testBuffer = 100;
-			int testPass = 10;
-			
-			ILaunchConfiguration config = shortcut.outsideGetLaunchConfigType().newInstance(null, "Temp name");
-			ILaunchConfigurationWorkingCopy wc = config.copy("Testing configuration");
@@ -52,17 +34,8 @@
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_VERBOSE, 1);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_KEEP_TEMPORARY, true);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_GURU, true);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_PROLOGUE_SEARCH, true);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_NO_CODE_ELISION, true);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_DISABLE_WARNINGS, true);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_BULK_MODE, true);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_TIMING_INFO, true);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_SKIP_BADVARS, true);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_IGNORE_DWARF, true);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_TAPSET_COVERAGE, true);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_LEAVE_RUNNING, true);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_PASS,testPass);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_BUFFER_BYTES,testBuffer);
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_TARGET_PID,testPid);
-			
-			
+		String testCDirectives = "-DRandomjunk -DMoreJunk";
+		String testOutputPath = "/tmp/ThisFileDoesNothingDeleteIt";
+		String testBinaryPath = "More random junk";
+		String testScriptPath = "/tmp/NotAScriptFile.stp";
+		String testArguments = "Nonexistent Arguments";
+		int testPid = 413;
+		int testBuffer = 100;
+		int testPass = 10;
@@ -70,20 +43,51 @@
-			wc.setAttribute(LaunchConfigurationConstants.COMMAND_C_DIRECTIVES, testCDirectives);
-			wc.setAttribute(LaunchConfigurationConstants.BINARY_PATH, testBinaryPath);
-			wc.setAttribute(LaunchConfigurationConstants.SCRIPT_PATH, testScriptPath);
-			wc.setAttribute(LaunchConfigurationConstants.ARGUMENTS, testArguments);
-			wc.setAttribute(LaunchConfigurationConstants.OUTPUT_PATH, testOutputPath);
-			
-			config = wc.doSave();
-			
-			SystemTapLaunchConfigurationDelegate del = new SystemTapLaunchConfigurationDelegate();
-			del.launch(config, "profile", null, null);
-			
-			assertEquals("stap -v -p" + testPass + " -k -g -P -u -w -b -t -s" 
-						+ testBuffer + " -x" + testPid + " " 
-						+ testCDirectives + " -F --skip-badvars --ignore-dwarf -q " + "-o " 
-						+ testOutputPath + " -c '" 
-						+ testBinaryPath + "' " + testScriptPath + " " + testArguments, del.generateCommand(config));
-		} catch (CoreException e) {
-			e.printStackTrace();
-		}
-		
+		ILaunchConfiguration config = shortcut.outsideGetLaunchConfigType()
+				.newInstance(null, "Temp name");
+		ILaunchConfigurationWorkingCopy wc = config
+				.copy("Testing configuration");
+
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_VERBOSE, 1);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_KEEP_TEMPORARY,
+				true);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_GURU, true);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_PROLOGUE_SEARCH,
+				true);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_NO_CODE_ELISION,
+				true);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_DISABLE_WARNINGS,
+				true);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_BULK_MODE, true);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_TIMING_INFO, true);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_SKIP_BADVARS, true);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_IGNORE_DWARF, true);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_TAPSET_COVERAGE,
+				true);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_LEAVE_RUNNING,
+				true);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_PASS, testPass);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_BUFFER_BYTES,
+				testBuffer);
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_TARGET_PID,
+				testPid);
+
+		wc.setAttribute(LaunchConfigurationConstants.COMMAND_C_DIRECTIVES,
+				testCDirectives);
+		wc.setAttribute(LaunchConfigurationConstants.BINARY_PATH,
+				testBinaryPath);
+		wc.setAttribute(LaunchConfigurationConstants.SCRIPT_PATH,
+				testScriptPath);
+		wc.setAttribute(LaunchConfigurationConstants.ARGUMENTS, testArguments);
+		wc.setAttribute(LaunchConfigurationConstants.OUTPUT_PATH,
+				testOutputPath);
+
+		config = wc.doSave();
+
+		SystemTapLaunchConfigurationDelegate del = new SystemTapLaunchConfigurationDelegate();
+		del.launch(config, "profile", null, null);
+
+		assertEquals("stap -v -p" + testPass + " -k -g -P -u -w -b -t -s"
+				+ testBuffer + " -x" + testPid + " " + testCDirectives
+				+ " -F --skip-badvars --ignore-dwarf -q " + "-o "
+				+ testOutputPath + " -c '" + testBinaryPath + "' "
+				+ testScriptPath + " " + testArguments,
+				del.generateCommand(config));
+
@@ -92,8 +95,0 @@
-	
-	public void killStap() {
-		try {
-			RuntimeProcessFactory.getFactory().exec("kill stap", null);
-		} catch (IOException e) {
-			e.printStackTrace();
-		}
-	}
@@ -101 +97,3 @@
-	
+
+
+
diff --git a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/LaunchShortcutsTest.java b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/LaunchShortcutsTest.java
index e515a8b..0ab4498 100644
--- a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/LaunchShortcutsTest.java
+++ b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/LaunchShortcutsTest.java
@@ -12,0 +13 @@
+import org.eclipse.cdt.core.model.CModelException;
@@ -16,5 +16,0 @@
-import org.osgi.framework.Bundle;
-import org.osgi.framework.FrameworkUtil;
-
-
-
@@ -42,2 +38 @@
-	public void testLaunchCallGraph() {
-		try {
+	public void testLaunchCallGraph() throws CModelException {
@@ -52 +46,0 @@
-			System.out.println(script);
@@ -58,10 +51,0 @@
-			
-			
-			} catch (Exception e) {
-				e.printStackTrace();
-			}
-	}
-
-	@Override
-	protected Bundle getBundle() {
-		return FrameworkUtil.getBundle(this.getClass());
diff --git a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandGeneratorTest.java b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandGeneratorTest.java
index a099abf..f2113af 100644
--- a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandGeneratorTest.java
+++ b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandGeneratorTest.java
@@ -14 +13,0 @@
-import java.io.IOException;
@@ -18 +16,0 @@
-import org.eclipse.linuxtools.tools.launch.core.factory.RuntimeProcessFactory;
@@ -20,3 +18 @@
-import junit.framework.TestCase;
-
-public class SystemTapCommandGeneratorTest extends TestCase{ 
+public class SystemTapCommandGeneratorTest extends AbstractStapTest{ 
@@ -30 +26 @@
-		
+
@@ -33,14 +29,8 @@
-		
-		//RUN
-		String cmd = SystemTapCommandGenerator
-				.generateCommand(
-						scriptPath,
-						binaryFilePath,
-						"",
-						true,
-						true,
-						binaryFilePath, "", PluginConstants.STAP_PATH);
-		
-		assertEquals(
-				"stap -c '"+binaryFilePath+"' "+scriptPath+ " " +binaryFilePath,
-				cmd);
+
+		// RUN
+		String cmd = SystemTapCommandGenerator.generateCommand(scriptPath,
+				binaryFilePath, "", true, true, binaryFilePath, "",
+				PluginConstants.STAP_PATH);
+
+		assertEquals("stap -c '" + binaryFilePath + "' " + scriptPath + " "
+				+ binaryFilePath, cmd);
@@ -48,2 +38,2 @@
-		//END
-		}
+		// END
+	}
@@ -54,15 +44,7 @@
-		
-		//RUN
-		String cmd = SystemTapCommandGenerator
-		.generateCommand(
-				scriptPath,
-				"",
-				"",
-				false,
-				false,
-				"", "", PluginConstants.STAP_PATH);
-		
-		assertEquals(
-				"stap "+scriptPath,
-				cmd);
-		//END
+
+		// RUN
+		String cmd = SystemTapCommandGenerator.generateCommand(scriptPath, "",
+				"", false, false, "", "", PluginConstants.STAP_PATH);
+
+		assertEquals("stap " + scriptPath, cmd);
+		// END
@@ -86,8 +67,0 @@
-	
-	public void killStap() {
-		try {
-			RuntimeProcessFactory.getFactory().exec("kill stap", null);			
-		} catch (IOException e) {
-			e.printStackTrace();
-		}
-	}
diff --git a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandLineTest.java b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandLineTest.java
index 196d229..8923d33 100644
--- a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandLineTest.java
+++ b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandLineTest.java
@@ -7 +7 @@
- * 
+ *
@@ -33 +33 @@
-	
+
@@ -39,4 +39,4 @@
-	
-	
-	
-	
+
+
+
+
@@ -49 +49 @@
-			
+
@@ -54 +54 @@
-			
+
@@ -64 +64 @@
-			
+
@@ -69 +69 @@
-			
+
@@ -74 +74 @@
-			
+
@@ -77 +77 @@
-			
+
@@ -85,2 +85,2 @@
-	
-	
+
+
@@ -91 +91 @@
-		
+
@@ -96 +96 @@
-						"probe end {" + 
+						"probe end {" +
@@ -100 +100 @@
-		
+
@@ -103,3 +103,3 @@
-	
-	
-	
+
+
+
@@ -109 +109 @@
-		
+
@@ -112 +112 @@
-		
+
@@ -114 +114 @@
-		
+
@@ -121 +121 @@
-		
+
@@ -136 +136 @@
-		
+
@@ -138 +138 @@
-		
+
@@ -141,16 +141,14 @@
-	public void testFailure(){
-		try {
-			LaunchStapGraph shortcut = new LaunchStapGraph();
-			ILaunchConfiguration config = shortcut.outsideGetLaunchConfigType().newInstance(null, "Temp Name");
-			ILaunchConfigurationWorkingCopy wc = config.copy("Temp Name");
-			
-			wc.setAttribute(LaunchConfigurationConstants.BINARY_PATH,currentPath + "/basic");
-			wc.setAttribute(LaunchConfigurationConstants.SCRIPT_PATH,scriptPath);
-			wc.setAttribute(LaunchConfigurationConstants.ARGUMENTS,"-e'()'");
-			wc.setAttribute(LaunchConfigurationConstants.OUTPUT_PATH,graphDataPath);
-			config = wc.doSave();
-			config.launch("profile", null);
-			
-		} catch (CoreException e) {
-			e.printStackTrace();
-		}
+	public void testFailure() throws CoreException{
+		LaunchStapGraph shortcut = new LaunchStapGraph();
+		ILaunchConfiguration config = shortcut.outsideGetLaunchConfigType()
+				.newInstance(null, "Temp Name");
+		ILaunchConfigurationWorkingCopy wc = config.copy("Temp Name");
+
+		wc.setAttribute(LaunchConfigurationConstants.BINARY_PATH, currentPath
+				+ "/basic");
+		wc.setAttribute(LaunchConfigurationConstants.SCRIPT_PATH, scriptPath);
+		wc.setAttribute(LaunchConfigurationConstants.ARGUMENTS, "-e'()'");
+		wc.setAttribute(LaunchConfigurationConstants.OUTPUT_PATH, graphDataPath);
+		config = wc.doSave();
+		config.launch("profile", null);
+
@@ -158,3 +156,2 @@
-	
-	
-	public void initializeFiles(){
+
+	public void initializeFiles() throws IOException{
@@ -163,7 +160,3 @@
-		
-		try {
-			scriptFile.createNewFile();
-			graphDataFile.createNewFile();
-		} catch (IOException e) {
-			e.printStackTrace();
-		}
+
+		scriptFile.createNewFile();
+		graphDataFile.createNewFile();
@@ -171 +164 @@
-	
+
diff --git a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandTest.java b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandTest.java
index 5c50fb8..259b327 100644
--- a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandTest.java
+++ b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapCommandTest.java
@@ -29,3 +28,0 @@
-		System.out.println("\n\nLaunching SystemTapCommandTest\n");
-
-		
diff --git a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapErrorHandlerTest.java b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapErrorHandlerTest.java
index b22e5ac..3b55611 100644
--- a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapErrorHandlerTest.java
+++ b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapErrorHandlerTest.java
@@ -21,2 +21,2 @@
-	SystemTapErrorHandler errHandler;
-	String errorString;
+	private SystemTapErrorHandler errHandler;
+	private String errorString;
@@ -24 +24,5 @@
-	
+	@Override
+	protected void setUp() {
+		errHandler = new SystemTapErrorHandler();
+	}
+
@@ -32,2 +36 @@
-		
-		errHandler = new SystemTapErrorHandler();
+
@@ -35,2 +38,2 @@
-		
-		assertTrue(!errHandler.isErrorRecognized());
+
+		assertFalse(errHandler.isErrorRecognized());
@@ -38,2 +41,2 @@
-	
-		
+
+
@@ -43,2 +46 @@
-		
-		errHandler = new SystemTapErrorHandler();
+
@@ -46 +48 @@
-		
+
@@ -49,2 +51,2 @@
-	
-	
+
+
@@ -52 +54 @@
-		
+
@@ -56,2 +58 @@
-		
-		errHandler = new SystemTapErrorHandler();
+
@@ -59 +60 @@
-		
+
@@ -63,2 +64,2 @@
-	
-	
+
+
@@ -66 +67 @@
-		
+
@@ -68,2 +69 @@
-		
-		errHandler = new SystemTapErrorHandler();
+
@@ -71 +71 @@
-		
+
@@ -75,13 +74,0 @@
-	
-	
-	public void testUprobesError(){
-		
-		errorString = "SystemTap's version of uprobes is out of date. As root, or a member of the 'root' group, run \"make -C /usr/local/share/systemtap/runtime/uprobes\".";
-		
-		errHandler = new SystemTapErrorHandler();
-		errHandler.handle(new NullProgressMonitor(), errorString);
-		
-		assertTrue(errHandler.isErrorRecognized());
-		assertTrue(errHandler.getErrorMessage().contains("SystemTap's version of uprobes is out of date. As root, please run \"make -C /usr/local/share/systemtap/runtime/uprobes\"."));
-		
-	}
@@ -88,0 +76,12 @@
+
+	public void testUprobesError(){
+
+		errorString = "SystemTap's version of uprobes is out of date. As root, or a member of the 'root' group, run \"make -C /usr/local/share/systemtap/runtime/uprobes\".";
+
+		errHandler.handle(new NullProgressMonitor(), errorString);
+
+		assertTrue(errHandler.isErrorRecognized());
+		System.out.println(errHandler.getErrorMessage());
+		assertTrue(errHandler.getErrorMessage().contains("SystemTap's version of uprobes is out of date."));
+		assertTrue(errHandler.getErrorMessage().contains("make -C /usr/local/share/systemtap/runtime/uprobes\"."));
+	}
diff --git a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapTabTest.java b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapTabTest.java
index 8a35f74..7008e21 100644
--- a/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapTabTest.java
+++ b/systemtap/org.eclipse.linuxtools.callgraph.launch.tests/src/org/eclipse/linuxtools/callgraph/launch/tests/SystemTapTabTest.java
@@ -28 +28 @@
-	public void testTabs(){
+	public void testTabs() throws CoreException{
@@ -31 +31 @@
-		
+
@@ -36,12 +36,9 @@
-		try {
-			configuration = shortCut.outsideGetLaunchConfigType().
-			newInstance(null, (DebugPlugin.getDefault().getLaunchManager()).
-					generateLaunchConfigurationName("invalid"));
-			ILaunchConfigurationWorkingCopy wc = configuration.getWorkingCopy();
-			stp.setDefaults(wc);
-			stp.performApply(wc);
-			wc.doSave();
-			stp.initializeFrom(configuration);
-		} catch (CoreException e) {
-			e.printStackTrace();
-		}
+		configuration = shortCut.outsideGetLaunchConfigType().newInstance(
+				null,
+				(DebugPlugin.getDefault().getLaunchManager())
+						.generateLaunchConfigurationName("invalid"));
+		ILaunchConfigurationWorkingCopy wc = configuration.getWorkingCopy();
+		stp.setDefaults(wc);
+		stp.performApply(wc);
+		wc.doSave();
+		stp.initializeFrom(configuration);

