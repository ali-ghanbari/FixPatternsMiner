diff --git a/src/main/java/com/redhat/darcy/webdriver/internal/CachingTargetLocator.java b/src/main/java/com/redhat/darcy/webdriver/internal/CachingTargetLocator.java
index 1e1be91..f135675 100644
--- a/src/main/java/com/redhat/darcy/webdriver/internal/CachingTargetLocator.java
+++ b/src/main/java/com/redhat/darcy/webdriver/internal/CachingTargetLocator.java
@@ -129 +129 @@
-        if (!newTarget.equals(currentTarget)) {
+        if (!newTarget.equals(currentTarget) || alert != null) {
diff --git a/src/test/java/com/redhat/darcy/webdriver/internal/CachingTargetLocatorTest.java b/src/test/java/com/redhat/darcy/webdriver/internal/CachingTargetLocatorTest.java
index 3088a60..5c50171 100644
--- a/src/test/java/com/redhat/darcy/webdriver/internal/CachingTargetLocatorTest.java
+++ b/src/test/java/com/redhat/darcy/webdriver/internal/CachingTargetLocatorTest.java
@@ -25,0 +26 @@
+import static org.mockito.Mockito.times;
@@ -37,0 +39 @@
+import org.openqa.selenium.Alert;
@@ -174,0 +177,50 @@
+
+    @Test
+    public void shouldNotSwitchDriverToAlertIfCurrentTargetIsAlert() {
+        WebDriver mockDriver = mock(WebDriver.class);
+        TargetLocator mockLocator = mock(TargetLocator.class);
+
+        when(mockDriver.switchTo()).thenReturn(mockLocator);
+        when(mockLocator.alert()).thenReturn(mock(Alert.class));
+
+        CachingTargetLocator targetLocator = new CachingTargetLocator(
+                WebDriverTargets.window("test"), mockDriver);
+        targetLocator.alert();
+        targetLocator.alert();
+
+        verify(mockLocator, times(1)).alert();
+    }
+
+    @Test
+    public void shouldSwitchDriverToAlertIfCurrentTargetIsNoLongerAlertAndIsSameAsOriginalTarget() {
+        WebDriver mockDriver = mock(WebDriver.class);
+        TargetLocator mockLocator = mock(TargetLocator.class);
+
+        when(mockDriver.switchTo()).thenReturn(mockLocator);
+        when(mockLocator.alert()).thenReturn(mock(Alert.class));
+
+        CachingTargetLocator targetLocator = new CachingTargetLocator(
+                WebDriverTargets.window("test"), mockDriver);
+        targetLocator.alert();
+        targetLocator.window("test");
+        targetLocator.alert();
+
+        verify(mockLocator, times(2)).alert();
+    }
+
+    @Test
+    public void shouldSwitchDriverToAlertIfCurrentTargetIsNoLongerAlertAndIsDifferentThanOriginalTarget() {
+        WebDriver mockDriver = mock(WebDriver.class);
+        TargetLocator mockLocator = mock(TargetLocator.class);
+
+        when(mockDriver.switchTo()).thenReturn(mockLocator);
+        when(mockLocator.alert()).thenReturn(mock(Alert.class));
+
+        CachingTargetLocator targetLocator = new CachingTargetLocator(
+                WebDriverTargets.window("test"), mockDriver);
+        targetLocator.alert();
+        targetLocator.window("different");
+        targetLocator.alert();
+
+        verify(mockLocator, times(2)).alert();
+    }

