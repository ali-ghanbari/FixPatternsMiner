diff --git a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderImpl.java b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderImpl.java
index 07cf5a2..16b940f 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderImpl.java
@@ -1523 +1523 @@
-        if (!current.getName().equals(packageDescr.getName())) {
+        if (current.getName().equals(packageDescr.getName())) {
diff --git a/drools-compiler/src/test/java/org/drools/compiler/integrationtests/AccumulateTest.java b/drools-compiler/src/test/java/org/drools/compiler/integrationtests/AccumulateTest.java
index 954a3bb..8dd4910 100644
--- a/drools-compiler/src/test/java/org/drools/compiler/integrationtests/AccumulateTest.java
+++ b/drools-compiler/src/test/java/org/drools/compiler/integrationtests/AccumulateTest.java
@@ -2588 +2588,34 @@
-    
+
+    @Test
+    public void testImportAccumulateFunctionWithDeclaration() throws Exception {
+        // DROOLS-750
+        String drl = "package org.foo.bar\n"
+                + "import accumulate "+TestFunction.class.getCanonicalName()+" f;\n"
+                + "import "+Person.class.getCanonicalName()+";\n"
+                + "declare Person \n"
+                + "  @propertyReactive\n"
+                + "end\n"
+                + "rule X when\n"
+                + "    accumulate( $s : String(),\n"
+                + "                $v : f( $s ) )\n"
+                + "then\n"
+                + "end\n";
+        ReleaseId releaseId = new ReleaseIdImpl("foo", "bar", "1.0");
+        KieServices ks = KieServices.Factory.get();
+        createAndDeployJar( ks, releaseId, drl );
+
+        KieContainer kc = ks.newKieContainer( releaseId );
+        KieSession ksession = kc.newKieSession();
+
+        AgendaEventListener ael = mock(AgendaEventListener.class);
+        ksession.addEventListener(ael);
+
+        ksession.insert("x");
+        ksession.fireAllRules();
+
+        ArgumentCaptor<AfterMatchFiredEvent> ac = ArgumentCaptor.forClass(AfterMatchFiredEvent.class);
+        verify( ael ).afterMatchFired(ac.capture());
+
+        assertThat( (Integer) ac.getValue().getMatch().getDeclarationValue("$v"), is(Integer.valueOf(1)) );
+    }
+

