diff --git a/src/main/java/teammates/logic/core/FeedbackQuestionsLogic.java b/src/main/java/teammates/logic/core/FeedbackQuestionsLogic.java
index 3baf9f6..0fa1343 100644
--- a/src/main/java/teammates/logic/core/FeedbackQuestionsLogic.java
+++ b/src/main/java/teammates/logic/core/FeedbackQuestionsLogic.java
@@ -584,0 +585,2 @@
+        } else {
+            // Silently fail if question does not exist.
diff --git a/src/test/java/teammates/test/cases/logic/FeedbackQuestionsLogicTest.java b/src/test/java/teammates/test/cases/logic/FeedbackQuestionsLogicTest.java
index 11b1e08..a9d7bcf 100644
--- a/src/test/java/teammates/test/cases/logic/FeedbackQuestionsLogicTest.java
+++ b/src/test/java/teammates/test/cases/logic/FeedbackQuestionsLogicTest.java
@@ -19,0 +20,2 @@
+import teammates.common.datatransfer.FeedbackQuestionBundle;
+import teammates.common.datatransfer.FeedbackResponseAttributes;
@@ -21,0 +24 @@
+import teammates.common.exception.UnauthorizedAccessException;
@@ -165,0 +169,23 @@
+        
+        ______TS("Add question for feedback session that does not exist");
+        FeedbackQuestionAttributes question = getQuestionFromDatastore("qn1InSession1InCourse1");
+        question.feedbackSessionName = "non-existent Feedback Session";
+        question.setId(null);
+        try {
+            fqLogic.createFeedbackQuestion(question);
+            signalFailureToDetectException();
+        } catch(AssertionError e){
+            assertEquals(e.getMessage(), "Session disappeared.");
+        }
+        
+        ______TS("Add question for course that does not exist");
+        question = getQuestionFromDatastore("qn1InSession1InCourse1");
+        question.courseId = "non-existent course id";
+        question.setId(null);
+        try {
+            fqLogic.createFeedbackQuestion(question);
+            signalFailureToDetectException();
+        } catch(AssertionError e){
+            assertEquals(e.getMessage(), "Session disappeared.");
+        }
+        
@@ -330 +356 @@
-             signalFailureToDetectException("Expected EntityDoesNotExistException not caught.");
+            signalFailureToDetectException("Expected EntityDoesNotExistException not caught.");
@@ -347,0 +374,10 @@
+    }
+    
+    @Test
+    public void testDeleteQuestion() throws Exception {
+        //Success case already tested in update
+        ______TS("question already does not exist, silently fail");
+        
+        fqLogic.deleteFeedbackQuestionCascade("non-existent-question-id");
+        //No error should be thrown.
+        
@@ -479 +515 @@
-    public void testgetFeedbackQuestionsForTeam() throws Exception{
+    public void testGetFeedbackQuestionsForTeam() throws Exception{
@@ -487,0 +524 @@
+        
@@ -503,0 +541,137 @@
+    
+    @Test
+    public void testIsQuestionAnswered() throws Exception {
+        FeedbackQuestionAttributes question;
+        ______TS("test question is answered by user");
+        
+        question = getQuestionFromDatastore("qn1InSession1InCourse1");
+        assertTrue(fqLogic.isQuestionAnsweredByUser(question, "student1InCourse1@gmail.com"));
+        assertFalse(fqLogic.isQuestionAnsweredByUser(question, "studentWithNoResponses@gmail.com"));
+        
+        
+        List<FeedbackResponseAttributes> responses = new ArrayList<FeedbackResponseAttributes>();
+        assertFalse(fqLogic.isQuestionAnsweredByUser(question, "student1InCourse1@gmail.com", responses));
+        
+        responses = frLogic.getFeedbackResponsesForQuestion(question.getId());
+        assertTrue(fqLogic.isQuestionAnsweredByUser(question, "student2InCourse1@gmail.com", responses));
+        
+        ______TS("test question is fully answered by user");
+        
+        assertTrue(fqLogic.isQuestionFullyAnsweredByUser(question, "student1InCourse1@gmail.com"));
+        
+        assertFalse(fqLogic.isQuestionFullyAnsweredByUser(question, "studentWithNoResponses@gmail.com"));
+       
+        ______TS("test question is fully answered by team");
+        
+        assertFalse(fqLogic.isQuestionFullyAnsweredByTeam(question, "Team 1.1"));
+        
+    }  
+    
+    @Test
+    public void testGetFeedbackQuestionBundle() throws Exception {
+        testGetFeedbackQuestionBundleForInstructor();
+        testGetFeedbackQuestionBundleForStudent();
+    }
+    
+    private void testGetFeedbackQuestionBundleForInstructor() throws Exception{
+        ______TS("typical success case");
+        
+        FeedbackQuestionBundle fqBundle = null;
+        FeedbackQuestionAttributes fqa = getQuestionFromDatastore("qn3InSession1InCourse1");
+        
+        fqBundle = fqLogic.getFeedbackQuestionBundleForInstructor(
+                        "First feedback session", "idOfTypicalCourse1",
+                        fqa.getId(), "instructor1@course1.com");
+        
+        assertEquals(fqBundle.feedbackSession.courseId,"idOfTypicalCourse1");
+        assertEquals(fqBundle.feedbackSession.feedbackSessionName,"First feedback session");
+        assertEquals(fqBundle.question.questionNumber, 3);
+        assertEquals(fqBundle.recipientList.size(), 1);
+        assertEquals(fqBundle.responseList.size(), 1);
+        
+        ______TS("non-existent feedback session");
+        
+        try {
+            fqBundle = fqLogic.getFeedbackQuestionBundleForInstructor(
+                        "non-existent feedback session", "idOfTypicalCourse1",
+                        fqa.getId(), "instructor1@course1.com");
+            signalFailureToDetectException();
+        } catch (EntityDoesNotExistException e) {
+            assertEquals(e.getMessage(),"Trying to get a feedback session that does not exist.");
+        }
+        
+        ______TS("non-existent feedback question");
+        
+        try {
+            fqBundle = fqLogic.getFeedbackQuestionBundleForInstructor(
+                        "First feedback session", "idOfTypicalCourse1",
+                        "non-existent fq id", "instructor1@course1.com");
+            signalFailureToDetectException();
+        } catch (EntityDoesNotExistException e) {
+            assertEquals(e.getMessage(),"Trying to get a feedback question that does not exist.");
+        }
+        
+        ______TS("question not meant for user");
+        
+        fqa = getQuestionFromDatastore("qn1InSession1InCourse1");
+        
+        try {
+            fqBundle = fqLogic.getFeedbackQuestionBundleForInstructor(
+                        "First feedback session", "idOfTypicalCourse1",
+                        fqa.getId(), "instructor1@course1.com");
+            signalFailureToDetectException();
+       } catch (UnauthorizedAccessException e) {
+            assertEquals(e.getMessage(),"Trying to access a question not meant for the user.");
+        }
+    }
+    
+    private void testGetFeedbackQuestionBundleForStudent() throws Exception{
+        ______TS("typical success case");
+        
+        FeedbackQuestionAttributes fqa = getQuestionFromDatastore("qn1InSession1InCourse1");
+        
+        FeedbackQuestionBundle fqBundle = fqLogic.getFeedbackQuestionBundleForStudent(
+                        "First feedback session", "idOfTypicalCourse1",
+                        fqa.getId(), "student1InCourse1@gmail.com");
+        
+        assertEquals(fqBundle.feedbackSession.courseId,"idOfTypicalCourse1");
+        assertEquals(fqBundle.feedbackSession.feedbackSessionName,"First feedback session");
+        assertEquals(fqBundle.question.questionNumber, 1);
+        assertEquals(fqBundle.recipientList.size(), 1);
+        assertEquals(fqBundle.responseList.size(), 1);
+        
+        ______TS("non-existent feedback session");
+        
+        try {
+            fqBundle = fqLogic.getFeedbackQuestionBundleForStudent(
+                        "non-existent feedback session", "idOfTypicalCourse1",
+                        fqa.getId(), "student1InCourse1@gmail.com");
+            signalFailureToDetectException();
+        } catch (EntityDoesNotExistException e) {
+            assertEquals(e.getMessage(),"Trying to get a feedback session that does not exist.");
+        }
+        
+        ______TS("non-existent feedback question");
+        
+        try {
+            fqBundle = fqLogic.getFeedbackQuestionBundleForStudent(
+                        "First feedback session", "idOfTypicalCourse1",
+                        "non-existent fq id", "student1InCourse1@gmail.com");
+            signalFailureToDetectException();
+        } catch (EntityDoesNotExistException e) {
+            assertEquals(e.getMessage(),"Trying to get a feedback question that does not exist.");
+        }
+        
+        ______TS("question not meant for user");
+        
+        fqa = getQuestionFromDatastore("qn3InSession1InCourse1");
+        
+        try {
+            fqBundle = fqLogic.getFeedbackQuestionBundleForStudent(
+                        "First feedback session", "idOfTypicalCourse1",
+                        fqa.getId(), "student1InCourse1@gmail.com");
+            signalFailureToDetectException();
+        } catch (UnauthorizedAccessException e) {
+            assertEquals(e.getMessage(),"Trying to access a question not meant for the user.");
+        }
+    }

