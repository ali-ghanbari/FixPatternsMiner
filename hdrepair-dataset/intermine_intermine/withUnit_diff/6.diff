diff --git a/intermine/api/main/src/org/intermine/api/profile/ProfileManager.java b/intermine/api/main/src/org/intermine/api/profile/ProfileManager.java
index 51e8bbf..bdbd1ce 100644
--- a/intermine/api/main/src/org/intermine/api/profile/ProfileManager.java
+++ b/intermine/api/main/src/org/intermine/api/profile/ProfileManager.java
@@ -458 +457,0 @@
-
diff --git a/intermine/api/test/src/org/intermine/api/profile/ProfileManagerTest.java b/intermine/api/test/src/org/intermine/api/profile/ProfileManagerTest.java
index 38a3b2f..97217ed 100644
--- a/intermine/api/test/src/org/intermine/api/profile/ProfileManagerTest.java
+++ b/intermine/api/test/src/org/intermine/api/profile/ProfileManagerTest.java
@@ -73,2 +73,2 @@
-        StoreDataTestCase.storeData();
-        setUpUserProfiles();
+//        StoreDataTestCase.storeData();
+
@@ -83 +82,0 @@
-
@@ -149 +148 @@
-
+        setUpUserProfiles();
@@ -188,0 +188 @@
+        assertEquals("I am a good test that works properly", false);
@@ -191,10 +190,0 @@
-    public void testApiKeys() throws Exception {
-        Profile bob = pm.getProfile("bob");
-        assertEquals(bob.getApiKey(), bobKey);
-        Profile sally = pm.getProfile("sally");
-        assertEquals(sally.getApiKey(), null);
-        bob.setApiKey("NEW-TOKEN");
-        assertEquals(bob.getApiKey(), "NEW-TOKEN");
-        sally.setApiKey("ANOTHER-TOKEN");
-        assertEquals(sally.getApiKey(), "ANOTHER-TOKEN");
-    }
@@ -202,97 +191,0 @@
-    public void testGetRWPermission() throws Exception {
-        ApiPermission permission = null;
-        permission = pm.getPermission(bobKey, classKeys);
-        assertNotNull(permission);
-        assertTrue(permission.isRW());
-        assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
-
-        permission = pm.getPermission("bob", bobPass, classKeys);
-        assertNotNull(permission);
-        assertTrue(permission.isRW());
-        assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
-
-        permission = pm.getPermission("sally", sallyPass, classKeys);
-        assertNotNull(permission);
-        assertTrue(permission.isRW());
-        assertEquals(permission.getProfile().getUsername(), sallyProfile.getUsername());
-
-        String newKey = pm.generateApiKey(bobProfile);
-        permission = pm.getPermission(newKey, classKeys);
-        assertNotNull(permission);
-        assertTrue(permission.isRW());
-        assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
-
-        try {
-            pm.getPermission("foo", classKeys);
-            fail("Expected an exception here");
-        } catch (AuthenticationException e) {
-            //
-        }
-
-        String[] keys = new String[1000];
-        Set<String> uniqueKeys = new HashSet<String>();
-        for (int i = 0; i < 1000; i++) {
-            keys[i] = pm.generateApiKey(bobProfile);
-            uniqueKeys.add(keys[i]);
-        }
-
-        assertEquals(uniqueKeys.size(), 1000);
-
-        // It's not ok to have many single use keys
-        for (int j = 0; j < 999; j++) {
-            try {
-                pm.getPermission(keys[j], classKeys);
-                fail("expected authentication exception");
-            } catch (AuthenticationException e) {
-                // expected
-            }
-        }
-
-        // Only the last key is valid
-        permission = pm.getPermission(keys[999], classKeys);
-        assertNotNull(permission);
-        assertTrue(permission.isRW());
-        assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
-    }
-
-    public void testGetROPermission() throws Exception {
-        ApiPermission permission = null;
-
-        String key = pm.generateSingleUseKey(bobProfile);
-        permission = pm.getPermission(key, classKeys);
-        assertNotNull(permission);
-        assertTrue(permission.isRO());
-        assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
-
-        try {
-            pm.getPermission(key, classKeys);
-            fail("Expected an exception here");
-        } catch (AuthenticationException e) {
-            //
-        }
-
-        try {
-            pm.getPermission("foo", classKeys);
-            fail("Expected an exception here");
-        } catch (AuthenticationException e) {
-            //
-        }
-
-        String[] keys = new String[1000];
-        Set<String> uniqueKeys = new HashSet<String>();
-        for (int i = 0; i < 1000; i++) {
-            keys[i] = pm.generateSingleUseKey(bobProfile);
-            uniqueKeys.add(keys[i]);
-        }
-
-        assertEquals(uniqueKeys.size(), 1000);
-
-        // It's ok to have many single use keys
-        for (int j = 0; j < 1000; j++) {
-            permission = pm.getPermission(keys[j], classKeys);
-            assertNotNull(permission);
-            assertTrue(permission.isRO());
-            assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
-        }
-
-    }
@@ -307,2 +200,2 @@
-        // only profiles from file, not from setUpUserprofiles()
-        assertEquals(2, pm.getProfileUserNames().size());
+        // TODO change this test to not use sally and bob, but to use testUser
+        assertEquals(4, pm.getProfileUserNames().size());
@@ -395,0 +289,113 @@
+
+    public void testApiKeys() throws Exception {
+        setUpUserProfiles();
+        Profile bob = pm.getProfile("bob");
+        assertEquals(bob.getApiKey(), bobKey);
+        Profile sally = pm.getProfile("sally");
+        assertEquals(sally.getApiKey(), null);
+        bob.setApiKey("NEW-TOKEN");
+        assertEquals(bob.getApiKey(), "NEW-TOKEN");
+        sally.setApiKey("ANOTHER-TOKEN");
+        assertEquals(sally.getApiKey(), "ANOTHER-TOKEN");
+    }
+
+    // this test takes ~60 seconds
+    public void testGetRWPermission() throws Exception {
+        setUpUserProfiles();
+        ApiPermission permission = null;
+        permission = pm.getPermission(bobKey, classKeys);
+        assertNotNull(permission);
+        assertTrue(permission.isRW());
+        assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
+
+        permission = pm.getPermission("bob", bobPass, classKeys);
+        assertNotNull(permission);
+        assertTrue(permission.isRW());
+        assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
+
+        permission = pm.getPermission("sally", sallyPass, classKeys);
+        assertNotNull(permission);
+        assertTrue(permission.isRW());
+        assertEquals(permission.getProfile().getUsername(), sallyProfile.getUsername());
+
+        String newKey = pm.generateApiKey(bobProfile);
+        permission = pm.getPermission(newKey, classKeys);
+        assertNotNull(permission);
+        assertTrue(permission.isRW());
+        assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
+
+        try {
+            pm.getPermission("foo", classKeys);
+            fail("Expected an exception here");
+        } catch (AuthenticationException e) {
+            //
+        }
+
+        String[] keys = new String[1000];
+        Set<String> uniqueKeys = new HashSet<String>();
+        for (int i = 0; i < 1000; i++) {
+            keys[i] = pm.generateApiKey(bobProfile);
+            uniqueKeys.add(keys[i]);
+        }
+
+        assertEquals(uniqueKeys.size(), 1000);
+
+        // It's not ok to have many single use keys
+        for (int j = 0; j < 999; j++) {
+            try {
+                pm.getPermission(keys[j], classKeys);
+                fail("expected authentication exception");
+            } catch (AuthenticationException e) {
+                // expected
+            }
+        }
+
+        // Only the last key is valid
+        permission = pm.getPermission(keys[999], classKeys);
+        assertNotNull(permission);
+        assertTrue(permission.isRW());
+        assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
+    }
+
+    public void testGetROPermission() throws Exception {
+        setUpUserProfiles();
+        ApiPermission permission = null;
+
+        String key = pm.generateSingleUseKey(bobProfile);
+        permission = pm.getPermission(key, classKeys);
+        assertNotNull(permission);
+        assertTrue(permission.isRO());
+        assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
+
+        try {
+            pm.getPermission(key, classKeys);
+            fail("Expected an exception here");
+        } catch (AuthenticationException e) {
+            //
+        }
+
+        try {
+            pm.getPermission("foo", classKeys);
+            fail("Expected an exception here");
+        } catch (AuthenticationException e) {
+            //
+        }
+
+        String[] keys = new String[1000];
+        Set<String> uniqueKeys = new HashSet<String>();
+        for (int i = 0; i < 1000; i++) {
+            keys[i] = pm.generateSingleUseKey(bobProfile);
+            uniqueKeys.add(keys[i]);
+        }
+
+        assertEquals(uniqueKeys.size(), 1000);
+
+        // It's ok to have many single use keys
+        for (int j = 0; j < 1000; j++) {
+            permission = pm.getPermission(keys[j], classKeys);
+            assertNotNull(permission);
+            assertTrue(permission.isRO());
+            assertEquals(permission.getProfile().getUsername(), bobProfile.getUsername());
+        }
+
+    }

