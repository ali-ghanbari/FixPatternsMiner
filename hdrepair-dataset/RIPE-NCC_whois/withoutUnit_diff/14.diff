diff --git a/whois-commons/src/main/java/net/ripe/db/whois/common/dao/jdbc/JdbcRpslObjectOperations.java b/whois-commons/src/main/java/net/ripe/db/whois/common/dao/jdbc/JdbcRpslObjectOperations.java
index 99fcc96..72ae6d1 100644
--- a/whois-commons/src/main/java/net/ripe/db/whois/common/dao/jdbc/JdbcRpslObjectOperations.java
+++ b/whois-commons/src/main/java/net/ripe/db/whois/common/dao/jdbc/JdbcRpslObjectOperations.java
@@ -46,0 +47 @@
+
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/NoopIntegrationSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/NoopIntegrationSpec.groovy
index 1180d5f..b8fa888 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/NoopIntegrationSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/NoopIntegrationSpec.groovy
@@ -5 +4,0 @@
-import org.junit.Ignore
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/OrganisationIntegrationSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/OrganisationIntegrationSpec.groovy
index 74445ef..4521cb0 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/OrganisationIntegrationSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/OrganisationIntegrationSpec.groovy
@@ -4,0 +5 @@
+import spock.lang.Ignore
@@ -132,0 +134,24 @@
+    @Ignore("TODO: [ES] internal software error")
+    def "illegal character in key"() {
+        def org = new SyncUpdate(data:
+            "organisation: AUTO-1\n" +
+            "org-name:     Ripe NCC organisation\n" +
+            "org-type:     OTHER\n" +
+            "address:      Singel 258\n" +
+            "phone: +31-2-12345678\n" +
+            " \n" +
+            "e-mail:        bitbucket@ripe.net\n" +
+            "changed:      admin@test.com 20120505\n" +
+            "mnt-by:       TST-MNT\n" +
+            "mnt-ref:      TST-MNT\n" +
+            "source:       TEST\n" +
+            "password: update\n")
+
+      when:
+        def response = syncUpdate org
+
+      then:
+        response =~ /Create SUCCEEDED: \[organisation\] ORG-RNO1-TEST/
+        query("ORG-RNO1-TEST") =~ /organisation/
+    }
+
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/SignedMessageIntegrationSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/SignedMessageIntegrationSpec.groovy
index 14b7b2d..6ef0c52 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/SignedMessageIntegrationSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/integration/SignedMessageIntegrationSpec.groovy
@@ -2 +1,0 @@
-
@@ -4080,3 +4078,0 @@
-
-
-
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AbuseHandlingSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AbuseHandlingSpec.groovy
index 03e1500..fd6f561 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AbuseHandlingSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AbuseHandlingSpec.groovy
@@ -2 +1,0 @@
-
@@ -2430,0 +2430,48 @@
+    @Ignore("TODO: [ES] failing test")
+    def "modify ALLOCATED PA ref ORGANISATION with no abuse-c, type LIR"() {
+      given:
+        syncUpdate(getTransient("ALLOC-UNS") + "override: denis,override1")
+        queryObject("-r -T inetnum 192.0.0.0 - 192.255.255.255", "inetnum", "192.0.0.0 - 192.255.255.255")
+        syncUpdate(getTransient("ALLOC-PA") + "override: denis,override1")
+        queryObject("-r -T inetnum 192.168.0.0 - 192.169.255.255", "inetnum", "192.168.0.0 - 192.169.255.255")
+
+      expect:
+
+      when:
+        def message = syncUpdate("""\
+                inetnum:      192.168.0.0 - 192.169.255.255
+                netname:      TEST-NET-NAME
+                descr:        TEST network
+                country:      NL
+                org:          ORG-LIR2-TEST
+                admin-c:      SR1-TEST
+                tech-c:       TP1-TEST
+                status:       ALLOCATED PA
+                mnt-by:       RIPE-NCC-HM-MNT
+                mnt-lower:    LIR-MNT
+                mnt-lower:    LIR2-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+                remarks:      just added
+
+                password: hm
+                password: owner3
+                """.stripIndent()
+        )
+
+      then:
+        def ack = new AckResponse("", message)
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(0, 0, 0, 0, 0)
+        ack.summary.assertErrors(1, 0, 1, 0)
+
+        ack.countErrorWarnInfo(1, 0, 0)
+        ack.errors.any { it.operation == "Modify" && it.key == "[inetnum] 192.168.0.0 - 192.169.255.255" }
+        ack.errorMessagesFor("Modify", "[inetnum] 192.168.0.0 - 192.169.255.255") ==
+                ["This object must include an \"abuse-c\" attribute"]
+
+        query_object_not_matches("-rGBT organisation ORG-LIR2-TEST", "organisation", "ORG-LIR2-TEST", "abuse-c:")
+        query_object_not_matches("-r -T inetnum 192.168.0.0 - 192.169.255.255", "inetnum", "192.168.0.0 - 192.169.255.255", "just added")
+    }
+
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AutNumAuthSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AutNumAuthSpec.groovy
index c0d4c0b..8a28f1c 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AutNumAuthSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AutNumAuthSpec.groovy
@@ -2 +1,0 @@
-
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AuthSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AuthSpec.groovy
index ab1002d..8fae3f0 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AuthSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/AuthSpec.groovy
@@ -2 +1,0 @@
-
@@ -1276,0 +1276,42 @@
+
+    def "create assignment, parent with mnt-lower, diff pw to mnt-by, no pw supplied, override separate from object"() {
+      given:
+        syncUpdate(getTransient("P-LOW") + "password: hm\npassword: owner3")
+
+      expect:
+        queryObject("-GBr -T inetnum 192.168.128.0 - 192.168.255.255", "inetnum", "192.168.128.0 - 192.168.255.255")
+        queryObjectNotFound("-r -T inetnum 192.168.200.0 - 192.168.200.255", "inetnum", "192.168.200.0 - 192.168.200.255")
+
+      when:
+        def message = syncUpdate("""\
+                inetnum:      192.168.200.0 - 192.168.200.255
+                netname:      RIPE-NET1
+                descr:        /24 assigned
+                country:      NL
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                status:       ASSIGNED PA
+                mnt-by:       END-USER-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+
+
+                override: denis,override1
+
+                """.stripIndent()
+        )
+
+      then:
+        def ack = new AckResponse("", message)
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(0, 0, 0, 0, 0)
+        ack.summary.assertErrors(1, 1, 0, 0)
+
+        ack.countErrorWarnInfo(2, 1, 0)
+        ack.errors.any { it.operation == "Create" && it.key == "[inetnum] 192.168.200.0 - 192.168.200.255" }
+
+        ack.contents =~ /\*\*\*Warning: An override password was found not attached to an object and was\n\s+ignored/
+
+        queryObjectNotFound("-rGBT inetnum 192.168.200.0 - 192.168.200.255", "inetnum", "192.168.200.0 - 192.168.200.255")
+    }
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/Inet6numStatusChildSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/Inet6numStatusChildSpec.groovy
index 3391b39..d2ea981 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/Inet6numStatusChildSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/Inet6numStatusChildSpec.groovy
@@ -2 +1,0 @@
-
@@ -5,0 +5 @@
+import spock.lang.Ignore
@@ -2078,0 +2079,141 @@
+    @Ignore("TODO: failing test")
+    def "create child AGGREGATED-BY-LIR, assignment-size = 40"() {
+        given:
+        syncUpdate(getTransient("RIR-ALLOC-20") + "password: owner3\npassword: hm")
+        queryObject("-r -T inet6num 2001::/20", "inet6num", "2001::/20")
+        syncUpdate(getTransient("LIR-ALLOC-30") + "password: owner3\npassword: hm\npassword: lir")
+        queryObject("-r -T inet6num 2001:600::/30", "inet6num", "2001:600::/30")
+
+        expect:
+        queryObjectNotFound("-r -T inet6num 2001:600::/32", "inet6num", "2001:600::/32")
+
+        when:
+        def ack = syncUpdateWithResponse("""\
+                inet6num:     2001:600::/32
+                netname:      EU-ZZ-2001-0600
+                descr:        European Regional Registry
+                country:      EU
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                mnt-by:       LIR-MNT
+                mnt-lower:    liR-MNT
+                status:       AGGREGATED-BY-LIR
+                assignment-size: 40
+                changed:      dbtest@ripe.net
+                source:       TEST
+
+                password: lir
+                password: owner3
+                """.stripIndent()
+        )
+
+        then:
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(0, 0, 0, 0, 0)
+        ack.summary.assertErrors(1, 1, 0, 0)
+
+        ack.countErrorWarnInfo(1, 0, 0)
+        ack.errors.any { it.operation == "Create" && it.key == "[inet6num] 2001:600::/32" }
+        ack.errorMessagesFor("Create", "[inet6num] 2001:600::/32") ==
+                ["\"assignment-size:\" value cannot be smaller than 48"]
+
+        queryObjectNotFound("-rGBT inet6num 2001:600::/32", "inet6num", "2001:600::/32")
+    }
+
+    @Ignore("TODO: confirmed issue - cannot assign prefix bigger than a /64 (against policy)")
+    def "create child AGGREGATED-BY-LIR, assignment-size = 128"() {
+      given:
+        syncUpdate(getTransient("RIR-ALLOC-20") + "password: owner3\npassword: hm")
+        queryObject("-r -T inet6num 2001::/20", "inet6num", "2001::/20")
+        syncUpdate(getTransient("LIR-ALLOC-30") + "password: owner3\npassword: hm\npassword: lir")
+        queryObject("-r -T inet6num 2001:600::/30", "inet6num", "2001:600::/30")
+
+      expect:
+        queryObjectNotFound("-r -T inet6num 2001:600::/32", "inet6num", "2001:600::/32")
+
+      when:
+        def message = send new Message(
+                subject: "",
+                body: """\
+                inet6num:     2001:600::/32
+                netname:      EU-ZZ-2001-0600
+                descr:        European Regional Registry
+                country:      EU
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                mnt-by:       LIR-MNT
+                mnt-lower:    liR-MNT
+                status:       AGGREGATED-BY-LIR
+                assignment-size: 128
+                changed:      dbtest@ripe.net
+                source:       TEST
+
+                password: lir
+                password: owner3
+                """.stripIndent()
+        )
+
+      then:
+        def ack = ackFor message
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(0, 0, 0, 0, 0)
+        ack.summary.assertErrors(1, 1, 0, 0)
+
+        ack.countErrorWarnInfo(1, 0, 0)
+        ack.errors.any { it.operation == "Create" && it.key == "[inet6num] 2001:600::/32" }
+        ack.errorMessagesFor("Create", "[inet6num] 2001:600::/32") ==
+                ["\"assignment-size:\" value cannot be greater than 64"]
+
+        queryObject("-rGBT inet6num 2001:600::/32", "inet6num", "2001:600::/32")
+    }
+
+    @Ignore("TODO: failing test")
+    def "create child AGGREGATED-BY-LIR, assignment-size > 128"() {
+      given:
+        syncUpdate(getTransient("RIR-ALLOC-20") + "password: owner3\npassword: hm")
+        queryObject("-r -T inet6num 2001::/20", "inet6num", "2001::/20")
+        syncUpdate(getTransient("LIR-ALLOC-30") + "password: owner3\npassword: hm\npassword: lir")
+        queryObject("-r -T inet6num 2001:600::/30", "inet6num", "2001:600::/30")
+
+      expect:
+        queryObjectNotFound("-r -T inet6num 2001:600::/32", "inet6num", "2001:600::/32")
+
+      when:
+        def message = send new Message(
+                subject: "",
+                body: """\
+                inet6num:     2001:600::/32
+                netname:      EU-ZZ-2001-0600
+                descr:        European Regional Registry
+                country:      EU
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                mnt-by:       LIR-MNT
+                mnt-lower:    liR-MNT
+                status:       AGGREGATED-BY-LIR
+                assignment-size: 130
+                changed:      dbtest@ripe.net
+                source:       TEST
+
+                password: lir
+                password: owner3
+                """.stripIndent()
+        )
+
+      then:
+        def ack = ackFor message
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(0, 0, 0, 0, 0)
+        ack.summary.assertErrors(1, 1, 0, 0)
+
+        ack.countErrorWarnInfo(1, 0, 0)
+        ack.errors.any { it.operation == "Create" && it.key == "[inet6num] 2001:600::/32" }
+        ack.errorMessagesFor("Create", "[inet6num] 2001:600::/32") ==
+                ["\"assignment-size:\" value value cannot be greater than 64"]
+
+        queryObjectNotFound("-rGBT inet6num 2001:600::/32", "inet6num", "2001:600::/32")
+    }
+
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/InetnumSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/InetnumSpec.groovy
index b9a0ef5..fd58804 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/InetnumSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/InetnumSpec.groovy
@@ -2 +1,0 @@
-
@@ -7,0 +7 @@
+import spock.lang.Ignore
@@ -4812,0 +4813,116 @@
+    def "delete and re-create 3 objects, change status"() {
+      given:
+        syncUpdate(getTransient("EARLY") + "password: hm\npassword: owner3")
+        queryObject("-r -T inetnum 192.168.0.0 - 192.168.255.255", "inetnum", "192.168.0.0 - 192.168.255.255")
+        syncUpdate(getTransient("PART-PA") + "password: lir")
+        queryObject("-r -T inetnum 192.168.200.0 - 192.168.255.255", "inetnum", "192.168.200.0 - 192.168.255.255")
+        syncUpdate(getTransient("ASS-END") + "password: lir\npassword: end")
+        queryObject("-r -T inetnum 192.168.200.0 - 192.168.200.255", "inetnum", "192.168.200.0 - 192.168.200.255")
+
+      expect:
+        queryObjectNotFound("-r -T inetnum 62.59.192.2 - 92.59.192.30", "inetnum", "62.59.192.2 - 92.59.192.30")
+
+      when:
+        def message = syncUpdate("""\
+                inetnum:      192.168.200.0 - 192.168.255.255
+                netname:      TEST-NET-NAME
+                descr:        TEST network
+                country:      NL
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                status:       LIR-PARTITIONED PA
+                mnt-by:       LIR-MNT
+                mnt-lower:    LIR-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+                delete:       changing status
+
+                inetnum:      192.168.200.0 - 192.168.255.255
+                netname:      TEST-NET-NAME
+                descr:        TEST network
+                country:      NL
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                status:       SUB-ALLOCATED PA
+                mnt-by:       LIR-MNT
+                mnt-lower:    LIR-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+
+                inetnum:      192.168.200.0 - 192.168.200.255
+                netname:      RIPE-NET1
+                descr:        /24 assigned
+                country:      NL
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                status:       ASSIGNED PA
+                mnt-by:       END-USER-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+                delete:       changing status
+
+                inetnum:      192.168.200.0 - 192.168.200.255
+                netname:      RIPE-NET1
+                descr:        /24 assigned
+                country:      NL
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                status:       LIR-PARTITIONED PA
+                mnt-by:       END-USER-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+
+                inetnum:      192.168.0.0 - 192.168.255.255
+                netname:      RIPE-NET1
+                descr:        /16 ERX
+                country:      NL
+                org:          ORG-LIR1-TEST
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                status:       EARLY-REGISTRATION
+                mnt-by:       RIPE-NCC-HM-MNT
+                mnt-lower:    LIR-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+                DELETE:       changing status
+
+                inetnum:      192.168.0.0 - 192.168.255.255
+                netname:      RIPE-NET1
+                descr:        /16 ERX
+                country:      NL
+                org:          ORG-LIR1-TEST
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                status:       ALLOCATED PA
+                mnt-by:       RIPE-NCC-HM-MNT
+                mnt-lower:    LIR-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+
+                password: hm
+                password: lir
+                password: end
+                password: owner3
+                """.stripIndent()
+        )
+
+      then:
+        def ack = new AckResponse("", message)
+
+        ack.summary.nrFound == 6
+        ack.summary.assertSuccess(6, 3, 0, 3, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+
+        ack.countErrorWarnInfo(0, 0, 0)
+        ack.successes.any { it.operation == "Delete" && it.key == "[inetnum] 192.168.0.0 - 192.168.255.255" }
+        ack.successes.any { it.operation == "Delete" && it.key == "[inetnum] 192.168.200.0 - 192.168.255.255" }
+        ack.successes.any { it.operation == "Delete" && it.key == "[inetnum] 192.168.200.0 - 192.168.200.255" }
+        ack.successes.any { it.operation == "Create" && it.key == "[inetnum] 192.168.0.0 - 192.168.255.255" }
+        ack.successes.any { it.operation == "Create" && it.key == "[inetnum] 192.168.200.0 - 192.168.255.255" }
+        ack.successes.any { it.operation == "Create" && it.key == "[inetnum] 192.168.200.0 - 192.168.200.255" }
+
+        query_object_matches("-rGBT inetnum 192.168.0.0 - 192.168.255.255", "inetnum", "192.168.0.0 - 192.168.255.255", "ALLOCATED PA")
+        query_object_matches("-rGBT inetnum 192.168.200.0 - 192.168.255.255", "inetnum", "192.168.200.0 - 192.168.255.255", "SUB-ALLOCATED PA")
+        query_object_matches("-rGBT inetnum 192.168.200.0 - 192.168.200.255", "inetnum", "192.168.200.0 - 192.168.200.255", "LIR-PARTITIONED PA")
+    }
+
@@ -4934,0 +5051,42 @@
+    @Ignore("TODO: confirmed issue, this should succeed if admin auth has been supplied")
+    def "modify assignment, user mnt-by, add RS mntner with RS auth"() {
+      given:
+        syncUpdate(getTransient("ALLOC-PA") + "password: hm\npassword: owner3")
+        queryObject("-GBr -T inetnum 192.168.0.0 - 192.169.255.255", "inetnum", "192.168.0.0 - 192.169.255.255")
+        syncUpdate(getTransient("ASS") + "password: lir\npassword: end")
+        queryObject("-GBr -T inetnum 192.168.200.0 - 192.168.200.255", "inetnum", "192.168.200.0 - 192.168.200.255")
+
+      when:
+        def message = send new Message(
+                subject: "",
+                body: """\
+                inetnum:      192.168.200.0 - 192.168.200.255
+                netname:      RIPE-NET1
+                descr:        /24 assigned
+                country:      NL
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                status:       ASSIGNED PA
+                mnt-by:       END-USER-MNT
+                mnt-by:       RIPE-NCC-HM-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+
+                password: end
+                password: hm
+                """.stripIndent()
+        )
+
+      then:
+        def ack = ackFor message
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 0, 1, 0, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+
+        ack.countErrorWarnInfo(0, 0, 0)
+        ack.successes.any { it.operation == "Modify" && it.key == "[inetnum] 192.168.200.0 - 192.168.200.255" }
+
+        query_object_matches("-rGBT inetnum 192.168.200.0 - 192.168.200.255", "inetnum", "192.168.200.0 - 192.168.200.255", "RIPE-NCC-HM-MNT")
+    }
+
@@ -4976,0 +5135,42 @@
+    @Ignore("TODO: failing test")
+    def "modify assignment, user mnt-by, add DB mntner with DB auth"() {
+      given:
+        syncUpdate(getTransient("ALLOC-PA") + "password: hm\npassword: owner3")
+        queryObject("-GBr -T inetnum 192.168.0.0 - 192.169.255.255", "inetnum", "192.168.0.0 - 192.169.255.255")
+        syncUpdate(getTransient("ASS") + "password: lir\npassword: end")
+        queryObject("-GBr -T inetnum 192.168.200.0 - 192.168.200.255", "inetnum", "192.168.200.0 - 192.168.200.255")
+
+      when:
+        def message = send new Message(
+                subject: "",
+                body: """\
+                inetnum:      192.168.200.0 - 192.168.200.255
+                netname:      RIPE-NET1
+                descr:        /24 assigned
+                country:      NL
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                status:       ASSIGNED PA
+                mnt-by:       END-USER-MNT
+                mnt-by:       RIPE-DBM-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+
+                password: end
+                password: dbm
+                """.stripIndent()
+        )
+
+      then:
+        def ack = ackFor message
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 0, 1, 0, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+
+        ack.countErrorWarnInfo(0, 0, 0)
+        ack.successes.any { it.operation == "Modify" && it.key == "[inetnum] 192.168.200.0 - 192.168.200.255" }
+
+        query_object_matches("-rGBT inetnum 192.168.200.0 - 192.168.200.255", "inetnum", "192.168.200.0 - 192.168.200.255", "RIPE-DBM-MNT")
+    }
+
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/InetnumStatusBetweenSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/InetnumStatusBetweenSpec.groovy
index 1d94cfd..67cf158 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/InetnumStatusBetweenSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/InetnumStatusBetweenSpec.groovy
@@ -2 +1,0 @@
-
@@ -5,0 +5 @@
+import spock.lang.Ignore
@@ -2144,0 +2145,46 @@
+    @Ignore("TODO: confirmed issue - this scenario shouldn't succeed")
+    def "create between user ALLOCATED PA and ASSIGNED PA, with status ASSIGNED PA"() {
+      given:
+        syncUpdate(getTransient("USER-ALLOC-PA") + "password: owner3\npassword: hm\npassword: lir")
+        syncUpdate(getTransient("ASS-END") + "password: owner3\npassword: end\npassword: lir")
+
+      expect:
+        queryObject("-r -T inetnum 192.0.0.0 - 192.255.255.255", "inetnum", "192.0.0.0 - 192.255.255.255")
+        queryObject("-r -T inetnum 192.168.200.0 - 192.168.200.255", "inetnum", "192.168.200.0 - 192.168.200.255")
+        queryObjectNotFound("-r -T inetnum 192.100.0.0 - 192.200.255.255", "inetnum", "192.100.0.0 - 192.200.255.255")
+
+      when:
+      def message = syncUpdate("""
+                inetnum:      192.100.0.0 - 192.200.255.255
+                netname:      TEST-NET-NAME
+                descr:        TEST network
+                country:      NL
+                org:          ORG-LIR1-TEST
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                status:       ASSIGNED PA
+                mnt-by:       LIR-MNT
+                mnt-lower:    LIR-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+
+                password: owner3
+                password: lir
+                """.stripIndent()
+        )
+
+      then:
+      def ack = new AckResponse("", message)
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(0, 0, 0, 0, 0)
+        ack.summary.assertErrors(1, 1, 0, 0)
+
+        ack.countErrorWarnInfo(1, 0, 0)
+        ack.errors.any { it.operation == "Create" && it.key == "[inetnum] 192.100.0.0 - 192.200.255.255" }
+        ack.errorMessagesFor("Create", "[inetnum] 192.100.0.0 - 192.200.255.255") ==
+                ["Status ASSIGNED PA not allowed when more specific object '192.168.200.0 - 192.168.200.255' has status ASSIGNED PA"]
+
+        queryObjectNotFound("-r -T inetnum 192.100.0.0 - 192.200.255.255", "inetnum", "192.100.0.0 - 192.200.255.255")
+    }
+
@@ -3184,0 +3231,49 @@
+    // TODO: confirmed issue, for two reasons:
+    //      (1) cannot have hierarchy of assignments
+    //      (2) cannot have an assignment under an allocated unspecified
+    @Ignore("TODO: failing test")
+    def "create between ALLOCATED UNSPECIFIED and ASSIGNED PA, with status ASSIGNED PA"() {
+        given:
+        syncUpdate(getTransient("ALLOC-UNS") + "password: owner3\npassword: hm")
+        queryObject("-r -T inetnum 192.0.0.0 - 192.255.255.255", "inetnum", "192.0.0.0 - 192.255.255.255")
+        syncUpdate(getTransient("ASS-END") + "override: denis,override1")
+        queryObject("-r -T inetnum 192.168.200.0 - 192.168.200.255", "inetnum", "192.168.200.0 - 192.168.200.255")
+
+        expect:
+        queryObjectNotFound("-r -T inetnum 192.100.0.0 - 192.200.255.255", "inetnum", "192.100.0.0 - 192.200.255.255")
+
+        when:
+        def ack = syncUpdateWithResponse("""\
+                inetnum:      192.100.0.0 - 192.200.255.255
+                netname:      TEST-NET-NAME
+                descr:        TEST network
+                country:      NL
+                org:          ORG-LIR1-TEST
+                admin-c:      TP1-TEST
+                tech-c:       TP1-TEST
+                status:       ASSIGNED PA
+                mnt-by:       LIR-MNT
+                mnt-lower:    LIR-MNT
+                changed:      dbtest@ripe.net 20020101
+                source:       TEST
+
+                password: hm
+                password: owner3
+                password: lir
+                """.stripIndent()
+        )
+
+        then:
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(0, 0, 0, 0, 0)
+        ack.summary.assertErrors(1, 1, 0, 0)
+
+        ack.countErrorWarnInfo(1, 0, 0)
+        ack.errors.any { it.operation == "Create" && it.key == "[inetnum] 192.100.0.0 - 192.200.255.255" }
+        ack.errorMessagesFor("Create", "[inetnum] 192.100.0.0 - 192.200.255.255") ==
+                ["Status ASSIGNED PA not allowed when more specific object '192.168.200.0 - 192.168.200.255' has status ASSIGNED PA"]
+
+        queryObjectNotFound("-r -T inetnum 192.100.0.0 - 192.200.255.255", "inetnum", "192.100.0.0 - 192.200.255.255")
+    }
+
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/OrgSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/OrgSpec.groovy
index ed44000..16e7fbd 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/OrgSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/OrgSpec.groovy
@@ -1048 +1048 @@
-// commented out until bug fixed so these queries work
+// TODO commented out until bug fixed so these queries work
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/RoleSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/RoleSpec.groovy
index 718c3df..1655457 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/RoleSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/RoleSpec.groovy
@@ -2 +1,0 @@
-
@@ -6,0 +6 @@
+import spock.lang.Ignore
@@ -737,0 +738,36 @@
+    //@Ignore("failing due to invalid search key: review by Denis")
+    def "create role with name including all possible chars"() {
+        given:
+
+        expect:
+        queryObjectNotFound("-r -T role FR1-TEST", "role", "@ \"*TTTTTT & ][,] (XAMPLE) 1234567890 abc ._\"*@,&:!'`+/-")
+
+        when:
+        def message = syncUpdate("""
+                role:    @ "*TTTTTT & ][,] (XAMPLE) 1234567890 abc ._"*@,&:!'`+/-
+                address: St James Street
+                address: Burnley
+                address: UK
+                e-mail:  dbtest@ripe.net
+                nic-hdl: FR1-TEST
+                mnt-by:  owner-mnt
+                changed: dbtest@ripe.net 20121016
+                source:  TEST
+
+                password: owner
+                """.stripIndent()
+        )
+
+        then:
+        def ack = new AckResponse("", message)
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 1, 0, 0, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+
+        ack.countErrorWarnInfo(0, 0, 0)
+        ack.successes.any { it.operation == "Create" && it.key == "[role] FR1-TEST   @ \"*TTTTTT & ][,] (XAMPLE) 1234567890 abc ._\"*@,&:!'`+/-" }
+
+        queryObject("-rBT role FR1-TEST", "role", "@ \"\\*TTTTTT & \\]\\[,\\] \\(XAMPLE\\) 1234567890 abc \\._\"\\*@,&:\\!'`\\+\\/-")
+    }
+
@@ -939,0 +976,45 @@
+
+    @Ignore("TODO: confirmed this is a bug - we should accept @ as a query value (non-option argument")
+    def "create role with name including all possible chars, query on part of name"() {
+        given:
+
+        expect:
+        queryObjectNotFound("-r -T role FR1-TEST", "role", "@ \"*TTTTTT & ][,] (XAMPLE) 1234567890 abc ._\"*@,&:!'`+/-")
+
+        when:
+        def message = syncUpdate("""
+                role:    @ "*TTTTTT & ][,] (XAMPLE) 1234567890 abc ._"*@,&:!'`+/-
+                address: St James Street
+                address: Burnley
+                address: UK
+                e-mail:  dbtest@ripe.net
+                nic-hdl: FR1-TEST
+                mnt-by:  owner-mnt
+                changed: dbtest@ripe.net 20121016
+                source:  TEST
+
+                password: owner
+                """.stripIndent()
+        )
+
+        then:
+        def ack = new AckResponse("", message)
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 1, 0, 0, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+
+        ack.countErrorWarnInfo(0, 0, 0)
+        ack.successes.any { it.operation == "Create" && it.key == "[role] FR1-TEST   @ \"*TTTTTT & ][,] (XAMPLE) 1234567890 abc ._\"*@,&:!'`+/-" }
+
+        queryObject("-rBT role FR1-TEST", "role", "@ \"\\*TTTTTT & \\]\\[,\\] \\(XAMPLE\\) 1234567890 abc \\._\"\\*@,&:\\!'`\\+\\/-")
+        def qry = query("-Trole abc")
+        qry =~ "FR1-TEST"
+        def qry2 = query("-Trole (XAMPLE)")
+        qry2 =~ "FR1-TEST"
+        def qry3 = query("-Trole @")
+        qry3 =~ "FR1-TEST"
+        def qry4 = query("-Trole 1234567890")
+        qry4 =~ "FR1-TEST"
+    }
+
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/SSOSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/SSOSpec.groovy
index 99afaa5..a65c823 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/SSOSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/SSOSpec.groovy
@@ -2 +1,0 @@
-
@@ -83,0 +83,42 @@
+    def "replace pw with SSO in mntner"() {
+        given:
+        syncUpdate(getTransient("NO-SSO-MNT") + "password: sso")
+
+        expect:
+        query_object_not_matches("-r -BG -T mntner NO-SSO-MNT", "mntner", "NO-SSO-MNT", "auth:\\s*SSO")
+
+        when:
+        def message = syncUpdate("""\
+                mntner:      NO-SSO-MNT
+                descr:       MNTNER for test
+                admin-c:     TP1-TEST
+                upd-to:      updto_test@ripe.net
+                auth:        SSO db-test@ripe.net
+                mnt-by:      NO-SSO-MNT
+                referral-by: NO-SSO-MNT
+                changed:     dbtest@ripe.net 20010601
+                source:      TEST
+
+                password: sso
+                """.stripIndent()
+        )
+
+        then:
+        def objLU = restLookup(ObjectType.MNTNER, "NO-SSO-MNT");
+        def ack = new AckResponse("", message)
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 0, 1, 0, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+
+        ack.countErrorWarnInfo(0, 0, 0)
+        ack.successes.any {it.operation == "Modify" && it.key == "[mntner] NO-SSO-MNT"}
+
+        hasAttribute(objLU, "auth", "SSO", "Filtered");
+
+        query_object_matches("-r -BG -T mntner NO-SSO-MNT", "mntner", "NO-SSO-MNT", "auth:\\s*SSO")
+        query_object_not_matches("-r -BG -T mntner NO-SSO-MNT", "mntner", "NO-SSO-MNT", "auth:\\s*MD5")
+        def fullObj = databaseHelper.lookupObject(ObjectType.MNTNER, "NO-SSO-MNT")
+        print(fullObj)
+    }
+
@@ -124,0 +166,43 @@
+        def fullObj = databaseHelper.lookupObject(ObjectType.MNTNER, "ONE-SSO-MNT")
+        print(fullObj)
+    }
+
+    def "replace pw with SSO in mntner with existing SSO"() {
+        given:
+        syncUpdate(getTransient("ONE-SSO-MNT") + "password: sso")
+
+        expect:
+        query_object_matches("-r -BG -T mntner ONE-SSO-MNT", "mntner", "ONE-SSO-MNT", "auth:\\s*SSO")
+
+        when:
+        def message = syncUpdate("""\
+                mntner:      ONE-SSO-MNT
+                descr:       MNTNER for test
+                admin-c:     TP1-TEST
+                upd-to:      updto_test@ripe.net
+                auth:        SSO test@ripe.net
+                auth:        SSO db-test@ripe.net
+                mnt-by:      ONE-SSO-MNT
+                referral-by: ONE-SSO-MNT
+                changed:     dbtest@ripe.net 20010601
+                source:      TEST
+
+                password: sso
+                """.stripIndent()
+        )
+
+        then:
+        def objLU = restLookup(ObjectType.MNTNER, "ONE-SSO-MNT");
+        def ack = new AckResponse("", message)
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 0, 1, 0, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+
+        ack.countErrorWarnInfo(0, 0, 0)
+        ack.successes.any {it.operation == "Modify" && it.key == "[mntner] ONE-SSO-MNT"}
+
+        hasAttribute(objLU, "auth", "SSO", "Filtered");
+
+        query_object_matches("-r -BG -T mntner ONE-SSO-MNT", "mntner", "ONE-SSO-MNT", "auth:\\s*SSO")
+        query_object_not_matches("-r -BG -T mntner NO-SSO-MNT", "mntner", "NO-SSO-MNT", "auth:\\s*MD5")
@@ -215,0 +300,86 @@
+    def "remove pw from mntner with existing SSO"() {
+        given:
+        syncUpdate(getTransient("ONE-SSO-MNT") + "password: sso")
+
+        expect:
+        query_object_matches("-r -BG -T mntner ONE-SSO-MNT", "mntner", "ONE-SSO-MNT", "auth:\\s*SSO")
+        query_object_matches("-r -BG -T mntner ONE-SSO-MNT", "mntner", "ONE-SSO-MNT", "auth:\\s*MD5")
+
+        when:
+        def message = syncUpdate("""\
+                mntner:      ONE-SSO-MNT
+                descr:       MNTNER for test
+                admin-c:     TP1-TEST
+                upd-to:      updto_test@ripe.net
+                auth:        SSO test@ripe.net
+                mnt-by:      ONE-SSO-MNT
+                referral-by: ONE-SSO-MNT
+                changed:     dbtest@ripe.net 20010601
+                source:      TEST
+
+                password: sso
+                """.stripIndent()
+        )
+
+        then:
+        def objLU = restLookup(ObjectType.MNTNER, "ONE-SSO-MNT");
+        def ack = new AckResponse("", message)
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 0, 1, 0, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+
+        ack.countErrorWarnInfo(0, 0, 0)
+        ack.successes.any {it.operation == "Modify" && it.key == "[mntner] ONE-SSO-MNT"}
+
+        hasAttribute(objLU, "auth", "SSO", "Filtered");
+
+        query_object_matches("-r -BG -T mntner ONE-SSO-MNT", "mntner", "ONE-SSO-MNT", "auth:\\s*SSO")
+        query_object_not_matches("-r -BG -T mntner ONE-SSO-MNT", "mntner", "ONE-SSO-MNT", "auth:\\s*MD5")
+        def fullObj = databaseHelper.lookupObject(ObjectType.MNTNER, "ONE-SSO-MNT")
+        print(fullObj)
+    }
+
+    def "remove pw, replace SSO from mntner with existing SSO"() {
+        given:
+        syncUpdate(getTransient("ONE-SSO-MNT") + "password: sso")
+
+        expect:
+        query_object_matches("-r -BG -T mntner ONE-SSO-MNT", "mntner", "ONE-SSO-MNT", "auth:\\s*SSO")
+        query_object_matches("-r -BG -T mntner ONE-SSO-MNT", "mntner", "ONE-SSO-MNT", "auth:\\s*MD5")
+
+        when:
+        def message = syncUpdate("""\
+                mntner:      ONE-SSO-MNT
+                descr:       MNTNER for test
+                admin-c:     TP1-TEST
+                upd-to:      updto_test@ripe.net
+                auth:        SSO db-test@ripe.net
+                mnt-by:      ONE-SSO-MNT
+                referral-by: ONE-SSO-MNT
+                changed:     dbtest@ripe.net 20010601
+                source:      TEST
+
+                password: sso
+                """.stripIndent()
+        )
+
+        then:
+        def objLU = restLookup(ObjectType.MNTNER, "ONE-SSO-MNT");
+        def ack = new AckResponse("", message)
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 0, 1, 0, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+
+        ack.countErrorWarnInfo(0, 0, 0)
+        ack.successes.any {it.operation == "Modify" && it.key == "[mntner] ONE-SSO-MNT"}
+
+        hasAttribute(objLU, "auth", "SSO", "Filtered");
+
+        query_object_matches("-r -BG -T mntner ONE-SSO-MNT", "mntner", "ONE-SSO-MNT", "auth:\\s*SSO")
+        query_object_not_matches("-r -BG -T mntner ONE-SSO-MNT", "mntner", "ONE-SSO-MNT", "auth:\\s*MD5")
+        def fullObj = databaseHelper.lookupObject(ObjectType.MNTNER, "ONE-SSO-MNT")
+        print(fullObj)
+    }
+
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/SyntaxSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/SyntaxSpec.groovy
index 950a21b..66f89db 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/SyntaxSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/SyntaxSpec.groovy
@@ -4,0 +5 @@
+import net.ripe.db.whois.spec.domain.AckResponse
@@ -5,0 +7 @@
+import spock.lang.Ignore
@@ -834,0 +837,40 @@
+
+    @Ignore //TODO [AS] ignore this testcase until @ripe.net business rule is implemented
+    def "create person with @ripe.net in notify: attr"() {
+        given:
+
+        expect:
+        queryObjectNotFound("-r -T person FP1-TEST", "person", "First Person")
+
+        when:
+        def message = syncUpdate("""\
+                person:  First Person
+                address: St James Street
+                address: Burnley
+                address: UK
+                phone:   +44 282 420469
+                nic-hdl: FP1-TEST
+                notify:  dbtest@ripe.net
+                mnt-by:  OWNER-MNT
+                changed: denis@ripe.net 20121016
+                source:  TEST
+
+                password: owner
+                """.stripIndent()
+        )
+
+        then:
+        def ack = new AckResponse("", message)
+
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(0, 0, 0, 0, 0)
+        ack.summary.assertErrors(1, 1, 0, 0)
+
+        ack.countErrorWarnInfo(1, 0, 0)
+        ack.errors.any { it.operation == "Create" && it.key == "[person] First Person" }
+        ack.errorMessagesFor("Modify", "[person] First Person") ==
+                ["Authorisation for [inetnum] 192.168.200.0 - 192.168.200.255 failed using \"mnt-by:\" not authenticated by: END-USER-MNT"]
+
+        queryObjectNotFound("-r -T person FP1-TEST", "person", "First Person")
+    }
+
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/UnrefCleanupSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/UnrefCleanupSpec.groovy
new file mode 100644
index 0000000..e8f2c0f
--- /dev/null
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/UnrefCleanupSpec.groovy
@@ -0,0 +1,576 @@
+package net.ripe.db.whois.spec.update
+
+import net.ripe.db.whois.common.IntegrationTest
+import net.ripe.db.whois.spec.BaseQueryUpdateSpec
+import net.ripe.db.whois.spec.domain.AckResponse
+import org.joda.time.LocalDateTime
+import spock.lang.Ignore
+
+@Ignore("We are not pushing current unref cleanup into production, but reimplement it - review this suite then")
+@org.junit.experimental.categories.Category(IntegrationTest.class)
+class UnrefCleanupSpec extends BaseQueryUpdateSpec {
+
+    def "non-existing object"() {
+      given:
+        queryObjectNotFound("UNR-MNT", "mntner", "UNR-MNT")
+
+      when:
+        whoisFixture.unrefCleanup();
+        def response = query("--show-tag-info UNR-MNT")
+
+      then:
+        !(response =~ "Unreferenced #")
+    }
+
+    def "recently deleted object"() {
+      given:
+        databaseHelper.addObject("""\
+                aut-num:     AS10000
+                as-name:     TEST-AS
+                descr:       Testing Authorisation code
+                admin-c:     TP1-TEST
+                tech-c:      TP1-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                """.stripIndent())
+      expect:
+        queryObject("AS10000", "aut-num", "AS10000")
+
+      when:
+        syncUpdate("""\
+                aut-num:     AS10000
+                as-name:     TEST-AS
+                descr:       Testing Authorisation code
+                admin-c:     TP1-TEST
+                tech-c:      TP1-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                delete:     reason
+                password:   owner
+                """.stripIndent())
+
+      then:
+        queryObjectNotFound("AS10000", "aut-num", "AS10000")
+
+      when:
+        whoisFixture.unrefCleanup()
+        def result = query("--show-tag-info -r AS10000")
+
+      then:
+        !(result =~ "Unreferenced #")
+    }
+
+    def "deleted by unrefcleanup"() {
+      given:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(100))
+        databaseHelper.addObject("""\
+                aut-num:     AS10000
+                as-name:     TEST-AS
+                descr:       Testing Authorisation code
+                admin-c:     TP1-TEST
+                tech-c:      TP1-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                """.stripIndent())
+      expect:
+        queryObject("AS10000", "aut-num", "AS10000")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().reset()
+        whoisFixture.unrefCleanup()
+
+      then:
+        queryObjectNotFound("aut-num", "aut-num", "AS10000")
+    }
+
+    def "recently created object not referenced"() {
+      given:
+        databaseHelper.addObject("""\
+                aut-num:     AS10000
+                as-name:     TEST-AS
+                descr:       Testing Authorisation code
+                admin-c:     TP1-TEST
+                tech-c:      TP1-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                """.stripIndent())
+      expect:
+        queryObject("-r AS10000", "aut-num", "AS10000")
+
+      when:
+        whoisFixture.unrefCleanup()
+        def result = query("--show-tag-info AS10000")
+
+      then:
+        !(result =~ "Unreferenced #")
+    }
+
+    def "recently created object referenced"() {
+      given:
+        databaseHelper.addObject("""\
+                aut-num:     AS10000
+                as-name:     TEST-AS
+                descr:       Testing Authorisation code
+                admin-c:     TP1-TEST
+                tech-c:      TP1-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                """.stripIndent())
+      expect:
+        queryObject("-r AS10000", "aut-num", "AS10000")
+
+      when:
+        whoisFixture.unrefCleanup()
+        def result = query("--show-tag-info -r TP1-TEST")
+
+      then:
+        !(result =~ "Unreferenced #")
+    }
+
+    def "not recently created object not referenced"() {
+      given:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(80))
+        def sync = syncUpdate("""\
+                person:     GRU PERSON
+                address:     street
+                phone:       +31 123456
+                nic-hdl:     GRU-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                password:    owner
+                """.stripIndent())
+        def ack = new AckResponse("", sync)
+
+      expect:
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 1, 0, 0, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+        queryObject("-T person GRU-TEST", "person", "GRU PERSON")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().reset()
+        whoisFixture.unrefCleanup()
+
+      then:
+        query("--show-tag-info -r GRU-TEST") =~ "Unreferenced # 'GRU-TEST' will be deleted in 10 days"
+    }
+
+    def "not recently created object referenced"() {
+      given:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(100))
+        def sync1 = syncUpdate("""\
+                person:  Gru Person
+                address: St James Street
+                address: Burnley
+                address: UK
+                phone:   +44 282 420469
+                nic-hdl: GRU-TEST
+                remarks: bla bla
+                mnt-by:  OWNER-MNT
+                changed: dbtest@ripe.net 20120101
+                source:  TEST
+                password: owner
+                """.stripIndent())
+        def ack = new AckResponse("", sync1)
+
+      expect:
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 1, 0, 0, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+        queryObject("-r TP1-TEST", "person", "Test Person")
+
+      when:
+        def sync2 = syncUpdate("""\
+                role:     Jon Bob
+                address:     street
+                phone:       +44 123456
+                nic-hdl:     UGU-TEST
+                e-mail:      hugu@test.net
+                admin-c:     GRU-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                password: owner
+                """.stripIndent())
+        def ack2 = new AckResponse("", sync2)
+
+      then:
+        ack2.summary.nrFound == 1
+        ack2.summary.assertSuccess(1, 1, 0, 0, 0)
+        ack2.summary.assertErrors(0, 0, 0, 0)
+        queryObject("-T role UGU-TEST", "role", "Jon Bob")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().reset()
+        whoisFixture.unrefCleanup()
+
+      then:
+        !(query("--show-tag-info -r GRU-TEST") =~ "Unreferenced #")
+    }
+
+    def "object created long ago recently referenced"() {
+      given:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(100))
+        databaseHelper.addObject("""\
+                person:  Gru Person
+                address: St James Street
+                address: Burnley
+                address: UK
+                phone:   +44 282 420469
+                nic-hdl: GRU-TEST
+                remarks: bla bla
+                mnt-by:  OWNER-MNT
+                changed: dbtest@ripe.net 20120101
+                source:  TEST
+                password: owner
+                """.stripIndent())
+        whoisFixture.getTestDateTimeProvider().reset()
+
+      expect:
+        queryObject("-r GRU-TEST", "person", "Gru Person")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(50))
+        databaseHelper.addObject("""\
+                role:     Jon Bob
+                address:     street
+                phone:       +44 123456
+                nic-hdl:     JON-TEST
+                e-mail:      hugu@test.net
+                admin-c:     GRU-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                """.stripIndent())
+      then:
+        queryObject("JON-TEST", "role", "Jon Bob")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().reset()
+        whoisFixture.unrefCleanup()
+
+      then:
+        !(query("--show-tag-info -r GRU-TEST") =~ "Unreferenced #")
+    }
+
+    def "object created long ago now unreferenced"() {
+      given:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(100))
+        databaseHelper.addObject("""\
+                person:  Gru Person
+                address: St James Street
+                address: Burnley
+                address: UK
+                phone:   +44 282 420469
+                nic-hdl: GRU-TEST
+                remarks: bla bla
+                mnt-by:  OWNER-MNT
+                changed: dbtest@ripe.net 20120101
+                source:  TEST
+                """.stripIndent())
+      expect:
+        queryObject("-r GRU-TEST", "person", "Gru Person")
+
+      when:
+        databaseHelper.addObject("""\
+                role:     Jon Bob
+                address:     street
+                phone:       +44 123456
+                nic-hdl:     JON-TEST
+                e-mail:      hugu@test.net
+                admin-c:     GRU-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                """.stripIndent())
+      then:
+        queryObject("-T role JON-TEST", "role", "Jon Bob")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().reset()
+        def ack = new AckResponse("", syncUpdate("""\
+                role:     Jon Bob
+                address:     street
+                phone:       +44 123456
+                nic-hdl:     JON-TEST
+                e-mail:      hugu@test.net
+                admin-c:     GRU-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                delete:      reason
+                password:    owner
+                """.stripIndent()))
+      then:
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 0, 0, 1, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+        queryObjectNotFound("-T role JON-TEST", "role", "Jon Bob")
+
+      when:
+        whoisFixture.unrefCleanup()
+
+      then:
+        !(query("--show-tag-info -r GRU-TEST") =~ "Unreferenced #")
+    }
+
+    def "object created long ago recently unreferenced"() {
+      given:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(100))
+        databaseHelper.addObject("""\
+                person:  Gru Person
+                address: St James Street
+                address: Burnley
+                address: UK
+                phone:   +44 282 420469
+                nic-hdl: GRU-TEST
+                remarks: bla bla
+                mnt-by:  OWNER-MNT
+                changed: dbtest@ripe.net 20120101
+                source:  TEST
+                """.stripIndent())
+      expect:
+        queryObject("-r GRU-TEST", "person", "Gru Person")
+
+      when:
+        databaseHelper.addObject("""\
+                role:     Jon Bob
+                address:     street
+                phone:       +44 123456
+                nic-hdl:     JON-TEST
+                e-mail:      hugu@test.net
+                admin-c:     GRU-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                """.stripIndent())
+      then:
+        queryObject("-r JON-TEST", "role", "Jon Bob")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(50))
+        def ack = new AckResponse("", syncUpdate("""\
+                role:     Jon Bob
+                address:     street
+                phone:       +44 123456
+                nic-hdl:     JON-TEST
+                e-mail:      hugu@test.net
+                admin-c:     GRU-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                delete:      reason
+                password:    owner
+                """.stripIndent()))
+      then:
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 0, 0, 1, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+        queryObjectNotFound("-T role JON-TEST", "role", "Jon Bob")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().reset()
+        whoisFixture.unrefCleanup()
+
+      then:
+        query("--show-tag-info -r GRU-TEST") =~ "Unreferenced # 'GRU-TEST' will be deleted in 40 days"
+    }
+
+    def "object created recently now referenced"() {
+      given:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(50))
+        databaseHelper.addObject("""\
+                person:  Gru Person
+                address: St James Street
+                address: Burnley
+                address: UK
+                phone:   +44 282 420469
+                nic-hdl: GRU-TEST
+                remarks: bla bla
+                mnt-by:  OWNER-MNT
+                changed: dbtest@ripe.net 20120101
+                source:  TEST
+                """.stripIndent())
+      expect:
+        queryObject("-r GRU-TEST", "person", "Gru Person")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().reset()
+        databaseHelper.addObject("""\
+                role:     Jon Bob
+                address:     street
+                phone:       +44 123456
+                nic-hdl:     JON-TEST
+                e-mail:      hugu@test.net
+                admin-c:     GRU-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                """.stripIndent())
+      then:
+        queryObject("-T role JON-TEST", "role", "Jon Bob")
+
+      when:
+        whoisFixture.unrefCleanup()
+
+      then:
+        !(query("--show-tag-info -r GRU-TEST") =~ "Unreferenced #")
+    }
+
+    def "object created recently now unreferenced"() {
+      given:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(50))
+        databaseHelper.addObject("""\
+                person:  Gru Person
+                address: St James Street
+                address: Burnley
+                address: UK
+                phone:   +44 282 420469
+                nic-hdl: GRU-TEST
+                remarks: bla bla
+                mnt-by:  OWNER-MNT
+                changed: dbtest@ripe.net 20120101
+                source:  TEST
+                """.stripIndent())
+      expect:
+        queryObject("-r GRU-TEST", "person", "Gru Person")
+
+      when:
+        databaseHelper.addObject("""\
+                role:     Jon Bob
+                address:     street
+                phone:       +44 123456
+                nic-hdl:     JON-TEST
+                e-mail:      hugu@test.net
+                admin-c:     GRU-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                """.stripIndent())
+      then:
+        queryObject("-r JON-TEST", "role", "Jon Bob")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().reset()
+        def ack = new AckResponse("", syncUpdate("""\
+                role:     Jon Bob
+                address:     street
+                phone:       +44 123456
+                nic-hdl:     JON-TEST
+                e-mail:      hugu@test.net
+                admin-c:     GRU-TEST
+                mnt-by:      OWNER-MNT
+                changed:     dbtest@ripe.net
+                source:      TEST
+                delete:      reason
+                password:    owner
+                """.stripIndent()))
+      then:
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 0, 0, 1, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+        queryObjectNotFound("-r JON-TEST", "role", "Jon Bob")
+
+      when:
+        whoisFixture.unrefCleanup()
+
+      then:
+        !(query("--show-tag-info -r GRU-TEST") =~ "Unreferenced #")
+    }
+
+    def "LIR organisation referenced since long ago"() {
+      given:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(100))
+        databaseHelper.addObject("" +
+                "organisation: ORG-TST-TEST\n" +
+                "org-name: Test Organisation\n" +
+                "org-type: LIR\n" +
+                "address: street\n" +
+                "e-mail: org@test.net\n" +
+                "mnt-ref: OWNER-MNT\n" +
+                "mnt-by: OWNER-MNT\n" +
+                "changed: changed@test.net\n" +
+                "source: TEST")
+      expect:
+        queryObject("-r ORG-TST-TEST", "organisation", "ORG-TST-TEST")
+
+      when:
+        databaseHelper.addObject("" +
+                "mntner: TOT-MNT\n" +
+                "mnt-by: TOT-MNT\n" +
+                "org: ORG-TST-TEST\n" +
+                "descr: description\n" +
+                "admin-c: TP1-TEST\n" +
+                "tech-c: TP1-TEST\n" +
+                "auth: MD5-PW \$1\$9vNwegLB\$SrX4itajapDaACGZaLOIY1\n" +
+                "referral-by: OWNER2-MNT\n" +
+                "changed: changed@test.net\n" +
+                "source: TEST")
+      then:
+        queryObject("-r TST-MNT", "mntner", "TST-MNT")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().reset()
+        whoisFixture.unrefCleanup()
+
+      then:
+        !(query("--show-tag-info -r ORG-TST-TEST") =~ "Unreferenced #")
+        queryObject("-r ORG-TST-TEST", "organisation", "ORG-TST-TEST")
+    }
+
+    def "LIR organisation unreferenced since long ago"() {
+      given:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(100))
+        databaseHelper.addObject("" +
+                "organisation: ORG-TST-TEST\n" +
+                "org-name: Test Organisation\n" +
+                "org-type: LIR\n" +
+                "address: street\n" +
+                "e-mail: org@test.net\n" +
+                "mnt-ref: OWNER-MNT\n" +
+                "mnt-by: OWNER-MNT\n" +
+                "changed: changed@test.net\n" +
+                "source: TEST")
+      expect:
+        queryObject("-r ORG-TST-TEST", "organisation", "ORG-TST-TEST")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().reset()
+        whoisFixture.unrefCleanup()
+
+      then:
+        !(query("--show-tag-info -r ORG-TST-TEST") =~ "Unreferenced #")
+        queryObject("ORG-TST-TEST", "organisation", "ORG-TST-TEST")
+    }
+
+    def "LIR organisation unreferenced since recently"() {
+      given:
+        whoisFixture.getTestDateTimeProvider().setTime(new LocalDateTime().minusDays(50))
+        databaseHelper.addObject("" +
+                "organisation: ORG-TST-TEST\n" +
+                "org-name: Test Organisation\n" +
+                "org-type: LIR\n" +
+                "address: street\n" +
+                "e-mail: org@test.net\n" +
+                "mnt-ref: OWNER-MNT\n" +
+                "mnt-by: OWNER-MNT\n" +
+                "changed: changed@test.net\n" +
+                "source: TEST")
+      expect:
+        queryObject("-r ORG-TST-TEST", "organisation", "ORG-TST-TEST")
+
+      when:
+        whoisFixture.getTestDateTimeProvider().reset()
+        whoisFixture.unrefCleanup()
+
+      then:
+        !(query("--show-tag-info -r ORG-TST-TEST") =~ "Unreferenced #")
+        queryObject("ORG-TST-TEST", "organisation", "ORG-TST-TEST")
+    }
+}
\ No newline at end of file
diff --git a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/UpdateMaintainerSpec.groovy b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/UpdateMaintainerSpec.groovy
index 951ede1..7953018 100644
--- a/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/UpdateMaintainerSpec.groovy
+++ b/whois-endtoend/src/test/groovy/net/ripe/db/whois/spec/update/UpdateMaintainerSpec.groovy
@@ -2 +1,0 @@
-
@@ -533,0 +533,40 @@
+    def "modify maintainer add pgp auth"() {
+      given:
+        dbfixture(getTransient("UPD-MNT"))
+        object(getTransient("UPD2-MNT"))
+
+      expect:
+        query_object_not_matches("-r -T mntner UPD-MNT", "mntner", "UPD-MNT", "PGPKEY-1290F9D2")
+
+      when:
+        def message = send new Message(
+                subject: "update UPD-MNT",
+                body: """\
+                mntner:      UPD-MNT
+                descr:       description
+                admin-c:     TP1-TEST
+                mnt-by:      owner-MNT
+                referral-by: UPD-MNT
+                upd-to:      dbtest@ripe.net
+                auth:        MD5-PW \$1\$fU9ZMQN9\$QQtm3kRqZXWAuLpeOiLN7. # update
+                auth:        PGPKEY-D83C3FBD
+                changed:     dbtest@ripe.net 20121109
+                source:      TEST
+
+                password: owner
+                """.stripIndent()
+        )
+
+      then:
+        def ack = ackFor message
+
+        ack.success
+        ack.summary.nrFound == 1
+        ack.summary.assertSuccess(1, 0, 1, 0, 0)
+        ack.summary.assertErrors(0, 0, 0, 0)
+        ack.countErrorWarnInfo(0, 2, 0)
+
+        ack.successes.any { it.operation == "Modify" && it.key == "[mntner] UPD-MNT"}
+        query_object_matches("-r -T mntner UPD-MNT", "mntner", "UPD-MNT", "PGPKEY-D83C3FBD")
+    }
+

