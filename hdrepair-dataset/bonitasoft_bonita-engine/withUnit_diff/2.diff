diff --git a/services/bonita-page/bonita-page-impl/src/main/java/org/bonitasoft/engine/page/impl/PageServiceImpl.java b/services/bonita-page/bonita-page-impl/src/main/java/org/bonitasoft/engine/page/impl/PageServiceImpl.java
index 830a7f7..2d044d8 100644
--- a/services/bonita-page/bonita-page-impl/src/main/java/org/bonitasoft/engine/page/impl/PageServiceImpl.java
+++ b/services/bonita-page/bonita-page-impl/src/main/java/org/bonitasoft/engine/page/impl/PageServiceImpl.java
@@ -569,0 +570 @@
+        pageBuilder.updateContentType(pageProperties.getProperty(PROPERTIES_CONTENT_TYPE, SContentType.PAGE));
diff --git a/services/bonita-page/bonita-page-impl/src/test/java/org/bonitasoft/engine/page/impl/PageServiceImplTest.java b/services/bonita-page/bonita-page-impl/src/test/java/org/bonitasoft/engine/page/impl/PageServiceImplTest.java
index 05193e4..6b995cb 100644
--- a/services/bonita-page/bonita-page-impl/src/test/java/org/bonitasoft/engine/page/impl/PageServiceImplTest.java
+++ b/services/bonita-page/bonita-page-impl/src/test/java/org/bonitasoft/engine/page/impl/PageServiceImplTest.java
@@ -45,0 +46 @@
+import org.assertj.core.data.MapEntry;
@@ -1020,0 +1022,40 @@
+    public void updatePageContent_should_update_page_content_type() throws Exception {
+        verifyPageUpdateContent(getPagePropertiesContentPair("contentType=" + SContentType.API_EXTENSION), SContentType.API_EXTENSION);
+    }
+
+    @Test
+    public void updatePageContent_should_update_to_default_content_type() throws Exception {
+        verifyPageUpdateContent(getPagePropertiesContentPair(), SContentType.PAGE);
+    }
+
+    protected void verifyPageUpdateContent(Pair<String, byte[]> pagePropertiesContentPair, final String expectedContentType) throws Exception {
+        //given
+        final SPageImpl sPage = new SPageImpl("name", 10201983L, 2005L, false, "contentName");
+        sPage.setId(45L);
+        final SPageContent pageContent = new SPageContentImpl();
+        when(readPersistenceService.selectById(new SelectByIdDescriptor<>("getPageContent", SPageContent.class, sPage.getId()))).thenReturn(pageContent);
+        when(readPersistenceService.selectById(new SelectByIdDescriptor<>("getPageById", SPage.class, sPage.getId()))).thenReturn(sPage);
+        final byte[] content = IOUtil.zip(getIndexGroovyContentPair(), pagePropertiesContentPair);
+
+        //then
+        doAnswer(new Answer<Object>() {
+
+            @Override
+            public Object answer(final InvocationOnMock invocation) throws Throwable {
+
+                EntityUpdateDescriptor entityUpdateDescriptor = (EntityUpdateDescriptor) invocation.getArguments()[1];
+                assertThat(entityUpdateDescriptor.getFields()).contains(expectedUpdateFields()).contains(entry("contentType", expectedContentType));
+                return null;
+            }
+        }).when(pageServiceImpl).updatePage(anyLong(), any(EntityUpdateDescriptor.class));
+
+        //when
+        pageServiceImpl.updatePageContent(sPage.getId(), content, "contentName");
+    }
+
+    private MapEntry[] expectedUpdateFields() {
+        return new MapEntry[] { entry("description", "mypage description"), entry("name", "custompage_mypage"),
+                entry("contentName", "contentName"), entry("displayName", "mypage display name") };
+    }
+
+    @Test

