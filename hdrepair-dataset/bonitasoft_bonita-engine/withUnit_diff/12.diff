diff --git a/bonita-integration-tests/bonita-integration-tests-client/src/main/java/org/bonitasoft/engine/activity/UserTaskContractITest.java b/bonita-integration-tests/bonita-integration-tests-client/src/main/java/org/bonitasoft/engine/activity/UserTaskContractITest.java
index 0cd088e..da6a106 100644
--- a/bonita-integration-tests/bonita-integration-tests-client/src/main/java/org/bonitasoft/engine/activity/UserTaskContractITest.java
+++ b/bonita-integration-tests/bonita-integration-tests-client/src/main/java/org/bonitasoft/engine/activity/UserTaskContractITest.java
@@ -72 +72 @@
-                .addConstraint("mandatory", "numberOfDays != null", "numberOfDays must be set", "numberOfDays");
+                .addMandatoryConstraint("numberOfDays");
@@ -90,3 +90 @@
-        assertThat(rule.getName()).isEqualTo("mandatory");
-        assertThat(rule.getExpression()).isEqualTo("numberOfDays != null");
-        assertThat(rule.getExplanation()).isEqualTo("numberOfDays must be set");
+        assertThat(rule.getName()).isEqualTo("numberOfDays");
@@ -230 +228,5 @@
-                        null);
+                        null)
+                .addMandatoryConstraint("expenseAmount")
+                .addMandatoryConstraint("expenseReport")
+                .addMandatoryConstraint("expenseDate");
+
@@ -329 +331 @@
-                .addConstraint("mandatory", "numberOfDays != null", "numberOfDays must be set", "numberOfDays");
+                .addMandatoryConstraint("numberOfDays");
diff --git a/bpm/bonita-core/bonita-process-definition/bonita-process-definition-api/src/test/java/org/bonitasoft/engine/core/process/definition/model/STypeDateValidationTest.java b/bpm/bonita-core/bonita-process-definition/bonita-process-definition-api/src/test/java/org/bonitasoft/engine/core/process/definition/model/STypeDateValidationTest.java
index 2939913..cf9ab44 100644
--- a/bpm/bonita-core/bonita-process-definition/bonita-process-definition-api/src/test/java/org/bonitasoft/engine/core/process/definition/model/STypeDateValidationTest.java
+++ b/bpm/bonita-core/bonita-process-definition/bonita-process-definition-api/src/test/java/org/bonitasoft/engine/core/process/definition/model/STypeDateValidationTest.java
@@ -23 +23 @@
-    
+
@@ -26,3 +26,3 @@
-        
-        boolean validation = SType.DATE.validate(new Date());
-        
+
+        final boolean validation = SType.DATE.validate(new Date());
+
@@ -31 +31 @@
-    
+
@@ -34,3 +34,3 @@
-        
-        boolean validation = SType.DATE.validate(null);
-        
+
+        final boolean validation = SType.DATE.validate(null);
+
@@ -39 +39 @@
-    
+
@@ -42,2 +42,2 @@
-        
-        boolean stringValidation = SType.DATE.validate("2014/08/09");
+
+        final boolean stringValidation = SType.DATE.validate("2014/08/09");
@@ -45,2 +45,2 @@
-        
-        boolean longValidation = SType.DATE.validate(1410862853708L);
+
+        final boolean longValidation = SType.DATE.validate(1410862853708L);
diff --git a/bpm/bonita-core/bonita-process-definition/bonita-process-definition-impl/src/main/java/org/bonitasoft/engine/core/process/definition/model/impl/SConstraintDefinitionImpl.java b/bpm/bonita-core/bonita-process-definition/bonita-process-definition-impl/src/main/java/org/bonitasoft/engine/core/process/definition/model/impl/SConstraintDefinitionImpl.java
index 03c335a..1a4bda8 100644
--- a/bpm/bonita-core/bonita-process-definition/bonita-process-definition-impl/src/main/java/org/bonitasoft/engine/core/process/definition/model/impl/SConstraintDefinitionImpl.java
+++ b/bpm/bonita-core/bonita-process-definition/bonita-process-definition-impl/src/main/java/org/bonitasoft/engine/core/process/definition/model/impl/SConstraintDefinitionImpl.java
@@ -47 +47 @@
-        this(rule.getName(), rule.getExpression(), rule.getExplanation(), SConstraintType.CUSTOM);
+        this(rule.getName(), rule.getExpression(), rule.getExplanation(), SConstraintType.valueOf(rule.getConstraintType().toString()));
diff --git a/bpm/bonita-core/bonita-process-definition/bonita-process-definition-impl/src/test/java/org/bonitasoft/engine/core/process/definition/model/impl/SConstraintDefinitionImplTest.java b/bpm/bonita-core/bonita-process-definition/bonita-process-definition-impl/src/test/java/org/bonitasoft/engine/core/process/definition/model/impl/SConstraintDefinitionImplTest.java
index 80efdbb..f027658 100644
--- a/bpm/bonita-core/bonita-process-definition/bonita-process-definition-impl/src/test/java/org/bonitasoft/engine/core/process/definition/model/impl/SConstraintDefinitionImplTest.java
+++ b/bpm/bonita-core/bonita-process-definition/bonita-process-definition-impl/src/test/java/org/bonitasoft/engine/core/process/definition/model/impl/SConstraintDefinitionImplTest.java
@@ -16,11 +16,2 @@
-        //given
-        final SConstraintDefinition sConstraintDefinition = new SConstraintDefinitionImpl("name", "expression", "explanation", SConstraintType.CUSTOM);
-
-        //then
-        assertThat(sConstraintDefinition.getConstraintType()).isEqualTo(SConstraintType.CUSTOM);
-        assertThat(sConstraintDefinition.getName()).isEqualTo("name");
-        assertThat(sConstraintDefinition.getExpression()).isEqualTo("expression");
-        assertThat(sConstraintDefinition.getExplanation()).isEqualTo("explanation");
-
-        assertThat(sConstraintDefinition.getInputNames()).isNotNull().isEmpty();
-
+        check_retrieve_constraint_type(SConstraintType.CUSTOM);
+        check_retrieve_constraint_type(SConstraintType.MANDATORY);
@@ -31,15 +22,2 @@
-        //given
-        final ConstraintDefinition constraintDefinition = new ConstraintDefinitionImpl("name", "expression", "explanation", ConstraintType.CUSTOM);
-        constraintDefinition.getInputNames().add("inputName");
-
-        //when
-        final SConstraintDefinition sConstraintDefinition = new SConstraintDefinitionImpl(constraintDefinition);
-
-        //then
-        assertThat(sConstraintDefinition.getConstraintType()).isEqualTo(SConstraintType.CUSTOM);
-        assertThat(sConstraintDefinition.getName()).isEqualTo("name");
-        assertThat(sConstraintDefinition.getExpression()).isEqualTo("expression");
-        assertThat(sConstraintDefinition.getExplanation()).isEqualTo("explanation");
-
-        assertThat(sConstraintDefinition.getInputNames()).isNotNull().hasSize(1).containsExactly("inputName");
-
+        check_constructor_from_constraintDefinition(ConstraintType.CUSTOM);
+        check_constructor_from_constraintDefinition(ConstraintType.MANDATORY);
@@ -59,0 +38,31 @@
+
+    private void check_retrieve_constraint_type(final SConstraintType constraintType) {
+        //given
+        final SConstraintDefinition sConstraintDefinition = new SConstraintDefinitionImpl("name", "expression", "explanation", constraintType);
+
+        //then
+        assertThat(sConstraintDefinition.getConstraintType()).isEqualTo(constraintType);
+        assertThat(sConstraintDefinition.getName()).isEqualTo("name");
+        assertThat(sConstraintDefinition.getExpression()).isEqualTo("expression");
+        assertThat(sConstraintDefinition.getExplanation()).isEqualTo("explanation");
+
+        assertThat(sConstraintDefinition.getInputNames()).isNotNull().isEmpty();
+
+    }
+
+    private void check_constructor_from_constraintDefinition(final ConstraintType constraintType) {
+        //given
+        final ConstraintDefinition constraintDefinition = new ConstraintDefinitionImpl("name", "expression", "explanation", constraintType);
+        constraintDefinition.getInputNames().add("inputName");
+
+        //when
+        final SConstraintDefinition sConstraintDefinition = new SConstraintDefinitionImpl(constraintDefinition);
+
+        //then
+        assertThat(sConstraintDefinition.getConstraintType().toString()).as("should retrieve constraint type").isEqualTo(constraintType.toString());
+        assertThat(sConstraintDefinition.getName()).isEqualTo("name");
+        assertThat(sConstraintDefinition.getExpression()).isEqualTo("expression");
+        assertThat(sConstraintDefinition.getExplanation()).isEqualTo("explanation");
+
+        assertThat(sConstraintDefinition.getInputNames()).isNotNull().hasSize(1).containsExactly("inputName");
+    }

