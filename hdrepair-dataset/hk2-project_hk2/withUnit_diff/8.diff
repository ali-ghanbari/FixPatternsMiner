diff --git a/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/Dom.java b/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/Dom.java
index af1c6ab..501f7e2 100644
--- a/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/Dom.java
+++ b/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/Dom.java
@@ -712,0 +713 @@
+                    removed.add(child);
diff --git a/hk2/hk2-config/src/test/java/org/jvnet/hk2/config/test/ConfigDisposalTest.java b/hk2/hk2-config/src/test/java/org/jvnet/hk2/config/test/ConfigDisposalTest.java
index 5623495..baa3497 100644
--- a/hk2/hk2-config/src/test/java/org/jvnet/hk2/config/test/ConfigDisposalTest.java
+++ b/hk2/hk2-config/src/test/java/org/jvnet/hk2/config/test/ConfigDisposalTest.java
@@ -160,0 +161,25 @@
+    public void testReplaceNode() throws TransactionFailure {
+        SimpleConnector sc = habitat.getService(SimpleConnector.class);
+        assertEquals("Eextensions", 1, sc.getExtensions().size());
+        
+        GenericContainer extension = sc.getExtensions().get(0);
+        assertEquals("Child extensions", 2, extension.getExtensions().size());
+        GenericConfig nestedChild = extension.getExtensions().get(0);
+
+        ConfigSupport.apply(new SingleConfigCode<GenericConfig>() {
+            @Override
+            public Object run(GenericConfig nestedChild)
+                    throws PropertyVetoException, TransactionFailure {
+                GenericConfig newChild = nestedChild.createChild(GenericConfig.class);
+                newChild.setName("test3");
+                nestedChild.setGenericConfig(newChild);
+                return nestedChild;
+            }
+        }, nestedChild);
+
+        assertNotNull("Nested named child 1", habitat.getService(GenericConfig.class, "test1"));
+        assertNotNull("Nested named child 2", habitat.getService(GenericConfig.class, "test2"));
+        assertNull("Nested named grand child replaced", habitat.getService(GenericConfig.class, "test"));
+    }
+
+    @Test 

