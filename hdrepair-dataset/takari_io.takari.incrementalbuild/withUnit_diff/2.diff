diff --git a/incrementalbuild/src/main/java/io/takari/incrementalbuild/spi/DefaultBuildContext.java b/incrementalbuild/src/main/java/io/takari/incrementalbuild/spi/DefaultBuildContext.java
index fd06866..c747419 100644
--- a/incrementalbuild/src/main/java/io/takari/incrementalbuild/spi/DefaultBuildContext.java
+++ b/incrementalbuild/src/main/java/io/takari/incrementalbuild/spi/DefaultBuildContext.java
@@ -348 +348 @@
-      if (state.outputs.containsKey(outputFile)) {
+      if (processedOutputs.containsKey(outputFile)) {
diff --git a/incrementalbuild/src/test/java/io/takari/incremental/test/DefaultBuildContextTest.java b/incrementalbuild/src/test/java/io/takari/incremental/test/DefaultBuildContextTest.java
index bb7554a..75806c4 100644
--- a/incrementalbuild/src/test/java/io/takari/incremental/test/DefaultBuildContextTest.java
+++ b/incrementalbuild/src/test/java/io/takari/incremental/test/DefaultBuildContextTest.java
@@ -614,0 +615,41 @@
+
+  @Test
+  public void testOutputStatus() throws Exception {
+    File inputFile = temp.newFile("inputFile");
+    File outputFile = new File(temp.getRoot(), "outputFile");
+
+    Assert.assertFalse(outputFile.canRead());
+
+    DefaultBuildContext<?> context = newBuildContext();
+    DefaultOutput output = context.registerInput(inputFile).process().associateOutput(outputFile);
+    Assert.assertEquals(ResourceStatus.NEW, output.getStatus());
+    output.newOutputStream().close();
+    context.commit();
+
+    // no-change rebuild
+    context = newBuildContext();
+    output = context.registerInput(inputFile).process().associateOutput(outputFile);
+    Assert.assertEquals(ResourceStatus.UNMODIFIED, output.getStatus());
+    context.commit();
+
+    // modified output
+    Files.write("test", outputFile, Charsets.UTF_8);
+    context = newBuildContext();
+    output = context.registerInput(inputFile).process().associateOutput(outputFile);
+    Assert.assertEquals(ResourceStatus.MODIFIED, output.getStatus());
+    context.commit();
+
+    // no-change rebuild
+    context = newBuildContext();
+    output = context.registerInput(inputFile).process().associateOutput(outputFile);
+    Assert.assertEquals(ResourceStatus.UNMODIFIED, output.getStatus());
+    context.commit();
+
+    // deleted output
+    Assert.assertTrue(outputFile.delete());
+    context = newBuildContext();
+    output = context.registerInput(inputFile).process().associateOutput(outputFile);
+    Assert.assertEquals(ResourceStatus.REMOVED, output.getStatus());
+    output.newOutputStream().close(); // processed outputs must exit or commit fails
+    context.commit();
+  }

