diff --git a/gateway/platforms/servlet/src/main/java/io/apiman/gateway/platforms/servlet/connectors/ssl/SSLSessionStrategyFactory.java b/gateway/platforms/servlet/src/main/java/io/apiman/gateway/platforms/servlet/connectors/ssl/SSLSessionStrategyFactory.java
index 53e6ca5..dcf3785 100644
--- a/gateway/platforms/servlet/src/main/java/io/apiman/gateway/platforms/servlet/connectors/ssl/SSLSessionStrategyFactory.java
+++ b/gateway/platforms/servlet/src/main/java/io/apiman/gateway/platforms/servlet/connectors/ssl/SSLSessionStrategyFactory.java
@@ -215 +215 @@
-            SSLContext sslContext = SSLContext.getInstance("Default"); //$NON-NLS-1$
+            SSLContext sslContext = SSLContext.getInstance("TLSv1"); //$NON-NLS-1$
diff --git a/gateway/platforms/servlet/src/test/java/io/apiman/gateway/platforms/servlet/auth/tls/BasicMutualAuthTest.java b/gateway/platforms/servlet/src/test/java/io/apiman/gateway/platforms/servlet/auth/tls/BasicMutualAuthTest.java
index 3a428a0..870df57 100644
--- a/gateway/platforms/servlet/src/test/java/io/apiman/gateway/platforms/servlet/auth/tls/BasicMutualAuthTest.java
+++ b/gateway/platforms/servlet/src/test/java/io/apiman/gateway/platforms/servlet/auth/tls/BasicMutualAuthTest.java
@@ -285,0 +286,25 @@
+    /**
+     * Scenario:
+     *   - Development mode TLS pass-through. Gateway accepts anything.
+     *   - Server should still refuse on basis of requiring client auth.
+     */
+    @Test
+    public void shouldFailWithDevModeAndNoClientKeys() {
+        config.put(TLSOptions.TLS_DEVMODE, "true");
+
+        HttpConnectorFactory factory = new HttpConnectorFactory(config);
+        IServiceConnector connector = factory.createConnector(request, service, RequiredAuthType.DEFAULT);
+        IServiceConnection connection = connector.connect(request,
+                new IAsyncResultHandler<IServiceConnectionResponse>() {
+
+         @Override
+         public void handle(IAsyncResult<IServiceConnectionResponse> result) {
+                 Assert.assertTrue(result.isError());
+                 System.out.println(result.getError());
+             }
+        });
+
+        exception.expect(RuntimeException.class);
+        connection.end();
+    }
+
diff --git a/gateway/platforms/servlet/src/test/java/io/apiman/gateway/platforms/servlet/auth/tls/StandardTLSTest.java b/gateway/platforms/servlet/src/test/java/io/apiman/gateway/platforms/servlet/auth/tls/StandardTLSTest.java
index 512fa11..9d8bee5 100644
--- a/gateway/platforms/servlet/src/test/java/io/apiman/gateway/platforms/servlet/auth/tls/StandardTLSTest.java
+++ b/gateway/platforms/servlet/src/test/java/io/apiman/gateway/platforms/servlet/auth/tls/StandardTLSTest.java
@@ -205,0 +206,46 @@
+    /**
+     * Scenario:
+     *   - Development mode TLS pass-through. Accepts anything.
+     */
+    @Test
+    public void shouldAllowAllWhenDevMode() {
+        config.put(TLSOptions.TLS_DEVMODE, "true");
+
+        HttpConnectorFactory factory = new HttpConnectorFactory(config);
+        IServiceConnector connector = factory.createConnector(request, service, RequiredAuthType.DEFAULT);
+        IServiceConnection connection = connector.connect(request,
+                new IAsyncResultHandler<IServiceConnectionResponse>() {
+
+         @Override
+         public void handle(IAsyncResult<IServiceConnectionResponse> result) {
+             Assert.assertTrue(result.isSuccess());
+         }
+        });
+
+        connection.end();
+    }
+
+    /**
+     * Scenario:
+     *   - No settings whatsoever.
+     *   - Will fail, as defaults are relatively safe,
+     *     and service certificate will not be recognised.
+     */
+    @Test
+    public void shouldFailWithNoSettings() {
+        HttpConnectorFactory factory = new HttpConnectorFactory(config);
+        IServiceConnector connector = factory.createConnector(request, service, RequiredAuthType.DEFAULT);
+        IServiceConnection connection = connector.connect(request,
+                new IAsyncResultHandler<IServiceConnectionResponse>() {
+
+         @Override
+         public void handle(IAsyncResult<IServiceConnectionResponse> result) {
+                 Assert.assertTrue(result.isError());
+                 System.out.println(result.getError());
+             }
+        });
+
+        exception.expect(RuntimeException.class);
+        connection.end();
+    }
+

