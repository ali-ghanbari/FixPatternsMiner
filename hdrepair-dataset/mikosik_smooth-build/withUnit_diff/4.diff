diff --git a/src/java/org/smoothbuild/task/base/NativeCallTask.java b/src/java/org/smoothbuild/task/base/NativeCallTask.java
index b658424..d69299f 100644
--- a/src/java/org/smoothbuild/task/base/NativeCallTask.java
+++ b/src/java/org/smoothbuild/task/base/NativeCallTask.java
@@ -34 +34 @@
-      if (result == null && !isNullResultAllowed()) {
+      if (result == null && !isNullResultAllowed() && !sandbox.messageGroup().containsProblems()) {
diff --git a/src/test/org/smoothbuild/task/base/NativeCallTaskTest.java b/src/test/org/smoothbuild/task/base/NativeCallTaskTest.java
index b0e2167..c47f64f 100644
--- a/src/test/org/smoothbuild/task/base/NativeCallTaskTest.java
+++ b/src/test/org/smoothbuild/task/base/NativeCallTaskTest.java
@@ -15,0 +16,2 @@
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
@@ -19,0 +22 @@
+import org.smoothbuild.function.base.Type;
@@ -23,0 +27 @@
+import org.smoothbuild.message.message.CodeMessage;
@@ -24,0 +29,2 @@
+import org.smoothbuild.plugin.File;
+import org.smoothbuild.plugin.Sandbox;
@@ -96,0 +103,20 @@
+  public void null_can_be_returned_when_function_reported_errors() throws Exception {
+    ImmutableList<Param> params = ImmutableList.of();
+    Signature signature = new Signature(Type.FILE, name("name"), params);
+    function1 = new NativeFunction(signature, invoker, true);
+    nativeCallTask = new NativeCallTask(function1, Empty.stringTaskResultMap(), codeLocation);
+    when(invoker.invoke(sandbox, Empty.stringValueMap())).thenAnswer(new Answer<File>() {
+      @Override
+      public File answer(InvocationOnMock invocation) throws Throwable {
+        Sandbox sandbox = (Sandbox) invocation.getArguments()[0];
+        sandbox.report(new CodeMessage(ERROR, new FakeCodeLocation(), "message"));
+        return null;
+      }
+    });
+
+    nativeCallTask.execute(sandbox);
+
+    sandbox.messages().assertOnlyProblem(CodeMessage.class);
+  }
+
+  @Test

