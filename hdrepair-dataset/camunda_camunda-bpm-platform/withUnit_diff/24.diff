diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationTransitionNotifyListenerTake.java b/engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationTransitionNotifyListenerTake.java
index 46c7759..076587f 100644
--- a/engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationTransitionNotifyListenerTake.java
+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/operation/PvmAtomicOperationTransitionNotifyListenerTake.java
@@ -61 +61 @@
-      execution.performOperation(this);
+      execution.performOperationSync(this);
diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/async/AsyncAfterTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/async/AsyncAfterTest.java
index c71084f..1d4f38f 100644
--- a/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/async/AsyncAfterTest.java
+++ b/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/async/AsyncAfterTest.java
@@ -23,0 +24 @@
+import org.camunda.bpm.engine.task.Task;
@@ -221,0 +223,28 @@
+  /**
+   * Test for CAM-2518: Fixes an issue that creates an infinite loop when using
+   * asyncAfter together with an execution listener on sequence flow event "take".
+   * So the only required assertion here is that the process executes successfully.
+   */
+  @Deployment
+  public void testAsyncAfterWithExecutionListener() {
+    // given an async after job and an execution listener on that task
+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("testProcess");
+
+    Job job = managementService.createJobQuery().singleResult();
+    assertNotNull(job);
+
+    assertNotListenerTakeInvoked(processInstance);
+
+    // when the job is executed
+    managementService.executeJob(job.getId());
+
+    // then the process should advance and not recreate the job
+    job = managementService.createJobQuery().singleResult();
+    assertNull(job);
+
+    Task task = taskService.createTaskQuery().singleResult();
+    assertNotNull(task);
+
+    assertListenerTakeInvoked(processInstance);
+  }
+
@@ -224,0 +254,4 @@
+  }
+
+  protected void assertListenerTakeInvoked(Execution e) {
+    assertTrue((Boolean) runtimeService.getVariable(e.getId(), "listenerTakeInvoked"));
@@ -238,0 +272,4 @@
+  protected void assertNotListenerTakeInvoked(Execution e) {
+    assertNull(runtimeService.getVariable(e.getId(), "listenerTakeInvoked"));
+  }
+
diff --git a/engine/src/test/resources/org/camunda/bpm/engine/test/bpmn/async/AsyncAfterTest.testAsyncAfterWithExecutionListener.bpmn20.xml b/engine/src/test/resources/org/camunda/bpm/engine/test/bpmn/async/AsyncAfterTest.testAsyncAfterWithExecutionListener.bpmn20.xml
new file mode 100644
index 0000000..9f52929
--- /dev/null
+++ b/engine/src/test/resources/org/camunda/bpm/engine/test/bpmn/async/AsyncAfterTest.testAsyncAfterWithExecutionListener.bpmn20.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<definitions 
+  xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
+  xmlns:camunda="http://activiti.org/bpmn"
+  targetNamespace="Examples">
+
+  <process id="testProcess">
+
+    <startEvent id="theStart" />
+
+    <sequenceFlow id="flow1"  sourceRef="theStart" targetRef="service" />
+
+    <serviceTask id="service" camunda:expression="${execution.setVariable('behaviorInvoked', true)}"
+        camunda:asyncAfter="true">
+    </serviceTask>
+
+    <sequenceFlow id="flow2" sourceRef="service" targetRef="userTask">
+      <extensionElements>
+        <camunda:executionListener
+            event="take"
+            expression="${execution.setVariable('listenerTakeInvoked', true)}" />
+      </extensionElements>
+    </sequenceFlow>
+    
+    <userTask id="userTask"/>
+    <sequenceFlow id="flow3" sourceRef="userTask" targetRef="theEnd" />
+    <endEvent id="theEnd" />
+
+  </process>
+
+</definitions>

