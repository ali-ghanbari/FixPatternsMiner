diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java b/engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
index 9566b77..94942ad 100644
--- a/engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/behavior/InclusiveGatewayActivityBehavior.java
@@ -73,0 +74,2 @@
+            // since this execution is the only foregoing, it has to be reactivated
+            execution.setActive(true);
diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/gateway/InclusiveGatewayTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/gateway/InclusiveGatewayTest.java
index 2f4ef48..f9410d4 100644
--- a/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/gateway/InclusiveGatewayTest.java
+++ b/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/gateway/InclusiveGatewayTest.java
@@ -311,0 +312,12 @@
+  @Deployment(resources = "org/camunda/bpm/engine/test/bpmn/gateway/InclusiveGatewayTest.testDefaultSequenceFlow.bpmn20.xml")
+  public void testDefaultSequenceFlowExecutionIsActive() {
+    // given a triggered inclusive gateway default flow
+    runtimeService.startProcessInstanceByKey("inclusiveGwDefaultSequenceFlow", CollectionUtil.singletonMap("input", 5));
+
+    // then the process instance execution is not deactivated
+    ExecutionEntity execution = (ExecutionEntity) runtimeService.createExecutionQuery().singleResult();
+    assertEquals("theTask2", execution.getActivityId());
+    assertTrue(execution.isActive());
+  }
+
+

