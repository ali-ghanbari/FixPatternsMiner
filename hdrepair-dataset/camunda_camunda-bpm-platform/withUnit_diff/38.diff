diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java b/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
index c411b52..fe83c92 100644
--- a/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobEntity.java
@@ -139,0 +140 @@
+    persistentState.put("executionId", executionId);
diff --git a/engine/src/main/resources/org/camunda/bpm/engine/impl/mapping/entity/Job.xml b/engine/src/main/resources/org/camunda/bpm/engine/impl/mapping/entity/Job.xml
index 44e2bd6..e19c830 100644
--- a/engine/src/main/resources/org/camunda/bpm/engine/impl/mapping/entity/Job.xml
+++ b/engine/src/main/resources/org/camunda/bpm/engine/impl/mapping/entity/Job.xml
@@ -324,0 +325 @@
+       EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},
@@ -407,0 +409 @@
+       EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},
diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/db/JobEntityTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/db/JobEntityTest.java
new file mode 100644
index 0000000..a59f089
--- /dev/null
+++ b/engine/src/test/java/org/camunda/bpm/engine/test/db/JobEntityTest.java
@@ -0,0 +1,77 @@
+package org.camunda.bpm.engine.test.db;
+
+import org.camunda.bpm.engine.impl.test.PluggableProcessEngineTestCase;
+import org.camunda.bpm.engine.runtime.Job;
+import org.camunda.bpm.engine.test.Deployment;
+
+import java.util.List;
+
+/**
+ *
+ * @author Clint Manning
+ */
+public class JobEntityTest extends PluggableProcessEngineTestCase {
+
+  @Deployment(resources={"org/camunda/bpm/engine/test/db/processWithGatewayAndTwoEndEvents.bpmn20.xml"})
+  public void testGatewayWithTwoEndEventsLastJobReAssignedToParentExe() {
+    String processKey = repositoryService.createProcessDefinitionQuery().singleResult().getKey();
+    String processInstanceId = runtimeService.startProcessInstanceByKey(processKey).getId();
+
+    List<Job> jobList = managementService.createJobQuery().processInstanceId(processInstanceId).list();
+
+    // There should be two jobs
+    assertNotNull(jobList);
+    assertEquals(2, jobList.size());
+
+    managementService.executeJob(jobList.get(0).getId());
+
+    // There should be only one job left
+    jobList = managementService.createJobQuery().list();
+    assertEquals(1, jobList.size());
+
+    // There should only be 1 execution left - the root execution
+    assertEquals(1, runtimeService.createExecutionQuery().list().size());
+
+    // root execution should be attached to the last job
+    assertEquals(processInstanceId, jobList.get(0).getExecutionId());
+
+    managementService.executeJob(jobList.get(0).getId());
+
+    // There should be no more jobs
+    jobList = managementService.createJobQuery().list();
+    assertEquals(0, jobList.size());
+  }
+
+  @Deployment(resources={"org/camunda/bpm/engine/test/db/processGatewayAndTwoEndEventsPlusTimer.bpmn20.xml"})
+  public void testGatewayWithTwoEndEventsLastTimerReAssignedToParentExe() {
+    String processKey = repositoryService.createProcessDefinitionQuery().singleResult().getKey();
+    String processInstanceId = runtimeService.startProcessInstanceByKey(processKey).getId();
+
+    List<Job> jobList = managementService.createJobQuery().processInstanceId(processInstanceId).list();
+
+    // There should be two jobs
+    assertNotNull(jobList);
+    assertEquals(2, jobList.size());
+
+    // execute timer first
+    String timerId = managementService.createJobQuery().timers().singleResult().getId();
+    managementService.executeJob(timerId);
+
+    // There should be only one job left
+    jobList = managementService.createJobQuery().list();
+    assertEquals(1, jobList.size());
+
+    // There should only be 1 execution left - the root execution
+    assertEquals(1, runtimeService.createExecutionQuery().list().size());
+
+    // root execution should be attached to the last job
+    assertEquals(processInstanceId, jobList.get(0).getExecutionId());
+
+    // execute service task
+    managementService.executeJob(jobList.get(0).getId());
+
+    // There should be no more jobs
+    jobList = managementService.createJobQuery().list();
+    assertEquals(0, jobList.size());
+  }
+}
diff --git a/engine/src/test/resources/org/camunda/bpm/engine/test/db/processGatewayAndTwoEndEventsPlusTimer.bpmn20.xml b/engine/src/test/resources/org/camunda/bpm/engine/test/db/processGatewayAndTwoEndEventsPlusTimer.bpmn20.xml
new file mode 100644
index 0000000..cbf6a13
--- /dev/null
+++ b/engine/src/test/resources/org/camunda/bpm/engine/test/db/processGatewayAndTwoEndEventsPlusTimer.bpmn20.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<definitions id="definitions"
+  xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
+  xmlns:activiti="http://activiti.org/bpmn"
+  targetNamespace="Examples">
+
+  <process id="processGatewayAndTwoEndEventsPlusTimer1" name="processGatewayAndTwoEndEventsPlusTimer1">
+
+    <startEvent id="theStart" />
+    <sequenceFlow id="flow1" sourceRef="theStart" targetRef="fork" />
+
+    <parallelGateway id="fork" />
+    <serviceTask id="service1" activiti:class="org.camunda.bpm.engine.test.bpmn.async.AsyncService" activiti:async="true" />
+    <intermediateCatchEvent id="timer1">
+       <timerEventDefinition>
+          <timeDuration>PT0S</timeDuration>
+       </timerEventDefinition>
+    </intermediateCatchEvent>
+    <sequenceFlow id="flow2" sourceRef="fork" targetRef="service1" />
+    <sequenceFlow id="flow3" sourceRef="fork" targetRef="timer1" />
+    <sequenceFlow id="flow4" sourceRef="service1" targetRef="end1" />
+    <sequenceFlow id="flow5" sourceRef="timer1" targetRef="end2" />
+    <endEvent id="end1" />
+    <endEvent id="end2" />
+
+  </process>
+
+</definitions>
diff --git a/engine/src/test/resources/org/camunda/bpm/engine/test/db/processWithGatewayAndTwoEndEvents.bpmn20.xml b/engine/src/test/resources/org/camunda/bpm/engine/test/db/processWithGatewayAndTwoEndEvents.bpmn20.xml
new file mode 100644
index 0000000..4ff1ca1
--- /dev/null
+++ b/engine/src/test/resources/org/camunda/bpm/engine/test/db/processWithGatewayAndTwoEndEvents.bpmn20.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<definitions id="definitions"
+  xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
+  xmlns:activiti="http://activiti.org/bpmn"
+  targetNamespace="Examples">
+
+  <process id="processWithGatewayAndTwoEndEvents1" name="processWithGatewayAndTwoEndEvents1">
+
+    <startEvent id="theStart" />
+    <sequenceFlow id="flow1" sourceRef="theStart" targetRef="fork" />
+
+    <parallelGateway id="fork" />
+    <serviceTask id="service1" activiti:class="org.camunda.bpm.engine.test.bpmn.async.AsyncService" activiti:async="true" />
+    <serviceTask id="service2" activiti:class="org.camunda.bpm.engine.test.bpmn.async.AsyncService" activiti:async="true" />
+    <sequenceFlow id="flow2" sourceRef="fork" targetRef="service1" />
+    <sequenceFlow id="flow3" sourceRef="fork" targetRef="service2" />
+    <sequenceFlow id="flow4" sourceRef="service1" targetRef="end1" />
+    <sequenceFlow id="flow5" sourceRef="service2" targetRef="end2" />
+    <endEvent id="end1" />
+    <endEvent id="end2" />
+
+  </process>
+
+</definitions>

