diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java b/engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
index 0707ea1..0be08ff 100644
--- a/engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/bpmn/parser/BpmnParse.java
@@ -2931 +2931 @@
-    String expressionRegex = "\\$+\\{+.+\\}";
+    String expressionRegex = "[$#]+\\{+.+\\}";
diff --git a/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java b/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
index cb36fb8..0f0a133 100644
--- a/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
+++ b/engine/src/test/java/org/camunda/bpm/engine/test/bpmn/callactivity/CallActivityAdvancedTest.java
@@ -421,0 +422,30 @@
+  @Deployment(resources = { "org/camunda/bpm/engine/test/bpmn/callactivity/CallActivity.testCallSimpleSubProcessWithHashExpressions.bpmn20.xml",
+  "org/camunda/bpm/engine/test/bpmn/callactivity/simpleSubProcess.bpmn20.xml" })
+  public void testCallSimpleSubProcessWithHashExpressions() {
+
+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("callSimpleSubProcess");
+
+    // one task in the subprocess should be active after starting the process
+    // instance
+    TaskQuery taskQuery = taskService.createTaskQuery();
+    Task taskBeforeSubProcess = taskQuery.singleResult();
+    assertEquals("Task before subprocess", taskBeforeSubProcess.getName());
+
+    // Completing the task continues the process which leads to calling the
+    // subprocess. The sub process we want to call is passed in as a variable
+    // into this task
+    taskService.setVariable(taskBeforeSubProcess.getId(), "simpleSubProcessExpression", "simpleSubProcess");
+    taskService.complete(taskBeforeSubProcess.getId());
+    Task taskInSubProcess = taskQuery.singleResult();
+    assertEquals("Task in subprocess", taskInSubProcess.getName());
+
+    // Completing the task in the subprocess, finishes the subprocess
+    taskService.complete(taskInSubProcess.getId());
+    Task taskAfterSubProcess = taskQuery.singleResult();
+    assertEquals("Task after subprocess", taskAfterSubProcess.getName());
+
+    // Completing this task end the process instance
+    taskService.complete(taskAfterSubProcess.getId());
+    assertProcessEnded(processInstance.getId());
+  }
+
diff --git a/engine/src/test/resources/org/camunda/bpm/engine/test/bpmn/callactivity/CallActivity.testCallSimpleSubProcessWithHashExpressions.bpmn20.xml b/engine/src/test/resources/org/camunda/bpm/engine/test/bpmn/callactivity/CallActivity.testCallSimpleSubProcessWithHashExpressions.bpmn20.xml
new file mode 100644
index 0000000..4c3751d
--- /dev/null
+++ b/engine/src/test/resources/org/camunda/bpm/engine/test/bpmn/callactivity/CallActivity.testCallSimpleSubProcessWithHashExpressions.bpmn20.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<definitions id="definitions" 
+  xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
+  xmlns:activiti="http://activiti.org/bpmn"
+  targetNamespace="Examples">
+  
+  <process id="callSimpleSubProcess">
+  
+    <startEvent id="theStart" />
+    
+    <sequenceFlow id="flow1" sourceRef="theStart" targetRef="taskBeforeSubProcess" />
+    
+    <userTask id="taskBeforeSubProcess" name="Task before subprocess" />
+    
+    <sequenceFlow id="flow2" sourceRef="taskBeforeSubProcess" targetRef="callSubProcess" />
+  
+    <callActivity id="callSubProcess" calledElement="#{simpleSubProcessExpression}" />
+    
+    <sequenceFlow id="flow3" sourceRef="callSubProcess" targetRef="taskAfterSubProcess" />
+    
+    <userTask id="taskAfterSubProcess" name="Task after subprocess" />
+    
+    <sequenceFlow id="flow4" sourceRef="taskAfterSubProcess" targetRef="theEnd" />
+     
+    <endEvent id="theEnd" />
+    
+  </process>
+
+</definitions>
\ No newline at end of file

