diff --git a/src/wcs1_1/src/test/java/org/geoserver/wcs/kvp/GetCoverageReaderTest.java b/src/wcs1_1/src/test/java/org/geoserver/wcs/kvp/GetCoverageReaderTest.java
index 3d19fe8..1e419cc 100644
--- a/src/wcs1_1/src/test/java/org/geoserver/wcs/kvp/GetCoverageReaderTest.java
+++ b/src/wcs1_1/src/test/java/org/geoserver/wcs/kvp/GetCoverageReaderTest.java
@@ -94,0 +95 @@
+    @Test
@@ -109,0 +111 @@
+    @Test
@@ -127,0 +130 @@
+    @Test
@@ -143,0 +147 @@
+    @Test
@@ -186,0 +191 @@
+    @Test
@@ -214,0 +220 @@
+    @Test
@@ -248,0 +255 @@
+    @Test
@@ -286,2 +293,2 @@
-     * Tests valid range subset expressions, but with a mix of valid and invalid identifiers
-     * 
+     * Tests Bicubic (also called cubic) interpolation with a RangeSubset.
+     *
@@ -290,6 +297,4 @@
-    public void testRangeSubset() throws Exception {
-        Map<String, Object> raw = baseMap();
-        final String layerId = getLayerId(TASMANIA_BM);
-        raw.put("identifier", layerId);
-        raw.put("format", "image/tiff");
-        raw.put("BoundingBox", "-45,146,-42,147");
+    @Test
+    public void testInterpolationBicubic() throws Exception {
+        this.testRangeSubset("cubic");
+    }
@@ -297,15 +302,18 @@
-        // ok, finally something we can parse
-        raw.put("rangeSubset", "BlueMarble:nearest[Bands[Red_band]]");
-        GetCoverageType getCoverage = (GetCoverageType) reader.read(reader.createRequest(),
-                parseKvp(raw), raw);
-        RangeSubsetType rs = getCoverage.getRangeSubset();
-        assertNotNull(rs);
-        assertEquals(1, rs.getFieldSubset().size());
-        FieldSubsetType field = (FieldSubsetType) rs.getFieldSubset().get(0);
-        assertEquals("BlueMarble", field.getIdentifier().getValue());
-        assertEquals(1, field.getAxisSubset().size());
-        AxisSubsetType axis = (AxisSubsetType) field.getAxisSubset().get(0);
-        assertEquals("Bands", axis.getIdentifier());
-        List keys = axis.getKey();
-        assertEquals(1, keys.size());
-        assertEquals("Red_band", keys.get(0));
+    /**
+     * Tests Bilinear (also called linear) interpolation with a RangeSubset.
+     *
+     * @throws Exception
+     */
+    @Test
+    public void testInterpolationBilinear() throws Exception {
+        this.testRangeSubset("linear");
+    }
+
+    /**
+     * Tests Nearest neighbor (also called nearest) interpolation with a RangeSubset.
+     *
+     * @throws Exception
+     */
+    @Test
+    public void testInterpolationNearest() throws Exception {
+        this.testRangeSubset("nearest");
@@ -315 +322,0 @@
-
@@ -334,0 +342,35 @@
+    /**
+     * Tests valid range subset expressions, but with a mix of valid and invalid identifiers.
+     *
+     * @param interpolation The used interpolation method.
+     * @throws Exception
+     */
+    private void testRangeSubset(String interpolation) throws Exception {
+        Map<String, Object> raw = baseMap();
+        final String layerId = getLayerId(TASMANIA_BM);
+
+        raw.put("identifier", layerId);
+        raw.put("format", "image/tiff");
+        raw.put("BoundingBox", "-45,146,-42,147");
+        raw.put("rangeSubset", "BlueMarble:" + interpolation + "[Bands[Red_band]]");
+
+        GetCoverageType getCoverage = (GetCoverageType) reader.read(reader.createRequest(), parseKvp(raw), raw);
+        RangeSubsetType rs = getCoverage.getRangeSubset();
+        FieldSubsetType field = (FieldSubsetType) rs.getFieldSubset().get(0);
+        AxisSubsetType axis = (AxisSubsetType) field.getAxisSubset().get(0);
+        List keys = axis.getKey();
+
+        assertNotNull(rs);
+        assertEquals(1, rs.getFieldSubset().size());
+
+        assertEquals("BlueMarble", field.getIdentifier().getValue());
+        assertEquals(1, field.getAxisSubset().size());
+
+        assertEquals("Bands", axis.getIdentifier());
+
+        assertEquals(1, keys.size());
+        assertEquals("Red_band", keys.get(0));
+
+        assertEquals(field.getInterpolationType(), interpolation);
+    }
+
diff --git a/src/wcs1_1/src/test/java/org/geoserver/wcs/test/WCSTestSupport.java b/src/wcs1_1/src/test/java/org/geoserver/wcs/test/WCSTestSupport.java
index d0e05c1..3d92a3f 100644
--- a/src/wcs1_1/src/test/java/org/geoserver/wcs/test/WCSTestSupport.java
+++ b/src/wcs1_1/src/test/java/org/geoserver/wcs/test/WCSTestSupport.java
@@ -45 +45 @@
-            WCS11_SCHEMA = factory.newSchema(new File("./schemas/wcs/1.1.1/wcsAll.xsd"));
+            WCS11_SCHEMA = factory.newSchema(new File("wcs1_1/schemas/wcs/1.1.1/wcsAll.xsd"));

