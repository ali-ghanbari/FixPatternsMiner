diff --git a/jgrapht-core/src/main/java/org/jgrapht/graph/AbstractGraph.java b/jgrapht-core/src/main/java/org/jgrapht/graph/AbstractGraph.java
index 7ae5f20..48233a5 100644
--- a/jgrapht-core/src/main/java/org/jgrapht/graph/AbstractGraph.java
+++ b/jgrapht-core/src/main/java/org/jgrapht/graph/AbstractGraph.java
@@ -251 +251 @@
-            // this is a "piaring function" (see details here: http://en.wikipedia.org/wiki/Pairing_function) (VK)
+            // this is a "pairing function" (see details here: http://en.wikipedia.org/wiki/Pairing_function) (VK)
diff --git a/jgrapht-core/src/test/java/org/jgrapht/graph/EqualsTest.java b/jgrapht-core/src/test/java/org/jgrapht/graph/EqualsTest.java
index bfa3e4d..cea2bdf 100644
--- a/jgrapht-core/src/test/java/org/jgrapht/graph/EqualsTest.java
+++ b/jgrapht-core/src/test/java/org/jgrapht/graph/EqualsTest.java
@@ -104,0 +105,83 @@
+
+    /**
+     * Tests equals() method of SimpleGraph.
+     */
+    public void testSimpleGraph()
+    {
+        UndirectedGraph<String, DefaultEdge> g1 =
+            new SimpleGraph<String, DefaultEdge>(
+                DefaultEdge.class);
+        g1.addVertex(v1);
+        g1.addVertex(v2);
+        g1.addVertex(v3);
+        g1.addVertex(v4);
+        g1.addEdge(v1, v2);
+        g1.addEdge(v2, v3);
+        g1.addEdge(v3, v1);
+
+        UndirectedGraph<String, DefaultEdge> g2 = 
+             new SimpleGraph<String, DefaultEdge>(
+                 DefaultEdge.class);
+        g2.addVertex(v4);
+        g2.addVertex(v3);
+        g2.addVertex(v2);
+        g2.addVertex(v1);
+        g2.addEdge(v3, v1);
+        g2.addEdge(v2, v3);
+        g2.addEdge(v1, v2);
+
+        UndirectedGraph<String, DefaultEdge> g3 = 
+            new SimpleGraph<String, DefaultEdge>(
+                DefaultEdge.class);
+       g3.addVertex(v4);
+       g3.addVertex(v3);
+       g3.addVertex(v2);
+       g3.addVertex(v1);
+       g3.addEdge(v3, v1);
+       g3.addEdge(v2, v3);
+
+        assertTrue(g2.equals(g1));
+        assertTrue(!g3.equals(g2));
+    }
+
+    /**
+     * Tests equals() method for diefferent graphs.
+     */
+    public void testDifferentGraphs()
+    {
+        DirectedGraph<String, DefaultEdge> g1 =
+            new DefaultDirectedGraph<String, DefaultEdge>(
+                DefaultEdge.class);
+        g1.addVertex(v1);
+        g1.addVertex(v2);
+        g1.addVertex(v3);
+        g1.addVertex(v4);
+        g1.addEdge(v1, v2);
+        g1.addEdge(v2, v3);
+        g1.addEdge(v3, v1);
+
+        UndirectedGraph<String, DefaultEdge> g2 = 
+             new SimpleGraph<String, DefaultEdge>(
+                 DefaultEdge.class);
+        g2.addVertex(v4);
+        g2.addVertex(v3);
+        g2.addVertex(v2);
+        g2.addVertex(v1);
+        g2.addEdge(v3, v1);
+        g2.addEdge(v2, v3);
+        g2.addEdge(v1, v2);
+
+        UndirectedGraph<String, DefaultEdge> g3 = 
+            new SimpleGraph<String, DefaultEdge>(
+                DefaultEdge.class);
+        g3.addVertex(v1);
+        g3.addVertex(v2);
+        g3.addVertex(v3);
+        g3.addVertex(v4);
+        g3.addEdge(v2, v3);
+        g3.addEdge(v3, v1);
+        g3.addEdge(v1, v2);
+
+        assertTrue(!g2.equals(g1));
+        assertTrue(g3.equals(g2));
+    }
diff --git a/jgrapht-core/src/test/java/org/jgrapht/graph/HashCodeTest.java b/jgrapht-core/src/test/java/org/jgrapht/graph/HashCodeTest.java
index 0983e12..4c27b22 100644
--- a/jgrapht-core/src/test/java/org/jgrapht/graph/HashCodeTest.java
+++ b/jgrapht-core/src/test/java/org/jgrapht/graph/HashCodeTest.java
@@ -106,0 +107,75 @@
+
+    /**
+     * Tests hashCode() method of SimpleGraph.
+     */
+    public void testSimpleGraph()
+    {
+        UndirectedGraph<String, DefaultEdge> g1 =
+            new SimpleGraph<String, DefaultEdge>(
+                DefaultEdge.class);
+        g1.addVertex(v1);
+        g1.addVertex(v2);
+        g1.addVertex(v3);
+        g1.addEdge(v1, v2);
+        g1.addEdge(v3, v1);
+
+        UndirectedGraph<String, DefaultEdge> g2 = 
+             new SimpleGraph<String, DefaultEdge>(
+                 DefaultEdge.class);
+        g2.addVertex(v3);
+        g2.addVertex(v2);
+        g2.addVertex(v1);
+        g2.addEdge(v3, v1);
+        g2.addEdge(v1, v2);
+
+        UndirectedGraph<String, DefaultEdge> g3 = 
+            new SimpleGraph<String, DefaultEdge>(
+                DefaultEdge.class);
+        g3.addVertex(v3);
+        g3.addVertex(v2);
+        g3.addVertex(v1);
+        g3.addEdge(v3, v1);
+        g3.addEdge(v2, v3);
+        g3.addEdge(v1, v2);
+
+        assertEquals(g1.hashCode(), g2.hashCode());
+        assertTrue(g3.hashCode() != g2.hashCode());
+    }
+
+    /**
+     * Tests hashCode() method of different graphs.
+     */
+    public void testDifferentGraphs()
+    {
+        DirectedGraph<String, DefaultEdge> g1 =
+            new DefaultDirectedGraph<String, DefaultEdge>(
+                DefaultEdge.class);
+        g1.addVertex(v1);
+        g1.addVertex(v2);
+        g1.addVertex(v3);
+        g1.addEdge(v1, v2);
+        g1.addEdge(v3, v1);
+
+        UndirectedGraph<String, DefaultEdge> g2 = 
+             new SimpleGraph<String, DefaultEdge>(
+                 DefaultEdge.class);
+        g2.addVertex(v3);
+        g2.addVertex(v2);
+        g2.addVertex(v1);
+        g2.addEdge(v3, v1);
+        g2.addEdge(v1, v2);
+
+        DirectedGraph<String, DefaultEdge> g3 = 
+            new DefaultDirectedGraph<String, DefaultEdge>(
+                DefaultEdge.class);
+        g3.addVertex(v3);
+        g3.addVertex(v2);
+        g3.addVertex(v1);
+        g3.addEdge(v3, v1);
+        g3.addEdge(v2, v3);
+        g3.addEdge(v1, v2);
+
+        assertEquals(g1.hashCode(), g2.hashCode());
+        assertTrue(g3.hashCode() != g1.hashCode());
+    }
+    

