diff --git a/source/ca/odell/glazedlists/swing/EventSelectionModel.java b/source/ca/odell/glazedlists/swing/EventSelectionModel.java
index 585951f..16896e5 100644
--- a/source/ca/odell/glazedlists/swing/EventSelectionModel.java
+++ b/source/ca/odell/glazedlists/swing/EventSelectionModel.java
@@ -340 +340 @@
-                if(minSelectionIndexBefore != 0 && maxSelectionIndexBefore != 0) {
+                if(minSelectionIndexBefore != -1 && maxSelectionIndexBefore != -1) {
diff --git a/test/ca/odell/glazedlists/swing/EventSelectionModelTest.java b/test/ca/odell/glazedlists/swing/EventSelectionModelTest.java
index dc9f176..e7cf45a 100644
--- a/test/ca/odell/glazedlists/swing/EventSelectionModelTest.java
+++ b/test/ca/odell/glazedlists/swing/EventSelectionModelTest.java
@@ -16,0 +17 @@
+import javax.swing.event.*;
@@ -69,0 +71,10 @@
+    
+    /**
+     * Tests a problem where the {@link EventSelectionModel} fails to fire events
+     *
+     * @author Sergey Bogatyrjov
+     */
+    public void testSelectionModel() {
+        String[] data = new String[] { "one", "two", "three" };
+        EventList source = new BasicEventList(Arrays.asList(data));
+        BooleanFilteredList filtered = new BooleanFilteredList(source);
@@ -70,0 +82,29 @@
+        // create selection model
+        EventSelectionModel model = new EventSelectionModel(filtered);
+        ListSelectionChangeCounter counter = new ListSelectionChangeCounter();
+        model.addListSelectionListener(counter);
+
+        // select the 1th
+        flushEventDispatchThread();
+        model.setSelectionInterval(1, 1);
+        assertEquals(1, counter.getCountAndReset());
+
+        // clear the filter
+        filtered.setMatchAll(false);
+        flushEventDispatchThread();
+        assertEquals(1, counter.getCountAndReset());
+
+        // unclear the filter
+        filtered.setMatchAll(true);
+        flushEventDispatchThread();
+        assertEquals(0, counter.getCountAndReset());
+
+        // select the 0th
+        model.setSelectionInterval(0, 0);
+        assertEquals(1, counter.getCountAndReset());
+
+        // clear the filter
+        filtered.setMatchAll(false);
+        flushEventDispatchThread();
+        assertEquals(1, counter.getCountAndReset());
+    }
@@ -92,0 +133,33 @@
+
+    /**
+     * A filter list that matches all or none.
+     */
+    private class BooleanFilteredList extends AbstractFilterList {
+        private boolean matchAll = true;
+        public BooleanFilteredList(EventList source) {
+            super(source);
+            handleFilterChanged();
+        }
+        public boolean filterMatches(Object element) {
+            return matchAll;
+        }
+        public void setMatchAll(boolean matchAll) {
+            this.matchAll = matchAll;
+            handleFilterChanged();
+        }
+    }
+
+    /**
+     * Counts the number of ListSelectionEvents fired.
+     */
+    private class ListSelectionChangeCounter implements ListSelectionListener {
+        private int count = 0;
+        public void valueChanged(ListSelectionEvent e) {
+            count++;
+        }
+        public int getCountAndReset() {
+            int result = count;
+            count = 0;
+            return result;
+        }
+    }

