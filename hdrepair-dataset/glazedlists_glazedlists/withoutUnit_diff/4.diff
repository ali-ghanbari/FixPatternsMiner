diff --git a/source/ca/odell/glazedlists/GlazedLists.java b/source/ca/odell/glazedlists/GlazedLists.java
index 9c74b0d..62d70b1 100644
--- a/source/ca/odell/glazedlists/GlazedLists.java
+++ b/source/ca/odell/glazedlists/GlazedLists.java
@@ -748,21 +748,23 @@
-    /**
-     * Check list elements for type safety after they are added to an EventList
-     * using a {@link ListEventListener}. The {@link ListEventListener} which
-     * is installed and returned to the caller (which they may uninstall at
-     * their leisure) will throw an {@link IllegalArgumentException} if it
-     * detects the addition of an element with an unsupported type.
-     *
-     * <p> This {@link ListEventListener} is typically used as a tool to
-     * check invariants of the elements of {@link EventList}s during
-     * software development and testing phases.
-     *
-     * @param source the {@link EventList} on which to provide type safety
-     * @param types the set of types to which each list element must be
-     *      assignable - note <tt>null</tt> is an acceptable type and
-     *      indicates the {@link EventList} expects to contain <tt>null</tt>
-     *      elements
-     * @return the {@link ListEventListener} providing the which provides type
-     *      safety checking on the given <code>source</code>. To stop the
-     *      type safety checking, use
-     *      {@link EventList#removeListEventListener(ListEventListener)}.
-     */
+	/**
+	 * Check list elements for type safety after they are added to an EventList
+	 * using a {@link ListEventListener}. The {@link ListEventListener} which is
+	 * installed and returned to the caller (which they may uninstall at their
+	 * leisure) will throw an {@link IllegalArgumentException} if it detects the
+	 * addition of an element with an unsupported type.
+	 * 
+	 * <p>
+	 * This {@link ListEventListener} is typically used as a tool to check
+	 * invariants of the elements of {@link EventList}s during software
+	 * development and testing phases.
+	 * 
+	 * @param source
+	 *            the {@link EventList} on which to provide type safety
+	 * @param types
+	 *            the set of types to which each list element must be assignable
+	 *            - the set itself must not be <tt>null</tt>, but <tt>null</tt>
+	 *            is an acceptable type within the set and indicates the
+	 *            {@link EventList} expects to contain <tt>null</tt> elements
+	 * @return the {@link ListEventListener} providing the safety checking on
+	 *         the given <code>source</code>. To stop the type safety checking,
+	 *         use {@link EventList#removeListEventListener(ListEventListener)}.
+	 */

