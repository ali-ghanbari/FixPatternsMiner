diff --git a/cdap-master/src/main/java/co/cask/cdap/data/runtime/main/MasterTwillApplication.java b/cdap-master/src/main/java/co/cask/cdap/data/runtime/main/MasterTwillApplication.java
index 86e38ed..572c81d 100644
--- a/cdap-master/src/main/java/co/cask/cdap/data/runtime/main/MasterTwillApplication.java
+++ b/cdap-master/src/main/java/co/cask/cdap/data/runtime/main/MasterTwillApplication.java
@@ -42 +42 @@
-  private static final Logger LOG = LoggerFactory.getLogger(MasterServiceMain.class);
+  private static final Logger LOG = LoggerFactory.getLogger(MasterTwillApplication.class);
diff --git a/cdap-ui/app/directives/flow-graph/flow.js b/cdap-ui/app/directives/flow-graph/flow.js
index 0f46043..3b0c5c0 100644
--- a/cdap-ui/app/directives/flow-graph/flow.js
+++ b/cdap-ui/app/directives/flow-graph/flow.js
@@ -360,0 +361,6 @@
+          case 'FORKNODE':
+            shapeName = 'circle';
+            break;
+          case 'JOINNODE':
+            shapeName = 'circle';
+            break;
@@ -408 +414 @@
-    var nodeLabel = node.name.length > 8 ? node.name.substr(0, 5) + '...' : node.name;
+    var nodeLabel = node.label.length > 8? node.label.substr(0,5) + '...': node.label;
@@ -440 +446 @@
-  // svg.call(zoom);
+  svg.call(zoom);
@@ -451 +457 @@
-        return '<strong>' + scope.instanceMap[nodeId].type +':</strong> <span class="tip-node-name">'+ nodeId +'</span>';
+        return '<strong>'+ scope.instanceMap[nodeId].nodeId + ' : ' + scope.instanceMap[nodeId].program.programName +'</strong>';
@@ -474 +479,0 @@
-
@@ -478,5 +483,13 @@
-  zoom
-    .translate([(svgWidth - g.graph().width * initialScale) / 2, 20])
-    .scale(initialScale)
-    .event(svg);
-  svg.attr('height', g.graph().height * initialScale + 40);
+  if (svgWidth - g.graph().width <= 0) {
+    zoom.translate([0,0])
+        .scale(1.0 - (g.nodeCount() + g.edgeCount())/100)
+        .event(svg);
+    svg.attr('height', g.graph().height * initialScale + 40);
+  } else {
+    zoom
+      .translate([(svgWidth - g.graph().width * initialScale) / 2, 20])
+      .scale(initialScale)
+      .event(svg);
+    svg.attr('height', g.graph().height * initialScale + 40);
+
+  }
diff --git a/cdap-ui/app/directives/widget-container/widget-container.less b/cdap-ui/app/directives/widget-container/widget-container.less
index d30702a..a1b2703 100644
--- a/cdap-ui/app/directives/widget-container/widget-container.less
+++ b/cdap-ui/app/directives/widget-container/widget-container.less
@@ -3 +2,0 @@
-    width: 90%;
diff --git a/cdap-ui/app/directives/widget-container/widget-factory.js b/cdap-ui/app/directives/widget-container/widget-factory.js
index ece8bbc..a5b95f2 100644
--- a/cdap-ui/app/directives/widget-container/widget-factory.js
+++ b/cdap-ui/app/directives/widget-container/widget-factory.js
@@ -51 +51 @@
-        element: '<textarea></textarea>',
+        element: '<my-json-textbox></my-json-textbox>',
@@ -54,2 +54 @@
-          'class': 'form-control',
-          placeholder: '{{myconfig.properties.default || ""}}'
+          placeholder: 'myconfig.properties.default'
diff --git a/cdap-ui/app/directives/widget-container/widget-json-editor/widget-json-editor.js b/cdap-ui/app/directives/widget-container/widget-json-editor/widget-json-editor.js
new file mode 100644
index 0000000..8d58d66
--- /dev/null
+++ b/cdap-ui/app/directives/widget-container/widget-json-editor/widget-json-editor.js
@@ -0,0 +1,26 @@
+angular.module(PKG.name + '.commons')
+  .directive('myJsonTextbox', function() {
+    return {
+      restrict: 'EA',
+      scope: {
+        model: '=ngModel',
+        placeholder: '='
+      },
+      template: '<textarea class="form-control" cask-json-edit="internalModel" placeholder="placeholder"></textarea>',
+      controller: function($scope) {
+
+        try {
+          $scope.internalModel = JSON.parse($scope.model);
+        } catch(e) {
+          $scope.internalModel = "";
+        }
+
+        $scope.$watch('internalModel', function(newVal, oldVal) {
+          if (newVal !== oldVal) {
+            $scope.model = angular.toJson($scope.internalModel);
+            console.info("model: ", JSON.stringify($scope.model));
+          }
+        });
+      }
+    };
+  });
diff --git a/cdap-ui/app/features/adapters/controllers/create-ctrl.js b/cdap-ui/app/features/adapters/controllers/create-ctrl.js
index 1e84ffc..3fb2c10 100644
--- a/cdap-ui/app/features/adapters/controllers/create-ctrl.js
+++ b/cdap-ui/app/features/adapters/controllers/create-ctrl.js
@@ -69,3 +68,0 @@
-    $scope.source = defaultSource;
-    $scope.sink = defaultSink;
-    $scope.transforms = defaultTransforms;
@@ -78,0 +76,11 @@
+      $scope.transforms = angular.copy(defaultTransforms);
+      $scope.source = angular.copy(defaultSource);
+      $scope.sink = angular.copy(defaultSink);
+      $scope.tabs = [
+        {
+          title: 'Default',
+          icon: 'cogs',
+          isCloseable: false,
+          partial: '/assets/features/adapters/templates/create/tabs/default.html'
+        }
+      ];
diff --git a/cdap-ui/app/features/adapters/etlapps.less b/cdap-ui/app/features/adapters/etlapps.less
index bd334ff..950a7ad 100644
--- a/cdap-ui/app/features/adapters/etlapps.less
+++ b/cdap-ui/app/features/adapters/etlapps.less
@@ -187,0 +188 @@
+
@@ -193,0 +195,3 @@
+        .control-label { font-weight: 400; }
+        textarea.form-control {
+          min-height: 200px;
diff --git a/cdap-ui/app/features/admin/controllers/NamespaceCreateController.js b/cdap-ui/app/features/admin/controllers/NamespaceCreateController.js
index abbe958..863b9fd 100644
--- a/cdap-ui/app/features/admin/controllers/NamespaceCreateController.js
+++ b/cdap-ui/app/features/admin/controllers/NamespaceCreateController.js
@@ -8 +8 @@
-    $scope.submitHandler = function() {
+    $scope.submitHandler = _.once(function() {
@@ -28 +28 @@
-    };
+    });
diff --git a/cdap-ui/app/features/dashboard/controllers/addwdgt-ctrl.js b/cdap-ui/app/features/dashboard/controllers/addwdgt-ctrl.js
index 26d39f0..352968c 100644
--- a/cdap-ui/app/features/dashboard/controllers/addwdgt-ctrl.js
+++ b/cdap-ui/app/features/dashboard/controllers/addwdgt-ctrl.js
@@ -44 +44 @@
-  $scope.doAddWidget = function () {
+  $scope.doAddWidget = _.once(function () {
@@ -83 +83 @@
-  };
+  });
diff --git a/cdap-ui/app/features/dashboard/controllers/dashboard-ctrl.js b/cdap-ui/app/features/dashboard/controllers/dashboard-ctrl.js
index 117f289..f8b91d6 100644
--- a/cdap-ui/app/features/dashboard/controllers/dashboard-ctrl.js
+++ b/cdap-ui/app/features/dashboard/controllers/dashboard-ctrl.js
@@ -78 +78 @@
-  $scope.addDashboard = function (title) {
+  $scope.addDashboard = _.throttle(function (title) {
@@ -83 +83 @@
-  };
+  }, 2000, {'trailing': false});
diff --git a/cdap-ui/app/features/workflows/controllers/tabs/runs/tabs/status-ctrl.js b/cdap-ui/app/features/workflows/controllers/tabs/runs/tabs/status-ctrl.js
index eaa6df5..f827bb6 100644
--- a/cdap-ui/app/features/workflows/controllers/tabs/runs/tabs/status-ctrl.js
+++ b/cdap-ui/app/features/workflows/controllers/tabs/runs/tabs/status-ctrl.js
@@ -19 +19,2 @@
-            nodes = [];
+            nodes = [],
+            nodesFromBackend = angular.copy(res.nodes);
@@ -21,2 +22,2 @@
-        res.nodes.unshift({
-          name: 'start',
+        // Add Start and End nodes as semantically workflow needs to have it.
+        nodesFromBackend.unshift({
@@ -25 +26 @@
-          nodeId: 'start',
+          nodeId: '',
@@ -27 +28 @@
-            programName: ''
+            programName: 'Start'
@@ -31,2 +32,2 @@
-        res.nodes.push({
-          name: 'end',
+        nodesFromBackend.push({
+          label: 'end',
@@ -35 +36 @@
-          nodeId: 'end',
+          nodeId: '',
@@ -37 +38 @@
-            programName: ''
+            programName: 'End'
@@ -41,2 +42,2 @@
-        convert(angular.copy(res.nodes), edges);
-        expandForks(res.nodes, nodes);
+        expandNodes(nodesFromBackend, nodes);
+        convertNodesToEdges(angular.copy(nodes), edges);
@@ -110 +111 @@
-  * Purpose: Converts a list of nodes to a list of connections
+  * Purpose: convertNodesToEdgess a list of nodes to a list of connections
@@ -112,51 +113,2 @@
-  * @return [Array] of connections
-  * Usage: Can handle all cases, including:
-      1. Fork in the middle
-      2. Only a fork
-      3. Fork at the beginning
-      4. Fork at the end
-      5. Only an Action node
-
-      var z = [
-        {
-          nodeType: 'ACTION',
-          program: {
-            programName: "asd"
-          }
-        }, {
-          nodeType: 'FORK',
-          branches: [
-            [
-              [
-                {
-                  nodeType: 'ACTION',
-                  program: {
-                    programName: "1"
-                  }
-                }
-              ],
-              [
-                {
-                  nodeType: 'ACTION',
-                  program: {
-                    programName: "2"
-                  }
-                }
-              ]
-            ],
-            [
-              {
-                nodeType: 'ACTION',
-                program: {
-                  programName: "3"
-                }
-              }
-            ]
-          ]
-        }, {
-          nodeType: 'ACTION',
-          program: {
-            programName: "4"
-          }
-        }
-      ];
+  * @return [Array] of connections (edges)
+  * Should handle Action + Fork + Condition Nodes.
@@ -164,2 +116,8 @@
-function convert(nodes, connections) {
-
+function convertNodesToEdges(nodes, connections) {
+  var staticNodeTypes = [
+   'ACTION', // from backend hence no 'NODE'
+   'JOINNODE',
+   'FORKNODE',
+   'CONDITIONNODE',
+   'CONDITIONEND'
+ ];
@@ -168 +126,6 @@
-    if (nodes[i].nodeType === 'ACTION' && nodes[i+1].nodeType === 'ACTION') {
+    if (staticNodeTypes.indexOf(nodes[i].nodeType) >-1 &&
+        staticNodeTypes.indexOf(nodes[i+1].nodeType) > -1
+      ) {
+        if (nodes[i].nodeId === nodes[i+1].nodeId) {
+          continue; // Don't connect the fork and join nodes of the same fork
+        }
@@ -174 +137 @@
-    } else if (nodes[i].nodeType === 'FORK') {
+    } else if (nodes[i].nodeType === 'FORK' || nodes[i].nodeType === 'CONDITION') {
@@ -200 +163 @@
-    convert(temp, connections);
+    convertNodesToEdges(temp, connections);
@@ -205 +168 @@
-  Purpose: Expand a fork and convert branched nodes to a list of connections
+  Purpose: Expand a fork and convertNodesToEdges branched nodes to a list of connections
@@ -208,0 +172,2 @@
+  * {nodeId}: will be used when constructing edges.
+
@@ -210,2 +175,3 @@
-function expandForks(nodes, expandedNodes) {
-  for(var i=0; i<nodes.length; i++) {
+function expandNodes(nodes, expandedNodes) {
+  var i, j, nodeId;
+  for(i=0; i<nodes.length; i++) {
@@ -212,0 +179 @@
+      nodes[i].label = nodes[i].program.programName;
@@ -215,2 +182,39 @@
-      for (var j=0; j<nodes[i].branches.length; j++) {
-        expandForks(nodes[i].branches[j], expandedNodes);
+      for (j=0; j<nodes[i].branches.length; j++) {
+        expandedNodes.push({
+          label: 'FORK',
+          nodeType: 'FORKNODE',
+          nodeId: 'FORK' + i,
+          program: {
+            programName: 'FORKNODE'
+          }
+        });
+        expandNodes(nodes[i].branches[j], expandedNodes);
+        expandedNodes.push({
+          label: 'JOIN',
+          nodeType: 'JOINNODE',
+          nodeId: 'FORK' + i,
+          program: {
+            programName: 'JOINNODE'
+          }
+        });
+      }
+    } else if (nodes[i].nodeType === 'CONDITION') {
+      nodes[i].branches = [nodes[i].ifBranch, nodes[i].elseBranch];
+      for (j=0; j<nodes[i].branches.length; j++) {
+        expandedNodes.push({
+          label: 'IF',
+          nodeType: 'CONDITIONNODE',
+          nodeId: 'IF' + i,
+          program: {
+            programName: nodes[i].predicateClassName
+          }
+        });
+        expandNodes(nodes[i].branches[j], expandedNodes);
+        expandedNodes.push({
+          label: 'ENDIF',
+          nodeType: 'CONDITIONEND',
+          nodeId: 'IF' + i,
+          program: {
+            programName: 'CONDITIONEND'
+          }
+        });
diff --git a/cdap-ui/app/features/workflows/controllers/tabs/status-ctrl.js b/cdap-ui/app/features/workflows/controllers/tabs/status-ctrl.js
deleted file mode 100644
index d892ee3..0000000
--- a/cdap-ui/app/features/workflows/controllers/tabs/status-ctrl.js
+++ /dev/null
@@ -1,169 +0,0 @@
-angular.module(PKG.name + '.feature.workflows')
-  .controller('WorkflowsStatusController', function($scope, MyDataSource, $state) {
-      var dataSrc = new MyDataSource($scope),
-          basePath = '/apps/' + $state.params.appId + '/workflows/' + $state.params.programId;
-      $scope.status = null;
-      $scope.duration = null;
-      $scope.startTime = null;
-      $scope.data = {};
-      dataSrc.request({
-        _cdapNsPath: basePath
-      })
-        .then(function(res) {
-          var edges = [],
-              nodes = [];
-
-          res.nodes.unshift({
-            name: 'start',
-            type: 'START',
-            nodeType: 'ACTION',
-            nodeId: 'start',
-            program: {
-              programName: ''
-            }
-          });
-
-          res.nodes.push({
-            name: 'end',
-            type: 'END',
-            nodeType: 'ACTION',
-            nodeId: 'end',
-            program: {
-              programName: ''
-            }
-          });
-          convert(angular.copy(res.nodes), edges);
-          expandForks(res.nodes, nodes);
-
-          nodes = nodes.map(function(item) {
-            return angular.extend({
-              name: item.program.programName + item.nodeId,
-              type: item.nodeType
-            }, item);
-          });
-
-          $scope.data = {
-            nodes: nodes,
-            edges: edges,
-            metrics: {}
-          };
-
-          var programs = [];
-          angular.forEach(res.nodes, function(value) {
-            programs.push(value.program);
-          });
-          $scope.actions = programs;
-        });
-    });
-
-  /**
-    * Purpose: Converts a list of nodes to a list of connections
-    * @param  [Array] of nodes
-    * @return [Array] of connections
-    * Usage: Can handle all cases, including:
-        1. Fork in the middle
-        2. Only a fork
-        3. Fork at the beginning
-        4. Fork at the end
-        5. Only an Action node
-
-        var z = [
-          {
-            nodeType: 'ACTION',
-            program: {
-              programName: "asd"
-            }
-          }, {
-            nodeType: 'FORK',
-            branches: [
-              [
-                [
-                  {
-                    nodeType: 'ACTION',
-                    program: {
-                      programName: "1"
-                    }
-                  }
-                ],
-                [
-                  {
-                    nodeType: 'ACTION',
-                    program: {
-                      programName: "2"
-                    }
-                  }
-                ]
-              ],
-              [
-                {
-                  nodeType: 'ACTION',
-                  program: {
-                    programName: "3"
-                  }
-                }
-              ]
-            ]
-          }, {
-            nodeType: 'ACTION',
-            program: {
-              programName: "4"
-            }
-          }
-        ];
-  */
-  function convert(nodes, connections) {
-
-    for (var i=0; i < nodes.length -1; i++) {
-
-      if (nodes[i].nodeType === 'ACTION' && nodes[i+1].nodeType === 'ACTION') {
-        connections.push({
-          sourceName: nodes[i].program.programName + nodes[i].nodeId,
-          targetName: nodes[i+1].program.programName + nodes[i+1].nodeId,
-          sourceType: nodes[i].nodeType
-        });
-      } else if (nodes[i].nodeType === 'FORK') {
-        flatten(nodes[i-1], nodes[i], nodes[i+1], connections);
-      }
-
-    }
-  }
-
-  /**
-    * Purpose: Flatten a source-fork-target combo to a list of connections
-    * @param  [Array] of nodes
-    * @param  [Array] of nodes
-    * @param  [Array] of nodes
-    * @return [Array] of connections
-    */
-  function flatten(source, fork, target, connections) {
-    var branches = fork.branches,
-        temp = [];
-
-    for (var i =0; i<branches.length; i++) {
-      temp = branches[i];
-      if(source) {
-        temp.unshift(source);
-      }
-      if(target) {
-        temp.push(target);
-      }
-      convert(temp, connections);
-    }
-  }
-
-  /**
-    Purpose: Expand a fork and convert branched nodes to a list of connections
-    * @param  [Array] of nodes
-    * @return [Array] of connections
-    */
-  function expandForks(nodes, expandedNodes) {
-    for(var i=0; i<nodes.length; i++) {
-      if (nodes[i].nodeType === 'ACTION') {
-        expandedNodes.push(nodes[i]);
-      } else if (nodes[i].nodeType === 'FORK') {
-        for (var j=0; j<nodes[i].branches.length; j++) {
-          expandForks(nodes[i].branches[j], expandedNodes);
-        }
-      }
-    }
-  }
diff --git a/cdap-ui/templates/etlRealtime/Cube.json b/cdap-ui/templates/etlRealtime/Cube.json
index f8e4f41..33d6a66 100644
--- a/cdap-ui/templates/etlRealtime/Cube.json
+++ b/cdap-ui/templates/etlRealtime/Cube.json
@@ -19 +19 @@
-      "position" : [ "dataset.cube.resolutions", "mapping.config" ],
+      "position" : [ "dataset.cube.resolutions", "mapping.config", "custom.properties" ],
@@ -32,0 +33,4 @@
+         },
+         "custom.properties" : {
+            "widget" : "json-editor",
+            "label" : "Additional Properties"
diff --git a/cdap-ui/templates/etlRealtime/Jms.json b/cdap-ui/templates/etlRealtime/Jms.json
index 9cc5559..f6fe175 100644
--- a/cdap-ui/templates/etlRealtime/Jms.json
+++ b/cdap-ui/templates/etlRealtime/Jms.json
@@ -4 +4 @@
-    "position": [ "group1" ],
+    "position": [ "group1", "group2" ],
@@ -30,0 +31,21 @@
+    },
+
+    "group2": {
+       "display" : "JMS Connection Factory",
+       "position" : [ "ConnectionFactory", "jms.factory.initial", "jms.provider.url" ],
+       "fields" : {
+          "ConnectionFactory" : {
+             "widget": "textbox",
+             "label": "Connection Factory Name"
+          },
+
+          "jms.factory.initial" : {
+             "widget": "textbox",
+             "label": "Factory Class Name"
+          },
+
+          "jms.provider.url" : {
+             "widget" : "textbox",
+             "label" : "Provider URL"
+          }
+       }
@@ -31,0 +53 @@
+

