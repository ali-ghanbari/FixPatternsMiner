diff --git a/common/src/main/java/com/continuuity/common/http/core/NettyHttpService.java b/common/src/main/java/com/continuuity/common/http/core/NettyHttpService.java
index d290e3f..843dabe 100644
--- a/common/src/main/java/com/continuuity/common/http/core/NettyHttpService.java
+++ b/common/src/main/java/com/continuuity/common/http/core/NettyHttpService.java
@@ -47 +47 @@
-  private static final int MAX_INPUT_SIZE = 128 * 1024;
+  private static final int MAX_INPUT_SIZE = 1024 * 1024 * 1024;
diff --git a/web-app/client/core/controllers/flow-flowlet.js b/web-app/client/core/controllers/flow-flowlet.js
index ba6e087..f06a260 100644
--- a/web-app/client/core/controllers/flow-flowlet.js
+++ b/web-app/client/core/controllers/flow-flowlet.js
@@ -161,0 +162 @@
+
@@ -178,0 +180 @@
+		
@@ -188,0 +191 @@
+
@@ -191,0 +195 @@
+		
@@ -205,0 +210 @@
+		
@@ -221,0 +227 @@
+		
diff --git a/web-app/client/core/controllers/procedure-status.js b/web-app/client/core/controllers/procedure-status.js
index 2ac7929..945fb33 100644
--- a/web-app/client/core/controllers/procedure-status.js
+++ b/web-app/client/core/controllers/procedure-status.js
@@ -109,5 +109,2 @@
-				service: this.get('model').serviceName,
-				app: this.get('model').applicationId,
-				method: this.get('requestMethod'),
-				payload: this.get('requestParams')
-			}, function (response) {
+					data: this.get('requestParams')
+				}, function (response) {
@@ -115,11 +112,5 @@
-				if (error) {
-					self.set('responseCode', error.statusCode);
-					self.set('responseBody',
-						JSON.stringify(error.response, undefined, 2) || '[ No Content ]');
-				} else {
-					self.set('responseCode', response.statusCode);
-					var pretty;
-					try {
-						pretty = JSON.stringify(JSON.parse(response.params.response), undefined, 2);
-					} catch (e) {
-						pretty = response.params.response;
+				if (response) {
+					if (typeof(response) === 'object') {
+						self.set('responseBody', JSON.stringify(response, undefined, 2) || '[ No content ]');	
+					} else {
+						self.set('responseBody', response || '[ No content ]');	
@@ -127 +118,3 @@
-					self.set('responseBody', pretty || '[ No Content ]');
+					
+				} else {
+					self.set('responseBody', '[ No response recevied ]');
diff --git a/web-app/client/core/util.js b/web-app/client/core/util.js
index 6ab57b4..d6eebfa 100644
--- a/web-app/client/core/util.js
+++ b/web-app/client/core/util.js
@@ -83,2 +82,0 @@
-				var entered = 0;
-
@@ -88 +85,0 @@
-					entered = new Date().getTime();
@@ -91,9 +88 @@
-				}).bind('dragleave', function (e) {
-
-					var now = new Date().getTime();
-					if (now - entered > 5) {
-						$('#drop-hover').fadeOut();
-					}
-
-				}).bind('dragover', ignoreDrag)
-					.bind('drop', drop);
+				}).bind('dragover', ignoreDrag).bind('drop', drop);
@@ -126 +115,12 @@
-
+				xhr.onreadystatechange = function () {
+					if (xhr.readyState == 4 && xhr.responseText === 'OK') {
+						$('#drop-hover').fadeOut();
+						window.location.reload();
+					} else {
+						C.Modal.show("Deployment Error", xhr.responseText);
+						$('#drop-hover').fadeOut(function () {
+							$('#drop-label').show();
+							$('#drop-loading').hide();
+						});
+					}
+				}
@@ -140,47 +139,0 @@
-				}
-			},
-
-			update: function (response) {
-
-				if (response.error) {
-					C.Modal.show("Deployment Error", response.error);
-					$('#drop-hover').fadeOut(function () {
-						$('#drop-label').show();
-						$('#drop-loading').hide();
-					});
-					this.processing = false;
-
-				} else {
-
-					switch (response.step) {
-						case 0:
-						break;
-						case 1:
-						case 2:
-						case 3:
-							this.set('message', response.message);
-							break;
-						case undefined:
-							if (response.status === 'initialized') {
-								this.resource_identifier = response.resource_identifier;
-							}
-							this.set('message', response.status);
-						break;
-						case 5:
-							this.set('message', 'Drop a JAR to Deploy');
-							this.processing = false;
-							this.__sendFile();
-						break;
-						default:
-							this.set('message', 'Drop a JAR to Deploy');
-							this.processing = false;
-							this.set('warningMessage', response.message);
-
-							$('.modal').modal('hide');
-
-							C.Modal.show("Deployment Error", response.message);
-							$('#drop-hover').fadeOut(function () {
-								$('#drop-label').show();
-								$('#drop-loading').hide();
-							});
-					}
diff --git a/web-app/client/main.js b/web-app/client/main.js
index 9fd025e..01839d9 100644
--- a/web-app/client/main.js
+++ b/web-app/client/main.js
@@ -11 +11 @@
-	var mocks = window.location.search.split('?')[1];
+    var mocks = window.location.search.split('?')[1];
@@ -65 +65,3 @@
-								resource.on(event, C.__handlers[type][event]);
+                                if (C.__handlers[type].hasOwnProperty(event)) {
+                                    resource.on(event, C.__handlers[type][event]);
+                                }
@@ -146,11 +148,13 @@
-			/*
-			 * Converts e.g. 'app_id' into 'App', 'flow_id' into 'Flow'
-			 */
-			var type = key.charAt(0).toUpperCase() + key.slice(1, key.length - 3);
-			/*
-			 * Finds type and injects HTTP
-			 */
-			if (type in C) {
-				return C[type].find(params[key],
-					this.controllerFor('Application').HTTP);
-			}
+      if (params.hasOwnProperty(key)) {
+        /*
+         * Converts e.g. 'app_id' into 'App', 'flow_id' into 'Flow'
+         */
+        var type = key.charAt(0).toUpperCase() + key.slice(1, key.length - 3);
+        /*
+         * Finds type and injects HTTP
+         */
+        if (type in C) {
+          return C[type].find(params[key],
+            this.controllerFor('Application').HTTP);
+        }
+      }
diff --git a/web-app/server/common/api.js b/web-app/server/common/api.js
index f192445..c53c1ee 100644
--- a/web-app/server/common/api.js
+++ b/web-app/server/common/api.js
@@ -49 +48,0 @@
-
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/Makefile b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/Makefile
deleted file mode 100644
index 8945872..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/Makefile
+++ /dev/null
@@ -1,14 +0,0 @@
-SHELL := /bin/bash
-
-test:
-	@./test/run.js
-
-build: npm test
-
-npm:
-	npm install .
-
-clean:
-	rm test/tmp/*
-
-.PHONY: test clean build
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/Readme.md b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/Readme.md
index 1aecf08..08e9eca 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/Readme.md
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/Readme.md
@@ -262,0 +263,7 @@
+### v1.0.14
+
+* Add failing hash tests. (Ben Trask)
+* Enable hash calculation again (Eugene Girshov)
+* Test for immediate data events (Tim Smart)
+* Re-arrange IncomingForm#parse (Tim Smart)
+
@@ -267,0 +275 @@
+* Additional fix for empty requests (Eugene Girshov)
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/TODO b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/TODO
deleted file mode 100644
index e1107f2..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/TODO
+++ /dev/null
@@ -1,3 +0,0 @@
-- Better bufferMaxSize handling approach
-- Add tests for JSON parser pull request and merge it
-- Implement QuerystringParser the same way as MultipartParser
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/lib/file.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/lib/file.js
index 1e7184d..e34c10e 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/lib/file.js
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/lib/file.js
@@ -25,0 +26,2 @@
+  } else {
+    this.hash = null;
@@ -49,0 +52,3 @@
+  if (self.hash) {
+    self.hash.update(buffer);
+  }
@@ -51,5 +55,0 @@
-    if (self.hash) {
-      if (self.hash.hasOwnProperty('update')) {
-        self.hash.update(buffer);
-      }
-    }
@@ -64,0 +65,3 @@
+  if (self.hash) {
+    self.hash = self.hash.digest('hex');
+  }
@@ -66,3 +68,0 @@
-    if(self.hash) {
-      self.hash = self.hash.digest('hex');
-    }
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/lib/incoming_form.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/lib/incoming_form.js
index 291236d..c2eeaf8 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/lib/incoming_form.js
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/lib/incoming_form.js
@@ -76,0 +77,23 @@
+  // Setup callback first, so we don't miss anything from data events emitted
+  // immediately.
+  if (cb) {
+    var fields = {}, files = {};
+    this
+      .on('field', function(name, value) {
+        fields[name] = value;
+      })
+      .on('file', function(name, file) {
+        files[name] = file;
+      })
+      .on('error', function(err) {
+        cb(err, fields, files);
+      })
+      .on('end', function() {
+        cb(null, fields, files);
+      });
+  }
+
+  // Parse headers and setup the parser, ready to start listening for data.
+  this.writeHeaders(req.headers);
+
+  // Start listening for data.
@@ -99,19 +121,0 @@
-
-  if (cb) {
-    var fields = {}, files = {};
-    this
-      .on('field', function(name, value) {
-        fields[name] = value;
-      })
-      .on('file', function(name, file) {
-        files[name] = file;
-      })
-      .on('error', function(err) {
-        cb(err, fields, files);
-      })
-      .on('end', function() {
-        cb(null, fields, files);
-      });
-  }
-
-  this.writeHeaders(req.headers);
@@ -278,0 +283 @@
+  this.bytesReceived = 0;
@@ -280 +284,0 @@
-    this.bytesReceived = 0;
@@ -281,0 +286,5 @@
+  } else if (this.headers['transfer-encoding'] === undefined) {
+    this.bytesExpected = 0;
+  }
+
+  if (this.bytesExpected !== null) {
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/lib/util.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/lib/util.js
deleted file mode 100644
index e9493e9..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/lib/util.js
+++ /dev/null
@@ -1,6 +0,0 @@
-// Backwards compatibility ...
-try {
-  module.exports = require('util');
-} catch (e) {
-  module.exports = require('sys');
-}
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/Makefile b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/Makefile
deleted file mode 100644
index 01f7140..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/Makefile
+++ /dev/null
@@ -1,4 +0,0 @@
-test:
-	@find test/simple/test-*.js | xargs -n 1 -t node
-
-.PHONY: test
\ No newline at end of file
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/Readme.md b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/Readme.md
deleted file mode 100644
index f8f0c66..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/Readme.md
+++ /dev/null
@@ -1,167 +0,0 @@
-# Gently
-
-## Purpose
-
-A node.js module that helps with stubbing and behavior verification. It allows you to test the most remote and nested corners of your code while keeping being fully unobtrusive.
-
-## Features
-
-* Overwrite and stub individual object functions
-* Verify that all expected calls have been made in the expected order
-* Restore stubbed functions to their original behavior
-* Detect object / class names from obj.constructor.name and obj.toString()
-* Hijack any required module function or class constructor
-
-## Installation
-
-Via [npm](http://github.com/isaacs/npm):
-
-    npm install gently@latest
-
-## Example
-
-Make sure your dog is working properly:
-
-    function Dog() {}
-
-    Dog.prototype.seeCat = function() {
-      this.bark('whuf, whuf');
-      this.run();
-    }
-
-    Dog.prototype.bark = function(bark) {
-      require('sys').puts(bark);
-    }
-
-    var gently = new (require('gently'))
-      , assert = require('assert')
-      , dog = new Dog();
-
-    gently.expect(dog, 'bark', function(bark) {
-      assert.equal(bark, 'whuf, whuf');
-    });
-    gently.expect(dog, 'run');
-
-    dog.seeCat();
-
-You can also easily test event emitters with this, for example a simple sequence of 2 events emitted by `fs.WriteStream`:
-
-    var gently = new (require('gently'))
-      , stream = new (require('fs').WriteStream)('my_file.txt');
-
-    gently.expect(stream, 'emit', function(event) {
-      assert.equal(event, 'open');
-    });
-
-    gently.expect(stream, 'emit', function(event) {
-      assert.equal(event, 'drain');
-    });
-
-For a full read world example, check out this test case: [test-incoming-form.js](http://github.com/felixge/node-formidable/blob/master/test/simple/test-incoming-form.js) (in [node-formdiable](http://github.com/felixge/node-formidable)).
-
-## API
-
-### Gently
-
-#### new Gently()
-
-Creates a new gently instance. It listens to the process `'exit'` event to make sure all expectations have been verified.
-
-#### gently.expect(obj, method, [[count], stubFn])
-
-Creates an expectation for an objects method to be called. You can optionally specify the call `count` you are expecting, as well as `stubFn` function that will run instead of the original function.
-
-Returns a reference to the function that is getting overwritten.
-
-#### gently.expect([count], stubFn)
-
-Returns a function that is supposed to be executed `count` times, delegating any calls to the provided `stubFn` function. Naming your stubFn closure will help to properly diagnose errors that are being thrown:
-
-    childProcess.exec('ls', gently.expect(function lsCallback(code) {
-      assert.equal(0, code);
-    }));
-
-#### gently.restore(obj, method)
-
-Restores an object method that has been previously overwritten using `gently.expect()`.
-
-#### gently.hijack(realRequire)
-
-Returns a new require functions that catches a reference to all required modules into `gently.hijacked`.
-
-To use this function, include a line like this in your `'my-module.js'`.
-
-    if (global.GENTLY) require = GENTLY.hijack(require);
-
-    var sys = require('sys');
-    exports.hello = function() {
-      sys.log('world');
-    };
-
-Now you can write a test for the module above:
-
-    var gently = global.GENTLY = new (require('gently'))
-      , myModule = require('./my-module');
-
-    gently.expect(gently.hijacked.sys, 'log', function(str) {
-      assert.equal(str, 'world');
-    });
-
-    myModule.hello();
-
-#### gently.stub(location, [exportsName])
-
-Returns a stub class that will be used instead of the real class from the module at `location` with the given `exportsName`.
-
-This allows to test an OOP version of the previous example, where `'my-module.js'`.
-
-    if (global.GENTLY) require = GENTLY.hijack(require);
-
-    var World = require('./world');
-
-    exports.hello = function() {
-      var world = new World();
-      world.hello();
-    }
-
-And `world.js` looks like this:
-
-    var sys = require('sys');
-
-    function World() {
-
-    }
-    module.exports = World;
-
-    World.prototype.hello = function() {
-      sys.log('world');
-    };
-
-Testing `'my-module.js'` can now easily be accomplished:
-
-    var gently = global.GENTLY = new (require('gently'))
-      , WorldStub = gently.stub('./world')
-      , myModule = require('./my-module')
-      , WORLD;
-
-    gently.expect(WorldStub, 'new', function() {
-      WORLD = this;
-    });
-
-    gently.expect(WORLD, 'hello');
-
-    myModule.hello();
-
-#### gently.hijacked
-
-An object that holds the references to all hijacked modules.
-
-#### gently.verify([msg])
-
-Verifies that all expectations of this gently instance have been satisfied. If not called manually, this method is called when the process `'exit'` event is fired.
-
-If `msg` is given, it will appear in any error that might be thrown.
-
-## License
-
-Gently is licensed under the MIT license.
\ No newline at end of file
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/example/dog.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/example/dog.js
deleted file mode 100644
index 022fae0..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/example/dog.js
+++ /dev/null
@@ -1,22 +0,0 @@
-require('../test/common');
-function Dog() {}
-
-Dog.prototype.seeCat = function() {
-  this.bark('whuf, whuf');
-  this.run();
-}
-
-Dog.prototype.bark = function(bark) {
-  require('sys').puts(bark);
-}
-
-var gently = new (require('gently'))
-  , assert = require('assert')
-  , dog = new Dog();
-
-gently.expect(dog, 'bark', function(bark) {
-  assert.equal(bark, 'whuf, whuf');
-});
-gently.expect(dog, 'run');
-
-dog.seeCat();
\ No newline at end of file
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/example/event_emitter.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/example/event_emitter.js
deleted file mode 100644
index 7def134..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/example/event_emitter.js
+++ /dev/null
@@ -1,11 +0,0 @@
-require('../test/common');
-var gently = new (require('gently'))
-  , stream = new (require('fs').WriteStream)('my_file.txt');
-
-gently.expect(stream, 'emit', function(event) {
-  assert.equal(event, 'open');
-});
-
-gently.expect(stream, 'emit', function(event) {
-  assert.equal(event, 'drain');
-});
\ No newline at end of file
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/index.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/index.js
deleted file mode 100644
index 69122bd..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/index.js
+++ /dev/null
@@ -1 +0,0 @@
-module.exports = require('./lib/gently');
\ No newline at end of file
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/lib/gently/gently.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/lib/gently/gently.js
deleted file mode 100644
index 8af0e1e..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/lib/gently/gently.js
+++ /dev/null
@@ -1,184 +0,0 @@
-var path = require('path');
-
-function Gently() {
-  this.expectations = [];
-  this.hijacked = {};
-
-  var self = this;
-  process.addListener('exit', function() {
-    self.verify('process exit');
-  });
-};
-module.exports = Gently;
-
-Gently.prototype.stub = function(location, exportsName) {
-  function Stub() {
-    return Stub['new'].apply(this, arguments);
-  };
-
-  Stub['new'] = function () {};
-
-  var stubName = 'require('+JSON.stringify(location)+')';
-  if (exportsName) {
-    stubName += '.'+exportsName;
-  }
-
-  Stub.prototype.toString = Stub.toString = function() {
-    return stubName;
-  };
-
-  var exports = this.hijacked[location] || {};
-  if (exportsName) {
-    exports[exportsName] = Stub;
-  } else {
-    exports = Stub;
-  }
-
-  this.hijacked[location] = exports;
-  return Stub;
-};
-
-Gently.prototype.hijack = function(realRequire) {
-  var self = this;
-  return function(location) {
-    return self.hijacked[location] = (self.hijacked[location])
-      ? self.hijacked[location]
-      : realRequire(location);
-  };
-};
-
-Gently.prototype.expect = function(obj, method, count, stubFn) {
-  if (typeof obj != 'function' && typeof obj != 'object' && typeof obj != 'number') {
-    throw new Error
-      ( 'Bad 1st argument for gently.expect(), '
-      + 'object, function, or number expected, got: '+(typeof obj)
-      );
-  } else if (typeof obj == 'function' && (typeof method != 'string')) {
-    // expect(stubFn) interface
-    stubFn = obj;
-    obj = null;
-    method = null;
-    count = 1;
-  } else if (typeof method == 'function') {
-    // expect(count, stubFn) interface
-    count = obj;
-    stubFn = method;
-    obj = null;
-    method = null;
-  } else if (typeof count == 'function') {
-    // expect(obj, method, stubFn) interface
-    stubFn = count;
-    count = 1;
-  } else if (count === undefined) {
-    // expect(obj, method) interface
-    count = 1;
-  }
-
-  var name = this._name(obj, method, stubFn);
-  this.expectations.push({obj: obj, method: method, stubFn: stubFn, name: name, count: count});
-
-  var self = this;
-  function delegate() {
-    return self._stubFn(this, obj, method, name, Array.prototype.slice.call(arguments));
-  }
-
-  if (!obj) {
-    return delegate;
-  }
-
-  var original = (obj[method])
-    ? obj[method]._original || obj[method]
-    : undefined;
-
-  obj[method] = delegate;
-  return obj[method]._original = original;
-};
-
-Gently.prototype.restore = function(obj, method) {
-  if (!obj[method] || !obj[method]._original) {
-    throw new Error(this._name(obj, method)+' is not gently stubbed');
-  }
-  obj[method] = obj[method]._original;
-};
-
-Gently.prototype.verify = function(msg) {
-  if (!this.expectations.length) {
-    return;
-  }
-
-  var validExpectations = [];
-  for (var i = 0, l = this.expectations.length; i < l; i++) {
-    var expectation = this.expectations[i];
-
-    if (expectation.count > 0) {
-      validExpectations.push(expectation);
-    }
-  }
-
-  this.expectations = []; // reset so that no duplicate verification attempts are made
-
-  if (!validExpectations.length) {
-    return;
-  }
-
-  var expectation = validExpectations[0];
-
-  throw new Error
-    ( 'Expected call to '+expectation.name+' did not happen'
-    + ( (msg)
-        ? ' ('+msg+')'
-        : ''
-      )
-    );
-};
-
-Gently.prototype._stubFn = function(self, obj, method, name, args) {
-  var expectation = this.expectations[0], obj, method;
-
-  if (!expectation) {
-    throw new Error('Unexpected call to '+name+', no call was expected');
-  }
-
-  if (expectation.obj !== obj || expectation.method !== method) {
-    throw new Error('Unexpected call to '+name+', expected call to '+ expectation.name);
-  }
-
-  expectation.count -= 1;
-  if (expectation.count === 0) {
-    this.expectations.shift();
-
-    // autorestore original if its not a closure
-    // and no more expectations on that object
-    var has_more_expectations = this.expectations.reduce(function (memo, expectation) {
-      return memo || (expectation.obj === obj && expectation.method === method);
-    }, false);
-    if (obj !== null && method !== null && !has_more_expectations) {
-      if (typeof obj[method]._original !== 'undefined') {
-        obj[method] = obj[method]._original;
-        delete obj[method]._original;
-      } else {
-        delete obj[method];
-      }
-    }
-  }
-
-  if (expectation.stubFn) {
-    return expectation.stubFn.apply(self, args);
-  }
-};
-
-Gently.prototype._name = function(obj, method, stubFn) {
-  if (obj) {
-    var objectName = obj.toString();
-    if (objectName == '[object Object]' && obj.constructor.name) {
-      objectName = '['+obj.constructor.name+']';
-    }
-    return (objectName)+'.'+method+'()';
-  }
-
-  if (stubFn.name) {
-    return stubFn.name+'()';
-  }
-
-  return '>> '+stubFn.toString()+' <<';
-};
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/lib/gently/index.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/lib/gently/index.js
deleted file mode 100644
index 64c1977..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/lib/gently/index.js
+++ /dev/null
@@ -1 +0,0 @@
-module.exports = require('./gently');
\ No newline at end of file
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/package.json b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/package.json
deleted file mode 100644
index 9c1b7a0..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/package.json
+++ /dev/null
@@ -1,14 +0,0 @@
-{
-  "name": "gently",
-  "version": "0.9.2",
-  "directories": {
-    "lib": "./lib/gently"
-  },
-  "main": "./lib/gently/index",
-  "dependencies": {},
-  "devDependencies": {},
-  "engines": {
-    "node": "*"
-  },
-  "optionalDependencies": {}
-}
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/test/common.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/test/common.js
deleted file mode 100644
index 978b5c5..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/test/common.js
+++ /dev/null
@@ -1,8 +0,0 @@
-var path = require('path')
-  , sys = require('sys');
-
-require.paths.unshift(path.dirname(__dirname)+'/lib');
-
-global.puts = sys.puts;
-global.p = function() {sys.error(sys.inspect.apply(null, arguments))};;
-global.assert = require('assert');
\ No newline at end of file
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/test/simple/test-gently.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/test/simple/test-gently.js
deleted file mode 100644
index 4f8fe2d..0000000
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/node-gently/test/simple/test-gently.js
+++ /dev/null
@@ -1,348 +0,0 @@
-require('../common');
-var Gently = require('gently')
-  , gently;
-
-function test(test) {
-  process.removeAllListeners('exit');
-  gently = new Gently();
-  test();
-}
-
-test(function constructor() {
-  assert.deepEqual(gently.expectations, []);
-  assert.deepEqual(gently.hijacked, {});
-  assert.equal(gently.constructor.name, 'Gently');
-});
-
-test(function expectBadArgs() {
-  var BAD_ARG = 'oh no';
-  try {
-    gently.expect(BAD_ARG);
-    assert.ok(false, 'throw needs to happen');
-  } catch (e) {
-    assert.equal(e.message, 'Bad 1st argument for gently.expect(), object, function, or number expected, got: '+(typeof BAD_ARG));
-  }
-});
-
-test(function expectObjMethod() {
-  var OBJ = {}, NAME = 'foobar';
-  OBJ.foo = function(x) {
-    return x;
-  };
-
-  gently._name = function() {
-    return NAME;
-  };
-
-  var original = OBJ.foo
-    , stubFn = function() {};
-
-  (function testAddOne() {
-    assert.strictEqual(gently.expect(OBJ, 'foo', stubFn), original);
-
-    assert.equal(gently.expectations.length, 1);
-    var expectation = gently.expectations[0];
-    assert.strictEqual(expectation.obj, OBJ);
-    assert.strictEqual(expectation.method, 'foo');
-    assert.strictEqual(expectation.stubFn, stubFn);
-    assert.strictEqual(expectation.name, NAME);
-    assert.strictEqual(OBJ.foo._original, original);
-  })();
-
-  (function testAddTwo() {
-    gently.expect(OBJ, 'foo', 2, stubFn);
-    assert.equal(gently.expectations.length, 2);
-    assert.strictEqual(OBJ.foo._original, original);
-  })();
-
-  (function testAddOneWithoutMock() {
-    gently.expect(OBJ, 'foo');
-    assert.equal(gently.expectations.length, 3);
-  })();
-
-  var stubFnCalled = 0, SELF = {};
-  gently._stubFn = function(self, obj, method, name, args) {
-    stubFnCalled++;
-    assert.strictEqual(self, SELF);
-    assert.strictEqual(obj, OBJ);
-    assert.strictEqual(method, 'foo');
-    assert.strictEqual(name, NAME);
-    assert.deepEqual(args, [1, 2]);
-    return 23;
-  };
-  assert.equal(OBJ.foo.apply(SELF, [1, 2]), 23);
-  assert.equal(stubFnCalled, 1);
-});
-
-test(function expectClosure() {
-  var NAME = 'MY CLOSURE';
-  function closureFn() {};
-
-  gently._name = function() {
-    return NAME;
-  };
-
-  var fn = gently.expect(closureFn);
-  assert.equal(gently.expectations.length, 1);
-  var expectation = gently.expectations[0];
-  assert.strictEqual(expectation.obj, null);
-  assert.strictEqual(expectation.method, null);
-  assert.strictEqual(expectation.stubFn, closureFn);
-  assert.strictEqual(expectation.name, NAME);
-
-  var stubFnCalled = 0, SELF = {};
-  gently._stubFn = function(self, obj, method, name, args) {
-    stubFnCalled++;
-    assert.strictEqual(self, SELF);
-    assert.strictEqual(obj, null);
-    assert.strictEqual(method, null);
-    assert.strictEqual(name, NAME);
-    assert.deepEqual(args, [1, 2]);
-    return 23;
-  };
-  assert.equal(fn.apply(SELF, [1, 2]), 23);
-  assert.equal(stubFnCalled, 1);
-});
-
-test(function expectClosureCount() {
-  var stubFnCalled = 0;
-  function closureFn() {stubFnCalled++};
-
-  var fn = gently.expect(2, closureFn);
-  assert.equal(gently.expectations.length, 1);
-  fn();
-  assert.equal(gently.expectations.length, 1);
-  fn();
-  assert.equal(stubFnCalled, 2);
-});
-
-test(function restore() {
-  var OBJ = {}, NAME = '[my object].myFn()';
-  OBJ.foo = function(x) {
-    return x;
-  };
-
-  gently._name = function() {
-    return NAME;
-  };
-
-  var original = OBJ.foo;
-  gently.expect(OBJ, 'foo');
-  gently.restore(OBJ, 'foo');
-  assert.strictEqual(OBJ.foo, original);
-
-  (function testError() {
-    try {
-      gently.restore(OBJ, 'foo');
-      assert.ok(false, 'throw needs to happen');
-    } catch (e) {
-      assert.equal(e.message, NAME+' is not gently stubbed');
-    }
-  })();
-});
-
-test(function _stubFn() {
-  var OBJ1 = {toString: function() {return '[OBJ 1]'}}
-    , OBJ2 = {toString: function() {return '[OBJ 2]'}, foo: function () {return 'bar';}}
-    , SELF = {};
-
-  gently.expect(OBJ1, 'foo', function(x) {
-    assert.strictEqual(this, SELF);
-    return x * 2;
-  });
-
-  assert.equal(gently._stubFn(SELF, OBJ1, 'foo', 'dummy_name', [5]), 10);
-
-  (function testAutorestore() {
-    assert.equal(OBJ2.foo(), 'bar');
-
-    gently.expect(OBJ2, 'foo', function() {
-      return 'stubbed foo';
-    });
-
-    gently.expect(OBJ2, 'foo', function() {
-      return "didn't restore yet";
-    });
-
-    assert.equal(gently._stubFn(SELF, OBJ2, 'foo', 'dummy_name', []), 'stubbed foo');
-    assert.equal(gently._stubFn(SELF, OBJ2, 'foo', 'dummy_name', []), "didn't restore yet");
-    assert.equal(OBJ2.foo(), 'bar');
-    assert.deepEqual(gently.expectations, []);
-  })();
-
-  (function testNoMoreCallExpected() {
-    try {
-      gently._stubFn(SELF, OBJ1, 'foo', 'dummy_name', [5]);
-      assert.ok(false, 'throw needs to happen');
-    } catch (e) {
-      assert.equal(e.message, 'Unexpected call to dummy_name, no call was expected');
-    }
-  })();
-
-  (function testDifferentCallExpected() {
-    gently.expect(OBJ2, 'bar');
-    try {
-      gently._stubFn(SELF, OBJ1, 'foo', 'dummy_name', [5]);
-      assert.ok(false, 'throw needs to happen');
-    } catch (e) {
-      assert.equal(e.message, 'Unexpected call to dummy_name, expected call to '+gently._name(OBJ2, 'bar'));
-    }
-
-    assert.equal(gently.expectations.length, 1);
-  })();
-
-  (function testNoMockCallback() {
-    OBJ2.bar();
-    assert.equal(gently.expectations.length, 0);
-  })();
-});
-
-test(function stub() {
-  var LOCATION = './my_class';
-
-  (function testRegular() {
-    var Stub = gently.stub(LOCATION);
-    assert.ok(Stub instanceof Function);
-    assert.strictEqual(gently.hijacked[LOCATION], Stub);
-    assert.ok(Stub['new'] instanceof Function);
-    assert.equal(Stub.toString(), 'require('+JSON.stringify(LOCATION)+')');
-
-    (function testConstructor() {
-      var newCalled = 0
-        , STUB
-        , ARGS = ['foo', 'bar'];
-
-      Stub['new'] = function(a, b) {
-        assert.equal(a, ARGS[0]);
-        assert.equal(b, ARGS[1]);
-        newCalled++;
-        STUB = this;
-      };
-
-      var stub = new Stub(ARGS[0], ARGS[1]);
-      assert.strictEqual(stub, STUB);
-      assert.equal(newCalled, 1);
-      assert.equal(stub.toString(), 'require('+JSON.stringify(LOCATION)+')');
-    })();
-
-    (function testUseReturnValueAsInstance() {
-      var R = {};
-
-      Stub['new'] = function() {
-        return R;
-      };
-
-      var stub = new Stub();
-      assert.strictEqual(stub, R);
-
-    })();
-  })();
-
-  var EXPORTS_NAME = 'MyClass';
-  test(function testExportsName() {
-    var Stub = gently.stub(LOCATION, EXPORTS_NAME);
-    assert.strictEqual(gently.hijacked[LOCATION][EXPORTS_NAME], Stub);
-    assert.equal(Stub.toString(), 'require('+JSON.stringify(LOCATION)+').'+EXPORTS_NAME);
-
-    (function testConstructor() {
-      var stub = new Stub();
-      assert.equal(Stub.toString(), 'require('+JSON.stringify(LOCATION)+').'+EXPORTS_NAME);
-    })();
-  });
-});
-
-test(function hijack() {
-  var LOCATION = './foo'
-    , REQUIRE_CALLS = 0
-    , EXPORTS = {}
-    , REQUIRE = function() {
-        REQUIRE_CALLS++;
-        return EXPORTS;
-      };
-
-  var hijackedRequire = gently.hijack(REQUIRE);
-  hijackedRequire(LOCATION);
-  assert.strictEqual(gently.hijacked[LOCATION], EXPORTS);
-
-  assert.equal(REQUIRE_CALLS, 1);
-
-  // make sure we are caching the hijacked module
-  hijackedRequire(LOCATION);
-  assert.equal(REQUIRE_CALLS, 1);
-});
-
-test(function verify() {
-  var OBJ = {toString: function() {return '[OBJ]'}};
-  gently.verify();
-
-  gently.expect(OBJ, 'foo');
-  try {
-    gently.verify();
-    assert.ok(false, 'throw needs to happen');
-  } catch (e) {
-    assert.equal(e.message, 'Expected call to [OBJ].foo() did not happen');
-  }
-
-  try {
-    gently.verify('foo');
-    assert.ok(false, 'throw needs to happen');
-  } catch (e) {
-    assert.equal(e.message, 'Expected call to [OBJ].foo() did not happen (foo)');
-  }
-});
-
-test(function processExit() {
-  var verifyCalled = 0;
-  gently.verify = function(msg) {
-    verifyCalled++;
-    assert.equal(msg, 'process exit');
-  };
-
-  process.emit('exit');
-  assert.equal(verifyCalled, 1);
-});
-
-test(function _name() {
-  (function testNamedClass() {
-    function Foo() {};
-    var foo = new Foo();
-    assert.equal(gently._name(foo, 'bar'), '[Foo].bar()');
-  })();
-
-  (function testToStringPreference() {
-    function Foo() {};
-    Foo.prototype.toString = function() {
-      return '[Superman 123]';
-    };
-    var foo = new Foo();
-    assert.equal(gently._name(foo, 'bar'), '[Superman 123].bar()');
-  })();
-
-  (function testUnamedClass() {
-    var Foo = function() {};
-    var foo = new Foo();
-    assert.equal(gently._name(foo, 'bar'), foo.toString()+'.bar()');
-  })();
-
-  (function testNamedClosure() {
-    function myClosure() {};
-    assert.equal(gently._name(null, null, myClosure), myClosure.name+'()');
-  })();
-
-  (function testUnamedClosure() {
-    var myClosure = function() {2+2 == 5};
-    assert.equal(gently._name(null, null, myClosure), '>> '+myClosure.toString()+' <<');
-  })();
-});
-
-test(function verifyExpectNone() {
-  var OBJ = {toString: function() {return '[OBJ]'}};
-  gently.verify();
-
-  gently.expect(OBJ, 'foo', 0);
-  try {
-    gently.verify();
-  } catch (e) {
-    assert.fail('Exception should not have been thrown');
-  }
-});
\ No newline at end of file
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/package.json b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/package.json
index cd0138c..f0a3185 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/package.json
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/package.json
@@ -5 +5 @@
-  "version": "1.0.13",
+  "version": "1.0.14",
@@ -23 +23 @@
-    "node": "<0.9.0"
+    "node": ">=0.8.0"
@@ -33 +33 @@
-  "readme": "# Formidable\n\n[![Build Status](https://secure.travis-ci.org/felixge/node-formidable.png?branch=master)](http://travis-ci.org/felixge/node-formidable)\n\n## Purpose\n\nA node.js module for parsing form data, especially file uploads.\n\n## Current status\n\nThis module was developed for [Transloadit](http://transloadit.com/), a service focused on uploading\nand encoding images and videos. It has been battle-tested against hundreds of GB of file uploads from\na large variety of clients and is considered production-ready.\n\n## Features\n\n* Fast (~500mb/sec), non-buffering multipart parser\n* Automatically writing file uploads to disk\n* Low memory footprint\n* Graceful error handling\n* Very high test coverage\n\n## Installation\n\nVia [npm](http://github.com/isaacs/npm):\n```\nnpm install formidable@latest\n```\nManually:\n```\ngit clone git://github.com/felixge/node-formidable.git formidable\nvim my.js\n# var formidable = require('./formidable');\n```\n\nNote: Formidable requires [gently](http://github.com/felixge/node-gently) to run the unit tests, but you won't need it for just using the library.\n\n## Example\n\nParse an incoming file upload.\n```javascript\nvar formidable = require('formidable'),\n    http = require('http'),\n    util = require('util');\n\nhttp.createServer(function(req, res) {\n  if (req.url == '/upload' && req.method.toLowerCase() == 'post') {\n    // parse a file upload\n    var form = new formidable.IncomingForm();\n\n    form.parse(req, function(err, fields, files) {\n      res.writeHead(200, {'content-type': 'text/plain'});\n      res.write('received upload:\\n\\n');\n      res.end(util.inspect({fields: fields, files: files}));\n    });\n\n    return;\n  }\n\n  // show a file upload form\n  res.writeHead(200, {'content-type': 'text/html'});\n  res.end(\n    '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n    '<input type=\"text\" name=\"title\"><br>'+\n    '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n    '<input type=\"submit\" value=\"Upload\">'+\n    '</form>'\n  );\n}).listen(8080);\n```\n## API\n\n### Formidable.IncomingForm\n```javascript\nvar form = new formidable.IncomingForm()\n```\nCreates a new incoming form.\n\n```javascript\nform.encoding = 'utf-8';\n```\nSets encoding for incoming form fields.\n\n```javascript\nform.uploadDir = process.env.TMP || process.env.TMPDIR || process.env.TEMP || '/tmp' || process.cwd();\n```\nThe directory for placing file uploads in. You can move them later on using\n`fs.rename()`. The default directory is picked at module load time depending on\nthe first existing directory from those listed above.\n\n```javascript\nform.keepExtensions = false;\n```\nIf you want the files written to `form.uploadDir` to include the extensions of the original files, set this property to `true`.\n\n```javascript\nform.type\n```\nEither 'multipart' or 'urlencoded' depending on the incoming request.\n\n```javascript\nform.maxFieldsSize = 2 * 1024 * 1024;\n```\nLimits the amount of memory a field (not file) can allocate in bytes.\nIf this value is exceeded, an `'error'` event is emitted. The default\nsize is 2MB.\n\n```javascript\nform.maxFields = 0;\n```\nLimits the number of fields that the querystring parser will decode. Defaults\nto 0 (unlimited).\n\n```javascript\nform.hash = false;\n```\nIf you want checksums calculated for incoming files, set this to either `'sha1'` or `'md5'`.\n\n```javascript\nform.bytesReceived\n```\nThe amount of bytes received for this form so far.\n\n```javascript\nform.bytesExpected\n```\nThe expected number of bytes in this form.\n\n```javascript\nform.parse(request, [cb]);\n```\nParses an incoming node.js `request` containing form data. If `cb` is provided, all fields an files are collected and passed to the callback:\n\n\n```javascript\nform.parse(req, function(err, fields, files) {\n  // ...\n});\n\nform.onPart(part);\n```\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events  processing which would occur otherwise, making you fully responsible for handling the processing.\n\n```javascript\nform.onPart = function(part) {\n  part.addListener('data', function() {\n    // ...\n  });\n}\n```\nIf you want to use formidable to only handle certain parts for you, you can do so:\n```javascript\nform.onPart = function(part) {\n  if (!part.filename) {\n    // let formidable handle all non-file parts\n    form.handlePart(part);\n  }\n}\n```\nCheck the code in this method for further inspiration.\n\n\n### Formidable.File\n```javascript\nfile.size = 0\n```\nThe size of the uploaded file in bytes. If the file is still being uploaded (see `'fileBegin'` event), this property says how many bytes of the file have been written to disk yet.\n```javascript\nfile.path = null\n```\nThe path this file is being written to. You can modify this in the `'fileBegin'` event in\ncase you are unhappy with the way formidable generates a temporary path for your files.\n```javascript\nfile.name = null\n```\nThe name this file had according to the uploading client.\n```javascript\nfile.type = null\n```\nThe mime type of this file, according to the uploading client.\n```javascript\nfile.lastModifiedDate = null\n```\nA date object (or `null`) containing the time this file was last written to. Mostly\nhere for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n```javascript\nfile.hash = null\n```\nIf hash calculation was set, you can read the hex digest out of this var.\n\n#### Formidable.File#toJSON()\n\n  This method returns a JSON-representation of the file, allowing you to\n  `JSON.stringify()` the file which is useful for logging and responding\n  to requests.\n\n### Events\n\n\n#### 'progress'\n```javascript\nform.on('progress', function(bytesReceived, bytesExpected) {\n});\n```\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\n\n\n\n#### 'field'\n```javascript\nform.on('field', function(name, value) {\n});\n```\n\n#### 'fileBegin'\n\nEmitted whenever a field / value pair has been received.\n```javascript\nform.on('fileBegin', function(name, file) {\n});\n```\n\n#### 'file'\n\nEmitted whenever a new file is detected in the upload stream. Use this even if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.\n\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\n```javascript\nform.on('file', function(name, file) {\n});\n```\n\n#### 'error'\n\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.\n```javascript\nform.on('error', function(err) {\n});\n```\n\n#### 'aborted'\n\n\nEmitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. In the future there will be a separate 'timeout' event (needs a change in the node core).\n```javascript\nform.on('aborted', function() {\n});\n```\n\n##### 'end'\n```javascript\nform.on('end', function() {\n});\n```\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\n\n\n\n## Changelog\n\n### v1.0.13\n\n* Only update hash if update method exists (Sven Lito)\n* According to travis v0.10 needs to go quoted (Sven Lito)\n* Bumping build node versions (Sven Lito)\n* Change the default to 1000, to match the new Node behaviour. (OrangeDog)\n* Add ability to control maxKeys in the querystring parser. (OrangeDog)\n* Adjust test case to work with node 0.9.x (Eugene Girshov)\n* Update package.json (Sven Lito)\n* Path adjustment according to eb4468b (Markus Ast)\n\n### v1.0.12\n\n* Emit error on aborted connections (Eugene Girshov)\n* Add support for empty requests (Eugene Girshov)\n* Fix name/filename handling in Content-Disposition (jesperp)\n* Tolerate malformed closing boundary in multipart (Eugene Girshov)\n* Ignore preamble in multipart messages (Eugene Girshov)\n* Add support for application/json (Mike Frey, Carlos Rodriguez)\n* Add support for Base64 encoding (Elmer Bulthuis)\n* Add File#toJSON (TJ Holowaychuk)\n* Remove support for Node.js 0.4 & 0.6 (Andrew Kelley)\n* Documentation improvements (Sven Lito, Andre Azevedo)\n* Add support for application/octet-stream (Ion Lupascu, Chris Scribner)\n* Use os.tmpDir() to get tmp directory (Andrew Kelley)\n* Improve package.json (Andrew Kelley, Sven Lito)\n* Fix benchmark script (Andrew Kelley)\n* Fix scope issue in incoming_forms (Sven Lito)\n* Fix file handle leak on error (OrangeDog)\n\n### v1.0.11\n\n* Calculate checksums for incoming files (sreuter)\n* Add definition parameters to \"IncomingForm\" as an argument (Math-)\n\n### v1.0.10\n\n* Make parts to be proper Streams (Matt Robenolt)\n\n### v1.0.9\n\n* Emit progress when content length header parsed (Tim Koschützki)\n* Fix Readme syntax due to GitHub changes (goob)\n* Replace references to old 'sys' module in Readme with 'util' (Peter Sugihara)\n\n### v1.0.8\n\n* Strip potentially unsafe characters when using `keepExtensions: true`.\n* Switch to utest / urun for testing\n* Add travis build\n\n### v1.0.7\n\n* Remove file from package that was causing problems when installing on windows. (#102)\n* Fix typos in Readme (Jason Davies).\n\n### v1.0.6\n\n* Do not default to the default to the field name for file uploads where\n  filename=\"\".\n\n### v1.0.5\n\n* Support filename=\"\" in multipart parts\n* Explain unexpected end() errors in parser better\n\n**Note:** Starting with this version, formidable emits 'file' events for empty\nfile input fields. Previously those were incorrectly emitted as regular file\ninput fields with value = \"\".\n\n### v1.0.4\n\n* Detect a good default tmp directory regardless of platform. (#88)\n\n### v1.0.3\n\n* Fix problems with utf8 characters (#84) / semicolons in filenames (#58)\n* Small performance improvements\n* New test suite and fixture system\n\n### v1.0.2\n\n* Exclude node\\_modules folder from git\n* Implement new `'aborted'` event\n* Fix files in example folder to work with recent node versions\n* Make gently a devDependency\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.1...v1.0.2)\n\n### v1.0.1\n\n* Fix package.json to refer to proper main directory. (#68, Dean Landolt)\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.0...v1.0.1)\n\n### v1.0.0\n\n* Add support for multipart boundaries that are quoted strings. (Jeff Craig)\n\nThis marks the beginning of development on version 2.0 which will include\nseveral architectural improvements.\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.11...v1.0.0)\n\n### v0.9.11\n\n* Emit `'progress'` event when receiving data, regardless of parsing it. (Tim Koschützki)\n* Use [W3C FileAPI Draft](http://dev.w3.org/2006/webapi/FileAPI/) properties for File class\n\n**Important:** The old property names of the File class will be removed in a\nfuture release.\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.10...v0.9.11)\n\n### Older releases\n\nThese releases were done before starting to maintain the above Changelog:\n\n* [v0.9.10](https://github.com/felixge/node-formidable/compare/v0.9.9...v0.9.10)\n* [v0.9.9](https://github.com/felixge/node-formidable/compare/v0.9.8...v0.9.9)\n* [v0.9.8](https://github.com/felixge/node-formidable/compare/v0.9.7...v0.9.8)\n* [v0.9.7](https://github.com/felixge/node-formidable/compare/v0.9.6...v0.9.7)\n* [v0.9.6](https://github.com/felixge/node-formidable/compare/v0.9.5...v0.9.6)\n* [v0.9.5](https://github.com/felixge/node-formidable/compare/v0.9.4...v0.9.5)\n* [v0.9.4](https://github.com/felixge/node-formidable/compare/v0.9.3...v0.9.4)\n* [v0.9.3](https://github.com/felixge/node-formidable/compare/v0.9.2...v0.9.3)\n* [v0.9.2](https://github.com/felixge/node-formidable/compare/v0.9.1...v0.9.2)\n* [v0.9.1](https://github.com/felixge/node-formidable/compare/v0.9.0...v0.9.1)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.1.0](https://github.com/felixge/node-formidable/commits/v0.1.0)\n\n## License\n\nFormidable is licensed under the MIT license.\n\n## Ports\n\n* [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\n\n## Credits\n\n* [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired multipart_parser.js\n",
+  "readme": "# Formidable\n\n[![Build Status](https://secure.travis-ci.org/felixge/node-formidable.png?branch=master)](http://travis-ci.org/felixge/node-formidable)\n\n## Purpose\n\nA node.js module for parsing form data, especially file uploads.\n\n## Current status\n\nThis module was developed for [Transloadit](http://transloadit.com/), a service focused on uploading\nand encoding images and videos. It has been battle-tested against hundreds of GB of file uploads from\na large variety of clients and is considered production-ready.\n\n## Features\n\n* Fast (~500mb/sec), non-buffering multipart parser\n* Automatically writing file uploads to disk\n* Low memory footprint\n* Graceful error handling\n* Very high test coverage\n\n## Installation\n\nVia [npm](http://github.com/isaacs/npm):\n```\nnpm install formidable@latest\n```\nManually:\n```\ngit clone git://github.com/felixge/node-formidable.git formidable\nvim my.js\n# var formidable = require('./formidable');\n```\n\nNote: Formidable requires [gently](http://github.com/felixge/node-gently) to run the unit tests, but you won't need it for just using the library.\n\n## Example\n\nParse an incoming file upload.\n```javascript\nvar formidable = require('formidable'),\n    http = require('http'),\n    util = require('util');\n\nhttp.createServer(function(req, res) {\n  if (req.url == '/upload' && req.method.toLowerCase() == 'post') {\n    // parse a file upload\n    var form = new formidable.IncomingForm();\n\n    form.parse(req, function(err, fields, files) {\n      res.writeHead(200, {'content-type': 'text/plain'});\n      res.write('received upload:\\n\\n');\n      res.end(util.inspect({fields: fields, files: files}));\n    });\n\n    return;\n  }\n\n  // show a file upload form\n  res.writeHead(200, {'content-type': 'text/html'});\n  res.end(\n    '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n    '<input type=\"text\" name=\"title\"><br>'+\n    '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n    '<input type=\"submit\" value=\"Upload\">'+\n    '</form>'\n  );\n}).listen(8080);\n```\n## API\n\n### Formidable.IncomingForm\n```javascript\nvar form = new formidable.IncomingForm()\n```\nCreates a new incoming form.\n\n```javascript\nform.encoding = 'utf-8';\n```\nSets encoding for incoming form fields.\n\n```javascript\nform.uploadDir = process.env.TMP || process.env.TMPDIR || process.env.TEMP || '/tmp' || process.cwd();\n```\nThe directory for placing file uploads in. You can move them later on using\n`fs.rename()`. The default directory is picked at module load time depending on\nthe first existing directory from those listed above.\n\n```javascript\nform.keepExtensions = false;\n```\nIf you want the files written to `form.uploadDir` to include the extensions of the original files, set this property to `true`.\n\n```javascript\nform.type\n```\nEither 'multipart' or 'urlencoded' depending on the incoming request.\n\n```javascript\nform.maxFieldsSize = 2 * 1024 * 1024;\n```\nLimits the amount of memory a field (not file) can allocate in bytes.\nIf this value is exceeded, an `'error'` event is emitted. The default\nsize is 2MB.\n\n```javascript\nform.maxFields = 0;\n```\nLimits the number of fields that the querystring parser will decode. Defaults\nto 0 (unlimited).\n\n```javascript\nform.hash = false;\n```\nIf you want checksums calculated for incoming files, set this to either `'sha1'` or `'md5'`.\n\n```javascript\nform.bytesReceived\n```\nThe amount of bytes received for this form so far.\n\n```javascript\nform.bytesExpected\n```\nThe expected number of bytes in this form.\n\n```javascript\nform.parse(request, [cb]);\n```\nParses an incoming node.js `request` containing form data. If `cb` is provided, all fields an files are collected and passed to the callback:\n\n\n```javascript\nform.parse(req, function(err, fields, files) {\n  // ...\n});\n\nform.onPart(part);\n```\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events  processing which would occur otherwise, making you fully responsible for handling the processing.\n\n```javascript\nform.onPart = function(part) {\n  part.addListener('data', function() {\n    // ...\n  });\n}\n```\nIf you want to use formidable to only handle certain parts for you, you can do so:\n```javascript\nform.onPart = function(part) {\n  if (!part.filename) {\n    // let formidable handle all non-file parts\n    form.handlePart(part);\n  }\n}\n```\nCheck the code in this method for further inspiration.\n\n\n### Formidable.File\n```javascript\nfile.size = 0\n```\nThe size of the uploaded file in bytes. If the file is still being uploaded (see `'fileBegin'` event), this property says how many bytes of the file have been written to disk yet.\n```javascript\nfile.path = null\n```\nThe path this file is being written to. You can modify this in the `'fileBegin'` event in\ncase you are unhappy with the way formidable generates a temporary path for your files.\n```javascript\nfile.name = null\n```\nThe name this file had according to the uploading client.\n```javascript\nfile.type = null\n```\nThe mime type of this file, according to the uploading client.\n```javascript\nfile.lastModifiedDate = null\n```\nA date object (or `null`) containing the time this file was last written to. Mostly\nhere for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n```javascript\nfile.hash = null\n```\nIf hash calculation was set, you can read the hex digest out of this var.\n\n#### Formidable.File#toJSON()\n\n  This method returns a JSON-representation of the file, allowing you to\n  `JSON.stringify()` the file which is useful for logging and responding\n  to requests.\n\n### Events\n\n\n#### 'progress'\n```javascript\nform.on('progress', function(bytesReceived, bytesExpected) {\n});\n```\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\n\n\n\n#### 'field'\n```javascript\nform.on('field', function(name, value) {\n});\n```\n\n#### 'fileBegin'\n\nEmitted whenever a field / value pair has been received.\n```javascript\nform.on('fileBegin', function(name, file) {\n});\n```\n\n#### 'file'\n\nEmitted whenever a new file is detected in the upload stream. Use this even if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.\n\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\n```javascript\nform.on('file', function(name, file) {\n});\n```\n\n#### 'error'\n\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.\n```javascript\nform.on('error', function(err) {\n});\n```\n\n#### 'aborted'\n\n\nEmitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. In the future there will be a separate 'timeout' event (needs a change in the node core).\n```javascript\nform.on('aborted', function() {\n});\n```\n\n##### 'end'\n```javascript\nform.on('end', function() {\n});\n```\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\n\n\n\n## Changelog\n\n### v1.0.14\n\n* Add failing hash tests. (Ben Trask)\n* Enable hash calculation again (Eugene Girshov)\n* Test for immediate data events (Tim Smart)\n* Re-arrange IncomingForm#parse (Tim Smart)\n\n### v1.0.13\n\n* Only update hash if update method exists (Sven Lito)\n* According to travis v0.10 needs to go quoted (Sven Lito)\n* Bumping build node versions (Sven Lito)\n* Additional fix for empty requests (Eugene Girshov)\n* Change the default to 1000, to match the new Node behaviour. (OrangeDog)\n* Add ability to control maxKeys in the querystring parser. (OrangeDog)\n* Adjust test case to work with node 0.9.x (Eugene Girshov)\n* Update package.json (Sven Lito)\n* Path adjustment according to eb4468b (Markus Ast)\n\n### v1.0.12\n\n* Emit error on aborted connections (Eugene Girshov)\n* Add support for empty requests (Eugene Girshov)\n* Fix name/filename handling in Content-Disposition (jesperp)\n* Tolerate malformed closing boundary in multipart (Eugene Girshov)\n* Ignore preamble in multipart messages (Eugene Girshov)\n* Add support for application/json (Mike Frey, Carlos Rodriguez)\n* Add support for Base64 encoding (Elmer Bulthuis)\n* Add File#toJSON (TJ Holowaychuk)\n* Remove support for Node.js 0.4 & 0.6 (Andrew Kelley)\n* Documentation improvements (Sven Lito, Andre Azevedo)\n* Add support for application/octet-stream (Ion Lupascu, Chris Scribner)\n* Use os.tmpDir() to get tmp directory (Andrew Kelley)\n* Improve package.json (Andrew Kelley, Sven Lito)\n* Fix benchmark script (Andrew Kelley)\n* Fix scope issue in incoming_forms (Sven Lito)\n* Fix file handle leak on error (OrangeDog)\n\n### v1.0.11\n\n* Calculate checksums for incoming files (sreuter)\n* Add definition parameters to \"IncomingForm\" as an argument (Math-)\n\n### v1.0.10\n\n* Make parts to be proper Streams (Matt Robenolt)\n\n### v1.0.9\n\n* Emit progress when content length header parsed (Tim Koschützki)\n* Fix Readme syntax due to GitHub changes (goob)\n* Replace references to old 'sys' module in Readme with 'util' (Peter Sugihara)\n\n### v1.0.8\n\n* Strip potentially unsafe characters when using `keepExtensions: true`.\n* Switch to utest / urun for testing\n* Add travis build\n\n### v1.0.7\n\n* Remove file from package that was causing problems when installing on windows. (#102)\n* Fix typos in Readme (Jason Davies).\n\n### v1.0.6\n\n* Do not default to the default to the field name for file uploads where\n  filename=\"\".\n\n### v1.0.5\n\n* Support filename=\"\" in multipart parts\n* Explain unexpected end() errors in parser better\n\n**Note:** Starting with this version, formidable emits 'file' events for empty\nfile input fields. Previously those were incorrectly emitted as regular file\ninput fields with value = \"\".\n\n### v1.0.4\n\n* Detect a good default tmp directory regardless of platform. (#88)\n\n### v1.0.3\n\n* Fix problems with utf8 characters (#84) / semicolons in filenames (#58)\n* Small performance improvements\n* New test suite and fixture system\n\n### v1.0.2\n\n* Exclude node\\_modules folder from git\n* Implement new `'aborted'` event\n* Fix files in example folder to work with recent node versions\n* Make gently a devDependency\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.1...v1.0.2)\n\n### v1.0.1\n\n* Fix package.json to refer to proper main directory. (#68, Dean Landolt)\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.0...v1.0.1)\n\n### v1.0.0\n\n* Add support for multipart boundaries that are quoted strings. (Jeff Craig)\n\nThis marks the beginning of development on version 2.0 which will include\nseveral architectural improvements.\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.11...v1.0.0)\n\n### v0.9.11\n\n* Emit `'progress'` event when receiving data, regardless of parsing it. (Tim Koschützki)\n* Use [W3C FileAPI Draft](http://dev.w3.org/2006/webapi/FileAPI/) properties for File class\n\n**Important:** The old property names of the File class will be removed in a\nfuture release.\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.10...v0.9.11)\n\n### Older releases\n\nThese releases were done before starting to maintain the above Changelog:\n\n* [v0.9.10](https://github.com/felixge/node-formidable/compare/v0.9.9...v0.9.10)\n* [v0.9.9](https://github.com/felixge/node-formidable/compare/v0.9.8...v0.9.9)\n* [v0.9.8](https://github.com/felixge/node-formidable/compare/v0.9.7...v0.9.8)\n* [v0.9.7](https://github.com/felixge/node-formidable/compare/v0.9.6...v0.9.7)\n* [v0.9.6](https://github.com/felixge/node-formidable/compare/v0.9.5...v0.9.6)\n* [v0.9.5](https://github.com/felixge/node-formidable/compare/v0.9.4...v0.9.5)\n* [v0.9.4](https://github.com/felixge/node-formidable/compare/v0.9.3...v0.9.4)\n* [v0.9.3](https://github.com/felixge/node-formidable/compare/v0.9.2...v0.9.3)\n* [v0.9.2](https://github.com/felixge/node-formidable/compare/v0.9.1...v0.9.2)\n* [v0.9.1](https://github.com/felixge/node-formidable/compare/v0.9.0...v0.9.1)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.1.0](https://github.com/felixge/node-formidable/commits/v0.1.0)\n\n## License\n\nFormidable is licensed under the MIT license.\n\n## Ports\n\n* [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\n\n## Credits\n\n* [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired multipart_parser.js\n",
@@ -35 +35 @@
-  "_id": "formidable@1.0.13",
+  "_id": "formidable@1.0.14",
@@ -37 +37 @@
-  "_from": "formidable@1.0.13"
+  "_from": "formidable@latest"
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/encoding.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/encoding.js
index 83dfb15..fc22026 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/encoding.js
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/encoding.js
@@ -2 +2,2 @@
-  {type: 'file', name: 'image', filename: 'menu_separator.png', fixture: 'menu_separator.png'}
+  {type: 'file', name: 'image', filename: 'menu_separator.png', fixture: 'menu_separator.png',
+  sha1: 'c845ca3ea794be298f2a1b79769b71939eaf4e54'}
@@ -6 +7,2 @@
-  {type: 'file', name: 'sticker', filename: 'beta-sticker-1.png', fixture: 'beta-sticker-1.png'}
+  {type: 'file', name: 'sticker', filename: 'beta-sticker-1.png', fixture: 'beta-sticker-1.png',
+  sha1: '6abbcffd12b4ada5a6a084fe9e4584f846331bc4'}
@@ -10 +12,2 @@
-  {type: 'file', name: 'file', filename: 'blank.gif', fixture: 'blank.gif'}
+  {type: 'file', name: 'file', filename: 'blank.gif', fixture: 'blank.gif',
+  sha1: 'a1fdee122b95748d81cee426d717c05b5174fe96'}
@@ -14 +17,2 @@
-  {type: 'file', name: 'file', filename: 'binaryfile.tar.gz', fixture: 'binaryfile.tar.gz'}
+  {type: 'file', name: 'file', filename: 'binaryfile.tar.gz', fixture: 'binaryfile.tar.gz',
+  sha1: 'cfabe13b348e5e69287d677860880c52a69d2155'}
@@ -18 +22,2 @@
-  {type: 'file', name: 'file', filename: 'plain.txt', fixture: 'plain.txt'}
+  {type: 'file', name: 'file', filename: 'plain.txt', fixture: 'plain.txt',
+  sha1: 'b31d07bac24ac32734de88b3687dddb10e976872'}
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/misc.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/misc.js
index 3e27472..4489176 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/misc.js
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/misc.js
@@ -4,0 +5 @@
+  'minimal.http': [],
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/no-filename.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/no-filename.js
index c36e792..f03b4f0 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/no-filename.js
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/no-filename.js
@@ -2 +2,2 @@
-  {type: 'file', name: 'upload', filename: '', fixture: 'plain.txt'},
+  {type: 'file', name: 'upload', filename: '', fixture: 'plain.txt',
+  sha1: 'b31d07bac24ac32734de88b3687dddb10e976872'},
@@ -6 +7,2 @@
-  {type: 'file', name: 'upload', filename: 'plain.txt', fixture: 'plain.txt'},
+  {type: 'file', name: 'upload', filename: 'plain.txt', fixture: 'plain.txt',
+  sha1: 'b31d07bac24ac32734de88b3687dddb10e976872'},
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/preamble.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/preamble.js
index da569b2..d2e4cfd 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/preamble.js
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/preamble.js
@@ -2 +2,2 @@
-  {type: 'file', name: 'upload', filename: 'plain.txt', fixture: 'plain.txt'},
+  {type: 'file', name: 'upload', filename: 'plain.txt', fixture: 'plain.txt',
+  sha1: 'b31d07bac24ac32734de88b3687dddb10e976872'},
@@ -6 +7,2 @@
-  {type: 'file', name: 'upload', filename: 'plain.txt', fixture: 'plain.txt'},
+  {type: 'file', name: 'upload', filename: 'plain.txt', fixture: 'plain.txt',
+  sha1: 'b31d07bac24ac32734de88b3687dddb10e976872'},
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/workarounds.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/workarounds.js
index d336505..e59c5b2 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/workarounds.js
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/fixture/js/workarounds.js
@@ -2 +2,2 @@
-  {type: 'file', name: 'upload', filename: 'plain.txt', fixture: 'plain.txt'},
+  {type: 'file', name: 'upload', filename: 'plain.txt', fixture: 'plain.txt',
+  sha1: 'b31d07bac24ac32734de88b3687dddb10e976872'},
@@ -5 +6,2 @@
-  {type: 'file', name: 'upload', filename: 'plain.txt', fixture: 'plain.txt'},
+  {type: 'file', name: 'upload', filename: 'plain.txt', fixture: 'plain.txt',
+  sha1: 'b31d07bac24ac32734de88b3687dddb10e976872'},
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/integration/test-fixtures.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/integration/test-fixtures.js
index eb32fd8..8e10ac9 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/integration/test-fixtures.js
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/integration/test-fixtures.js
@@ -50,2 +50,3 @@
-        var filename = parsedPart.value.name;
-        assert.equal(filename, expectedPart.filename);
+        var file = parsedPart.value;
+        assert.equal(file.name, expectedPart.filename);
+        if(expectedPart.sha1) assert.equal(file.hash, expectedPart.sha1);
@@ -62,0 +64 @@
+    form.hash = "sha1";
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/legacy/simple/test-incoming-form.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/legacy/simple/test-incoming-form.js
index d79a8e2..25bd887 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/legacy/simple/test-incoming-form.js
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/legacy/simple/test-incoming-form.js
@@ -65,7 +64,0 @@
-  var events = ['error', 'aborted', 'data', 'end'];
-  gently.expect(REQ, 'on', events.length, function(event, fn) {
-    assert.equal(event, events.shift());
-    emit[event] = fn;
-    return this;
-  });
-
@@ -73,0 +67,7 @@
+  });
+
+  var EVENTS = ['error', 'aborted', 'data', 'end'];
+  gently.expect(REQ, 'on', EVENTS.length, function(event, fn) {
+    assert.equal(event, EVENTS.shift());
+    emit[event] = fn;
+    return this;
@@ -199,4 +198,0 @@
-    gently.expect(REQ, 'on', 4, function() {
-      return this;
-    });
-
@@ -221,0 +218,6 @@
+    gently.expect(form, 'writeHeaders');
+
+    gently.expect(REQ, 'on', 4, function() {
+      return this;
+    });
+
@@ -226 +227,0 @@
-    gently.expect(form, 'writeHeaders');
@@ -228,3 +228,0 @@
-    gently.expect(REQ, 'on', 4, function() {
-      return this;
-    });
@@ -241,0 +240,3 @@
+        gently.expect(REQ, 'on', 4, function() {
+          return this;
+        });
@@ -249,0 +251,19 @@
+  })();
+
+  (function testWriteOrder() {
+    gently.expect(EventEmitterStub, 'call');
+    var form    = new IncomingForm();
+    var REQ     = new events.EventEmitter();
+    var BUF     = {};
+    var DATACB  = null;
+
+    REQ.on('newListener', function(event, fn) {
+      if ('data' === event) fn(BUF);
+    });
+
+    gently.expect(form, 'writeHeaders');
+    gently.expect(form, 'write', function(buf) {
+      assert.strictEqual(buf, BUF);
+    });
+
+    form.parse(REQ);
@@ -380,0 +401,5 @@
+  gently.expect(form, 'emit', function(event, bytesReceived, bytesExpected) {
+    assert.equal(event, 'progress');
+    assert.equal(bytesReceived, 0);
+    assert.equal(bytesExpected, 0);
+  });
@@ -382,2 +406,0 @@
-  assert.strictEqual(form.bytesReceived, null);
-  assert.strictEqual(form.bytesExpected, null);
diff --git a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/legacy/system/test-multi-video-upload.js b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/legacy/system/test-multi-video-upload.js
index a52db6a..b35ffd6 100644
--- a/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/legacy/system/test-multi-video-upload.js
+++ b/web-app/server/common/node_modules/express/node_modules/connect/node_modules/formidable/test/legacy/system/test-multi-video-upload.js
@@ -44 +44 @@
-      assert.equal(uploads['shortest_video.flv'].file.hash, 'da39a3ee5e6b4b0d3255bfef95601890afd80709');
+      assert.equal(uploads['shortest_video.flv'].file.hash, 'd6a17616c7143d1b1438ceeef6836d1a09186b3a');
@@ -49 +49 @@
-      assert.equal(uploads['shortest_video.mp4'].file.hash, 'da39a3ee5e6b4b0d3255bfef95601890afd80709');
+      assert.equal(uploads['shortest_video.mp4'].file.hash, '937dfd4db263f4887ceae19341dcc8d63bcd557f');
diff --git a/web-app/server/common/server.js b/web-app/server/common/server.js
index 950cef8..2961f86 100644
--- a/web-app/server/common/server.js
+++ b/web-app/server/common/server.js
@@ -126 +126 @@
-  this.app.use(express.cookieParser());
+    this.app.use(express.cookieParser());
@@ -411 +411 @@
-      if (!error && response.statusCode == 200) {
+      if (!error && response.statusCode === 200) {
@@ -429 +429 @@
-      if (!error && response.statusCode == 200) {
+      if (!error && response.statusCode === 200) {
@@ -445 +445,5 @@
-    request.post('http://' + path, function (error, response, body) {
+    var opts = {url: 'http://' + path};
+    if (req.body) {
+      opts.body = JSON.stringify(req.body);
+    }
+    request.post(opts, function (error, response, body) {
@@ -447 +451 @@
-      if (!error && response.statusCode == 200) {
+      if (!error && response.statusCode === 200) {
@@ -467 +471 @@
-      if (!error && response.statusCode == 200) {
+      if (!error && response.statusCode === 200) {
@@ -475,221 +478,0 @@
-    // var accountID = 'developer';
-    // var path = req.url.slice(6).split('/');
-    // var hierarchy = {};
-
-    // self.logger.trace('GET ' + req.url);
-
-    // if (!path[path.length - 1]) {
-    //   path = path.slice(0, path.length - 1);
-    // }
-
-    // var methods = [], ids = [];
-    // for (var i = 0; i < path.length; i ++) {
-    //   if (i % 2) {
-    //     ids.push(path[i]);
-    //   } else {
-    //     methods.push(path[i]);
-    //   }
-    // }
-
-    // var method = null, params = [];
-
-    // if ((methods[0] === 'apps' || methods[0] === 'streams' ||
-    //   methods[0] === 'datasets') && methods[1]) {
-
-    //   if (ids[1]) {
-    //     method = singularREST[methods[1]];
-    //     params = [typesREST[methods[1]], { id: ids[1] }];
-    //   } else {
-    //     method = pluralREST[methods[1]] + selectiveREST[methods[0]];
-    //     params = [ids[0]];
-    //   }
-
-    // } else {
-
-    //   if (ids[0]) {
-    //     method = singularREST[methods[0]];
-    //     params = [typesREST[methods[0]], { id: ids[0] } ];
-    //   } else {
-    //     method = pluralREST[methods[0]];
-    //     params = [];
-    //   }
-
-    // }
-
-    // if (methods[0] === 'all') {
-
-    //   var count = 0, all = [];
-    //   for (var name in pluralREST) {
-    //     methods.push(pluralREST[name]);
-
-    //     count++;
-    //     self.Api.metadata(accountID, pluralREST[name], [], function (error, response) {
-
-    //       if (error) {
-    //         self.logger.error(error);
-    //         res.status(500);
-    //         res.send({
-    //           error: error
-    //         });
-    //       } else {
-
-    //         var i = response.length, type = this.type;
-
-    //         // Determine the type of an element.
-    //         if (type !== 'mapreduce') {
-    //           type = type.slice(0, type.length - 1);
-    //         } else {
-    //           type = 'batch';
-    //         }
-    //         type = type.charAt(0).toUpperCase() + type.slice(1);
-
-    //         while (i--) {
-    //           response[i].type = type;
-    //         }
-
-    //         all = all.concat(response);
-    //         if (!--count) {
-    //           res.send(all);
-    //         }
-
-    //       }
-    //     }.bind({type: name}));
-    //   }
-
-    // } else {
-
-    // if (method === 'getQuery' || method === 'getMapreduce') {
-    //   params[1].application = ids[0];
-    // }
-
-    // if (method === 'getFlow') {
-
-    //   self.Api.manager(accountID, 'getFlowDefinition', [ids[0], ids[1]],
-    //     function (error, response) {
-
-    //       if (error) {
-    //         self.logger.error(error);
-    //         res.status(500);
-    //         res.send({
-    //           error: error
-    //         });
-    //       } else {
-    //         res.send(response);
-    //       }
-
-    //   });
-
-    // } else {
-
-    //   self.Api.metadata(accountID, method, params, function (error, response) {
-
-    //       if (error) {
-    //         self.logger.error(error);
-    //         res.status(500);
-    //         res.send({
-    //           error: error
-    //         });
-    //       } else {
-    //         res.send(response);
-    //       }
-
-    //   });
-
-    // }}
-
-  });
-
-  this.app.get('/logs/:method/:appId/:entityId/:entityType', function (req, res) {
-
-    if (!req.params.method || !req.params.appId || !req.params.entityId || !req.params.entityType) {
-      res.send('incorrect request');
-    }
-
-    var offSet = req.query.fromOffset;
-    var maxSize = req.query.maxSize;
-    var filter = req.query.filter;
-    var method = req.params.method;
-    var accountID = 'developer';
-    var params = [req.params.appId, req.params.entityId, +req.params.entityType, +offSet, +maxSize, filter];
-
-    self.logger.trace('Logs ' + method + ' ' + req.url);
-
-    self.Api.monitor(accountID, method, params, function (error, result) {
-      if (error) {
-        self.logger.error(error);
-      } else {
-        result.map(function (item) {
-          item.offset = parseInt(new Int64(new Buffer(item.offset.buffer), item.offset.offset), 10);
-          return item;
-        });
-      }
-
-      res.send({result: result, error: error});
-    });
-
-  });
-
-  /*
-   * RPC Handler
-   */
-  this.app.post('/rpc/:type/:method', function (req, res) {
-
-    var type, method, params, accountID;
-
-    try {
-
-      type = req.params.type;
-      method = req.params.method;
-      params = req.body;
-      accountID = 'developer';
-
-    } catch (e) {
-
-      self.logger.error(e, req.body);
-      res.send({ result: null, error: 'Malformed request' });
-
-      return;
-
-    }
-
-    self.logger.trace('RPC ' + type + ':' + method, params);
-
-    switch (type) {
-
-      case 'runnable':
-        self.Api.manager(accountID, method, params, function (error, result) {
-          if (error) {
-            //self.logger.error(error);
-          }
-          if (method === 'getFlowHistory') {
-            for (var i = result.length - 1; i >= 0; i--) {
-              if ('startTime' in result[i]) {
-                result[i]['startTime'] = parseInt(result[i]['startTime'], 10);
-              }
-              if ('endTime' in result[i]) {
-                result[i]['endTime'] = parseInt(result[i]['endTime'], 10);
-              }
-            }
-          }
-          res.send({ result: result, error: error });
-        });
-        break;
-
-      case 'fabric':
-        self.Api.far(accountID, method, params, function (error, result) {
-          if (error) {
-            self.logger.error(error);
-          }
-          res.send({ result: result, error: error });
-        });
-        break;
-
-      case 'gateway':
-        self.Api.gateway(accountID, method, params, function (error, result) {
-          if (error) {
-            self.logger.error(error);
-          }
-          res.send({ result: result, error: error });
-        });
-    }
-
@@ -761,4 +544,8 @@
-    var accountID = 'developer';
-    var sessionId = req.session.id;
-    var url = self.config['gateway.hostname'] + ':' + self.config['gateway.port'] 
-      + '/' + self.API_VERSION;
+    var length = req.header('Content-length');
+    var location = '/tmp/' + req.params.file;
+    var data = new Buffer(parseInt(length, 10));
+    var idx = 0;
+    req.on('data', function(raw) {
+      raw.copy(data, idx);
+      idx += raw.length;
+    });
@@ -766,14 +553,39 @@
-    // request({
-    //   method: 'PUT',
-    //   uri: 'http://' + url + '/apps',
-    //   multipart: [
-    //     { body: req.params.file }
-    //   ] 
-    // }, function (error, response, body) {
-    //     if (!error && response.statusCode == 200) {
-    //       res.send('Upload complete.')
-    //     } else {
-    //       res.send('Failed to upload app.')
-    //     }
-    // });
-    self.Api.upload(accountID, req, res, req.params.file, io.sockets["in"](sessionId));
+    req.on('end', function() {
+      fs.writeFile(location, data, function(err) {
+        if(err) {
+          res.send(err);
+        } else {
+          var options = {
+            host: self.config['gateway.hostname'],
+            port: self.config['gateway.port'],
+            path: '/' + self.API_VERSION + '/apps',
+            method: 'PUT',
+            headers: {
+              'Content-length': length,
+              'X-Archive-Name': req.params.file,
+              'Transfer-Encoding': 'chunked'
+            }
+          };
+          var request = http.request(options, function (response) {
+            if (response.statusCode !== 200) {
+              res.send(400, 'Cold not upload file.');
+              self.logger.error('Could not upload file ' + req.params.file);
+            } else {
+              res.send('OK');
+            }
+          });
+
+          request.on('error', function(e) {
+            
+          });
+          var stream = fs.createReadStream(location);
+          stream.on('data', function(chunk) {
+            request.write(chunk);
+          });
+          stream.on('end', function() {
+            request.end();
+          });
+
+        }
+      });
+    });

