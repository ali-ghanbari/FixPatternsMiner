diff --git a/watchdog/src/test/java/com/continuuity/logging/KafkaTestBase.java b/watchdog/src/test/java/com/continuuity/logging/KafkaTestBase.java
index 38811b2..f6ae846 100644
--- a/watchdog/src/test/java/com/continuuity/logging/KafkaTestBase.java
+++ b/watchdog/src/test/java/com/continuuity/logging/KafkaTestBase.java
@@ -70 +70 @@
-    prop.setProperty("num.partitions", "10");
+    prop.setProperty("num.partitions", "2");
diff --git a/watchdog/src/test/java/com/continuuity/logging/save/LogSaverTest.java b/watchdog/src/test/java/com/continuuity/logging/save/LogSaverTest.java
index 5dbfd81..a2193e0 100644
--- a/watchdog/src/test/java/com/continuuity/logging/save/LogSaverTest.java
+++ b/watchdog/src/test/java/com/continuuity/logging/save/LogSaverTest.java
@@ -273,4 +272,0 @@
-    // For some reason first message publish on Kafka fails transiently. Hence this workaround of publishing some
-    // dummy messages before publishing logs.
-    publishDummyMessages(conf);
-
@@ -289,31 +284,0 @@
-  }
-
-  private static void publishDummyMessages(CConfiguration configuration) throws Exception {
-    Properties props = new Properties();
-    props.setProperty("metadata.broker.list", configuration.get(LoggingConfiguration.KAFKA_SEED_BROKERS));
-    props.setProperty("serializer.class", "kafka.serializer.DefaultEncoder");
-    props.setProperty("key.serializer.class", "kafka.serializer.StringEncoder");
-    props.setProperty("partitioner.class", "com.continuuity.logging.appender.kafka.StringPartitioner");
-    props.setProperty("request.required.acks", "1");
-    props.setProperty("producer.type", configuration.get(LoggingConfiguration.KAFKA_PRODUCER_TYPE,
-        LoggingConfiguration.DEFAULT_KAFKA_PRODUCER_TYPE));
-    props.setProperty("queue.buffering.max.ms",
-        configuration.get(LoggingConfiguration.KAFKA_PROCUDER_BUFFER_MS,
-            Long.toString(LoggingConfiguration.DEFAULT_KAFKA_PROCUDER_BUFFER_MS)));
-    props.setProperty(LoggingConfiguration.NUM_PARTITIONS,
-        configuration.get(LoggingConfiguration.NUM_PARTITIONS,
-            LoggingConfiguration.DEFAULT_NUM_PARTITIONS));
-
-    ProducerConfig config = new ProducerConfig(props);
-    Producer<String, byte[]> producer = new Producer<String, byte[]>(config);
-    for (int i = 0; i < 8; ++i) {
-      KeyedMessage<String, byte[]> data = new KeyedMessage<String, byte[]>(
-        "dummy_topic_77683", "1", new byte[]{1, 2, 3, 4, 5, 6});
-      try {
-        producer.send(data);
-      } catch (Exception e) {
-        // Ignore the exception since this is a dummy message intended to produce this exception,
-        // so that the real log publishing goes through.
-      }
-    }
-    producer.close();

