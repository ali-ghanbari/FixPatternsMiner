diff --git a/explore/src/main/java/com/continuuity/explore/guice/ExploreRuntimeModule.java b/explore/src/main/java/com/continuuity/explore/guice/ExploreRuntimeModule.java
index 32cef81..60ecd44 100644
--- a/explore/src/main/java/com/continuuity/explore/guice/ExploreRuntimeModule.java
+++ b/explore/src/main/java/com/continuuity/explore/guice/ExploreRuntimeModule.java
@@ -53,0 +54,5 @@
+    // Turning off assertions for Hive packages, since some assertions in StandardStructObjectInspector do not work
+    // when outer joins are run. It is okay to turn off Hive assertions since we assume Hive is a black-box that does
+    // the right thing, and we only want to test our/our user's code.
+    getClass().getClassLoader().setPackageAssertionStatus("org.apache.hadoop.hive", false);
+    getClass().getClassLoader().setPackageAssertionStatus("org.apache.hive", false);
diff --git a/explore/src/test/java/com/continuuity/explore/service/HiveExploreServiceTest.java b/explore/src/test/java/com/continuuity/explore/service/HiveExploreServiceTest.java
index 1001124..2697e1c 100644
--- a/explore/src/test/java/com/continuuity/explore/service/HiveExploreServiceTest.java
+++ b/explore/src/test/java/com/continuuity/explore/service/HiveExploreServiceTest.java
@@ -203,2 +203,2 @@
-      KeyValue.Value value1 = new KeyValue.Value("two", Lists.newArrayList(10, 11, 12, 13, 14));
-      KeyValue.Value value2 = new KeyValue.Value("third", Lists.newArrayList(10, 11, 12, 13, 14));
+      KeyValue.Value value1 = new KeyValue.Value("two", Lists.newArrayList(20, 21, 22, 23, 24));
+      KeyValue.Value value2 = new KeyValue.Value("third", Lists.newArrayList(30, 31, 32, 33, 34));
@@ -218,9 +218,58 @@
-                   "my_table" +
-                   " " +
-                 "join my_table_1 on (my_table.key=my_table_1.key)",
-          true,
-          Lists.newArrayList(new ColumnDesc("my_table.key", "STRING", 1, null),
-                             new ColumnDesc("my_table.value",
-                                            "struct<name:string,ints:array<int>>", 2, null)),
-          Lists.newArrayList(
-              new Result(Lists.<Object>newArrayList("2", "{\"name\":\"two\",\"ints\":[10,11,12,13,14]}")))
+                   "my_table " +
+                   "join my_table_1 on (my_table.key=my_table_1.key)",
+                 true,
+                 Lists.newArrayList(new ColumnDesc("my_table.key", "STRING", 1, null),
+                                    new ColumnDesc("my_table.value",
+                                                   "struct<name:string,ints:array<int>>", 2, null)),
+                 Lists.newArrayList(
+                   new Result(Lists.<Object>newArrayList("2", "{\"name\":\"two\",\"ints\":[10,11,12,13,14]}")))
+      );
+
+      runCommand("select my_table.key, my_table.value, my_table_1.key, my_table_1.value from " +
+                   "my_table " +
+                   "right outer join my_table_1 on (my_table.key=my_table_1.key)",
+                 true,
+                 Lists.newArrayList(new ColumnDesc("my_table.key", "STRING", 1, null),
+                                    new ColumnDesc("my_table.value", "struct<name:string,ints:array<int>>", 2, null),
+                                    new ColumnDesc("my_table_1.key", "STRING", 3, null),
+                                    new ColumnDesc("my_table_1.value",
+                                                   "struct<name:string,ints:array<int>>", 4, null)),
+                 Lists.newArrayList(
+                   new Result(Lists.<Object>newArrayList("2", "{\"name\":\"two\",\"ints\":[10,11,12,13,14]}",
+                                                         "2", "{\"name\":\"two\",\"ints\":[20,21,22,23,24]}")),
+                   new Result(Lists.<Object>newArrayList(null, null, "3",
+                                                         "{\"name\":\"third\",\"ints\":[30,31,32,33,34]}")))
+      );
+
+      runCommand("select my_table.key, my_table.value, my_table_1.key, my_table_1.value from " +
+                   "my_table " +
+                   "left outer join my_table_1 on (my_table.key=my_table_1.key)",
+                 true,
+                 Lists.newArrayList(new ColumnDesc("my_table.key", "STRING", 1, null),
+                                    new ColumnDesc("my_table.value", "struct<name:string,ints:array<int>>", 2, null),
+                                    new ColumnDesc("my_table_1.key", "STRING", 3, null),
+                                    new ColumnDesc("my_table_1.value",
+                                                   "struct<name:string,ints:array<int>>", 4, null)),
+                 Lists.newArrayList(
+                   new Result(Lists.<Object>newArrayList("1",
+                                                         "{\"name\":\"first\",\"ints\":[1,2,3,4,5]}", null, null)),
+                   new Result(Lists.<Object>newArrayList("2", "{\"name\":\"two\",\"ints\":[10,11,12,13,14]}",
+                                                         "2", "{\"name\":\"two\",\"ints\":[20,21,22,23,24]}")))
+      );
+
+      runCommand("select my_table.key, my_table.value, my_table_1.key, my_table_1.value from " +
+                   "my_table " +
+                   "full outer join my_table_1 on (my_table.key=my_table_1.key)",
+                 true,
+                 Lists.newArrayList(new ColumnDesc("my_table.key", "STRING", 1, null),
+                                    new ColumnDesc("my_table.value", "struct<name:string,ints:array<int>>", 2, null),
+                                    new ColumnDesc("my_table_1.key", "STRING", 3, null),
+                                    new ColumnDesc("my_table_1.value",
+                                                   "struct<name:string,ints:array<int>>", 4, null)),
+                 Lists.newArrayList(
+                   new Result(Lists.<Object>newArrayList("1",
+                                                         "{\"name\":\"first\",\"ints\":[1,2,3,4,5]}", null, null)),
+                   new Result(Lists.<Object>newArrayList("2", "{\"name\":\"two\",\"ints\":[10,11,12,13,14]}",
+                                                         "2", "{\"name\":\"two\",\"ints\":[20,21,22,23,24]}")),
+                   new Result(Lists.<Object>newArrayList(null, null, "3",
+                                                         "{\"name\":\"third\",\"ints\":[30,31,32,33,34]}")))

