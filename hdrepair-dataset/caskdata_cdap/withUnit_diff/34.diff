diff --git a/explore/src/main/java/co/cask/cdap/explore/service/hive/BaseHiveExploreService.java b/explore/src/main/java/co/cask/cdap/explore/service/hive/BaseHiveExploreService.java
index 1326e15..35a6fc1 100644
--- a/explore/src/main/java/co/cask/cdap/explore/service/hive/BaseHiveExploreService.java
+++ b/explore/src/main/java/co/cask/cdap/explore/service/hive/BaseHiveExploreService.java
@@ -589,0 +590 @@
+    inactiveHandleCache.invalidate(handle);
diff --git a/explore/src/test/java/co/cask/cdap/explore/service/HiveExploreServiceTest.java b/explore/src/test/java/co/cask/cdap/explore/service/HiveExploreServiceTest.java
index 7df821b..fb43ad5 100644
--- a/explore/src/test/java/co/cask/cdap/explore/service/HiveExploreServiceTest.java
+++ b/explore/src/test/java/co/cask/cdap/explore/service/HiveExploreServiceTest.java
@@ -62,0 +63 @@
+import java.util.concurrent.TimeoutException;
@@ -199,0 +201 @@
+  }
@@ -201 +203,51 @@
-    List<QueryInfo> result = exploreService.getQueries();
+  @Test
+  public void queriesListTest() throws Exception {
+    ListenableFuture<ExploreExecutionResult> future;
+    ExploreExecutionResult results;
+    List<QueryInfo> queries;
+
+    future = exploreClient.submit("show tables");
+    future.get();
+
+    future = exploreClient.submit("select * from my_table");
+    results = future.get();
+
+    queries = exploreService.getQueries();
+    Assert.assertEquals(2, queries.size());
+    Assert.assertEquals("select * from my_table", queries.get(0).getStatement());
+    Assert.assertEquals("FINISHED", queries.get(0).getStatus().toString());
+    Assert.assertTrue(queries.get(0).isHasResults());
+    Assert.assertTrue(queries.get(0).isActive());
+    Assert.assertEquals("show tables", queries.get(1).getStatement());
+    Assert.assertEquals("FINISHED", queries.get(1).getStatus().toString());
+    Assert.assertTrue(queries.get(1).isHasResults());
+    Assert.assertTrue(queries.get(1).isActive());
+
+    // Make the last query inactive
+    while (results.hasNext()) {
+      results.next();
+    }
+    queries = exploreService.getQueries();
+    Assert.assertEquals(2, queries.size());
+    Assert.assertEquals("select * from my_table", queries.get(0).getStatement());
+    Assert.assertEquals("FINISHED", queries.get(0).getStatus().toString());
+    Assert.assertTrue(queries.get(0).isHasResults());
+    Assert.assertFalse(queries.get(0).isActive());
+    Assert.assertEquals("show tables", queries.get(1).getStatement());
+    Assert.assertEquals("FINISHED", queries.get(1).getStatus().toString());
+    Assert.assertTrue(queries.get(1).isHasResults());
+    Assert.assertTrue(queries.get(1).isActive());
+
+    // Close last query
+    results.close();
+    queries = exploreService.getQueries();
+    Assert.assertEquals(1, queries.size());
+    Assert.assertEquals("show tables", queries.get(0).getStatement());
+
+    // Make sure queries are reverse ordered by timestamp
+    exploreClient.submit("show tables").get();
+    exploreClient.submit("show tables").get();
+    exploreClient.submit("show tables").get();
+    exploreClient.submit("show tables").get();
+
+    queries = exploreService.getQueries();
@@ -203,2 +255,2 @@
-    Assert.assertTrue(result.size() > 0);
-    for (QueryInfo queryInfo : result) {
+    Assert.assertEquals(5, queries.size());
+    for (QueryInfo queryInfo : queries) {
@@ -207 +259 @@
-      Assert.assertFalse(queryInfo.isActive());
+      Assert.assertTrue(queryInfo.isActive());
@@ -208,0 +261 @@
+      Assert.assertEquals("show tables", queryInfo.getStatement());

