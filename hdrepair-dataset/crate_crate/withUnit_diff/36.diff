diff --git a/sql/src/main/java/io/crate/planner/node/CollectNode.java b/sql/src/main/java/io/crate/planner/node/CollectNode.java
index 61b2ff7..eaa154f 100644
--- a/sql/src/main/java/io/crate/planner/node/CollectNode.java
+++ b/sql/src/main/java/io/crate/planner/node/CollectNode.java
@@ -192,0 +193,2 @@
+        } else {
+            out.writeVInt(0);
diff --git a/sql/src/test/java/io/crate/analyze/EvaluatingNormalizerTest.java b/sql/src/test/java/io/crate/analyze/EvaluatingNormalizerTest.java
index 93b54c3..ee9183c 100644
--- a/sql/src/test/java/io/crate/analyze/EvaluatingNormalizerTest.java
+++ b/sql/src/test/java/io/crate/analyze/EvaluatingNormalizerTest.java
@@ -116,22 +115,0 @@
-    @Test
-    public void testYodaFunctionCallRewrite() {
-        // eq(1, name) should become eq(name, 1)
-
-        EvaluatingNormalizer normalizer = new EvaluatingNormalizer(
-                functions, RowGranularity.CLUSTER, referenceResolver);
-
-        TableIdent dummyTable = new TableIdent(null, "dummy");
-        Reference strcol = new Reference(new ReferenceInfo(
-                new ReferenceIdent(dummyTable, "strCol"), RowGranularity.DOC, DataType.STRING));
-
-        FunctionInfo eqInfo = functionInfo(EqOperator.NAME, DataType.STRING);
-        Function eq = new Function(eqInfo, Arrays.<Symbol>asList(new StringLiteral("foo"), strcol));
-
-        Symbol query = normalizer.process(eq, null);
-        assertThat(query, instanceOf(Function.class));
-        Function qFunction = (Function)query;
-
-        assertThat(qFunction.arguments().get(0), instanceOf(Reference.class));
-        assertThat(qFunction.arguments().get(1), instanceOf(StringLiteral.class));
-    }
-

