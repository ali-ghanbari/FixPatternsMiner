diff --git a/core/src/main/java/me/prettyprint/cassandra/service/template/MappedColumnFamilyResultWrapper.java b/core/src/main/java/me/prettyprint/cassandra/service/template/MappedColumnFamilyResultWrapper.java
index d191a0f..e551582 100644
--- a/core/src/main/java/me/prettyprint/cassandra/service/template/MappedColumnFamilyResultWrapper.java
+++ b/core/src/main/java/me/prettyprint/cassandra/service/template/MappedColumnFamilyResultWrapper.java
@@ -19,0 +20 @@
+    this.rowMapper = mapper;
diff --git a/core/src/test/java/me/prettyprint/cassandra/service/template/ColumnFamilyTemplateTest.java b/core/src/test/java/me/prettyprint/cassandra/service/template/ColumnFamilyTemplateTest.java
index 8e60f3c..c4e2aed 100644
--- a/core/src/test/java/me/prettyprint/cassandra/service/template/ColumnFamilyTemplateTest.java
+++ b/core/src/test/java/me/prettyprint/cassandra/service/template/ColumnFamilyTemplateTest.java
@@ -56 +56 @@
-    updater.update();
+    template.update(updater);
@@ -68,0 +69,25 @@
+  public void testOverloadedMapRowCallback() {
+    ColumnFamilyTemplate<String, String> template = new ThriftColumnFamilyTemplate<String, String>(keyspace, "Standard1", se, se, HFactory.createMutator(keyspace, se));
+    ColumnFamilyUpdater updater = template.createUpdater("key1"); 
+    updater.setString("column1","value1");
+    updater.addKey("key2");
+    updater.setString("column1", "value2");
+    template.update(updater);
+    template.setCount(10);
+    MappedColumnFamilyResult result = template.queryColumns(Arrays.asList("key1","key2"), new ColumnFamilyRowMapper<String, String, String>() {
+      @Override
+      public String mapRow(ColumnFamilyResult<String, String> results) {
+
+        return results.getString("column1");
+      }
+    });
+    assertEquals("key1",result.getKey());
+    assertEquals("value1", result.getRow());
+    result.next();
+    assertEquals("key2",result.getKey());
+    assertEquals("value2", result.getRow());
+    
+    
+  }
+  
+  @Test

