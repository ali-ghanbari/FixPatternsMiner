Dropping the view from Presenter#onDestroy was idiotic.

"Originally," onDestroy was setting view = null. This broke
the more recently introduced loaded flag. I fixed that by making
onDestroy call dropView() instead.

But I don't remember why onDestroy was clearing the view in the first
place. I suspect it was a bad fix for problems that have sinced been
better corrected by severing the connection between onResume and
onLoad, and by debouncing onLoad. Certainly when I drop this and
play with sample apps through rotation and sample death, nothing bad
is happening.

The onDestroy behavior was fundamentally wrong: it breaks the
ability for dropView to be called out of order, the whole reason
it requires a view argument in the first place. This is particularly
a problem when a presenter is declared in a higher scope than the
views it is running.

