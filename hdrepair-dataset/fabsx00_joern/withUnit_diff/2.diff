diff --git a/codesensor/groovy/nullPtrDeref.groovy b/codesensor/groovy/nullPtrDeref.groovy
index 5fad5cd..65ebb96 100644
--- a/codesensor/groovy/nullPtrDeref.groovy
+++ b/codesensor/groovy/nullPtrDeref.groovy
@@ -1,3 +0,0 @@
-PATH_TO_DATABASE = '/home/fabs/tmp/neo4j/';
-g = new Neo4jGraph(PATH_TO_DATABASE);
-index = g.idx("typeIndex");
@@ -5,3 +2 @@
-def astNodes_(index,typeName) { return index[[type:typeName]]; };
-astNodes = astNodes_.curry(index);
-Gremlin.defineStep('functionDef', [Vertex,Pipe], { _().in('AST_CHILD').loop(1){it.object.type != "FunctionDef"} } );
+import CodeDatabase
@@ -10 +5,12 @@
-astNodes("CallExpression").filter{it.code.matches('^malloc.*')}.functionDef();
+c = new CodeDatabase()
+g = c.getDbLink()
+
+mallocsInAssignments = astNodes("AssignmentExpr").filter{it.code.matches('.*malloc.*')}
+l = mallocsInAssignments.outE('AST_CHILD').filter{ it.n.equals("0") }inV().code  //.inV().code.toList()
+
+for(x in l)
+{
+  println x;
+}
+
+
diff --git a/codesensor/groovy/plotAST.groovy b/codesensor/groovy/plotAST.groovy
index 96d2fae..ccad9f4 100644
--- a/codesensor/groovy/plotAST.groovy
+++ b/codesensor/groovy/plotAST.groovy
@@ -9,0 +10,16 @@
+def printDotAST = { ast ->
+  
+  printf("digraph myGraph{");
+  for(node in ast){
+    (id, type, code, parentId) = node;
+    
+    code = code.replace('\\', '\\\\');
+    code = code.replace('"', '\\"')
+    
+    printf('node%s [label="%s: %s"]\n',id, type, code);
+    printf('"node%s":s->"node%s":n;\n', parentId, id);
+  };
+  printf("}\n");
+  
+}
+
@@ -13 +29,2 @@
-ast = g.astNodes("FunctionDef")[0].AST().toList()[0];
+// ast = g.astNodes("FunctionDef")[0].AST().toList()[0];
+ast = astNodes("AssignmentExpr").filter{it.code.matches('.*malloc.*')}[2].AST.toList()[0]
@@ -15,11 +32 @@
-printf("digraph myGraph{");
-for(node in ast){
-  (id, type, code, parentId) = node;
-  
-  code = code.replace('\\', '\\\\');
-  code = code.replace('"', '\\"')
-  
-  printf('node%s [label="%s: %s"]\n',id, type, code);
-  printf('"node%s":s->"node%s":n;\n', parentId, id);
-};
-printf("}\n");
+printDotAST(ast)
diff --git a/codesensor/src/astnodes/expressions/BinaryExpression.java b/codesensor/src/astnodes/expressions/BinaryExpression.java
index 56293d0..faa3970 100644
--- a/codesensor/src/astnodes/expressions/BinaryExpression.java
+++ b/codesensor/src/astnodes/expressions/BinaryExpression.java
@@ -28,0 +29,2 @@
+	
+		super.addChild(item);
diff --git a/codesensor/src/tests/CFGCreatorTest.java b/codesensor/src/tests/CFGCreatorTest.java
index 92fc37c..3854746 100644
--- a/codesensor/src/tests/CFGCreatorTest.java
+++ b/codesensor/src/tests/CFGCreatorTest.java
@@ -138 +138 @@
-		String input = "x = 10; if(foo){ bar(); }";
+		String input = "if(foo){ bar(); } x = 10; ";
@@ -231,0 +232 @@
+		System.out.println(edges.size());

