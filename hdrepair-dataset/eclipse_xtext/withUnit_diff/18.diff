diff --git a/tests/org.eclipse.xtend.ide.tests/src/org/eclipse/xtend/ide/tests/contentassist/Bug458611Test.xtend b/tests/org.eclipse.xtend.ide.tests/src/org/eclipse/xtend/ide/tests/contentassist/Bug458611Test.xtend
new file mode 100644
index 0000000..59723fd
--- /dev/null
+++ b/tests/org.eclipse.xtend.ide.tests/src/org/eclipse/xtend/ide/tests/contentassist/Bug458611Test.xtend
@@ -0,0 +1,90 @@
+/*******************************************************************************
+ * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *******************************************************************************/
+package org.eclipse.xtend.ide.tests.contentassist
+
+import org.junit.Test
+
+/**
+ * @author Sebastian Zarnekow - Initial contribution and API
+ */
+class Bug458611Test extends AbstractXtendContentAssistBugTest {
+	
+	@Test def void test_01() throws Exception {
+		newBuilder.append('''
+			class C {
+				static class Bar {
+				}
+				static class Foo {
+				    def sum(Bar[] bars) {
+				    }
+				}
+				extension Foo 
+			    def doit(Iterable<Bar> myBars) {
+			        myBars.sum<|>
+			    }
+			}
+		''')
+			.assertProposalAtCursor('sum')
+	}
+	
+	@Test def void test_02() throws Exception {
+		newBuilder.append('''
+			import static extension C.Foo.*
+			class C {
+				static class Bar {
+				}
+				static class Foo {
+				    static def sum(Bar[] bars) {
+				    }
+				}
+			    def doit(Iterable<Bar> myBars) {
+			        myBars.sum<|>
+			    }
+			}
+		''')
+			.assertProposalAtCursor('sum')
+	}
+	
+	@Test def void test_03() throws Exception {
+		newBuilder.append('''
+			class C {
+				static class Bar {
+				}
+				static class Foo {
+				    def sum(Iterable<Bar> bars) {
+				    }
+				}
+				extension Foo 
+			    def doit(Bar[] myBars) {
+			        myBars.sum<|>
+			    }
+			}
+		''')
+			.assertProposalAtCursor('sum')
+	}
+	
+	@Test def void test_04() throws Exception {
+		newBuilder.append('''
+			import static extension C.Foo.*
+			class C {
+				static class Bar {
+				}
+				static class Foo {
+				    static def sum(Iterable<Bar> bars) {
+				    }
+				}
+			    def doit(Bar[] myBars) {
+			        myBars.sum<|>
+			    }
+			}
+		''')
+			.assertProposalAtCursor('sum')
+	}
+	
+	
+}
\ No newline at end of file
diff --git a/tests/org.eclipse.xtend.ide.tests/suites/org/eclipse/xtend/ide/tests/contentassist/ContentAssistSuite.java b/tests/org.eclipse.xtend.ide.tests/suites/org/eclipse/xtend/ide/tests/contentassist/ContentAssistSuite.java
index be848fc..5eaffce 100644
--- a/tests/org.eclipse.xtend.ide.tests/suites/org/eclipse/xtend/ide/tests/contentassist/ContentAssistSuite.java
+++ b/tests/org.eclipse.xtend.ide.tests/suites/org/eclipse/xtend/ide/tests/contentassist/ContentAssistSuite.java
@@ -42,0 +43 @@
+	Bug458611Test.class,
diff --git a/tests/org.eclipse.xtend.ide.tests/xtend-gen/org/eclipse/xtend/ide/tests/contentassist/Bug458611Test.java b/tests/org.eclipse.xtend.ide.tests/xtend-gen/org/eclipse/xtend/ide/tests/contentassist/Bug458611Test.java
new file mode 100644
index 0000000..251fbdc
--- /dev/null
+++ b/tests/org.eclipse.xtend.ide.tests/xtend-gen/org/eclipse/xtend/ide/tests/contentassist/Bug458611Test.java
@@ -0,0 +1,185 @@
+/**
+ * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package org.eclipse.xtend.ide.tests.contentassist;
+
+import org.eclipse.xtend.ide.tests.contentassist.AbstractXtendContentAssistBugTest;
+import org.eclipse.xtend2.lib.StringConcatenation;
+import org.eclipse.xtext.junit4.ui.ContentAssistProcessorTestBuilder;
+import org.junit.Test;
+
+/**
+ * @author Sebastian Zarnekow - Initial contribution and API
+ */
+@SuppressWarnings("all")
+public class Bug458611Test extends AbstractXtendContentAssistBugTest {
+  @Test
+  public void test_01() throws Exception {
+    ContentAssistProcessorTestBuilder _newBuilder = this.newBuilder();
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("class C {");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("static class Bar {");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("static class Foo {");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("def sum(Bar[] bars) {");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("extension Foo ");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("def doit(Iterable<Bar> myBars) {");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("myBars.sum<|>");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    ContentAssistProcessorTestBuilder _append = _newBuilder.append(_builder.toString());
+    _append.assertProposalAtCursor("sum");
+  }
+  
+  @Test
+  public void test_02() throws Exception {
+    ContentAssistProcessorTestBuilder _newBuilder = this.newBuilder();
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("import static extension C.Foo.*");
+    _builder.newLine();
+    _builder.append("class C {");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("static class Bar {");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("static class Foo {");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("static def sum(Bar[] bars) {");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("def doit(Iterable<Bar> myBars) {");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("myBars.sum<|>");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    ContentAssistProcessorTestBuilder _append = _newBuilder.append(_builder.toString());
+    _append.assertProposalAtCursor("sum");
+  }
+  
+  @Test
+  public void test_03() throws Exception {
+    ContentAssistProcessorTestBuilder _newBuilder = this.newBuilder();
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("class C {");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("static class Bar {");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("static class Foo {");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("def sum(Iterable<Bar> bars) {");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("extension Foo ");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("def doit(Bar[] myBars) {");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("myBars.sum<|>");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    ContentAssistProcessorTestBuilder _append = _newBuilder.append(_builder.toString());
+    _append.assertProposalAtCursor("sum");
+  }
+  
+  @Test
+  public void test_04() throws Exception {
+    ContentAssistProcessorTestBuilder _newBuilder = this.newBuilder();
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("import static extension C.Foo.*");
+    _builder.newLine();
+    _builder.append("class C {");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("static class Bar {");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("static class Foo {");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("static def sum(Iterable<Bar> bars) {");
+    _builder.newLine();
+    _builder.append("\t    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("def doit(Bar[] myBars) {");
+    _builder.newLine();
+    _builder.append("        ");
+    _builder.append("myBars.sum<|>");
+    _builder.newLine();
+    _builder.append("    ");
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    ContentAssistProcessorTestBuilder _append = _newBuilder.append(_builder.toString());
+    _append.assertProposalAtCursor("sum");
+  }
+}

