diff --git a/plugins/org.eclipse.xtend.core/src/org/eclipse/xtend/core/javaconverter/JavaASTFlattener.xtend b/plugins/org.eclipse.xtend.core/src/org/eclipse/xtend/core/javaconverter/JavaASTFlattener.xtend
index 649f69e..1c1d53a 100644
--- a/plugins/org.eclipse.xtend.core/src/org/eclipse/xtend/core/javaconverter/JavaASTFlattener.xtend
+++ b/plugins/org.eclipse.xtend.core/src/org/eclipse/xtend/core/javaconverter/JavaASTFlattener.xtend
@@ -1078 +1078 @@
-				appendToBuffer('''�if(needsReturnValue(assigment)) tempVarName� }''')
+				appendToBuffer('''�if(needsReturnValue(node)) tempVarName� }''')
diff --git a/plugins/org.eclipse.xtend.core/xtend-gen/org/eclipse/xtend/core/javaconverter/JavaASTFlattener.java b/plugins/org.eclipse.xtend.core/xtend-gen/org/eclipse/xtend/core/javaconverter/JavaASTFlattener.java
index 5ee9b9d..732e72e 100644
--- a/plugins/org.eclipse.xtend.core/xtend-gen/org/eclipse/xtend/core/javaconverter/JavaASTFlattener.java
+++ b/plugins/org.eclipse.xtend.core/xtend-gen/org/eclipse/xtend/core/javaconverter/JavaASTFlattener.java
@@ -1887 +1887 @@
-        boolean _needsReturnValue = this._aSTFlattenerUtils.needsReturnValue(assigment);
+        boolean _needsReturnValue = this._aSTFlattenerUtils.needsReturnValue(node);
diff --git a/tests/org.eclipse.xtend.core.tests/src/org/eclipse/xtend/core/tests/javaconverter/JavaConverterTest.xtend b/tests/org.eclipse.xtend.core.tests/src/org/eclipse/xtend/core/tests/javaconverter/JavaConverterTest.xtend
index 138f1af..9307f8b 100644
--- a/tests/org.eclipse.xtend.core.tests/src/org/eclipse/xtend/core/tests/javaconverter/JavaConverterTest.xtend
+++ b/tests/org.eclipse.xtend.core.tests/src/org/eclipse/xtend/core/tests/javaconverter/JavaConverterTest.xtend
@@ -840,8 +840,8 @@
-			public static main(String[] args) {
-				int[] ints = new int[]{1,2,3,4,5};
-				int in = 2;
-				System.out.println("3="+(ints[in]++));
-				System.out.println("4="+(ints[in]--));
-				System.out.println("1="+(--ints[in]));
-				System.out.println("5="+(++ints[in]));
-			}
+			public static void main(String[] args) {
+					int[] ints = new int[]{1,2,40,44,5,6,7};
+					int in = 3;
+					System.out.println("44="+(ints[in]++));
+					System.out.println("45="+(ints[in]--));
+					System.out.println("43="+(--ints[in]));
+					System.out.println("44="+(++ints[in]));
+				}
@@ -857 +857 @@
-			public static main(String[] args) {
+			public static void main(String[] args) {
@@ -867,0 +868,20 @@
+	
+	@Test def void testPostfixArrayAccess() throws Exception {
+		val javaCode = '''
+			private int ar[] = new int[1];
+			public void arPostReturn() {
+				System.out.println(ar[0]++);
+			}
+			public void arPostNoReturn() {
+				ar[0]++;
+			}
+		'''
+		assertEquals('''
+		int[] ar=newIntArrayOfSize(1)
+		def void arPostReturn() {
+			System.out.println({ var _postIndx_ar=0 var  _postVal_ar={val _rdIndx_ar=_postIndx_ar ar.get(_rdIndx_ar)}{ val _wrVal_ar=ar val _wrIndx_ar=_postIndx_ar _wrVal_ar.set(_wrIndx_ar,_postVal_ar + 1)}_postVal_ar }) 
+		}
+		def void arPostNoReturn() {
+			{ var _postIndx_ar=0 var  _postVal_ar={val _rdIndx_ar=_postIndx_ar ar.get(_rdIndx_ar)}{ val _wrVal_ar=ar val _wrIndx_ar=_postIndx_ar _wrVal_ar.set(_wrIndx_ar,_postVal_ar + 1)} } 
+		}'''.toString, toXtendClassBodyDeclr(javaCode))
+	}
diff --git a/tests/org.eclipse.xtend.core.tests/xtend-gen/org/eclipse/xtend/core/tests/javaconverter/JavaConverterTest.java b/tests/org.eclipse.xtend.core.tests/xtend-gen/org/eclipse/xtend/core/tests/javaconverter/JavaConverterTest.java
index 2fd69c6..81b8b0b 100644
--- a/tests/org.eclipse.xtend.core.tests/xtend-gen/org/eclipse/xtend/core/tests/javaconverter/JavaConverterTest.java
+++ b/tests/org.eclipse.xtend.core.tests/xtend-gen/org/eclipse/xtend/core/tests/javaconverter/JavaConverterTest.java
@@ -1508 +1508,19 @@
-    _builder.append("public static main(String[] args) {");
+    _builder.append("public static void main(String[] args) {");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("int[] ints = new int[]{1,2,40,44,5,6,7};");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("int in = 3;");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("System.out.println(\"44=\"+(ints[in]++));");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("System.out.println(\"45=\"+(ints[in]--));");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("System.out.println(\"43=\"+(--ints[in]));");
+    _builder.newLine();
+    _builder.append("\t\t\t");
+    _builder.append("System.out.println(\"44=\"+(++ints[in]));");
@@ -1511,18 +1528,0 @@
-    _builder.append("int[] ints = new int[]{1,2,3,4,5};");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("int in = 2;");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("System.out.println(\"3=\"+(ints[in]++));");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("System.out.println(\"4=\"+(ints[in]--));");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("System.out.println(\"1=\"+(--ints[in]));");
-    _builder.newLine();
-    _builder.append("\t\t");
-    _builder.append("System.out.println(\"5=\"+(++ints[in]));");
-    _builder.newLine();
-    _builder.append("\t");
@@ -1542 +1542 @@
-    _builder.append("public static main(String[] args) {");
+    _builder.append("public static void main(String[] args) {");
@@ -1570,0 +1571,41 @@
+  public void testPostfixArrayAccess() throws Exception {
+    StringConcatenation _builder = new StringConcatenation();
+    _builder.append("private int ar[] = new int[1];");
+    _builder.newLine();
+    _builder.append("public void arPostReturn() {");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("System.out.println(ar[0]++);");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    _builder.append("public void arPostNoReturn() {");
+    _builder.newLine();
+    _builder.append("\t");
+    _builder.append("ar[0]++;");
+    _builder.newLine();
+    _builder.append("}");
+    _builder.newLine();
+    final String javaCode = _builder.toString();
+    StringConcatenation _builder_1 = new StringConcatenation();
+    _builder_1.append("int[] ar=newIntArrayOfSize(1)");
+    _builder_1.newLine();
+    _builder_1.append("def void arPostReturn() {");
+    _builder_1.newLine();
+    _builder_1.append("\t");
+    _builder_1.append("System.out.println({ var _postIndx_ar=0 var  _postVal_ar={val _rdIndx_ar=_postIndx_ar ar.get(_rdIndx_ar)}{ val _wrVal_ar=ar val _wrIndx_ar=_postIndx_ar _wrVal_ar.set(_wrIndx_ar,_postVal_ar + 1)}_postVal_ar }) ");
+    _builder_1.newLine();
+    _builder_1.append("}");
+    _builder_1.newLine();
+    _builder_1.append("def void arPostNoReturn() {");
+    _builder_1.newLine();
+    _builder_1.append("\t");
+    _builder_1.append("{ var _postIndx_ar=0 var  _postVal_ar={val _rdIndx_ar=_postIndx_ar ar.get(_rdIndx_ar)}{ val _wrVal_ar=ar val _wrIndx_ar=_postIndx_ar _wrVal_ar.set(_wrIndx_ar,_postVal_ar + 1)} } ");
+    _builder_1.newLine();
+    _builder_1.append("}");
+    String _string = _builder_1.toString();
+    String _xtendClassBodyDeclr = this.toXtendClassBodyDeclr(javaCode);
+    Assert.assertEquals(_string, _xtendClassBodyDeclr);
+  }
+  
+  @Test

