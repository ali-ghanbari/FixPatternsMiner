fixed bug reported by Harry Xu:

I was using soot.toolkits.graph.MHGDominatorsFind to compute control dependence (by essentially following the dominance-frontier-on-inverse-CFG algorithm in Cytron et al. TOPLAS'89). I got wrong control dependence for a particular method all the time, which eventually forced me to look into soot. A bug was then found in MHGDominatorsFind that sometimes returns incorrect dominator relationship.  The problem is located at Line 74, where the dom set for each non-head node is assigned to contain all the nodes in the graph.   The original code says

  fullSet .flip(0, graph .size() - 1);

, which only flips the bits for the range [0, graph.size() - 2]. So the last bit is left to false.  The follows are the spec of java.util.BitSet.flip that I copied from its source code:

    /**
     * Sets each bit from the specified fromIndex(inclusive) to the
     * specified toIndex(exclusive) to the complement of its current
     * value.
     *
     * @param      fromIndex    index of the first bit to flip.
    * @param      toIndex index after the last bit to flip.
     * @exception IndexOutOfBoundsException if <tt> fromIndex </tt> is negative,
     *             or <tt> toIndex </tt> is negative, or <tt> fromIndex </tt> is
     *             larger than <tt> toIndex </tt> .
     * @since    1.4
     */



The consequence is that when you do intersection on two sets, the node indexed by the last bit is always ignored. A simple modification (i.e., fullSet .flip(0, graph .size());) fixed the problem. 

