diff --git a/tutorial/pldi03/examples/LiveVariablesAnalysis.html b/tutorial/pldi03/examples/LiveVariablesAnalysis.html
index eb970a5..732f577 100644
--- a/tutorial/pldi03/examples/LiveVariablesAnalysis.html
+++ b/tutorial/pldi03/examples/LiveVariablesAnalysis.html
@@ -43 +43 @@
-            if (value instanceof Local)
+            <FONT COLOR=Purple>if</FONT> (value <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>Local</FONT>)
@@ -47,6 +47,6 @@
-        // Add gen set
-        boxIt = s.getUseBoxes().iterator();
-        while (boxIt.hasNext()) {
-            ValueBox box = (ValueBox) boxIt.next();
-            Value value = box.getValue();
-            if (value instanceof Local)
+        <FONT COLOR=Firebrick>// Add gen set
+</FONT>        boxIt = s.getUseBoxes().iterator();
+        <FONT COLOR=Purple>while</FONT> (boxIt.hasNext()) {
+            <FONT COLOR=ForestGreen>ValueBox</FONT> <FONT COLOR=DarkGoldenrod>box</FONT> = (<FONT COLOR=ForestGreen>ValueBox</FONT>) boxIt.next();
+            <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>value</FONT> = box.getValue();
+            <FONT COLOR=Purple>if</FONT> (value <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>Local</FONT>)
@@ -57 +57 @@
-    protected Object entryInitialFlow()
+    <FONT COLOR=Purple>protected</FONT> <FONT COLOR=ForestGreen>Object</FONT> <FONT COLOR=Blue>entryInitialFlow</FONT>()
@@ -59 +59 @@
-        return new ArraySparseSet();
+        <FONT COLOR=Purple>return</FONT> <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>ArraySparseSet</FONT>();
@@ -62 +62 @@
-    protected Object newInitialFlow()
+    <FONT COLOR=Purple>protected</FONT> <FONT COLOR=ForestGreen>Object</FONT> <FONT COLOR=Blue>newInitialFlow</FONT>()
@@ -64 +64 @@
-        return new ArraySparseSet();
+        <FONT COLOR=Purple>return</FONT> <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>ArraySparseSet</FONT>();
@@ -67 +67 @@
-    LiveVariablesAnalysis(DirectedGraph g)
+    <FONT COLOR=ForestGreen>LiveVariablesAnalysis</FONT>(<FONT COLOR=ForestGreen>DirectedGraph</FONT> <FONT COLOR=DarkGoldenrod>g</FONT>)
@@ -69 +69 @@
-        super(g);
+        <FONT COLOR=Purple>super</FONT>(g);
diff --git a/tutorial/pldi03/examples/Main.html b/tutorial/pldi03/examples/Main.html
new file mode 100644
index 0000000..66a9ba7
--- /dev/null
+++ b/tutorial/pldi03/examples/Main.html
@@ -0,0 +1,8 @@
+<HTML> <HEAD> <TITLE>Main.java</TITLE> </HEAD> <BODY> <PRE> 
+<FONT COLOR=Purple>class</FONT> <FONT COLOR=ForestGreen>Main</FONT> {
+  <FONT COLOR=Purple>public</FONT> <FONT COLOR=Purple>static</FONT> <FONT COLOR=ForestGreen>void</FONT> <FONT COLOR=Blue>main</FONT>(<FONT COLOR=ForestGreen>String</FONT>[] <FONT COLOR=DarkGoldenrod>args</FONT>) {
+    soot.G.v().<FONT COLOR=ForestGreen>PackManager</FONT>().getPack(<FONT COLOR=RosyBrown>"tag"</FONT>).add(<FONT COLOR=Purple>new</FONT> soot.<FONT COLOR=ForestGreen>Transform</FONT>(<FONT COLOR=RosyBrown>"tag.null"</FONT>, <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>NullTagAggregator</FONT>()));
+	soot.Main.main(args);
+  }
+}
+</PRE> </BODY> </HTML>
\ No newline at end of file
diff --git a/tutorial/pldi03/examples/NullExample.html b/tutorial/pldi03/examples/NullExample.html
new file mode 100644
index 0000000..48efe1d
--- /dev/null
+++ b/tutorial/pldi03/examples/NullExample.html
@@ -0,0 +1,16 @@
+<HTML> <HEAD> <TITLE>NullExample.java</TITLE> </HEAD> <BODY> <PRE> 
+<FONT COLOR=Purple>public</FONT> <FONT COLOR=Purple>class</FONT> <FONT COLOR=ForestGreen>NullExample</FONT>
+{
+    <FONT COLOR=ForestGreen>int</FONT> <FONT COLOR=Blue>foo</FONT>(<FONT COLOR=ForestGreen>Object</FONT> <FONT COLOR=DarkGoldenrod>o</FONT>, <FONT COLOR=ForestGreen>String</FONT> <FONT COLOR=DarkGoldenrod>p</FONT>)
+    {
+        <FONT COLOR=Purple>if</FONT> (o == <FONT COLOR=CadetBlue>null</FONT>)
+        {
+            <FONT COLOR=Purple>return</FONT> 2;
+        }
+        <FONT COLOR=ForestGreen>int</FONT> <FONT COLOR=DarkGoldenrod>i</FONT> = 2;
+        i += p.length();
+        System.out.println(p);
+        <FONT COLOR=Purple>return</FONT> 4;
+    }
+}
+</PRE> </BODY> </HTML>
\ No newline at end of file
diff --git a/tutorial/pldi03/examples/NullTagAggregator.html b/tutorial/pldi03/examples/NullTagAggregator.html
new file mode 100644
index 0000000..21acb70
--- /dev/null
+++ b/tutorial/pldi03/examples/NullTagAggregator.html
@@ -0,0 +1,32 @@
+<HTML> <HEAD> <TITLE>NullTagAggregator.java</TITLE> </HEAD> <BODY> <PRE> 
+<FONT COLOR=Purple>import</FONT> <FONT COLOR=CadetBlue>soot</FONT>.<FONT COLOR=CadetBlue>*</FONT>;
+<FONT COLOR=Purple>import</FONT> <FONT COLOR=CadetBlue>java</FONT>.<FONT COLOR=CadetBlue>util</FONT>.<FONT COLOR=CadetBlue>*</FONT>;
+<FONT COLOR=Purple>import</FONT> <FONT COLOR=CadetBlue>soot</FONT>.<FONT COLOR=CadetBlue>baf</FONT>.<FONT COLOR=CadetBlue>*</FONT>;
+
+<FONT COLOR=Purple>import</FONT> <FONT COLOR=CadetBlue>soot</FONT>.<FONT COLOR=CadetBlue>tagkit</FONT>.<FONT COLOR=CadetBlue>*</FONT>;
+<FONT COLOR=Purple>import</FONT> <FONT COLOR=CadetBlue>soot</FONT>.<FONT COLOR=CadetBlue>jimple</FONT>.<FONT COLOR=CadetBlue>toolkits</FONT>.<FONT COLOR=CadetBlue>annotation</FONT>.<FONT COLOR=CadetBlue>tags</FONT>.<FONT COLOR=CadetBlue>NullCheckTag</FONT>;
+
+<FONT COLOR=Firebrick>/** The aggregator for NullCheckAttribute. */</FONT>
+
+<FONT COLOR=Purple>public</FONT> <FONT COLOR=Purple>class</FONT> <FONT COLOR=ForestGreen>NullTagAggregator</FONT> <FONT COLOR=Purple>extends</FONT> <FONT COLOR=ForestGreen>ImportantTagAggregator</FONT>
+{    
+    <FONT COLOR=Purple>public</FONT> <FONT COLOR=ForestGreen>NullTagAggregator</FONT>() {}
+
+    <FONT COLOR=Purple>public</FONT> <FONT COLOR=ForestGreen>boolean</FONT> <FONT COLOR=Blue>wantTag</FONT>( <FONT COLOR=ForestGreen>Tag</FONT> <FONT COLOR=DarkGoldenrod>t</FONT> ) {
+	<FONT COLOR=Purple>return</FONT> (t <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>NullCheckTag</FONT>);
+    }
+    
+    <FONT COLOR=Purple>public</FONT> <FONT COLOR=ForestGreen>String</FONT> <FONT COLOR=Blue>aggregatedName</FONT>()
+    {
+        <FONT COLOR=Purple>return</FONT> <FONT COLOR=RosyBrown>"NullCheckAttribute"</FONT>; 
+    }
+}
+
+
+
+
+
+
+
+
+</PRE> </BODY> </HTML>
\ No newline at end of file
diff --git a/tutorial/pldi03/examples/NullnessAnalysis.html b/tutorial/pldi03/examples/NullnessAnalysis.html
index a1c2107..f631885 100644
--- a/tutorial/pldi03/examples/NullnessAnalysis.html
+++ b/tutorial/pldi03/examples/NullnessAnalysis.html
@@ -10,0 +11 @@
+ * Author: Patrick Lam (plam@sable.mcgill.ca)
@@ -39,3 +40,3 @@
-        FlowSet dest;
-        FlowSet src  = (FlowSet) srcValue;
-        Unit    s    = (Unit)    unit;
+        <FONT COLOR=ForestGreen>FlowSet</FONT> <FONT COLOR=DarkGoldenrod>dest</FONT>;
+        <FONT COLOR=ForestGreen>FlowSet</FONT> <FONT COLOR=DarkGoldenrod>src</FONT>  = (<FONT COLOR=ForestGreen>FlowSet</FONT>) srcValue;
+        <FONT COLOR=ForestGreen>Unit</FONT>    <FONT COLOR=DarkGoldenrod>s</FONT>    = (<FONT COLOR=ForestGreen>Unit</FONT>)    unit;
@@ -43,2 +44,2 @@
-        // Create working set.
-        dest = (FlowSet)src.clone();
+        <FONT COLOR=Firebrick>// Create working set.
+</FONT>        dest = (<FONT COLOR=ForestGreen>FlowSet</FONT>)src.clone();
@@ -46,7 +47,7 @@
-        // Take out kill set.
-        Iterator boxIt = s.getDefBoxes().iterator();
-        while (boxIt.hasNext()) {
-            ValueBox box = (ValueBox) boxIt.next();
-            Value value = box.getValue();
-            if (value instanceof Local &amp;&amp; 
-                    isRefOrArrayType(value.getType()))
+        <FONT COLOR=Firebrick>// Take out kill set.
+</FONT>        <FONT COLOR=ForestGreen>Iterator</FONT> <FONT COLOR=DarkGoldenrod>boxIt</FONT> = s.getDefBoxes().iterator();
+        <FONT COLOR=Purple>while</FONT> (boxIt.hasNext()) {
+            <FONT COLOR=ForestGreen>ValueBox</FONT> <FONT COLOR=DarkGoldenrod>box</FONT> = (<FONT COLOR=ForestGreen>ValueBox</FONT>) boxIt.next();
+            <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>value</FONT> = box.getValue();
+            <FONT COLOR=Purple>if</FONT> (value <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>Local</FONT> &amp;&amp; 
+                    value.getType() <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>RefLikeType</FONT>)
@@ -56,2 +57,2 @@
-        // Perform gen.
-        dest.union((FlowSet)unitToGenerateSet.get(unit), dest);
+        <FONT COLOR=Firebrick>// Perform gen.
+</FONT>        dest.union((<FONT COLOR=ForestGreen>FlowSet</FONT>)unitToGenerateSet.get(unit), dest);
@@ -59,3 +60,3 @@
-        // Handle copy statements: 
-        //    x = y &amp;&amp; 'y' in src =&gt; add 'x' to dest
-        if (s instanceof DefinitionStmt)
+        <FONT COLOR=Firebrick>// Handle copy statements: 
+</FONT>        <FONT COLOR=Firebrick>//    x = y &amp;&amp; 'y' in src =&gt; add 'x' to dest
+</FONT>        <FONT COLOR=Purple>if</FONT> (s <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>DefinitionStmt</FONT>)
@@ -63 +64 @@
-            DefinitionStmt as = (DefinitionStmt) s;
+            <FONT COLOR=ForestGreen>DefinitionStmt</FONT> <FONT COLOR=DarkGoldenrod>as</FONT> = (<FONT COLOR=ForestGreen>DefinitionStmt</FONT>) s;
@@ -65 +66 @@
-            Value ro = as.getRightOp();
+            <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>ro</FONT> = as.getRightOp();
@@ -67,3 +68,3 @@
-            // extract cast argument
-            if (ro instanceof CastExpr)
-                ro = ((CastExpr) ro).getOp();
+            <FONT COLOR=Firebrick>// extract cast argument
+</FONT>            <FONT COLOR=Purple>if</FONT> (ro <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>CastExpr</FONT>)
+                ro = ((<FONT COLOR=ForestGreen>CastExpr</FONT>) ro).getOp();
@@ -71,2 +72,2 @@
-            if (src.contains(ro) &amp;&amp;
-                  as.getLeftOp() instanceof Local)
+            <FONT COLOR=Purple>if</FONT> (src.contains(ro) &amp;&amp;
+                  as.getLeftOp() <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>Local</FONT>)
@@ -76,5 +77,5 @@
-        // Copy the out value to all branch boxes.
-        {
-            Iterator it = fallOut.iterator();
-            while (it.hasNext()) {
-                FlowSet fs = (FlowSet) (it.next());
+        <FONT COLOR=Firebrick>// Copy the out value to all branch boxes.
+</FONT>        {
+            <FONT COLOR=ForestGreen>Iterator</FONT> <FONT COLOR=DarkGoldenrod>it</FONT> = fallOut.iterator();
+            <FONT COLOR=Purple>while</FONT> (it.hasNext()) {
+                <FONT COLOR=ForestGreen>FlowSet</FONT> <FONT COLOR=DarkGoldenrod>fs</FONT> = (<FONT COLOR=ForestGreen>FlowSet</FONT>) (it.next());
@@ -85,5 +86,5 @@
-        // Copy the out value to the fallthrough box (don't need iterator)
-        {
-            Iterator it = branchOuts.iterator();
-            while (it.hasNext()) {
-                FlowSet fs = (FlowSet) (it.next());
+        <FONT COLOR=Firebrick>// Copy the out value to the fallthrough box (don't need iterator)
+</FONT>        {
+            <FONT COLOR=ForestGreen>Iterator</FONT> <FONT COLOR=DarkGoldenrod>it</FONT> = branchOuts.iterator();
+            <FONT COLOR=Purple>while</FONT> (it.hasNext()) {
+                <FONT COLOR=ForestGreen>FlowSet</FONT> <FONT COLOR=DarkGoldenrod>fs</FONT> = (<FONT COLOR=ForestGreen>FlowSet</FONT>) (it.next());
@@ -94,2 +95,2 @@
-        // Handle if statements by patching dest sets.
-        if (unit instanceof IfStmt)
+        <FONT COLOR=Firebrick>// Handle if statements by patching dest sets.
+</FONT>        <FONT COLOR=Purple>if</FONT> (unit <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>IfStmt</FONT>)
@@ -97,5 +98,5 @@
-            Value cond = ((IfStmt)unit).getCondition();
-            Value op1 = ((BinopExpr) cond).getOp1();
-            Value op2 = ((BinopExpr) cond).getOp2();
-            boolean isNeg = cond instanceof NeExpr;
-            Value toGen = null;
+            <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>cond</FONT> = ((<FONT COLOR=ForestGreen>IfStmt</FONT>)unit).getCondition();
+            <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>op1</FONT> = ((<FONT COLOR=ForestGreen>BinopExpr</FONT>) cond).getOp1();
+            <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>op2</FONT> = ((<FONT COLOR=ForestGreen>BinopExpr</FONT>) cond).getOp2();
+            <FONT COLOR=ForestGreen>boolean</FONT> <FONT COLOR=DarkGoldenrod>isNeg</FONT> = cond <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>NeExpr</FONT>;
+            <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>toGen</FONT> = <FONT COLOR=CadetBlue>null</FONT>;
@@ -103,3 +104,3 @@
-            // case 1: opN is a local and opM is NullConstant
-            //          =&gt; opN nonnull on ne branch.
-            if (op1 instanceof Local &amp;&amp; op2 instanceof NullConstant)
+            <FONT COLOR=Firebrick>// case 1: opN is a local and opM is NullConstant
+</FONT>            <FONT COLOR=Firebrick>//          =&gt; opN nonnull on ne branch.
+</FONT>            <FONT COLOR=Purple>if</FONT> (op1 <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>Local</FONT> &amp;&amp; op2 <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>NullConstant</FONT>)
@@ -108 +109 @@
-            if (op2 instanceof Local &amp;&amp; op1 instanceof NullConstant)
+            <FONT COLOR=Purple>if</FONT> (op2 <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>Local</FONT> &amp;&amp; op1 <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>NullConstant</FONT>)
@@ -111 +112 @@
-            if (toGen != null)
+            <FONT COLOR=Purple>if</FONT> (toGen != <FONT COLOR=CadetBlue>null</FONT>)
@@ -113 +114 @@
-                Iterator it = null;
+                <FONT COLOR=ForestGreen>Iterator</FONT> <FONT COLOR=DarkGoldenrod>it</FONT> = <FONT COLOR=CadetBlue>null</FONT>;
@@ -115,2 +116,2 @@
-                // if (toGen != null) goto l1: on branch, toGen nonnull.
-                if (isNeg)
+                <FONT COLOR=Firebrick>// if (toGen != null) goto l1: on branch, toGen nonnull.
+</FONT>                <FONT COLOR=Purple>if</FONT> (isNeg)
@@ -118 +119 @@
-                else
+                <FONT COLOR=Purple>else</FONT>
@@ -121,2 +122,2 @@
-                while(it.hasNext()) {
-                    FlowSet fs = (FlowSet) (it.next());
+                <FONT COLOR=Purple>while</FONT>(it.hasNext()) {
+                    <FONT COLOR=ForestGreen>FlowSet</FONT> <FONT COLOR=DarkGoldenrod>fs</FONT> = (<FONT COLOR=ForestGreen>FlowSet</FONT>) (it.next());
@@ -127,3 +128,3 @@
-            // case 2: both ops are local and one op is non-null and testing equality
-            if (op1 instanceof Local &amp;&amp; op2 instanceof Local &amp;&amp; 
-                cond instanceof EqExpr)
+            <FONT COLOR=Firebrick>// case 2: both ops are local and one op is non-null and testing equality
+</FONT>            <FONT COLOR=Purple>if</FONT> (op1 <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>Local</FONT> &amp;&amp; op2 <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>Local</FONT> &amp;&amp; 
+                cond <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>EqExpr</FONT>)
@@ -131 +132 @@
-                toGen = null;
+                toGen = <FONT COLOR=CadetBlue>null</FONT>;
@@ -133 +134 @@
-                if (src.contains(op1))
+                <FONT COLOR=Purple>if</FONT> (src.contains(op1))
@@ -135 +136 @@
-                if (src.contains(op2))
+                <FONT COLOR=Purple>if</FONT> (src.contains(op2))
@@ -138 +139 @@
-                if (toGen != null)
+                <FONT COLOR=Purple>if</FONT> (toGen != <FONT COLOR=CadetBlue>null</FONT>)
@@ -140,3 +141,3 @@
-                    Iterator branchIt = branchOuts.iterator();
-                    while (branchIt.hasNext()) {
-                        FlowSet fs = (FlowSet) (branchIt.next());
+                    <FONT COLOR=ForestGreen>Iterator</FONT> <FONT COLOR=DarkGoldenrod>branchIt</FONT> = branchOuts.iterator();
+                    <FONT COLOR=Purple>while</FONT> (branchIt.hasNext()) {
+                        <FONT COLOR=ForestGreen>FlowSet</FONT> <FONT COLOR=DarkGoldenrod>fs</FONT> = (<FONT COLOR=ForestGreen>FlowSet</FONT>) (branchIt.next());
@@ -150 +151 @@
-    protected Object newInitialFlow()
+    <FONT COLOR=Purple>protected</FONT> <FONT COLOR=ForestGreen>Object</FONT> <FONT COLOR=Blue>newInitialFlow</FONT>()
@@ -152 +153 @@
-        return fullSet.clone();
+        <FONT COLOR=Purple>return</FONT> fullSet.clone();
@@ -155 +156 @@
-    protected Object entryInitialFlow()
+    <FONT COLOR=Purple>protected</FONT> <FONT COLOR=ForestGreen>Object</FONT> <FONT COLOR=Blue>entryInitialFlow</FONT>()
@@ -157,2 +158,2 @@
-        // everything could be null
-        return emptySet.clone();
+        <FONT COLOR=Firebrick>// everything could be null
+</FONT>        <FONT COLOR=Purple>return</FONT> emptySet.clone();
@@ -161 +162 @@
-    private void addGen(Unit u, Value v)
+    <FONT COLOR=Purple>private</FONT> <FONT COLOR=ForestGreen>void</FONT> <FONT COLOR=Blue>addGen</FONT>(<FONT COLOR=ForestGreen>Unit</FONT> <FONT COLOR=DarkGoldenrod>u</FONT>, <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>v</FONT>)
@@ -163 +164 @@
-        ArraySparseSet l = (ArraySparseSet)unitToGenerateSet.get(u);
+        <FONT COLOR=ForestGreen>ArraySparseSet</FONT> <FONT COLOR=DarkGoldenrod>l</FONT> = (<FONT COLOR=ForestGreen>ArraySparseSet</FONT>)unitToGenerateSet.get(u);
@@ -167 +168 @@
-    private void addGensFor(DefinitionStmt u)
+    <FONT COLOR=Purple>private</FONT> <FONT COLOR=ForestGreen>void</FONT> <FONT COLOR=Blue>addGensFor</FONT>(<FONT COLOR=ForestGreen>DefinitionStmt</FONT> <FONT COLOR=DarkGoldenrod>u</FONT>)
@@ -169,2 +170,2 @@
-        Value lo = u.getLeftOp();
-        Value ro = u.getRightOp();
+        <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>lo</FONT> = u.getLeftOp();
+        <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>ro</FONT> = u.getRightOp();
@@ -172,5 +173,5 @@
-        if (ro instanceof NewExpr ||
-             ro instanceof NewArrayExpr ||
-             ro instanceof NewMultiArrayExpr ||
-             ro instanceof ThisRef ||
-             ro instanceof CaughtExceptionRef)
+        <FONT COLOR=Purple>if</FONT> (ro <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>NewExpr</FONT> ||
+             ro <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>NewArrayExpr</FONT> ||
+             ro <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>NewMultiArrayExpr</FONT> ||
+             ro <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>ThisRef</FONT> ||
+             ro <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>CaughtExceptionRef</FONT>)
@@ -180 +181 @@
-    public NullnessAnalysis(UnitGraph g)
+    <FONT COLOR=Purple>public</FONT> <FONT COLOR=ForestGreen>NullnessAnalysis</FONT>(<FONT COLOR=ForestGreen>UnitGraph</FONT> <FONT COLOR=DarkGoldenrod>g</FONT>)
@@ -182 +183 @@
-        super(g);
+        <FONT COLOR=Purple>super</FONT>(g);
@@ -184 +185 @@
-        unitToGenerateSet = new HashMap();
+        unitToGenerateSet = <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>HashMap</FONT>();
@@ -186 +187 @@
-        Body b = g.getBody();
+        <FONT COLOR=ForestGreen>Body</FONT> <FONT COLOR=DarkGoldenrod>b</FONT> = g.getBody();
@@ -188 +189 @@
-        List refLocals = new LinkedList();
+        <FONT COLOR=ForestGreen>List</FONT> <FONT COLOR=DarkGoldenrod>refLocals</FONT> = <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>LinkedList</FONT>();
@@ -190 +191,4 @@
-        // set up universe, empty, full sets.
+        <FONT COLOR=Firebrick>// set up universe, empty, full sets.
+</FONT>
+        emptySet = <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>ArraySparseSet</FONT>();
+        fullSet = <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>ArraySparseSet</FONT>();
@@ -192,6 +196,3 @@
-        emptySet = new ArraySparseSet();
-        fullSet = new ArraySparseSet();
-
-        // Find all locals in body.
-        Iterator localIt = b.getLocals().iterator();
-        while (localIt.hasNext())
+        <FONT COLOR=Firebrick>// Find all locals in body.
+</FONT>        <FONT COLOR=ForestGreen>Iterator</FONT> <FONT COLOR=DarkGoldenrod>localIt</FONT> = b.getLocals().iterator();
+        <FONT COLOR=Purple>while</FONT> (localIt.hasNext())
@@ -199,2 +200,2 @@
-            Local l = (Local)localIt.next();
-            if (isRefOrArrayType(l.getType()))
+            <FONT COLOR=ForestGreen>Local</FONT> <FONT COLOR=DarkGoldenrod>l</FONT> = (<FONT COLOR=ForestGreen>Local</FONT>)localIt.next();
+            <FONT COLOR=Purple>if</FONT> (l.getType() <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>RefLikeType</FONT>)
@@ -204,3 +205,3 @@
-        // Create gen sets.
-        Iterator unitIt = b.getUnits().iterator();
-        while (unitIt.hasNext())
+        <FONT COLOR=Firebrick>// Create gen sets.
+</FONT>        <FONT COLOR=ForestGreen>Iterator</FONT> <FONT COLOR=DarkGoldenrod>unitIt</FONT> = b.getUnits().iterator();
+        <FONT COLOR=Purple>while</FONT> (unitIt.hasNext())
@@ -208,2 +209,2 @@
-            Unit u = (Unit)unitIt.next();
-            unitToGenerateSet.put(u, new ArraySparseSet());
+            <FONT COLOR=ForestGreen>Unit</FONT> <FONT COLOR=DarkGoldenrod>u</FONT> = (<FONT COLOR=ForestGreen>Unit</FONT>)unitIt.next();
+            unitToGenerateSet.put(u, <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>ArraySparseSet</FONT>());
@@ -211 +212 @@
-            if (u instanceof DefinitionStmt)
+            <FONT COLOR=Purple>if</FONT> (u <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>DefinitionStmt</FONT>)
@@ -213,4 +214,4 @@
-                Value lo = ((DefinitionStmt)u).getLeftOp();
-                if (lo instanceof Local &amp;&amp; 
-                       isRefOrArrayType(lo.getType()))
-                    addGensFor((DefinitionStmt)u);
+                <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>lo</FONT> = ((<FONT COLOR=ForestGreen>DefinitionStmt</FONT>)u).getLeftOp();
+                <FONT COLOR=Purple>if</FONT> (lo <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>Local</FONT> &amp;&amp; 
+                       lo.getType() <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>RefLikeType</FONT>)
+                    addGensFor((<FONT COLOR=ForestGreen>DefinitionStmt</FONT>)u);
@@ -219,2 +220,2 @@
-            Iterator boxIt = u.getUseAndDefBoxes().iterator();
-            while (boxIt.hasNext())
+            <FONT COLOR=ForestGreen>Iterator</FONT> <FONT COLOR=DarkGoldenrod>boxIt</FONT> = u.getUseAndDefBoxes().iterator();
+            <FONT COLOR=Purple>while</FONT> (boxIt.hasNext())
@@ -222,2 +223,2 @@
-                Value boxValue = ((ValueBox) boxIt.next()).getValue();
-                Value base = null;
+                <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>boxValue</FONT> = ((<FONT COLOR=ForestGreen>ValueBox</FONT>) boxIt.next()).getValue();
+                <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>base</FONT> = <FONT COLOR=CadetBlue>null</FONT>;
@@ -225,12 +226,12 @@
-                if(boxValue instanceof InstanceFieldRef) {
-                    base = ((InstanceFieldRef) (boxValue)).getBase();
-                } else if (boxValue instanceof ArrayRef) {
-                    base = ((ArrayRef) (boxValue)).getBase();
-                } else if (boxValue instanceof InstanceInvokeExpr) {
-                    base = ((InstanceInvokeExpr) boxValue).getBase();
-                } else if (boxValue instanceof LengthExpr) {
-                    base = ((LengthExpr) boxValue).getOp();
-                } else if (u instanceof ThrowStmt) {
-                    base = ((ThrowStmt)u).getOp();
-                } else if (u instanceof MonitorStmt) {
-                    base = ((MonitorStmt)u).getOp();
+                <FONT COLOR=Purple>if</FONT>(boxValue <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>InstanceFieldRef</FONT>) {
+                    base = ((<FONT COLOR=ForestGreen>InstanceFieldRef</FONT>) (boxValue)).getBase();
+                } <FONT COLOR=Purple>else</FONT> <FONT COLOR=Purple>if</FONT> (boxValue <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>ArrayRef</FONT>) {
+                    base = ((<FONT COLOR=ForestGreen>ArrayRef</FONT>) (boxValue)).getBase();
+                } <FONT COLOR=Purple>else</FONT> <FONT COLOR=Purple>if</FONT> (boxValue <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>InstanceInvokeExpr</FONT>) {
+                    base = ((<FONT COLOR=ForestGreen>InstanceInvokeExpr</FONT>) boxValue).getBase();
+                } <FONT COLOR=Purple>else</FONT> <FONT COLOR=Purple>if</FONT> (boxValue <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>LengthExpr</FONT>) {
+                    base = ((<FONT COLOR=ForestGreen>LengthExpr</FONT>) boxValue).getOp();
+                } <FONT COLOR=Purple>else</FONT> <FONT COLOR=Purple>if</FONT> (u <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>ThrowStmt</FONT>) {
+                    base = ((<FONT COLOR=ForestGreen>ThrowStmt</FONT>)u).getOp();
+                } <FONT COLOR=Purple>else</FONT> <FONT COLOR=Purple>if</FONT> (u <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>MonitorStmt</FONT>) {
+                    base = ((<FONT COLOR=ForestGreen>MonitorStmt</FONT>)u).getOp();
@@ -239,3 +240,3 @@
-                if (base != null &amp;&amp; 
-                      base instanceof Local &amp;&amp; 
-                      isRefOrArrayType(base.getType()))
+                <FONT COLOR=Purple>if</FONT> (base != <FONT COLOR=CadetBlue>null</FONT> &amp;&amp; 
+                      base <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>Local</FONT> &amp;&amp; 
+                      base.getType() <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>RefLikeType</FONT>)
@@ -246,7 +247,2 @@
-        // Call superclass method to do work.
-        doAnalysis();
-    }
-
-    private boolean isRefOrArrayType(Type t)
-    {
-        return t instanceof RefType || t instanceof ArrayType;
+        <FONT COLOR=Firebrick>// Call superclass method to do work.
+</FONT>        doAnalysis();
diff --git a/tutorial/pldi03/examples/NullnessAnalysis.java b/tutorial/pldi03/examples/NullnessAnalysis.java
index 956283a..705fe53 100644
--- a/tutorial/pldi03/examples/NullnessAnalysis.java
+++ b/tutorial/pldi03/examples/NullnessAnalysis.java
@@ -10 +10 @@
- * @author Patrick Lam (plam@sable.mcgill.ca)
+ * Author: Patrick Lam (plam@sable.mcgill.ca)
diff --git a/tutorial/pldi03/examples/NullnessAnalysisColorer.html b/tutorial/pldi03/examples/NullnessAnalysisColorer.html
new file mode 100644
index 0000000..cfadad4
--- /dev/null
+++ b/tutorial/pldi03/examples/NullnessAnalysisColorer.html
@@ -0,0 +1,64 @@
+<HTML> <HEAD> <TITLE>NullnessAnalysisColorer.java</TITLE> </HEAD> <BODY> <PRE> 
+<FONT COLOR=Firebrick>/* Soot - a J*va Optimization Framework
+ * Copyright (C) 2003 Jennifer Lhotak
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */</FONT>
+
+<FONT COLOR=Purple>import</FONT> <FONT COLOR=CadetBlue>soot</FONT>.<FONT COLOR=CadetBlue>*</FONT>;
+<FONT COLOR=Purple>import</FONT> <FONT COLOR=CadetBlue>soot</FONT>.<FONT COLOR=CadetBlue>tagkit</FONT>.<FONT COLOR=CadetBlue>*</FONT>;
+<FONT COLOR=Purple>import</FONT> <FONT COLOR=CadetBlue>soot</FONT>.<FONT COLOR=CadetBlue>toolkits</FONT>.<FONT COLOR=CadetBlue>graph</FONT>.<FONT COLOR=CadetBlue>*</FONT>;
+<FONT COLOR=Purple>import</FONT> <FONT COLOR=CadetBlue>java</FONT>.<FONT COLOR=CadetBlue>util</FONT>.<FONT COLOR=CadetBlue>*</FONT>;
+<FONT COLOR=Purple>import</FONT> <FONT COLOR=CadetBlue>soot</FONT>.<FONT COLOR=CadetBlue>toolkits</FONT>.<FONT COLOR=CadetBlue>scalar</FONT>.<FONT COLOR=CadetBlue>*</FONT>;
+<FONT COLOR=Purple>import</FONT> <FONT COLOR=CadetBlue>soot</FONT>.<FONT COLOR=CadetBlue>jimple</FONT>.<FONT COLOR=CadetBlue>*</FONT>;
+
+<FONT COLOR=Purple>public</FONT> <FONT COLOR=Purple>class</FONT> <FONT COLOR=ForestGreen>NullnessAnalysisColorer</FONT> <FONT COLOR=Purple>extends</FONT> <FONT COLOR=ForestGreen>BodyTransformer</FONT> {
+    <FONT COLOR=Purple>protected</FONT> <FONT COLOR=ForestGreen>void</FONT> <FONT COLOR=Blue>internalTransform</FONT> (<FONT COLOR=ForestGreen>Body</FONT> <FONT COLOR=DarkGoldenrod>b</FONT>, <FONT COLOR=ForestGreen>String</FONT> <FONT COLOR=DarkGoldenrod>phaseName</FONT>, <FONT COLOR=ForestGreen>Map</FONT> <FONT COLOR=DarkGoldenrod>options</FONT>) {
+        <FONT COLOR=ForestGreen>NullnessAnalysis</FONT> <FONT COLOR=DarkGoldenrod>analysis</FONT> = <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>NullnessAnalysis</FONT>
+            (<FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>CompleteUnitGraph</FONT>(b));
+
+        <FONT COLOR=ForestGreen>Iterator</FONT> <FONT COLOR=DarkGoldenrod>it</FONT> = b.getUnits().iterator();
+
+        <FONT COLOR=Purple>while</FONT> (it.hasNext()) {
+            <FONT COLOR=ForestGreen>Stmt</FONT> <FONT COLOR=DarkGoldenrod>s</FONT> = (<FONT COLOR=ForestGreen>Stmt</FONT>)it.next();
+            
+            <FONT COLOR=ForestGreen>Iterator</FONT> <FONT COLOR=DarkGoldenrod>usesIt</FONT> = s.getUseBoxes().iterator();
+            <FONT COLOR=ForestGreen>FlowSet</FONT> <FONT COLOR=DarkGoldenrod>beforeSet</FONT> = (<FONT COLOR=ForestGreen>FlowSet</FONT>)analysis.getFlowBefore(s);
+                
+            <FONT COLOR=Purple>while</FONT> (usesIt.hasNext()) {
+                <FONT COLOR=ForestGreen>ValueBox</FONT> <FONT COLOR=DarkGoldenrod>vBox</FONT> = (<FONT COLOR=ForestGreen>ValueBox</FONT>)usesIt.next();
+                addColorTags(vBox, beforeSet, s, analysis);
+            }
+
+            <FONT COLOR=ForestGreen>Iterator</FONT> <FONT COLOR=DarkGoldenrod>defsIt</FONT> = s.getDefBoxes().iterator();
+            <FONT COLOR=ForestGreen>FlowSet</FONT> <FONT COLOR=DarkGoldenrod>afterSet</FONT> = (<FONT COLOR=ForestGreen>FlowSet</FONT>)analysis.getFallFlowAfter(s);
+
+            <FONT COLOR=Purple>while</FONT> (defsIt.hasNext()){
+                <FONT COLOR=ForestGreen>ValueBox</FONT> <FONT COLOR=DarkGoldenrod>vBox</FONT> = (<FONT COLOR=ForestGreen>ValueBox</FONT>)defsIt.next();
+                addColorTags(vBox, afterSet, s, analysis);
+            }
+        }
+    }
+    
+    <FONT COLOR=Purple>private</FONT> <FONT COLOR=ForestGreen>void</FONT> <FONT COLOR=Blue>addColorTags</FONT>(<FONT COLOR=ForestGreen>ValueBox</FONT> <FONT COLOR=DarkGoldenrod>vBox</FONT>, <FONT COLOR=ForestGreen>FlowSet</FONT> <FONT COLOR=DarkGoldenrod>set</FONT>, 
+                              <FONT COLOR=ForestGreen>Stmt</FONT> <FONT COLOR=DarkGoldenrod>s</FONT>, <FONT COLOR=ForestGreen>NullnessAnalysis</FONT> <FONT COLOR=DarkGoldenrod>analysis</FONT>) {
+        <FONT COLOR=ForestGreen>Value</FONT> <FONT COLOR=DarkGoldenrod>val</FONT> = vBox.getValue();
+        <FONT COLOR=Purple>if</FONT> (val.getType() <FONT COLOR=Purple>instanceof</FONT> <FONT COLOR=ForestGreen>RefLikeType</FONT> &amp;&amp;
+                ((<FONT COLOR=ForestGreen>ArraySparseSet</FONT>)set).contains(val))
+            vBox.addTag(<FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>ColorTag</FONT>(ColorTag.GREEN));
+    }
+}
+</PRE> </BODY> </HTML>
\ No newline at end of file
diff --git a/tutorial/pldi03/examples/NullnessDriver.html b/tutorial/pldi03/examples/NullnessDriver.html
index d7ab3f8..4ca06b1 100644
--- a/tutorial/pldi03/examples/NullnessDriver.html
+++ b/tutorial/pldi03/examples/NullnessDriver.html
@@ -18,2 +18,3 @@
-        <FONT COLOR=ForestGreen>Pack</FONT> <FONT COLOR=DarkGoldenrod>jtp</FONT> = soot.G.v().<FONT COLOR=ForestGreen>PackManager</FONT>().v().getPack(<FONT COLOR=RosyBrown>"jtp"</FONT>);
-        jtp.add(<FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>Transform</FONT>(<FONT COLOR=RosyBrown>"jtp"</FONT>, <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>NullTransformer</FONT>()));
+        <FONT COLOR=ForestGreen>Pack</FONT> <FONT COLOR=DarkGoldenrod>jtp</FONT> = soot.G.v().<FONT COLOR=ForestGreen>PackManager</FONT>().getPack(<FONT COLOR=RosyBrown>"jtp"</FONT>);
+        jtp.add(<FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>Transform</FONT>(<FONT COLOR=RosyBrown>"jtp.nt"</FONT>, <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>NullTransformer</FONT>()));
+        jtp.add(<FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>Transform</FONT>(<FONT COLOR=RosyBrown>"jtp.nac"</FONT>, <FONT COLOR=Purple>new</FONT> <FONT COLOR=ForestGreen>NullnessAnalysisColorer</FONT>()));
diff --git a/tutorial/pldi03/examples/foo.html b/tutorial/pldi03/examples/foo.html
new file mode 100644
index 0000000..48ff160
--- /dev/null
+++ b/tutorial/pldi03/examples/foo.html
@@ -0,0 +1,14 @@
+<HTML> <HEAD> <TITLE>foo.java</TITLE> </HEAD> <BODY> <PRE> 
+<FONT COLOR=Purple>class</FONT> <FONT COLOR=ForestGreen>foo</FONT> {
+  <FONT COLOR=Purple>public</FONT> <FONT COLOR=ForestGreen>void</FONT> <FONT COLOR=Blue>sum</FONT>(<FONT COLOR=ForestGreen>int</FONT>[] <FONT COLOR=DarkGoldenrod>a</FONT>) {
+	<FONT COLOR=ForestGreen>int</FONT> <FONT COLOR=DarkGoldenrod>total</FONT> = 0;
+	<FONT COLOR=ForestGreen>int</FONT> <FONT COLOR=DarkGoldenrod>i</FONT>=0;
+	<FONT COLOR=ForestGreen>int</FONT> <FONT COLOR=DarkGoldenrod>b</FONT> = a[0];
+
+	<FONT COLOR=Purple>for</FONT> (i=0; i&lt;a.length; i++) {
+	  total += a[i];
+	}
+	<FONT COLOR=ForestGreen>int</FONT> <FONT COLOR=DarkGoldenrod>c</FONT> = a[i];
+  }
+}
+</PRE> </BODY> </HTML>
\ No newline at end of file

