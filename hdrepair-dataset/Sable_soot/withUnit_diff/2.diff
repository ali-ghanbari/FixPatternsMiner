diff --git a/tests/soot/asm/backend/AbstractASMBackendTestWithSources.java b/tests/soot/asm/backend/AbstractASMBackendTestWithSources.java
index 7070acb..60ba2dd 100644
--- a/tests/soot/asm/backend/AbstractASMBackendTestWithSources.java
+++ b/tests/soot/asm/backend/AbstractASMBackendTestWithSources.java
@@ -57,0 +58 @@
+			"-keep-line-number",
diff --git a/tests/soot/asm/backend/AnnotatedAnnotatedClassTest.java b/tests/soot/asm/backend/AnnotatedAnnotatedClassTest.java
index f661539..3bed840 100644
--- a/tests/soot/asm/backend/AnnotatedAnnotatedClassTest.java
+++ b/tests/soot/asm/backend/AnnotatedAnnotatedClassTest.java
@@ -22 +22,2 @@
-		cw.visit(V1_5, ACC_PUBLIC + ACC_SUPER, "pkg/AnnotatedAnnotatedClass", null, "java/lang/Object", null);
+		cw.visit(V1_5, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/AnnotatedAnnotatedClass",
+				null, "java/lang/Object", null);
@@ -25 +26 @@
-		av0 = cw.visitAnnotation("Lpkg/MyAnnotatedAnnotation;", false);
+		av0 = cw.visitAnnotation("Lsoot/asm/backend/targets/MyAnnotatedAnnotation;", false);
@@ -27 +28 @@
-		AnnotationVisitor av1 = av0.visitAnnotation("value", "Lpkg/MyTestAnnotation;");
+		AnnotationVisitor av1 = av0.visitAnnotation("value", "Lsoot/asm/backend/targets/MyTestAnnotation;");
@@ -36 +37 @@
-		av1.visit("rVal", Type.getType("Lpkg/AnnotatedClass;"));
+		av1.visit("rVal", Type.getType("Lsoot/asm/backend/targets/AnnotatedClass;"));
@@ -70 +71 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -75 +76 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/AnnotatedAnnotationTest.java b/tests/soot/asm/backend/AnnotatedAnnotationTest.java
index 2fc7a77..c180538 100644
--- a/tests/soot/asm/backend/AnnotatedAnnotationTest.java
+++ b/tests/soot/asm/backend/AnnotatedAnnotationTest.java
@@ -19 +19,3 @@
-		cw.visit(V1_5, ACC_PUBLIC + ACC_ANNOTATION + ACC_ABSTRACT + ACC_INTERFACE, "pkg/MyAnnotatedAnnotation", null, "java/lang/Object", new String[] { "java/lang/annotation/Annotation" }); //TODO V1_1 seems wrong here
+		cw.visit(V1_5, ACC_PUBLIC + ACC_ANNOTATION + ACC_ABSTRACT + ACC_INTERFACE,
+				"soot/asm/backend/targets/MyAnnotatedAnnotation", null,
+				"java/lang/Object", new String[] { "java/lang/annotation/Annotation" }); //TODO V1_1 seems wrong here
@@ -23 +25,2 @@
-		mv = cw.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "()Lpkg/MyTestAnnotation;", null, null);
+		mv = cw.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value",
+				"()Lsoot/asm/backend/targets/MyTestAnnotation;", null, null);
@@ -37 +40 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -42 +45 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/AnnotatedClassTest.java b/tests/soot/asm/backend/AnnotatedClassTest.java
index 8f0b3b1..a2db8a7 100644
--- a/tests/soot/asm/backend/AnnotatedClassTest.java
+++ b/tests/soot/asm/backend/AnnotatedClassTest.java
@@ -21 +21,2 @@
-		cw.visit(V1_5, ACC_PUBLIC + ACC_SUPER, "pkg/AnnotatedClass", null, "java/lang/Object", null);
+		cw.visit(V1_5, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/AnnotatedClass",
+				null, "java/lang/Object", null);
@@ -26 +27 @@
-		av0 = cw.visitAnnotation("Lpkg/MyTestAnnotation;", true);
+		av0 = cw.visitAnnotation("Lsoot/asm/backend/targets/MyTestAnnotation;", true);
@@ -35 +36 @@
-		av0.visit("rVal", Type.getType("Lpkg/AnnotatedClass;"));
+		av0.visit("rVal", Type.getType("Lsoot/asm/backend/targets/AnnotatedClass;"));
@@ -66 +67 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -71 +72 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/AnnotatedFieldTest.java b/tests/soot/asm/backend/AnnotatedFieldTest.java
index e451be4..d0d6460 100644
--- a/tests/soot/asm/backend/AnnotatedFieldTest.java
+++ b/tests/soot/asm/backend/AnnotatedFieldTest.java
@@ -24 +24,2 @@
-		cw.visit(V1_8, ACC_PUBLIC + ACC_SUPER, "pkg/AnnotatedField", null, "java/lang/Object", null);
+		cw.visit(V1_8, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/AnnotatedField",
+				null, "java/lang/Object", null);
@@ -30 +31 @@
-		av0 = fv.visitAnnotation("Lpkg/MyTestAnnotation;", true);
+		av0 = fv.visitAnnotation("Lsoot/asm/backend/targets/MyTestAnnotation;", true);
@@ -39 +40 @@
-		av0.visit("rVal", Type.getType("Lpkg/AnnotatedClass;"));
+		av0.visit("rVal", Type.getType("Lsoot/asm/backend/targets/AnnotatedClass;"));
@@ -73 +74 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -78 +79 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/AnnotatedMethodTest.java b/tests/soot/asm/backend/AnnotatedMethodTest.java
index 286cbea..327fea4 100644
--- a/tests/soot/asm/backend/AnnotatedMethodTest.java
+++ b/tests/soot/asm/backend/AnnotatedMethodTest.java
@@ -23 +23,2 @@
-		cw.visit(V1_5, ACC_PUBLIC + ACC_SUPER, "pkg/AnnotatedMethod", null, "java/lang/Object", null);
+		cw.visit(V1_5, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/AnnotatedMethod",
+				null, "java/lang/Object", null);
@@ -38 +39 @@
-		av0 = mv.visitAnnotation("Lpkg/MyTestAnnotation;", true);
+		av0 = mv.visitAnnotation("Lsoot/asm/backend/targets/MyTestAnnotation;", true);
@@ -47 +48 @@
-		av0.visit("rVal", Type.getType("Lpkg/AnnotatedClass;"));
+		av0.visit("rVal", Type.getType("Lsoot/asm/backend/targets/AnnotatedClass;"));
@@ -75 +76 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -80 +81 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/AnnotatedParameterTest.java b/tests/soot/asm/backend/AnnotatedParameterTest.java
index 3132dc8..f852efa 100644
--- a/tests/soot/asm/backend/AnnotatedParameterTest.java
+++ b/tests/soot/asm/backend/AnnotatedParameterTest.java
@@ -22 +22,3 @@
-		cw.visit(V1_5, ACC_PUBLIC + ACC_SUPER, "pkg/AnnotatedParameter", null, "java/lang/Object", null);
+		cw.visit(V1_5, ACC_PUBLIC + ACC_SUPER,
+				"soot/asm/backend/targets/AnnotatedParameter",
+				null, "java/lang/Object", null);
@@ -37 +39 @@
-		av0 = mv.visitParameterAnnotation(0, "Lpkg/MyTestAnnotation;", true);
+		av0 = mv.visitParameterAnnotation(0, "Lsoot/asm/backend/targets/MyTestAnnotation;", true);
@@ -46 +48 @@
-		av0.visit("rVal", Type.getType("Lpkg/AnnotatedClass;"));
+		av0.visit("rVal", Type.getType("Lsoot/asm/backend/targets/AnnotatedClass;"));
@@ -75 +77 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -80 +82 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/AnnotationTest.java b/tests/soot/asm/backend/AnnotationTest.java
index 32dffc6..8ebaaad 100644
--- a/tests/soot/asm/backend/AnnotationTest.java
+++ b/tests/soot/asm/backend/AnnotationTest.java
@@ -21 +21 @@
-				+ ACC_INTERFACE, "pkg/MyTestAnnotation", null,
+				+ ACC_INTERFACE, "soot/asm/backend/targets/MyTestAnnotation", null,
@@ -65 +65,2 @@
-		mv = cw.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "rVal", "()Ljava/lang/Class;", "()Ljava/lang/Class<Lpkg/AnnotatedClass;>;", null);
+		mv = cw.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "rVal", "()Ljava/lang/Class;",
+				"()Ljava/lang/Class<Lsoot/asm/backend/targets/AnnotatedClass;>;", null);
@@ -87 +88 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -92 +93 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/ArithmeticTest.java b/tests/soot/asm/backend/ArithmeticTest.java
index d03901d..69acdf3 100755
--- a/tests/soot/asm/backend/ArithmeticTest.java
+++ b/tests/soot/asm/backend/ArithmeticTest.java
@@ -21 +21 @@
-		cw.visit(V1_2, ACC_PUBLIC + ACC_SUPER, "pkg/ArithmeticLib", null,
+		cw.visit(V1_2, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/ArithmeticLib", null,
@@ -77 +77 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "cInt", "I");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "cInt", "I");
@@ -80 +80 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "cFloat", "F");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "cFloat", "F");
@@ -83 +83 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "cLong", "J");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "cLong", "J");
@@ -86 +86 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "cDouble", "D");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "cDouble", "D");
@@ -98 +98 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rInt", "I");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rInt", "I");
@@ -104 +104 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rFloat", "F");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rFloat", "F");
@@ -110 +110 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rLong", "J");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rLong", "J");
@@ -116 +116 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rDouble", "D");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rDouble", "D");
@@ -118 +118 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ArithmeticLib", "rInt", "I");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ArithmeticLib", "rInt", "I");
@@ -131 +131 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rInt", "I");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rInt", "I");
@@ -136 +136 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rFloat", "F");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rFloat", "F");
@@ -142 +142 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rLong", "J");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rLong", "J");
@@ -148 +148 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rDouble", "D");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rDouble", "D");
@@ -150 +150 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ArithmeticLib", "rFloat", "F");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ArithmeticLib", "rFloat", "F");
@@ -163 +163 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rInt", "I");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rInt", "I");
@@ -169 +169 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rFloat", "F");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rFloat", "F");
@@ -174 +174 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rLong", "J");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rLong", "J");
@@ -180 +180 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rDouble", "D");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rDouble", "D");
@@ -182 +182 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ArithmeticLib", "rLong", "J");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ArithmeticLib", "rLong", "J");
@@ -195 +195 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rInt", "I");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rInt", "I");
@@ -201 +201 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rLong", "J");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rLong", "J");
@@ -207 +207 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rFloat", "F");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rFloat", "F");
@@ -212 +212 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rDouble", "D");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rDouble", "D");
@@ -214 +214 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ArithmeticLib", "rDouble", "D");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ArithmeticLib", "rDouble", "D");
@@ -224 +224 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ArithmeticLib", "rInt", "I");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ArithmeticLib", "rInt", "I");
@@ -226 +226 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rShort", "S");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rShort", "S");
@@ -228 +228 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ArithmeticLib", "rShort", "S");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ArithmeticLib", "rShort", "S");
@@ -238 +238 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ArithmeticLib", "rInt", "I");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ArithmeticLib", "rInt", "I");
@@ -240 +240 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rChar", "C");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rChar", "C");
@@ -242 +242 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ArithmeticLib", "rChar", "C");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ArithmeticLib", "rChar", "C");
@@ -252 +252 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ArithmeticLib", "rInt", "I");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ArithmeticLib", "rInt", "I");
@@ -254 +254 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ArithmeticLib", "rByte", "B");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ArithmeticLib", "rByte", "B");
@@ -256 +256 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ArithmeticLib", "rByte", "B");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ArithmeticLib", "rByte", "B");
@@ -271 +271 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -276 +276 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/ArraysTest.java b/tests/soot/asm/backend/ArraysTest.java
index d5c030a..c273fba 100644
--- a/tests/soot/asm/backend/ArraysTest.java
+++ b/tests/soot/asm/backend/ArraysTest.java
@@ -18 +18 @@
-		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/Arrays", null,
+		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/Arrays", null,
@@ -261 +261 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -266 +266 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/CompareArithmeticInstructions2Test.java b/tests/soot/asm/backend/CompareArithmeticInstructions2Test.java
index 1acc155..b4be787 100644
--- a/tests/soot/asm/backend/CompareArithmeticInstructions2Test.java
+++ b/tests/soot/asm/backend/CompareArithmeticInstructions2Test.java
@@ -20 +20,3 @@
-        cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/CompareArithmeticInstructions2", null, "java/lang/Object", null);
+        cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER,
+        		"soot/asm/backend/targets/CompareArithmeticInstructions2",
+        		null, "java/lang/Object", null);
@@ -58 +60 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "i", "I");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "i", "I");
@@ -61 +63 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "f", "F");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "f", "F");
@@ -64 +66 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "d", "D");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "d", "D");
@@ -67 +69 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "l", "J");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "l", "J");
@@ -70 +72 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "b", "B");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "b", "B");
@@ -73 +75 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "c", "C");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "c", "C");
@@ -76 +78 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "s", "S");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "s", "S");
@@ -85 +87 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "i", "I");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "i", "I");
@@ -91 +93 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "i", "I");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "i", "I");
@@ -95 +97 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "i", "I");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "i", "I");
@@ -101 +103 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "i", "I");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "i", "I");
@@ -112 +114 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "f", "F");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "f", "F");
@@ -119 +121 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "f", "F");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "f", "F");
@@ -123 +125 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "f", "F");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "f", "F");
@@ -130 +132 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "f", "F");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "f", "F");
@@ -141 +143 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "d", "D");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "d", "D");
@@ -148 +150 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "d", "D");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "d", "D");
@@ -152 +154 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "d", "D");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "d", "D");
@@ -159 +161 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "d", "D");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "d", "D");
@@ -170 +172 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "l", "J");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "l", "J");
@@ -177 +179 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "l", "J");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "l", "J");
@@ -181 +183 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "l", "J");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "l", "J");
@@ -188 +190 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "l", "J");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "l", "J");
@@ -199 +201 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "b", "B");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "b", "B");
@@ -205 +207 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "b", "B");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "b", "B");
@@ -209 +211 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "b", "B");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "b", "B");
@@ -215 +217 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "b", "B");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "b", "B");
@@ -226 +228 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "c", "C");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "c", "C");
@@ -232 +234 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "c", "C");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "c", "C");
@@ -236 +238 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "c", "C");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "c", "C");
@@ -242 +244 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "c", "C");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "c", "C");
@@ -253 +255 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "s", "S");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "s", "S");
@@ -259 +261 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "s", "S");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "s", "S");
@@ -263 +265 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstructions2", "s", "S");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "s", "S");
@@ -269 +271 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstructions2", "s", "S");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstructions2", "s", "S");
@@ -287 +289 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -292 +294 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/CompareArithmeticInstructionsTest.java b/tests/soot/asm/backend/CompareArithmeticInstructionsTest.java
index 10225d0..b534932 100644
--- a/tests/soot/asm/backend/CompareArithmeticInstructionsTest.java
+++ b/tests/soot/asm/backend/CompareArithmeticInstructionsTest.java
@@ -20 +20,3 @@
-        cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/CompareArithmeticInstuctions", null, "java/lang/Object", null);
+        cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER,
+        		"soot/asm/backend/targets/CompareArithmeticInstuctions",
+        		null, "java/lang/Object", null);
@@ -58 +60 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "i", "I");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "i", "I");
@@ -61 +63 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "f", "F");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "f", "F");
@@ -64 +66 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "d", "D");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "d", "D");
@@ -67 +69 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "l", "J");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "l", "J");
@@ -70 +72 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "b", "B");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "b", "B");
@@ -73 +75 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "c", "C");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "c", "C");
@@ -76 +78 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "s", "S");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "s", "S");
@@ -85 +87 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "i", "I");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "i", "I");
@@ -91 +93 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "i", "I");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "i", "I");
@@ -95 +97 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "i", "I");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "i", "I");
@@ -101 +103 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "i", "I");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "i", "I");
@@ -112 +114 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "f", "F");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "f", "F");
@@ -119 +121 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "f", "F");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "f", "F");
@@ -123 +125 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "f", "F");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "f", "F");
@@ -130 +132 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "f", "F");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "f", "F");
@@ -141 +143 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "d", "D");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "d", "D");
@@ -148 +150 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "d", "D");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "d", "D");
@@ -152 +154 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "d", "D");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "d", "D");
@@ -159 +161 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "d", "D");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "d", "D");
@@ -170 +172 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "l", "J");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "l", "J");
@@ -177 +179 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "l", "J");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "l", "J");
@@ -181 +183 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "l", "J");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "l", "J");
@@ -188 +190 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "l", "J");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "l", "J");
@@ -199 +201 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "b", "B");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "b", "B");
@@ -205 +207 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "b", "B");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "b", "B");
@@ -209 +211 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "b", "B");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "b", "B");
@@ -215 +217 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "b", "B");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "b", "B");
@@ -226 +228 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "c", "C");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "c", "C");
@@ -232 +234 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "c", "C");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "c", "C");
@@ -236 +238 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "c", "C");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "c", "C");
@@ -242 +244 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "c", "C");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "c", "C");
@@ -253 +255 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "s", "S");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "s", "S");
@@ -259 +261 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "s", "S");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "s", "S");
@@ -263 +265 @@
-            mv.visitFieldInsn(GETFIELD, "pkg/CompareArithmeticInstuctions", "s", "S");
+            mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "s", "S");
@@ -269 +271 @@
-            mv.visitFieldInsn(PUTFIELD, "pkg/CompareArithmeticInstuctions", "s", "S");
+            mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareArithmeticInstuctions", "s", "S");
@@ -288 +290 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -293 +295 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/CompareInstructionsTest.java b/tests/soot/asm/backend/CompareInstructionsTest.java
index 5bea1d9..dd3900a 100644
--- a/tests/soot/asm/backend/CompareInstructionsTest.java
+++ b/tests/soot/asm/backend/CompareInstructionsTest.java
@@ -20 +20 @@
-		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/CompareInstructions", null,
+		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/CompareInstructions", null,
@@ -68 +68 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "i", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "i", "I");
@@ -71 +71 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "f", "F");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "f", "F");
@@ -74 +74 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "d", "D");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "d", "D");
@@ -77 +77 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "l", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "l", "J");
@@ -80 +80 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "b", "B");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "b", "B");
@@ -83 +83 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "bool", "Z");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "bool", "Z");
@@ -86 +86 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "c", "C");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "c", "C");
@@ -89 +89 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "s", "S");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "s", "S");
@@ -98 +98 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "i", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "i", "I");
@@ -104 +104 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "i", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "i", "I");
@@ -108 +108 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "i", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "i", "I");
@@ -114 +114 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "i", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "i", "I");
@@ -125 +125 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "f", "F");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "f", "F");
@@ -132 +132 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "f", "F");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "f", "F");
@@ -136 +136 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "f", "F");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "f", "F");
@@ -143 +143 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "f", "F");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "f", "F");
@@ -154 +154 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "d", "D");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "d", "D");
@@ -161 +161 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "d", "D");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "d", "D");
@@ -165 +165 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "d", "D");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "d", "D");
@@ -172 +172 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "d", "D");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "d", "D");
@@ -183 +183 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "l", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "l", "J");
@@ -190 +190 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "l", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "l", "J");
@@ -194 +194 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "l", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "l", "J");
@@ -201 +201 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "l", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "l", "J");
@@ -212 +212 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "b", "B");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "b", "B");
@@ -218 +218 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "b", "B");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "b", "B");
@@ -222 +222 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "b", "B");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "b", "B");
@@ -228 +228 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "b", "B");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "b", "B");
@@ -239 +239 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "bool", "Z");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "bool", "Z");
@@ -245 +245 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "bool", "Z");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "bool", "Z");
@@ -249 +249 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "bool", "Z");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "bool", "Z");
@@ -255 +255 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "bool", "Z");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "bool", "Z");
@@ -266 +266 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "c", "C");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "c", "C");
@@ -272 +272 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "c", "C");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "c", "C");
@@ -276 +276 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "c", "C");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "c", "C");
@@ -282 +282 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "c", "C");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "c", "C");
@@ -293 +293 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "s", "S");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "s", "S");
@@ -299 +299 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "s", "S");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "s", "S");
@@ -303 +303 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "s", "S");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "s", "S");
@@ -309 +309 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "s", "S");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "s", "S");
@@ -320 +320 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/CompareInstructions", "o", "Ljava/lang/Object;");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/CompareInstructions", "o", "Ljava/lang/Object;");
@@ -327 +327 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "o", "Ljava/lang/Object;");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "o", "Ljava/lang/Object;");
@@ -334 +334 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/CompareInstructions", "o", "Ljava/lang/Object;");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/CompareInstructions", "o", "Ljava/lang/Object;");
@@ -351 +351 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -356 +356 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/ConstantPoolTest.java b/tests/soot/asm/backend/ConstantPoolTest.java
index 690735e..ada3198 100644
--- a/tests/soot/asm/backend/ConstantPoolTest.java
+++ b/tests/soot/asm/backend/ConstantPoolTest.java
@@ -34 +34 @@
-		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/ConstantPool", null,
+		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/ConstantPool", null,
@@ -117 +117 @@
-			mv.visitFieldInsn(PUTSTATIC, "pkg/ConstantPool", "s2",
+			mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/ConstantPool", "s2",
@@ -120 +120 @@
-			mv.visitFieldInsn(PUTSTATIC, "pkg/ConstantPool", "o1",
+			mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/ConstantPool", "o1",
@@ -123 +123 @@
-			mv.visitFieldInsn(PUTSTATIC, "pkg/ConstantPool", "o2",
+			mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/ConstantPool", "o2",
@@ -128 +128 @@
-			mv.visitFieldInsn(PUTSTATIC, "pkg/ConstantPool", "o3",
+			mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/ConstantPool", "o3",
@@ -133 +133 @@
-			mv.visitFieldInsn(PUTSTATIC, "pkg/ConstantPool", "o4",
+			mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/ConstantPool", "o4",
@@ -138 +138 @@
-			mv.visitFieldInsn(PUTSTATIC, "pkg/ConstantPool", "o5",
+			mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/ConstantPool", "o5",
@@ -147 +147 @@
-			mv.visitFieldInsn(PUTSTATIC, "pkg/ConstantPool", "i2", "I");
+			mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/ConstantPool", "i2", "I");
@@ -155 +155 @@
-			mv.visitFieldInsn(PUTSTATIC, "pkg/ConstantPool", "l3", "J");
+			mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/ConstantPool", "l3", "J");
@@ -163 +163 @@
-			mv.visitFieldInsn(PUTSTATIC, "pkg/ConstantPool", "d3", "D");
+			mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/ConstantPool", "d3", "D");
@@ -229 +229 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -234 +234 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/ControlStructuresTest.java b/tests/soot/asm/backend/ControlStructuresTest.java
index 2419b58..7098702 100644
--- a/tests/soot/asm/backend/ControlStructuresTest.java
+++ b/tests/soot/asm/backend/ControlStructuresTest.java
@@ -21 +21,2 @@
-		cw.visit(V1_6, ACC_PUBLIC + ACC_SUPER, "pkg/ControlStructures", null, "java/lang/Object", null);
+		cw.visit(V1_6, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/ControlStructures",
+				null, "java/lang/Object", null);
@@ -45 +46 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/ControlStructures", "result", "Ljava/util/List;");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ControlStructures", "result", "Ljava/util/List;");
@@ -54 +55 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ControlStructures", "result", "Ljava/util/List;");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ControlStructures", "result", "Ljava/util/List;");
@@ -63 +64 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ControlStructures", "result", "Ljava/util/List;");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ControlStructures", "result", "Ljava/util/List;");
@@ -70 +71 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ControlStructures", "result", "Ljava/util/List;");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ControlStructures", "result", "Ljava/util/List;");
@@ -78 +79 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ControlStructures", "result", "Ljava/util/List;");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ControlStructures", "result", "Ljava/util/List;");
@@ -92 +93 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ControlStructures", "result", "Ljava/util/List;");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ControlStructures", "result", "Ljava/util/List;");
@@ -99 +100 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ControlStructures", "result", "Ljava/util/List;");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ControlStructures", "result", "Ljava/util/List;");
@@ -106 +107 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ControlStructures", "result", "Ljava/util/List;");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ControlStructures", "result", "Ljava/util/List;");
@@ -113 +114 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ControlStructures", "result", "Ljava/util/List;");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ControlStructures", "result", "Ljava/util/List;");
@@ -120 +121 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ControlStructures", "result", "Ljava/util/List;");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ControlStructures", "result", "Ljava/util/List;");
@@ -125 +126 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/ControlStructures", "result", "Ljava/util/List;");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ControlStructures", "result", "Ljava/util/List;");
@@ -141 +142 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -146 +147 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/DupsTest.java b/tests/soot/asm/backend/DupsTest.java
index a6bde6b..4d3689d 100644
--- a/tests/soot/asm/backend/DupsTest.java
+++ b/tests/soot/asm/backend/DupsTest.java
@@ -18 +18 @@
-		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/Dups", null,
+		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/Dups", null,
@@ -62 +62 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -67 +67 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/EnumTest.java b/tests/soot/asm/backend/EnumTest.java
index 0d82ce5..9567c47 100644
--- a/tests/soot/asm/backend/EnumTest.java
+++ b/tests/soot/asm/backend/EnumTest.java
@@ -21 +21,4 @@
-		cw.visit(V1_5, ACC_PUBLIC + ACC_FINAL + ACC_SUPER + ACC_ENUM, "pkg/MyEnum", "Ljava/lang/Enum<Lpkg/MyEnum;>;", "java/lang/Enum", null);
+		cw.visit(V1_5, ACC_PUBLIC + ACC_FINAL + ACC_SUPER + ACC_ENUM,
+				"soot/asm/backend/targets/MyEnum",
+				"Ljava/lang/Enum<Lsoot/asm/backend/targets/MyEnum;>;",
+				"java/lang/Enum", null);
@@ -24 +27 @@
-		fv = cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC + ACC_ENUM, "JA", "Lpkg/MyEnum;", null, null);
+		fv = cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC + ACC_ENUM, "JA", "Lsoot/asm/backend/targets/MyEnum;", null, null);
@@ -28 +31 @@
-		fv = cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC + ACC_ENUM, "NEIN", "Lpkg/MyEnum;", null, null);
+		fv = cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC + ACC_ENUM, "NEIN", "Lsoot/asm/backend/targets/MyEnum;", null, null);
@@ -32 +35 @@
-		fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC + ACC_SYNTHETIC, "ENUM$VALUES", "[Lpkg/MyEnum;", null, null);
+		fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC + ACC_SYNTHETIC, "ENUM$VALUES", "[Lsoot/asm/backend/targets/MyEnum;", null, null);
@@ -38 +41 @@
-		mv.visitTypeInsn(NEW, "pkg/MyEnum");
+		mv.visitTypeInsn(NEW, "soot/asm/backend/targets/MyEnum");
@@ -42,3 +45,3 @@
-		mv.visitMethodInsn(INVOKESPECIAL, "pkg/MyEnum", "<init>", "(Ljava/lang/String;I)V", false);
-		mv.visitFieldInsn(PUTSTATIC, "pkg/MyEnum", "JA", "Lpkg/MyEnum;");
-		mv.visitTypeInsn(NEW, "pkg/MyEnum");
+		mv.visitMethodInsn(INVOKESPECIAL, "soot/asm/backend/targets/MyEnum", "<init>", "(Ljava/lang/String;I)V", false);
+		mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/MyEnum", "JA", "Lsoot/asm/backend/targets/MyEnum;");
+		mv.visitTypeInsn(NEW, "soot/asm/backend/targets/MyEnum");
@@ -48,2 +51,2 @@
-		mv.visitMethodInsn(INVOKESPECIAL, "pkg/MyEnum", "<init>", "(Ljava/lang/String;I)V", false);
-		mv.visitFieldInsn(PUTSTATIC, "pkg/MyEnum", "NEIN", "Lpkg/MyEnum;");
+		mv.visitMethodInsn(INVOKESPECIAL, "soot/asm/backend/targets/MyEnum", "<init>", "(Ljava/lang/String;I)V", false);
+		mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/MyEnum", "NEIN", "Lsoot/asm/backend/targets/MyEnum;");
@@ -51 +54 @@
-		mv.visitTypeInsn(ANEWARRAY, "pkg/MyEnum");
+		mv.visitTypeInsn(ANEWARRAY, "soot/asm/backend/targets/MyEnum");
@@ -55 +58 @@
-		mv.visitFieldInsn(GETSTATIC, "pkg/MyEnum", "JA", "Lpkg/MyEnum;");
+		mv.visitFieldInsn(GETSTATIC, "soot/asm/backend/targets/MyEnum", "JA", "Lsoot/asm/backend/targets/MyEnum;");
@@ -59 +62 @@
-		mv.visitFieldInsn(GETSTATIC, "pkg/MyEnum", "NEIN", "Lpkg/MyEnum;");
+		mv.visitFieldInsn(GETSTATIC, "soot/asm/backend/targets/MyEnum", "NEIN", "Lsoot/asm/backend/targets/MyEnum;");
@@ -62 +65 @@
-		mv.visitFieldInsn(PUTSTATIC, "pkg/MyEnum", "ENUM$VALUES", "[Lpkg/MyEnum;");
+		mv.visitFieldInsn(PUTSTATIC, "soot/asm/backend/targets/MyEnum", "ENUM$VALUES", "[Lsoot/asm/backend/targets/MyEnum;");
@@ -79 +82 @@
-		mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "values", "()[Lpkg/MyEnum;", null, null);
+		mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "values", "()[Lsoot/asm/backend/targets/MyEnum;", null, null);
@@ -81 +84 @@
-		mv.visitFieldInsn(GETSTATIC, "pkg/MyEnum", "ENUM$VALUES", "[Lpkg/MyEnum;");
+		mv.visitFieldInsn(GETSTATIC, "soot/asm/backend/targets/MyEnum", "ENUM$VALUES", "[Lsoot/asm/backend/targets/MyEnum;");
@@ -86 +89 @@
-		mv.visitTypeInsn(ANEWARRAY, "pkg/MyEnum");
+		mv.visitTypeInsn(ANEWARRAY, "soot/asm/backend/targets/MyEnum");
@@ -99 +102 @@
-		mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "(Ljava/lang/String;)Lpkg/MyEnum;", null, null);
+		mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "(Ljava/lang/String;)Lsoot/asm/backend/targets/MyEnum;", null, null);
@@ -101 +104 @@
-		mv.visitLdcInsn(Type.getType("Lpkg/MyEnum;"));
+		mv.visitLdcInsn(Type.getType("Lsoot/asm/backend/targets/MyEnum;"));
@@ -104 +107 @@
-		mv.visitTypeInsn(CHECKCAST, "pkg/MyEnum");
+		mv.visitTypeInsn(CHECKCAST, "soot/asm/backend/targets/MyEnum");
@@ -121 +124 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -126 +129 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/ExceptionTest.java b/tests/soot/asm/backend/ExceptionTest.java
index 090cba7..d49fa7e 100644
--- a/tests/soot/asm/backend/ExceptionTest.java
+++ b/tests/soot/asm/backend/ExceptionTest.java
@@ -18 +18,2 @@
-		cw.visit(V1_4, ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE, "pkg/ExceptionMethods", null,
+		cw.visit(V1_4, ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE,
+				"soot/asm/backend/targets/ExceptionMethods", null,
@@ -39 +40 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -44 +45 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/ExtendedArithmeticLibTest.java b/tests/soot/asm/backend/ExtendedArithmeticLibTest.java
index e984a3d..2d11175 100644
--- a/tests/soot/asm/backend/ExtendedArithmeticLibTest.java
+++ b/tests/soot/asm/backend/ExtendedArithmeticLibTest.java
@@ -21 +21 @@
-		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/ExtendedArithmeticLib",
+		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/ExtendedArithmeticLib",
@@ -95 +95 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "i2", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "i2", "I");
@@ -97 +97 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "i3", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "i3", "I");
@@ -99 +99 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/ExtendedArithmeticLib", "i1", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "i1", "I");
@@ -102 +102 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "f2", "F");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "f2", "F");
@@ -104 +104 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "f3", "F");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "f3", "F");
@@ -106 +106 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/ExtendedArithmeticLib", "f1", "F");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "f1", "F");
@@ -109 +109 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "l2", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "l2", "J");
@@ -111 +111 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "l3", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "l3", "J");
@@ -113 +113 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/ExtendedArithmeticLib", "l1", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "l1", "J");
@@ -116 +116 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "d2", "D");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "d2", "D");
@@ -118 +118 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "d3", "D");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "d3", "D");
@@ -120 +120 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/ExtendedArithmeticLib", "d1", "D");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "d1", "D");
@@ -130 +130 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "i2", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "i2", "I");
@@ -132 +132 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "i3", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "i3", "I");
@@ -134 +134 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/ExtendedArithmeticLib", "i1", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "i1", "I");
@@ -137 +137 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "f2", "F");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "f2", "F");
@@ -139 +139 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "f3", "F");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "f3", "F");
@@ -141 +141 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/ExtendedArithmeticLib", "f1", "F");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "f1", "F");
@@ -144 +144 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "l2", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "l2", "J");
@@ -146 +146 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "l3", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "l3", "J");
@@ -148 +148 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/ExtendedArithmeticLib", "l1", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "l1", "J");
@@ -151 +151 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "d2", "D");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "d2", "D");
@@ -153 +153 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/ExtendedArithmeticLib", "d3", "D");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "d3", "D");
@@ -155 +155 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/ExtendedArithmeticLib", "d1", "D");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/ExtendedArithmeticLib", "d1", "D");
@@ -255 +255 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -260 +260 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/InnerClass2Test.java b/tests/soot/asm/backend/InnerClass2Test.java
index f389525..0849b77 100644
--- a/tests/soot/asm/backend/InnerClass2Test.java
+++ b/tests/soot/asm/backend/InnerClass2Test.java
@@ -20,2 +20,2 @@
-		cw.visit(V1_1, ACC_SUPER, "pkg/InnerClass$1", null, "java/lang/Object",
-				new String[] { "pkg/Measurable" });
+		cw.visit(V1_1, ACC_SUPER, "soot/asm/backend/targets/InnerClass$1", null, "java/lang/Object",
+				new String[] { "soot/asm/backend/targets/Measurable" });
@@ -25 +25 @@
-		cw.visitOuterClass("pkg/InnerClass", "doInner", "()V");
+		cw.visitOuterClass("soot/asm/backend/targets/InnerClass", "doInner", "()V");
@@ -27 +27 @@
-		cw.visitInnerClass("pkg/InnerClass$1", null, null, 0);
+		cw.visitInnerClass("soot/asm/backend/targets/InnerClass$1", null, null, 0);
@@ -31 +31 @@
-					"Lpkg/InnerClass;", null, null);
+					"Lsoot/asm/backend/targets/InnerClass;", null, null);
@@ -35 +35 @@
-			mv = cw.visitMethod(0, "<init>", "(Lpkg/InnerClass;)V", null, null);
+			mv = cw.visitMethod(0, "<init>", "(Lsoot/asm/backend/targets/InnerClass;)V", null, null);
@@ -39,2 +39,2 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/InnerClass$1", "this$0",
-					"Lpkg/InnerClass;");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/InnerClass$1", "this$0",
+					"Lsoot/asm/backend/targets/InnerClass;");
@@ -59 +59 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -64 +64 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/InnerClassTest.java b/tests/soot/asm/backend/InnerClassTest.java
index 408faf0..6922094 100644
--- a/tests/soot/asm/backend/InnerClassTest.java
+++ b/tests/soot/asm/backend/InnerClassTest.java
@@ -20 +20 @@
-		visitor.visit(V1_1, ACC_SUPER, "pkg/InnerClass$Inner", null,
+		visitor.visit(V1_1, ACC_SUPER, "soot/asm/backend/targets/InnerClass$Inner", null,
@@ -25 +25 @@
-		visitor.visitInnerClass("pkg/InnerClass$Inner", "pkg/InnerClass",
+		visitor.visitInnerClass("soot/asm/backend/targets/InnerClass$Inner", "soot/asm/backend/targets/InnerClass",
@@ -35 +35 @@
-					"Lpkg/InnerClass;", null, null);
+					"Lsoot/asm/backend/targets/InnerClass;", null, null);
@@ -40 +40 @@
-					"(Lpkg/InnerClass;)V", null, null);
+					"(Lsoot/asm/backend/targets/InnerClass;)V", null, null);
@@ -44,2 +44,2 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/InnerClass$Inner", "this$0",
-					"Lpkg/InnerClass;");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/InnerClass$Inner", "this$0",
+					"Lsoot/asm/backend/targets/InnerClass;");
@@ -64 +64 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -69 +69 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/InstanceOfCastsTest.java b/tests/soot/asm/backend/InstanceOfCastsTest.java
index 326e66d..0e75316 100644
--- a/tests/soot/asm/backend/InstanceOfCastsTest.java
+++ b/tests/soot/asm/backend/InstanceOfCastsTest.java
@@ -19 +19,2 @@
-		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/InstanceOfCasts", null, "java/lang/Object", null);
+		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/InstanceOfCasts",
+				null, "java/lang/Object", null);
@@ -35 +36 @@
-			mv.visitTypeInsn(INSTANCEOF, "pkg/Measurable");
+			mv.visitTypeInsn(INSTANCEOF, "soot/asm/backend/targets/Measurable");
@@ -41 +42 @@
-			mv = cw.visitMethod(ACC_PUBLIC, "convertMeasurableArray", "([Ljava/lang/Object;)[Lpkg/Measurable;", null, null);
+			mv = cw.visitMethod(ACC_PUBLIC, "convertMeasurableArray", "([Ljava/lang/Object;)[Lsoot/asm/backend/targets/Measurable;", null, null);
@@ -44 +45 @@
-			mv.visitTypeInsn(INSTANCEOF, "[Lpkg/Measurable;");
+			mv.visitTypeInsn(INSTANCEOF, "[Lsoot/asm/backend/targets/Measurable;");
@@ -48 +49 @@
-			mv.visitTypeInsn(CHECKCAST, "[Lpkg/Measurable;");
+			mv.visitTypeInsn(CHECKCAST, "[Lsoot/asm/backend/targets/Measurable;");
@@ -68 +69 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -73 +74 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/InterfaceTest.java b/tests/soot/asm/backend/InterfaceTest.java
index a279e5f..791b397 100644
--- a/tests/soot/asm/backend/InterfaceTest.java
+++ b/tests/soot/asm/backend/InterfaceTest.java
@@ -17,2 +17,2 @@
-		"pkg/Comparable", null, "java/lang/Object",
-		new String[] { "pkg/Measurable" });
+				"soot/asm/backend/targets/Comparable", null, "java/lang/Object",
+		new String[] { "soot/asm/backend/targets/Measurable" });
@@ -39 +39 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -44 +44 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/LineNumbersTest.java b/tests/soot/asm/backend/LineNumbersTest.java
index d712891..ebbbdcd 100644
--- a/tests/soot/asm/backend/LineNumbersTest.java
+++ b/tests/soot/asm/backend/LineNumbersTest.java
@@ -19 +19,2 @@
-		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/LineNumbers", null, "java/lang/Object", null);
+		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/LineNumbers",
+				null, "java/lang/Object", null);
@@ -23,9 +23,0 @@
-		mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "main", "([Ljava/lang/String;)V", null, null);
-		mv.visitCode();
-		Label l0 = new Label();
-		mv.visitLabel(l0);
-		mv.visitInsn(RETURN);
-		mv.visitMaxs(0, 0);
-		mv.visitEnd();
-		}
-		{
@@ -34,3 +25,0 @@
-		Label l0 = new Label();
-		mv.visitLabel(l0);
-		mv.visitLineNumber(3, l0);
@@ -51,0 +41,10 @@
+		{
+		mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "main", "([Ljava/lang/String;)V", null, null);
+		mv.visitCode();
+		Label l0 = new Label();
+		mv.visitLabel(l0);
+		mv.visitLineNumber(6, l0);
+		mv.visitInsn(RETURN);
+		mv.visitMaxs(0, 0);
+		mv.visitEnd();
+		}
@@ -63 +62 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -68 +67 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/LogicalOperationsTest.java b/tests/soot/asm/backend/LogicalOperationsTest.java
index f1ba565..f456148 100644
--- a/tests/soot/asm/backend/LogicalOperationsTest.java
+++ b/tests/soot/asm/backend/LogicalOperationsTest.java
@@ -20 +20 @@
-		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/LogicalOperations", null,
+		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/LogicalOperations", null,
@@ -62 +62 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i2", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i2", "I");
@@ -64 +64 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -66 +66 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -69 +69 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l2", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l2", "J");
@@ -71 +71 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -73 +73 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -76 +76 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "b2", "Z");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "b2", "Z");
@@ -78 +78 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "b1", "Z");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "b1", "Z");
@@ -80 +80 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "b1", "Z");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "b1", "Z");
@@ -90 +90 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i2", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i2", "I");
@@ -92 +92 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -94 +94 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -97 +97 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l2", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l2", "J");
@@ -99 +99 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -101 +101 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -104 +104 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "b2", "Z");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "b2", "Z");
@@ -106 +106 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "b1", "Z");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "b1", "Z");
@@ -108 +108 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "b1", "Z");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "b1", "Z");
@@ -118 +118 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i2", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i2", "I");
@@ -120 +120 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -122 +122 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -125 +125 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l2", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l2", "J");
@@ -127 +127 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -129 +129 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -132 +132 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "b2", "Z");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "b2", "Z");
@@ -134 +134 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "b1", "Z");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "b1", "Z");
@@ -136 +136 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "b1", "Z");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "b1", "Z");
@@ -146 +146 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i2", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i2", "I");
@@ -149 +149 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -152 +152 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i2", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i2", "I");
@@ -156 +156 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -166 +166 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -168 +168 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i2", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i2", "I");
@@ -170 +170 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -173 +173 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -175 +175 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l2", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l2", "J");
@@ -178 +178 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -188 +188 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -190 +190 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i2", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i2", "I");
@@ -192 +192 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -195 +195 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -197 +197 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l2", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l2", "J");
@@ -200 +200 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -210 +210 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -212 +212 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "i2", "I");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "i2", "I");
@@ -214 +214 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "i1", "I");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "i1", "I");
@@ -217 +217 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -219 +219 @@
-			mv.visitFieldInsn(GETFIELD, "pkg/LogicalOperations", "l2", "J");
+			mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/LogicalOperations", "l2", "J");
@@ -222 +222 @@
-			mv.visitFieldInsn(PUTFIELD, "pkg/LogicalOperations", "l1", "J");
+			mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/LogicalOperations", "l1", "J");
@@ -238 +238 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -243 +243 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/MethodExampleTest.java b/tests/soot/asm/backend/MethodExampleTest.java
index b594778..4759022 100644
--- a/tests/soot/asm/backend/MethodExampleTest.java
+++ b/tests/soot/asm/backend/MethodExampleTest.java
@@ -22 +22,2 @@
-		visitor.visit(Opcodes.V1_1, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, "pkg/Bean", null, "java/lang/Object", null);
+		visitor.visit(Opcodes.V1_1, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER,
+				"soot/asm/backend/targets/Bean", null, "java/lang/Object", null);
@@ -41 +42 @@
-		mv.visitFieldInsn(Opcodes.GETFIELD, "pkg/Bean", "f", "I");
+		mv.visitFieldInsn(Opcodes.GETFIELD, "soot/asm/backend/targets/Bean", "f", "I");
@@ -51 +52 @@
-		mv.visitFieldInsn(Opcodes.PUTFIELD, "pkg/Bean", "f", "I");
+		mv.visitFieldInsn(Opcodes.PUTFIELD, "soot/asm/backend/targets/Bean", "f", "I");
@@ -64 +65 @@
-		mv.visitFieldInsn(Opcodes.PUTFIELD, "pkg/Bean", "f", "I");
+		mv.visitFieldInsn(Opcodes.PUTFIELD, "soot/asm/backend/targets/Bean", "f", "I");
@@ -88 +89 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -93 +94 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/MinimalJavaVersionTest.java b/tests/soot/asm/backend/MinimalJavaVersionTest.java
index 23adfb1..a8cd3d0 100644
--- a/tests/soot/asm/backend/MinimalJavaVersionTest.java
+++ b/tests/soot/asm/backend/MinimalJavaVersionTest.java
@@ -29 +29 @@
-		 runSoot("pkg.AnnotatedClass", "1.3");
+		 runSoot("soot.asm.backend.targets.AnnotatedClass", "1.3");
@@ -36 +36 @@
-			runSoot("pkg.AnnotatedClass", "1.7");
+			runSoot("soot.asm.backend.targets.AnnotatedClass", "1.7");
@@ -51 +51 @@
-			"-cp", "./testcode_asm_backend"
+			"-cp", "./testclasses"
diff --git a/tests/soot/asm/backend/ModifiersTest.java b/tests/soot/asm/backend/ModifiersTest.java
index f47bc57..371ed22 100644
--- a/tests/soot/asm/backend/ModifiersTest.java
+++ b/tests/soot/asm/backend/ModifiersTest.java
@@ -21 +21 @@
-		cw.visit(V1_3, ACC_PUBLIC + ACC_SUPER + ACC_ABSTRACT, "pkg/Modifiers", null, "java/lang/Object", null);
+		cw.visit(V1_3, ACC_PUBLIC + ACC_SUPER + ACC_ABSTRACT, "soot/asm/backend/targets/Modifiers", null, "java/lang/Object", null);
@@ -43 +43 @@
-		mv.visitFieldInsn(PUTFIELD, "pkg/Modifiers", "j", "I");
+		mv.visitFieldInsn(PUTFIELD, "soot/asm/backend/targets/Modifiers", "j", "I");
@@ -103 +103 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -108 +108 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/MonitorTest.java b/tests/soot/asm/backend/MonitorTest.java
index cd67313..6d7f5d1 100644
--- a/tests/soot/asm/backend/MonitorTest.java
+++ b/tests/soot/asm/backend/MonitorTest.java
@@ -20 +20 @@
-		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/Monitor", null, "java/lang/Object", null);
+		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/Monitor", null, "java/lang/Object", null);
@@ -40 +40 @@
-		mv.visitFieldInsn(GETFIELD, "pkg/Monitor", "o", "Ljava/lang/Object;");
+		mv.visitFieldInsn(GETFIELD, "soot/asm/backend/targets/Monitor", "o", "Ljava/lang/Object;");
@@ -61 +61 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -66 +66 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/NullTypesTest.java b/tests/soot/asm/backend/NullTypesTest.java
index 7a63688..2cf1779 100644
--- a/tests/soot/asm/backend/NullTypesTest.java
+++ b/tests/soot/asm/backend/NullTypesTest.java
@@ -18 +18 @@
-        cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/nullTypes", null, "java/lang/Object", null);
+        cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/nullTypes", null, "java/lang/Object", null);
@@ -56 +56 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -61 +61 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/OuterClassTest.java b/tests/soot/asm/backend/OuterClassTest.java
index 5261a42..af614ea 100644
--- a/tests/soot/asm/backend/OuterClassTest.java
+++ b/tests/soot/asm/backend/OuterClassTest.java
@@ -18 +18 @@
-		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/InnerClass", null,
+		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/InnerClass", null,
@@ -23 +23 @@
-		cw.visitInnerClass("pkg/InnerClass$1", null, null, 0);
+		cw.visitInnerClass("soot/asm/backend/targets/InnerClass$1", null, null, 0);
@@ -25 +25 @@
-		cw.visitInnerClass("pkg/InnerClass$Inner", "pkg/InnerClass", "Inner",
+		cw.visitInnerClass("soot/asm/backend/targets/InnerClass$Inner", "soot/asm/backend/targets/InnerClass", "Inner",
@@ -49 +49 @@
-			mv.visitTypeInsn(NEW, "pkg/InnerClass$1");
+			mv.visitTypeInsn(NEW, "soot/asm/backend/targets/InnerClass$1");
@@ -51,2 +51,2 @@
-			mv.visitMethodInsn(INVOKESPECIAL, "pkg/InnerClass$1", "<init>",
-					"(Lpkg/InnerClass;)V", false);
+			mv.visitMethodInsn(INVOKESPECIAL, "soot/asm/backend/targets/InnerClass$1", "<init>",
+					"(Lsoot/asm/backend/targets/InnerClass;)V", false);
@@ -68 +68 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -73 +73 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/ReturnsTest.java b/tests/soot/asm/backend/ReturnsTest.java
index 4481996..db01d66 100644
--- a/tests/soot/asm/backend/ReturnsTest.java
+++ b/tests/soot/asm/backend/ReturnsTest.java
@@ -18 +18 @@
-		visitor.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/Returns", null,
+		visitor.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/Returns", null,
@@ -73 +73 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -78 +78 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/StoresTest.java b/tests/soot/asm/backend/StoresTest.java
index 6c32ad0..04a15f1 100644
--- a/tests/soot/asm/backend/StoresTest.java
+++ b/tests/soot/asm/backend/StoresTest.java
@@ -19 +19 @@
-		visitor.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/Stores", null, "java/lang/Object", null);
+		visitor.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/Stores", null, "java/lang/Object", null);
@@ -51 +51 @@
-		//mv.visitFrame(F_FULL, 5, new Object[] {"pkg/Stores", INTEGER, DOUBLE, FLOAT, INTEGER}, 0, new Object[] {});
+		//mv.visitFrame(F_FULL, 5, new Object[] {"soot/asm/backend/targets/Stores", INTEGER, DOUBLE, FLOAT, INTEGER}, 0, new Object[] {});
@@ -113 +113 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -118 +118 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
diff --git a/tests/soot/asm/backend/TryCatchTest.java b/tests/soot/asm/backend/TryCatchTest.java
index 8332538..7177699 100644
--- a/tests/soot/asm/backend/TryCatchTest.java
+++ b/tests/soot/asm/backend/TryCatchTest.java
@@ -19 +19 @@
-		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "pkg/TryCatch", null, "java/lang/Object", null);
+		cw.visit(V1_1, ACC_PUBLIC + ACC_SUPER, "soot/asm/backend/targets/TryCatch", null, "java/lang/Object", null);
@@ -52 +52 @@
-		//mv.visitFrame(F_FULL, 3, new Object[] {"pkg/TryCatch", "java/lang/Object", INTEGER}, 1, new Object[] {"java/lang/NullPointerException"});
+		//mv.visitFrame(F_FULL, 3, new Object[] {"soot/asm/backend/targets/TryCatch", "java/lang/Object", INTEGER}, 1, new Object[] {"java/lang/NullPointerException"});
@@ -80 +80 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";
@@ -85 +85 @@
-		return "./testclasses/soot/asm/backend/targets";
+		return "./testclasses";

