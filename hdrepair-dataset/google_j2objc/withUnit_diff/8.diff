diff --git a/jre_emul/android/libcore/harmony-tests/src/test/java/org/apache/harmony/tests/java/lang/reflect/GenericArrayTypeTest.java b/jre_emul/android/libcore/harmony-tests/src/test/java/org/apache/harmony/tests/java/lang/reflect/GenericArrayTypeTest.java
new file mode 100644
index 0000000..cf20c4d
--- /dev/null
+++ b/jre_emul/android/libcore/harmony-tests/src/test/java/org/apache/harmony/tests/java/lang/reflect/GenericArrayTypeTest.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.harmony.tests.java.lang.reflect;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.GenericArrayType;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.lang.reflect.TypeVariable;
+
+/**
+ * Tests generic reflection on arrays with generic or parameterized component types.
+ */
+public class GenericArrayTypeTest extends GenericReflectionTestsBase {
+
+    static class A<T> {
+        T[] array;
+    }
+    public void testGetGenericComponentType() throws Exception {
+        @SuppressWarnings("unchecked")
+        Class<? extends A> clazz = GenericArrayTypeTest.A.class;
+        Field field = clazz.getDeclaredField("array");
+        Type genericType = field.getGenericType();
+        System.out.println("genericType class: " + genericType.getClass());
+        assertInstanceOf(GenericArrayType.class, genericType);
+        Type componentType = ((GenericArrayType) genericType).getGenericComponentType();
+        assertEquals(getTypeParameter(clazz), componentType);
+        assertInstanceOf(TypeVariable.class, componentType);
+        TypeVariable<?> componentTypeVariable = (TypeVariable<?>) componentType;
+        assertEquals("T", componentTypeVariable.getName());
+        assertEquals(clazz, componentTypeVariable.getGenericDeclaration());
+    }
+
+    static class B<T> {
+        B<T>[] array;
+    }
+    public void testParameterizedComponentType() throws Exception {
+        @SuppressWarnings("unchecked")
+        Class<? extends B> clazz = GenericArrayTypeTest.B.class;
+        Field field = clazz.getDeclaredField("array");
+        Type genericType = field.getGenericType();
+        System.out.println("field genericType: " + genericType);
+        System.out.println("field type: " + field.getType());
+        System.out.println("genericType class: " + genericType.getClass());
+
+        assertInstanceOf(GenericArrayType.class, genericType);
+        GenericArrayType arrayType = (GenericArrayType) genericType;
+        Type componentType = arrayType.getGenericComponentType();
+        assertInstanceOf(ParameterizedType.class, componentType);
+        ParameterizedType parameteriezdType = (ParameterizedType) componentType;
+        assertEquals(clazz, parameteriezdType.getRawType());
+        assertEquals(clazz.getTypeParameters()[0], parameteriezdType.getActualTypeArguments()[0]);
+    }
+}
diff --git a/jre_emul/tests.mk b/jre_emul/tests.mk
index 5aa5168..a3f0c06 100644
--- a/jre_emul/tests.mk
+++ b/jre_emul/tests.mk
@@ -425,0 +426 @@
+    org/apache/harmony/tests/java/lang/reflect/GenericArrayTypeTest.java \
diff --git a/translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java b/translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java
index 53b7791..3bd0551 100644
--- a/translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java
+++ b/translator/src/main/java/com/google/devtools/j2objc/gen/SignatureGenerator.java
@@ -68 +68 @@
-      if (!type.getElementType().isTypeVariable()) {
+      if (!type.getElementType().isTypeVariable() && !type.getElementType().isParameterizedType()) {

