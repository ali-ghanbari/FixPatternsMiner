diff --git a/src/org/pentaho/metadata/query/impl/sql/SqlGenerator.java b/src/org/pentaho/metadata/query/impl/sql/SqlGenerator.java
index 51bebc0..a7a92d2 100644
--- a/src/org/pentaho/metadata/query/impl/sql/SqlGenerator.java
+++ b/src/org/pentaho/metadata/query/impl/sql/SqlGenerator.java
@@ -481 +481 @@
-    Pattern p = Pattern.compile("___PARAM\\[(.*)\\]___"); //$NON-NLS-1$
+    Pattern p = Pattern.compile("___PARAM\\[(.*?)\\]___"); //$NON-NLS-1$
diff --git a/test/org/pentaho/metadata/SqlGeneratorTest.java b/test/org/pentaho/metadata/SqlGeneratorTest.java
index 5343792..8909a11 100644
--- a/test/org/pentaho/metadata/SqlGeneratorTest.java
+++ b/test/org/pentaho/metadata/SqlGeneratorTest.java
@@ -964,0 +965,35 @@
+      // Test multiple params in a single constraint
+      query.getConstraints().add(new Constraint(CombinationType.AND, "AND(EQUALS([bt1.bc1];[param:test1]);EQUALS([bt2.bc2];[param:test2]))")); //$NON-NLS-1$
+
+      mquery = generator.generateSql(query, "en_US", null, databaseMeta, parameters, true);
+      TestHelper.printOutJava(mquery.getQuery());
+      TestHelper.assertEqualsIgnoreWhitespaces(
+          "SELECT DISTINCT \n" +
+          "          bt1.pc1 AS COL0\n" +
+          "         ,bt2.pc2 AS COL1\n" +
+          "FROM \n" +
+          "          pt1 bt1\n" +
+          "         ,pt2 bt2\n" +
+          "WHERE \n" +
+          "          ( bt1.pc1 = bt2.pc2 )\n" +
+          "      AND \n" + 
+          "        (\n" + 
+          "          (\n" + 
+          "              bt1.pc1  = ?\n" + 
+          "          )\n" + 
+          "      AND (\n" + 
+          "              bt2.pc2  IN ( ?, ?, ? ) \n" + 
+          "          )\n" + 
+          "      AND (\n" + 
+          "              bt1.pc1  = ? AND  bt2.pc2  IN ( ?, ?, ? ) \n" + 
+          "          )\n" + 
+          "        )\n",
+          mquery.getQuery()
+        );
+      
+      Assert.assertNotNull(mquery.getParamList());
+      Assert.assertEquals(4, mquery.getParamList().size());
+      Assert.assertEquals("test1", mquery.getParamList().get(0));
+      Assert.assertEquals("test2", mquery.getParamList().get(1));
+      Assert.assertEquals("test1", mquery.getParamList().get(2));
+      Assert.assertEquals("test2", mquery.getParamList().get(3));

