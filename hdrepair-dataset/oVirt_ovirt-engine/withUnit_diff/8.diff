diff --git a/backend/manager/modules/searchbackend/src/main/java/org/ovirt/engine/core/searchbackend/OsValueAutoCompleter.java b/backend/manager/modules/searchbackend/src/main/java/org/ovirt/engine/core/searchbackend/OsValueAutoCompleter.java
index b4ef765..51aaba3 100644
--- a/backend/manager/modules/searchbackend/src/main/java/org/ovirt/engine/core/searchbackend/OsValueAutoCompleter.java
+++ b/backend/manager/modules/searchbackend/src/main/java/org/ovirt/engine/core/searchbackend/OsValueAutoCompleter.java
@@ -41 +41 @@
-        text = text.trim().toLowerCase();
+        text = text.trim();
diff --git a/backend/manager/modules/searchbackend/src/test/java/org/ovirt/engine/core/searchbackend/OsValueAutoCompleterTest.java b/backend/manager/modules/searchbackend/src/test/java/org/ovirt/engine/core/searchbackend/OsValueAutoCompleterTest.java
index 2ba08c7..ee4d62b 100644
--- a/backend/manager/modules/searchbackend/src/test/java/org/ovirt/engine/core/searchbackend/OsValueAutoCompleterTest.java
+++ b/backend/manager/modules/searchbackend/src/test/java/org/ovirt/engine/core/searchbackend/OsValueAutoCompleterTest.java
@@ -3,3 +3,2 @@
-import junit.framework.Assert;
-import org.junit.Before;
-import org.junit.Test;
+import static org.hamcrest.core.Is.is;
+import static org.junit.Assert.assertThat;
@@ -9,0 +9,10 @@
+import junit.framework.Assert;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.experimental.theories.DataPoints;
+import org.junit.experimental.theories.Theories;
+import org.junit.experimental.theories.Theory;
+import org.junit.runner.RunWith;
+
+@RunWith(Theories.class)
@@ -12,0 +22,7 @@
+    public static Map<Integer, String> completionMap;
+
+    @DataPoints
+    public static Map.Entry<Integer, String>[] data() {
+        Map.Entry[] arr = completionMap.entrySet().toArray(new Map.Entry[] {});
+        return (Map.Entry<Integer, String>[]) arr;
+    }
@@ -16,2 +32 @@
-
-        Map<Integer, String> completionMap = new HashMap<Integer, String>();
+        completionMap = new HashMap<Integer, String>();
@@ -20,0 +36,3 @@
+        completionMap.put(3, "windows_2008");
+        completionMap.put(4, "windows_2008_R2");
+        completionMap.put(5, "windows_2008_R2x64");
@@ -34,5 +52,9 @@
-    @Test
-    public void testConvertStringToId() {
-        Assert.assertEquals("0", completer.convertFieldEnumValueToActualValue("other"));
-        Assert.assertEquals("1", completer.convertFieldEnumValueToActualValue("rhel_x"));
-        Assert.assertEquals("2", completer.convertFieldEnumValueToActualValue("rhel_x_y"));
+    /**
+     * every auto completed input is always valid when using the auto-completer validate() method
+     * @param osCompletionEntry
+     */
+    @Theory
+    public void autoCompletedInputIsAlwaysValid(Map.Entry<Integer, String> osCompletionEntry) {
+        String reason = "input " + osCompletionEntry.getValue() + " is invalid";
+        assertThat(reason,
+                true, is(completer.validate(osCompletionEntry.getValue())));
@@ -40,0 +63,13 @@
+    /**
+     * every auto-completed value matches its numeric key value.
+     * e.g
+     * when auto-completing "rhel" and "rhel_x" was picked and is used as a search term, it shall
+     * match its key in the completion list. i.e convertFieldEnumValueToActualValue("rhel_x") always yields -> 1
+     *
+     * @param osCompletionEntry
+     */
+    @Theory
+    public void autoCompletedInputMatchesItsNumericKeyValue(Map.Entry<Integer, String> osCompletionEntry) {
+        assertThat(osCompletionEntry.getKey().toString(),
+                is(completer.convertFieldEnumValueToActualValue(osCompletionEntry.getValue())));
+    }

