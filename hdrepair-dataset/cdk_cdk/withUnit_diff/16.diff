diff --git a/src/main/org/openscience/cdk/io/ReaderFactory.java b/src/main/org/openscience/cdk/io/ReaderFactory.java
index 96ea3e8..a2bba47 100755
--- a/src/main/org/openscience/cdk/io/ReaderFactory.java
+++ b/src/main/org/openscience/cdk/io/ReaderFactory.java
@@ -261 +261 @@
-            throw new IOException("Exception while setting the InputStream: " + e1.getMessage(), e1);
+            throw new IOException("Exception while setting the InputStream: " + e1.getMessage());
diff --git a/src/test/org/openscience/cdk/io/ChemObjectIOTest.java b/src/test/org/openscience/cdk/io/ChemObjectIOTest.java
index 42d2cba..3b32c97 100644
--- a/src/test/org/openscience/cdk/io/ChemObjectIOTest.java
+++ b/src/test/org/openscience/cdk/io/ChemObjectIOTest.java
@@ -29,5 +29,10 @@
-import org.openscience.cdk.NewCDKTestCase;
-import org.openscience.cdk.interfaces.IChemFile;
-import org.openscience.cdk.interfaces.IChemModel;
-import org.openscience.cdk.interfaces.IMolecule;
-import org.openscience.cdk.interfaces.IReaction;
+import org.openscience.cdk.CDKTestCase;
+import org.openscience.cdk.ChemFile;
+import org.openscience.cdk.ChemModel;
+import org.openscience.cdk.Molecule;
+import org.openscience.cdk.Reaction;
+import org.openscience.cdk.debug.DebugChemFile;
+import org.openscience.cdk.debug.DebugChemModel;
+import org.openscience.cdk.debug.DebugMolecule;
+import org.openscience.cdk.debug.DebugReaction;
+import org.openscience.cdk.interfaces.IChemObject;
@@ -34,0 +40,6 @@
+import org.openscience.cdk.io.listener.IChemObjectIOListener;
+import org.openscience.cdk.io.setting.IOSetting;
+import org.openscience.cdk.nonotify.NNChemFile;
+import org.openscience.cdk.nonotify.NNChemModel;
+import org.openscience.cdk.nonotify.NNMolecule;
+import org.openscience.cdk.nonotify.NNReaction;
@@ -41 +52 @@
-public abstract class ChemObjectIOTest extends NewCDKTestCase {
+public abstract class ChemObjectIOTest extends CDKTestCase {
@@ -64,5 +75,6 @@
-    @Test public void testAcceptsAtLeastOne() {
-        Class[] objects = {
-            IChemFile.class, IChemModel.class, IMolecule.class,
-            IReaction.class
-        };
+    private static IChemObject[] acceptableNNChemObjects = {
+        new NNChemFile(), new NNChemModel(), new NNMolecule(),
+        new NNReaction()
+    };
+
+    @Test public void testAcceptsAtLeastOneNonotifyObject() {
@@ -70,2 +82,2 @@
-        for (int i=0; (i<objects.length && !oneAccepted); i++) {
-            if (chemObjectIO.accepts(objects[i])) {
+        for (IChemObject object : acceptableNNChemObjects) {
+            if (chemObjectIO.accepts(object.getClass())) {
@@ -77,0 +90,65 @@
+    private static IChemObject[] acceptableDebugChemObjects = {
+        new DebugChemFile(), new DebugChemModel(), new DebugMolecule(),
+        new DebugReaction()
+    };
+
+    @Test public void testAcceptsAtLeastOneDebugObject() {
+        boolean oneAccepted = false;
+        for (IChemObject object : acceptableDebugChemObjects) {
+            if (chemObjectIO.accepts(object.getClass())) {
+                oneAccepted = true;
+            }
+        }
+        Assert.assertTrue("At least one of the following IChemObect's should be accepted: IChemFile, IChemModel, IMolecule, IReaction", oneAccepted);
+    }
+
+    protected static IChemObject[] acceptableChemObjects = {
+        new ChemFile(), new ChemModel(), new Molecule(),
+        new Reaction()
+    };
+
+    @Test public void testAcceptsAtLeastOneChemObject() {
+        boolean oneAccepted = false;
+        for (IChemObject object : acceptableChemObjects) {
+            if (chemObjectIO.accepts(object.getClass())) {
+                oneAccepted = true;
+            }
+        }
+        Assert.assertTrue("At least one of the following IChemObect's should be accepted: IChemFile, IChemModel, IMolecule, IReaction", oneAccepted);
+    }
+
+    @Test public void testClose() throws Exception {
+        chemObjectIO.close();
+    }
+
+    @Test public void testGetIOSetting() {
+        IOSetting[] settings = chemObjectIO.getIOSettings();
+        for (IOSetting setting : settings) {
+            Assert.assertNotNull(setting);
+            Assert.assertNotNull(setting.getDefaultSetting());
+            Assert.assertNotNull(setting.getName());
+            Assert.assertNotNull(setting.getQuestion());
+            Assert.assertNotNull(setting.getLevel());
+        }
+    }
+
+    @Test public void testAddChemObjectIOListener() {
+        MyListener listener = new MyListener();
+        chemObjectIO.addChemObjectIOListener(listener);
+    }
+
+    class MyListener implements IChemObjectIOListener {
+
+        private int timesCalled = 0;
+
+        public void processIOSettingQuestion(IOSetting setting) {
+            timesCalled++;
+        }
+    }
+
+    @Test public void testRemoveChemObjectIOListener() {
+        MyListener listener = new MyListener();
+        chemObjectIO.addChemObjectIOListener(listener);
+        chemObjectIO.removeChemObjectIOListener(listener);
+    }
+

