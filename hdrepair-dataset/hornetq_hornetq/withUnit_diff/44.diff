diff --git a/src/main/org/hornetq/jms/client/HornetQMessageConsumer.java b/src/main/org/hornetq/jms/client/HornetQMessageConsumer.java
index b48b2e6..27176ea 100644
--- a/src/main/org/hornetq/jms/client/HornetQMessageConsumer.java
+++ b/src/main/org/hornetq/jms/client/HornetQMessageConsumer.java
@@ -184,0 +185,2 @@
+      checkClosed();
+
diff --git a/tests/jms-tests/src/org/hornetq/jms/tests/MessageConsumerTest.java b/tests/jms-tests/src/org/hornetq/jms/tests/MessageConsumerTest.java
index bff91cc..da2ffaf 100644
--- a/tests/jms-tests/src/org/hornetq/jms/tests/MessageConsumerTest.java
+++ b/tests/jms-tests/src/org/hornetq/jms/tests/MessageConsumerTest.java
@@ -42,0 +43,2 @@
+import javax.jms.TopicConnection;
+import javax.jms.TopicSession;
@@ -1590,0 +1593,34 @@
+   public void testGetNoLocalOnClosedConsumer() throws Exception
+   {
+      Connection consumerConnection = null;
+
+      try
+      {
+         consumerConnection = JMSTestCase.cf.createConnection();
+         TopicConnection tc = (TopicConnection)consumerConnection;
+
+         TopicSession consumerSession = tc.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
+
+         TopicSubscriber topicConsumer = consumerSession.createSubscriber(HornetQServerTestCase.topic1);
+
+         topicConsumer.close();
+
+         try
+         {
+            topicConsumer.getNoLocal();
+            fail("must throw a JMS IllegalStateException");
+         }
+         catch (javax.jms.IllegalStateException e)
+         {
+            // OK
+         }
+      }
+      finally
+      {
+         if (consumerConnection != null)
+         {
+            consumerConnection.close();
+         }
+      }
+   }
+   

