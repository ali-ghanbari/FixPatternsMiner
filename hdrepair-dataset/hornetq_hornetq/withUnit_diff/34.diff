diff --git a/hornetq-ra/hornetq-ra-jar/src/main/java/org/hornetq/ra/inflow/HornetQMessageHandler.java b/hornetq-ra/hornetq-ra-jar/src/main/java/org/hornetq/ra/inflow/HornetQMessageHandler.java
index a05757b..8bc8542 100644
--- a/hornetq-ra/hornetq-ra-jar/src/main/java/org/hornetq/ra/inflow/HornetQMessageHandler.java
+++ b/hornetq-ra/hornetq-ra-jar/src/main/java/org/hornetq/ra/inflow/HornetQMessageHandler.java
@@ -164 +164 @@
-               session.createQueue(activation.getAddress(), queueName, selectorString, false);
+               session.createTemporaryQueue(activation.getAddress(), queueName, selectorString);
diff --git a/tests/integration-tests/src/test/java/org/hornetq/tests/integration/ra/HornetQMessageHandlerTest.java b/tests/integration-tests/src/test/java/org/hornetq/tests/integration/ra/HornetQMessageHandlerTest.java
index eb6d06f..e844b79 100644
--- a/tests/integration-tests/src/test/java/org/hornetq/tests/integration/ra/HornetQMessageHandlerTest.java
+++ b/tests/integration-tests/src/test/java/org/hornetq/tests/integration/ra/HornetQMessageHandlerTest.java
@@ -15,5 +15 @@
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
-import javax.jms.Message;
-
+import org.hornetq.api.core.SimpleString;
@@ -22,0 +19 @@
+import org.hornetq.api.core.client.ClientSession.QueueQuery;
@@ -26,0 +24 @@
+import org.hornetq.ra.inflow.HornetQActivation;
@@ -28,0 +27,7 @@
+
+import javax.jms.Message;
+import javax.resource.spi.ActivationSpec;
+
+import java.util.Map;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
@@ -353,0 +359,47 @@
+   //https://issues.jboss.org/browse/JBPAPP-8017
+   public void testNonDurableSubscriptionDeleteAfterCrash() throws Exception
+   {
+      HornetQResourceAdapter qResourceAdapter = new HornetQResourceAdapter();
+      qResourceAdapter.setConnectorClassName(UnitTestCase.INVM_CONNECTOR_FACTORY);
+      MyBootstrapContext ctx = new MyBootstrapContext();
+      qResourceAdapter.start(ctx);
+      HornetQActivationSpec spec = new HornetQActivationSpec();
+      spec.setResourceAdapter(qResourceAdapter);
+      spec.setUseJNDI(false);
+      spec.setDestinationType("javax.jms.Topic");
+      spec.setDestination("mdbTopic");
+      qResourceAdapter.setConnectorClassName(INVM_CONNECTOR_FACTORY);
+      CountDownLatch latch = new CountDownLatch(1);
+      DummyMessageEndpoint endpoint = new DummyMessageEndpoint(latch);
+      DummyMessageEndpointFactory endpointFactory = new DummyMessageEndpointFactory(endpoint, false);
+      qResourceAdapter.endpointActivation(endpointFactory, spec);
+
+      ClientSession session = locator.createSessionFactory().createSession();
+      ClientProducer clientProducer = session.createProducer("jms.topic.mdbTopic");
+      ClientMessage message = session.createMessage(true);
+      message.getBodyBuffer().writeString("1");
+      clientProducer.send(message);
+
+      latch.await(5, TimeUnit.SECONDS);
+
+      assertNotNull(endpoint.lastMessage);
+      assertEquals(endpoint.lastMessage.getCoreMessage().getBodyBuffer().readString(), "1");
+
+      Map<ActivationSpec, HornetQActivation> activations = qResourceAdapter.getActivations();
+      assertEquals(1,activations.size());
+
+      HornetQActivation activation = activations.values().iterator().next();
+      SimpleString tempQueueName = activation.getTopicTemporaryQueue();
+
+      QueueQuery query = session.queueQuery(tempQueueName);
+      assertTrue(query.isExists());
+
+      //this should be enough to simulate the crash
+      qResourceAdapter.getDefaultHornetQConnectionFactory().close();
+      qResourceAdapter.stop();
+
+      query = session.queueQuery(tempQueueName);
+
+      assertFalse(query.isExists());
+   }
+

