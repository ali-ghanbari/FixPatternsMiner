diff --git a/src/main/org/jboss/messaging/core/postoffice/impl/AddressImpl.java b/src/main/org/jboss/messaging/core/postoffice/impl/AddressImpl.java
index ceec51b..a9d5946 100644
--- a/src/main/org/jboss/messaging/core/postoffice/impl/AddressImpl.java
+++ b/src/main/org/jboss/messaging/core/postoffice/impl/AddressImpl.java
@@ -123 +123,2 @@
-            return false;
+            //test for # as last address part
+            return pos + 1 == add.getAddressParts().length && add.getAddressParts()[pos].equals(ANY_WORDS_SIMPLESTRING);
diff --git a/tests/src/org/jboss/messaging/tests/unit/core/postoffice/impl/AddressImplTest.java b/tests/src/org/jboss/messaging/tests/unit/core/postoffice/impl/AddressImplTest.java
index 59e9da6..fbf01b4 100644
--- a/tests/src/org/jboss/messaging/tests/unit/core/postoffice/impl/AddressImplTest.java
+++ b/tests/src/org/jboss/messaging/tests/unit/core/postoffice/impl/AddressImplTest.java
@@ -191,0 +192,91 @@
+
+   public void testM()
+   {
+      SimpleString s1 = new SimpleString("a.b.c");
+      SimpleString s2 = new SimpleString("a.b.x.e");
+      SimpleString s3 = new SimpleString("a.b.c.#");
+      Address a1 = new AddressImpl(s1);
+      Address a2 = new AddressImpl(s2);
+      Address w = new AddressImpl(s3);
+      assertTrue(a1.matches(w));
+      assertFalse(a2.matches(w));
+   }
+
+   public void testN()
+   {
+      SimpleString s1 = new SimpleString("usd.stock");
+      SimpleString s2 = new SimpleString("a.b.x.e");
+      SimpleString s3 = new SimpleString("*.stock.#");
+      Address a1 = new AddressImpl(s1);
+      Address a2 = new AddressImpl(s2);
+      Address w = new AddressImpl(s3);
+      assertTrue(a1.matches(w));
+      assertFalse(a2.matches(w));
+   }
+
+   public void testO()
+   {
+      SimpleString s1 = new SimpleString("a.b.c.d");
+      SimpleString s2 = new SimpleString("a.b.x.e");
+      SimpleString s3 = new SimpleString("a.b.c.*");
+      Address a1 = new AddressImpl(s1);
+      Address a2 = new AddressImpl(s2);
+      Address w = new AddressImpl(s3);
+      assertTrue(a1.matches(w));
+      assertFalse(a2.matches(w));
+   }
+
+   public void testP()
+   {
+      SimpleString s1 = new SimpleString("a.b.c.d");
+      SimpleString s3 = new SimpleString("a.b.c#");
+      Address a1 = new AddressImpl(s1);
+      Address w = new AddressImpl(s3);
+      assertFalse(a1.matches(w));
+   }
+
+   public void testQ()
+   {
+      SimpleString s1 = new SimpleString("a.b.c.d");
+      SimpleString s3 = new SimpleString("#a.b.c");
+      Address a1 = new AddressImpl(s1);
+      Address w = new AddressImpl(s3);
+      assertFalse(a1.matches(w));
+   }
+
+    public void testR()
+   {
+      SimpleString s1 = new SimpleString("a.b.c.d");
+      SimpleString s3 = new SimpleString("#*a.b.c");
+      Address a1 = new AddressImpl(s1);
+      Address w = new AddressImpl(s3);
+      assertFalse(a1.matches(w));
+   }
+
+   public void testS()
+   {
+      SimpleString s1 = new SimpleString("a.b.c.d");
+      SimpleString s3 = new SimpleString("a.b.c*");
+      Address a1 = new AddressImpl(s1);
+      Address w = new AddressImpl(s3);
+      assertFalse(a1.matches(w));
+   }
+
+   public void testT()
+   {
+      SimpleString s1 = new SimpleString("a.b.c.d");
+      SimpleString s3 = new SimpleString("*a.b.c");
+      Address a1 = new AddressImpl(s1);
+      Address w = new AddressImpl(s3);
+      assertFalse(a1.matches(w));
+   }
+
+   public void testU()
+   {
+      SimpleString s1 = new SimpleString("a.b.c.d");
+      SimpleString s3 = new SimpleString("*a.b.c");
+      Address a1 = new AddressImpl(s1);
+      Address w = new AddressImpl(s3);
+      assertFalse(a1.matches(w));
+   }
+

