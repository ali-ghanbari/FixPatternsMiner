diff --git a/hornetq-jms-client/src/main/java/org/hornetq/jms/client/HornetQBytesMessage.java b/hornetq-jms-client/src/main/java/org/hornetq/jms/client/HornetQBytesMessage.java
index 1f41b7e..e24e2c5 100644
--- a/hornetq-jms-client/src/main/java/org/hornetq/jms/client/HornetQBytesMessage.java
+++ b/hornetq-jms-client/src/main/java/org/hornetq/jms/client/HornetQBytesMessage.java
@@ -447,3 +446,0 @@
-      if (bodyLength == 0)
-         return true;
-      // XXX FIXME HORNETQ-1209 What to do on Serializable?
diff --git a/tests/integration-tests/src/test/java/org/hornetq/tests/integration/jms/jms2client/BodyTest.java b/tests/integration-tests/src/test/java/org/hornetq/tests/integration/jms/jms2client/BodyTest.java
new file mode 100644
index 0000000..4800d3f
--- /dev/null
+++ b/tests/integration-tests/src/test/java/org/hornetq/tests/integration/jms/jms2client/BodyTest.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright 2013 Red Hat, Inc.
+ * Red Hat licenses this file to you under the Apache License, version
+ * 2.0 (the "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+ * implied.  See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package org.hornetq.tests.integration.jms.jms2client;
+
+import javax.jms.*;
+
+import org.hornetq.api.jms.HornetQJMSClient;
+import org.hornetq.tests.util.JMSTestBase;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * @author Clebert Suconic
+ */
+
+public class BodyTest extends JMSTestBase
+{
+
+   private static final String Q_NAME = "SomeQueue";
+   private javax.jms.Queue queue;
+
+
+   @Override
+   @Before
+   public void setUp() throws Exception
+   {
+      super.setUp();
+
+      jmsServer.createQueue(false, Q_NAME, null, true, Q_NAME);
+      queue = HornetQJMSClient.createQueue(Q_NAME);
+   }
+
+   @Test
+   public void testBodyConversion() throws Throwable
+   {
+      try (
+        Connection  conn = cf.createConnection();
+      )
+      {
+
+         Session sess = conn.createSession();
+         MessageProducer producer = sess.createProducer(queue);
+
+         MessageConsumer cons = sess.createConsumer(queue);
+         conn.start();
+
+         BytesMessage bytesMessage = sess.createBytesMessage();
+         producer.send(bytesMessage);
+
+         Message msg = cons.receiveNoWait();
+         assertNotNull(msg);
+
+         try
+         {
+            msg.getBody(String.class);
+            fail("Exception expected");
+         }
+         catch (MessageFormatException e)
+         {
+         }
+      }
+
+   }
+}

