diff --git a/hornetq-core-client/src/main/java/org/hornetq/core/client/impl/ClientSessionImpl.java b/hornetq-core-client/src/main/java/org/hornetq/core/client/impl/ClientSessionImpl.java
index 7916ec3..389490f 100644
--- a/hornetq-core-client/src/main/java/org/hornetq/core/client/impl/ClientSessionImpl.java
+++ b/hornetq-core-client/src/main/java/org/hornetq/core/client/impl/ClientSessionImpl.java
@@ -1998 +1998 @@
-                                                               consumerMaxRate > 0 ? new TokenBucketLimiterImpl(maxRate,
+                                                               maxRate > 0 ? new TokenBucketLimiterImpl(maxRate,
diff --git a/tests/integration-tests/src/test/java/org/hornetq/tests/integration/client/MessageRateTest.java b/tests/integration-tests/src/test/java/org/hornetq/tests/integration/client/MessageRateTest.java
index 74b348b..f217699 100644
--- a/tests/integration-tests/src/test/java/org/hornetq/tests/integration/client/MessageRateTest.java
+++ b/tests/integration-tests/src/test/java/org/hornetq/tests/integration/client/MessageRateTest.java
@@ -119,0 +120,39 @@
+
+   @Test
+   public void testConsumeRate2() throws Exception
+   {
+      HornetQServer server = createServer(false);
+
+      server.start();
+
+      ClientSessionFactory sf = createSessionFactory(locator);
+
+      ClientSession session = sf.createSession(false, true, true);
+
+      session.createQueue(ADDRESS, ADDRESS, true);
+
+      ClientProducer producer = session.createProducer(ADDRESS);
+
+      for (int i = 0; i < 12; i++)
+      {
+         producer.send(session.createMessage(false));
+      }
+
+      session.start();
+
+      ClientConsumer consumer = session.createConsumer(ADDRESS, null, 1024 * 1024, 10, false);
+
+      long start = System.currentTimeMillis();
+
+      for (int i = 0; i < 12; i++)
+      {
+         consumer.receive(1000);
+      }
+
+      long end = System.currentTimeMillis();
+
+      Assert.assertTrue("TotalTime = " + (end - start), end - start >= 1000);
+
+      session.close();
+   }
+

