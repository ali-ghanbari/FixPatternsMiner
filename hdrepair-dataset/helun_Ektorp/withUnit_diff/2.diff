diff --git a/org.ektorp/src/main/java/org/ektorp/ViewResult.java b/org.ektorp/src/main/java/org/ektorp/ViewResult.java
index a79a2f5..7ed7a11 100644
--- a/org.ektorp/src/main/java/org/ektorp/ViewResult.java
+++ b/org.ektorp/src/main/java/org/ektorp/ViewResult.java
@@ -187 +187 @@
-			return nodeAsString(rowNode.findValue(ERROR_FIELD_NAME));
+			return nodeAsString(rowNode.get(ERROR_FIELD_NAME));
diff --git a/org.ektorp/src/test/java/org/ektorp/ViewResultTest.java b/org.ektorp/src/test/java/org/ektorp/ViewResultTest.java
index 8204ea2..ccbaff9 100644
--- a/org.ektorp/src/test/java/org/ektorp/ViewResultTest.java
+++ b/org.ektorp/src/test/java/org/ektorp/ViewResultTest.java
@@ -12 +12 @@
-	ObjectMapper om = new ObjectMapper();
+    ObjectMapper om = new ObjectMapper();
@@ -14,9 +14,9 @@
-	@Test
-	public void fromJson() throws Exception {
-		ViewResult result = readResult("impl/view_result.json");
-		assertEquals(2, result.getSize());
-		assertEquals(1, result.getOffset());
-		List<ViewResult.Row> rows = result.getRows();
-		assertEquals("doc_id1", rows.get(0).getId());
-		assertEquals("key_value", rows.get(0).getKey());
-		assertEquals("doc_value1", rows.get(0).getValue());
+    @Test
+    public void fromJson() throws Exception {
+        ViewResult result = readResult("impl/view_result.json");
+        assertEquals(2, result.getSize());
+        assertEquals(1, result.getOffset());
+        List<ViewResult.Row> rows = result.getRows();
+        assertEquals("doc_id1", rows.get(0).getId());
+        assertEquals("key_value", rows.get(0).getKey());
+        assertEquals("doc_value1", rows.get(0).getValue());
@@ -24,3 +24,3 @@
-		assertEquals("doc_id2", rows.get(1).getId());
-		assertEquals("key_value", rows.get(1).getKey());
-		assertEquals("doc_value2", rows.get(1).getValue());
+        assertEquals("doc_id2", rows.get(1).getId());
+        assertEquals("key_value", rows.get(1).getKey());
+        assertEquals("doc_value2", rows.get(1).getValue());
@@ -28,3 +28,3 @@
-		assertNull(rows.get(0).getDoc());
-		assertTrue(rows.get(0).getDocAsNode().isMissingNode());
-	}
+        assertNull(rows.get(0).getDoc());
+        assertTrue(rows.get(0).getDocAsNode().isMissingNode());
+    }
@@ -32,8 +32,8 @@
-	@Test
-	public void test_read_reduce_result() throws Exception {
-		ViewResult result = readResult("impl/reduce_view_result.json");
-		assertEquals(3, result.getSize());
-		List<ViewResult.Row> rows = result.getRows();
-		assertEquals(4, rows.get(0).getValueAsInt());
-		assertEquals(5, rows.get(1).getValueAsInt());
-		assertEquals(6, rows.get(2).getValueAsInt());
+    @Test
+    public void test_read_reduce_result() throws Exception {
+        ViewResult result = readResult("impl/reduce_view_result.json");
+        assertEquals(3, result.getSize());
+        List<ViewResult.Row> rows = result.getRows();
+        assertEquals(4, rows.get(0).getValueAsInt());
+        assertEquals(5, rows.get(1).getValueAsInt());
+        assertEquals(6, rows.get(2).getValueAsInt());
@@ -41 +41 @@
-	}
+    }
@@ -43,2 +43,2 @@
-	@Test
-	public void int_view_result() throws Exception {
+    @Test
+    public void int_view_result() throws Exception {
@@ -46,6 +46,6 @@
-		ViewResult result = readResult("impl/int_view_result.json");
-		assertEquals(2, result.getSize());
-		List<ViewResult.Row> rows = result.getRows();
-		assertEquals(123, rows.get(0).getValueAsInt());
-		assertEquals(321, rows.get(1).getValueAsInt());
-	}
+        ViewResult result = readResult("impl/int_view_result.json");
+        assertEquals(2, result.getSize());
+        List<ViewResult.Row> rows = result.getRows();
+        assertEquals(123, rows.get(0).getValueAsInt());
+        assertEquals(321, rows.get(1).getValueAsInt());
+    }
@@ -53,8 +53,8 @@
-	@Test
-	public void array_and_object_view_result() throws Exception {
-		ViewResult result = readResult("impl/array_and_object_view_result.json");
-		assertEquals(2, result.getSize());
-		List<ViewResult.Row> rows = result.getRows();
-		assertEquals("[\"foo\",\"bar\"]", rows.get(0).getValue());
-		assertEquals("{\"foo\":\"bar\"}", rows.get(1).getValue());
-	}
+    @Test
+    public void array_and_object_view_result() throws Exception {
+        ViewResult result = readResult("impl/array_and_object_view_result.json");
+        assertEquals(2, result.getSize());
+        List<ViewResult.Row> rows = result.getRows();
+        assertEquals("[\"foo\",\"bar\"]", rows.get(0).getValue());
+        assertEquals("{\"foo\":\"bar\"}", rows.get(1).getValue());
+    }
@@ -62,8 +62,8 @@
-	@Test
-	public void view_result_with_doc_field() throws Exception {
-		ViewResult result = readResult("impl/view_result_with_included_docs.json");
-		assertEquals(2, result.getSize());
-		List<ViewResult.Row> rows = result.getRows();
-		assertEquals("doc_id1", rows.get(0).getDocAsNode().get("_id").textValue());
-		assertEquals("doc_id2", rows.get(1).getDocAsNode().get("_id").textValue());
-	}
+    @Test
+    public void view_result_with_doc_field() throws Exception {
+        ViewResult result = readResult("impl/view_result_with_included_docs.json");
+        assertEquals(2, result.getSize());
+        List<ViewResult.Row> rows = result.getRows();
+        assertEquals("doc_id1", rows.get(0).getDocAsNode().get("_id").textValue());
+        assertEquals("doc_id2", rows.get(1).getDocAsNode().get("_id").textValue());
+    }
@@ -71,9 +71,9 @@
-	@Test
-	public void complex_key_view_result() throws Exception {
-		ViewResult result = readResult("impl/complex_key_view_result.json");
-		assertEquals(2, result.getSize());
-		List<ViewResult.Row> rows = result.getRows();
-		String expectedKey = "[1337,\"key\"]";
-		assertEquals(expectedKey, rows.get(0).getKey());
-		assertEquals(expectedKey, rows.get(1).getKey());
-	}
+    @Test
+    public void complex_key_view_result() throws Exception {
+        ViewResult result = readResult("impl/complex_key_view_result.json");
+        assertEquals(2, result.getSize());
+        List<ViewResult.Row> rows = result.getRows();
+        String expectedKey = "[1337,\"key\"]";
+        assertEquals(expectedKey, rows.get(0).getKey());
+        assertEquals(expectedKey, rows.get(1).getKey());
+    }
@@ -81,4 +81,4 @@
-	@Test( expected = ViewResultException.class )
-	public void view_result_with_error_row() throws Exception {
-		readResult("impl/view_result_with_error.json");
-	}
+    @Test(expected = ViewResultException.class)
+    public void view_result_with_error_row() throws Exception {
+        readResult("impl/view_result_with_error.json");
+    }
@@ -86,15 +86,7 @@
-        @Test
-        public void int_update_seq_view_result() throws Exception {
-
-                ViewResult result = readResult("impl/view_result_with_int_update_seq.json");
-		assertTrue(result.isUpdateSeqNumeric());
-                assertEquals(1234, result.getUpdateSeq());
-		assertEquals("1234", result.getUpdateSeqAsString());
-	}
-
-        @Test
-        public void string_update_seq_view_result() throws Exception {
-
-                ViewResult result = readResult("impl/view_result_with_string_update_seq.json");
-                assertFalse(result.isUpdateSeqNumeric());
-                assertEquals("1234-abc", result.getUpdateSeqAsString());
+    @Test
+    public void error_field_in_result_docment_should_not_cause_exception() throws Exception {
+        ViewResult result = null;
+        try {
+            result = readResult("impl/view_result_with_nested_error.json");
+        } catch (ViewResultException e) {
+            fail("nested error field should cause ViewResultException");
@@ -101,0 +94,2 @@
+        assertEquals(2, result.getSize());
+    }
@@ -103,3 +97,20 @@
-	private ViewResult readResult(String path) throws Exception {
-		return new ViewResult(om.readTree(getClass().getResourceAsStream(path)), false);
-	}
+    @Test
+    public void int_update_seq_view_result() throws Exception {
+
+        ViewResult result = readResult("impl/view_result_with_int_update_seq.json");
+        assertTrue(result.isUpdateSeqNumeric());
+        assertEquals(1234, result.getUpdateSeq());
+        assertEquals("1234", result.getUpdateSeqAsString());
+    }
+
+    @Test
+    public void string_update_seq_view_result() throws Exception {
+
+        ViewResult result = readResult("impl/view_result_with_string_update_seq.json");
+        assertFalse(result.isUpdateSeqNumeric());
+        assertEquals("1234-abc", result.getUpdateSeqAsString());
+    }
+
+    private ViewResult readResult(String path) throws Exception {
+        return new ViewResult(om.readTree(getClass().getResourceAsStream(path)), false);
+    }
diff --git a/org.ektorp/src/test/resources/org/ektorp/impl/view_result_with_nested_error.json b/org.ektorp/src/test/resources/org/ektorp/impl/view_result_with_nested_error.json
new file mode 100644
index 0000000..d75401d
--- /dev/null
+++ b/org.ektorp/src/test/resources/org/ektorp/impl/view_result_with_nested_error.json
@@ -0,0 +1,14 @@
+{"total_rows":2,"offset":0,"rows":[
+    {"_id" : "foobar", "_rev": 1,
+        "foo" : {
+            "bar" : "baz",
+            "error":"This document contains No error"
+        }
+    },
+    {"_id" : "foobar2", "_rev": 1,
+        "foo" : {
+            "bar" : "baz",
+            "error":"This document contains No error"
+        }
+    }
+]}
\ No newline at end of file

